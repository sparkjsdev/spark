import * as u from "three";
import { Mesh as Co, OrthographicCamera as Bo, BufferGeometry as Eo, Float32BufferAttribute as gs, Loader as Qo, FileLoader as po, Quaternion as ls, Vector3 as JA, Color as Is, Matrix4 as Se } from "three";
const fo = new Bo(-1, 1, 1, -1, 0, 1);
class yo extends Eo {
  constructor() {
    super(), this.setAttribute("position", new gs([-1, 3, 0, -1, -1, 0, 3, -1, 0], 3)), this.setAttribute("uv", new gs([0, 2, 0, 0, 2, 0], 2));
  }
}
const mo = new yo();
class ys {
  constructor(A) {
    this._mesh = new Co(mo, A);
  }
  dispose() {
    this._mesh.geometry.dispose();
  }
  render(A) {
    A.render(this._mesh, fo);
  }
  get material() {
    return this._mesh.material;
  }
  set material(A) {
    this._mesh.material = A;
  }
}
var IA = Uint8Array, wt = Uint16Array, wo = Int32Array, ms = new IA([
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  1,
  1,
  1,
  1,
  2,
  2,
  2,
  2,
  3,
  3,
  3,
  3,
  4,
  4,
  4,
  4,
  5,
  5,
  5,
  5,
  0,
  /* unused */
  0,
  0,
  /* impossible */
  0
]), ws = new IA([
  0,
  0,
  0,
  0,
  1,
  1,
  2,
  2,
  3,
  3,
  4,
  4,
  5,
  5,
  6,
  6,
  7,
  7,
  8,
  8,
  9,
  9,
  10,
  10,
  11,
  11,
  12,
  12,
  13,
  13,
  /* unused */
  0,
  0
]), xo = new IA([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]), xs = function(t, A) {
  for (var e = new wt(31), s = 0; s < 31; ++s)
    e[s] = A += 1 << t[s - 1];
  for (var n = new wo(e[30]), s = 1; s < 30; ++s)
    for (var i = e[s]; i < e[s + 1]; ++i)
      n[i] = i - e[s] << 5 | s;
  return { b: e, r: n };
}, Ss = xs(ms, 2), Ds = Ss.b, So = Ss.r;
Ds[28] = 258, So[258] = 28;
var Do = xs(ws, 0), Mo = Do.b, Te = new wt(32768);
for (var sA = 0; sA < 32768; ++sA) {
  var At = (sA & 43690) >> 1 | (sA & 21845) << 1;
  At = (At & 52428) >> 2 | (At & 13107) << 2, At = (At & 61680) >> 4 | (At & 3855) << 4, Te[sA] = ((At & 65280) >> 8 | (At & 255) << 8) >> 1;
}
var _t = function(t, A, e) {
  for (var s = t.length, n = 0, i = new wt(A); n < s; ++n)
    t[n] && ++i[t[n] - 1];
  var r = new wt(A);
  for (n = 1; n < A; ++n)
    r[n] = r[n - 1] + i[n - 1] << 1;
  var a;
  if (e) {
    a = new wt(1 << A);
    var o = 15 - A;
    for (n = 0; n < s; ++n)
      if (t[n])
        for (var g = n << 4 | t[n], l = A - t[n], c = r[t[n] - 1]++ << l, I = c | (1 << l) - 1; c <= I; ++c)
          a[Te[c] >> o] = g;
  } else
    for (a = new wt(s), n = 0; n < s; ++n)
      t[n] && (a[n] = Te[r[t[n] - 1]++] >> 15 - t[n]);
  return a;
}, $t = new IA(288);
for (var sA = 0; sA < 144; ++sA)
  $t[sA] = 8;
for (var sA = 144; sA < 256; ++sA)
  $t[sA] = 9;
for (var sA = 256; sA < 280; ++sA)
  $t[sA] = 7;
for (var sA = 280; sA < 288; ++sA)
  $t[sA] = 8;
var Ms = new IA(32);
for (var sA = 0; sA < 32; ++sA)
  Ms[sA] = 5;
var vo = /* @__PURE__ */ _t($t, 9, 1), bo = /* @__PURE__ */ _t(Ms, 5, 1), De = function(t) {
  for (var A = t[0], e = 1; e < t.length; ++e)
    t[e] > A && (A = t[e]);
  return A;
}, YA = function(t, A, e) {
  var s = A / 8 | 0;
  return (t[s] | t[s + 1] << 8) >> (A & 7) & e;
}, Me = function(t, A) {
  var e = A / 8 | 0;
  return (t[e] | t[e + 1] << 8 | t[e + 2] << 16) >> (A & 7);
}, vs = function(t) {
  return (t + 7) / 8 | 0;
}, Dt = function(t, A, e) {
  return (A == null || A < 0) && (A = 0), (e == null || e > t.length) && (e = t.length), new IA(t.subarray(A, e));
}, Fo = [
  "unexpected EOF",
  "invalid block type",
  "invalid length/literal",
  "invalid distance",
  "stream finished",
  "no stream handler",
  ,
  "no callback",
  "invalid UTF-8 data",
  "extra field too long",
  "date not in range 1980-2099",
  "filename too long",
  "stream finishing",
  "invalid zip data"
  // determined by unknown compression method
], yA = function(t, A, e) {
  var s = new Error(A || Fo[t]);
  if (s.code = t, Error.captureStackTrace && Error.captureStackTrace(s, yA), !e)
    throw s;
  return s;
}, bs = function(t, A, e, s) {
  var n = t.length, i = s ? s.length : 0;
  if (!n || A.f && !A.l)
    return e || new IA(0);
  var r = !e, a = r || A.i != 2, o = A.i;
  r && (e = new IA(n * 3));
  var g = function(dA) {
    var xA = e.length;
    if (dA > xA) {
      var hA = new IA(Math.max(xA * 2, dA));
      hA.set(e), e = hA;
    }
  }, l = A.f || 0, c = A.p || 0, I = A.b || 0, h = A.l, B = A.d, C = A.m, E = A.n, Q = n * 8;
  do {
    if (!h) {
      l = YA(t, c, 1);
      var p = YA(t, c + 1, 3);
      if (c += 3, p)
        if (p == 1)
          h = vo, B = bo, C = 9, E = 5;
        else if (p == 2) {
          var D = YA(t, c, 31) + 257, x = YA(t, c + 10, 15) + 4, y = D + YA(t, c + 5, 31) + 1;
          c += 14;
          for (var w = new IA(y), k = new IA(19), M = 0; M < x; ++M)
            k[xo[M]] = YA(t, c + M * 3, 7);
          c += x * 3;
          for (var S = De(k), U = (1 << S) - 1, F = _t(k, S, 1), M = 0; M < y; ) {
            var b = F[YA(t, c, U)];
            c += b & 15;
            var f = b >> 4;
            if (f < 16)
              w[M++] = f;
            else {
              var T = 0, R = 0;
              for (f == 16 ? (R = 3 + YA(t, c, 3), c += 2, T = w[M - 1]) : f == 17 ? (R = 3 + YA(t, c, 7), c += 3) : f == 18 && (R = 11 + YA(t, c, 127), c += 7); R--; )
                w[M++] = T;
            }
          }
          var O = w.subarray(0, D), _ = w.subarray(D);
          C = De(O), E = De(_), h = _t(O, C, 1), B = _t(_, E, 1);
        } else
          yA(1);
      else {
        var f = vs(c) + 4, d = t[f - 4] | t[f - 3] << 8, m = f + d;
        if (m > n) {
          o && yA(0);
          break;
        }
        a && g(I + d), e.set(t.subarray(f, m), I), A.b = I += d, A.p = c = m * 8, A.f = l;
        continue;
      }
      if (c > Q) {
        o && yA(0);
        break;
      }
    }
    a && g(I + 131072);
    for (var eA = (1 << C) - 1, q = (1 << E) - 1, j = c; ; j = c) {
      var T = h[Me(t, c) & eA], L = T >> 4;
      if (c += T & 15, c > Q) {
        o && yA(0);
        break;
      }
      if (T || yA(2), L < 256)
        e[I++] = L;
      else if (L == 256) {
        j = c, h = null;
        break;
      } else {
        var X = L - 254;
        if (L > 264) {
          var M = L - 257, P = ms[M];
          X = YA(t, c, (1 << P) - 1) + Ds[M], c += P;
        }
        var W = B[Me(t, c) & q], G = W >> 4;
        W || yA(3), c += W & 15;
        var _ = Mo[G];
        if (G > 3) {
          var P = ws[G];
          _ += Me(t, c) & (1 << P) - 1, c += P;
        }
        if (c > Q) {
          o && yA(0);
          break;
        }
        a && g(I + 131072);
        var pA = I + X;
        if (I < _) {
          var gA = i - _, fA = Math.min(_, pA);
          for (gA + I < 0 && yA(3); I < fA; ++I)
            e[I] = s[gA + I];
        }
        for (; I < pA; ++I)
          e[I] = e[I - _];
      }
    }
    A.l = h, A.p = j, A.b = I, A.f = l, h && (l = 1, A.m = C, A.d = B, A.n = E);
  } while (!l);
  return I != e.length && r ? Dt(e, 0, I) : e.subarray(0, I);
}, No = /* @__PURE__ */ new IA(0), zA = function(t, A) {
  return t[A] | t[A + 1] << 8;
}, _A = function(t, A) {
  return (t[A] | t[A + 1] << 8 | t[A + 2] << 16 | t[A + 3] << 24) >>> 0;
}, ve = function(t, A) {
  return _A(t, A) + _A(t, A + 4) * 4294967296;
}, ko = function(t) {
  (t[0] != 31 || t[1] != 139 || t[2] != 8) && yA(6, "invalid gzip data");
  var A = t[3], e = 10;
  A & 4 && (e += (t[10] | t[11] << 8) + 2);
  for (var s = (A >> 3 & 1) + (A >> 4 & 1); s > 0; s -= !t[e++])
    ;
  return e + (A & 2);
}, be = /* @__PURE__ */ function() {
  function t(A, e) {
    typeof A == "function" && (e = A, A = {}), this.ondata = e;
    var s = A && A.dictionary && A.dictionary.subarray(-32768);
    this.s = { i: 0, b: s ? s.length : 0 }, this.o = new IA(32768), this.p = new IA(0), s && this.o.set(s);
  }
  return t.prototype.e = function(A) {
    if (this.ondata || yA(5), this.d && yA(4), !this.p.length)
      this.p = A;
    else if (A.length) {
      var e = new IA(this.p.length + A.length);
      e.set(this.p), e.set(A, this.p.length), this.p = e;
    }
  }, t.prototype.c = function(A) {
    this.s.i = +(this.d = A || !1);
    var e = this.s.b, s = bs(this.p, this.s, this.o);
    this.ondata(Dt(s, e, this.s.b), this.d), this.o = Dt(s, this.s.b - 32768), this.s.b = this.o.length, this.p = Dt(this.p, this.s.p / 8 | 0), this.s.p &= 7;
  }, t.prototype.push = function(A, e) {
    this.e(A), this.c(e);
  }, t;
}();
function To(t, A) {
  return bs(t, { i: 2 }, A && A.out, A && A.dictionary);
}
var Fs = /* @__PURE__ */ function() {
  function t(A, e) {
    this.v = 1, this.r = 0, be.call(this, A, e);
  }
  return t.prototype.push = function(A, e) {
    if (be.prototype.e.call(this, A), this.r += A.length, this.v) {
      var s = this.p.subarray(this.v - 1), n = s.length > 3 ? ko(s) : 4;
      if (n > s.length) {
        if (!e)
          return;
      } else this.v > 1 && this.onmember && this.onmember(this.r - s.length);
      this.p = s.subarray(n), this.v = 0;
    }
    be.prototype.c.call(this, e), this.s.f && !this.s.l && !e && (this.v = vs(this.s.p) + 9, this.s = { i: 0 }, this.o = new IA(0), this.push(new IA(0), e));
  }, t;
}(), Ue = typeof TextDecoder < "u" && /* @__PURE__ */ new TextDecoder(), Uo = 0;
try {
  Ue.decode(No, { stream: !0 }), Uo = 1;
} catch {
}
var Go = function(t) {
  for (var A = "", e = 0; ; ) {
    var s = t[e++], n = (s > 127) + (s > 223) + (s > 239);
    if (e + n > t.length)
      return { s: A, r: Dt(t, e - 1) };
    n ? n == 3 ? (s = ((s & 15) << 18 | (t[e++] & 63) << 12 | (t[e++] & 63) << 6 | t[e++] & 63) - 65536, A += String.fromCharCode(55296 | s >> 10, 56320 | s & 1023)) : n & 1 ? A += String.fromCharCode((s & 31) << 6 | t[e++] & 63) : A += String.fromCharCode((s & 15) << 12 | (t[e++] & 63) << 6 | t[e++] & 63) : A += String.fromCharCode(s);
  }
};
function Ro(t, A) {
  if (A) {
    for (var e = "", s = 0; s < t.length; s += 16384)
      e += String.fromCharCode.apply(null, t.subarray(s, s + 16384));
    return e;
  } else {
    if (Ue)
      return Ue.decode(t);
    var n = Go(t), i = n.s, e = n.r;
    return e.length && yA(8), i;
  }
}
var Yo = function(t, A) {
  return A + 30 + zA(t, A + 26) + zA(t, A + 28);
}, Jo = function(t, A, e) {
  var s = zA(t, A + 28), n = Ro(t.subarray(A + 46, A + 46 + s), !(zA(t, A + 8) & 2048)), i = A + 46 + s, r = _A(t, A + 20), a = e && r == 4294967295 ? _o(t, i) : [r, _A(t, A + 24), _A(t, A + 42)], o = a[0], g = a[1], l = a[2];
  return [zA(t, A + 10), o, g, n, i + zA(t, A + 30) + zA(t, A + 32), l];
}, _o = function(t, A) {
  for (; zA(t, A) != 1; A += 4 + zA(t, A + 2))
    ;
  return [ve(t, A + 12), ve(t, A + 4), ve(t, A + 20)];
};
function Lo(t, A) {
  for (var e = {}, s = t.length - 22; _A(t, s) != 101010256; --s)
    (!s || t.length - s > 65558) && yA(13);
  var n = zA(t, s + 8);
  if (!n)
    return {};
  var i = _A(t, s + 16), r = i == 4294967295 || n == 65535;
  if (r) {
    var a = _A(t, s - 12);
    r = _A(t, a) == 101075792, r && (n = _A(t, a + 32), i = _A(t, a + 48));
  }
  for (var o = A && A.filter, g = 0; g < n; ++g) {
    var l = Jo(t, i, r), c = l[0], I = l[1], h = l[2], B = l[3], C = l[4], E = l[5], Q = Yo(t, E);
    i = C, (!o || o({
      name: B,
      size: I,
      originalSize: h,
      compression: c
    })) && (c ? c == 8 ? e[B] = To(t.subarray(Q, Q + I), { out: new IA(h) }) : yA(14, "unknown compression type " + c) : e[B] = Dt(t, Q, Q + I));
  }
  return e;
}
let ZA;
const Ns = typeof TextDecoder < "u" ? new TextDecoder("utf-8", { ignoreBOM: !0, fatal: !0 }) : { decode: () => {
  throw Error("TextDecoder not available");
} };
typeof TextDecoder < "u" && Ns.decode();
let Rt = null;
function zo() {
  return (Rt === null || Rt.byteLength === 0) && (Rt = new Uint8Array(ZA.memory.buffer)), Rt;
}
function Ho(t, A) {
  return t = t >>> 0, Ns.decode(zo().subarray(t, t + A));
}
function qo(t, A, e, s, n, i, r, a, o, g, l, c, I) {
  return ZA.raycast_splats(t, A, e, s, n, i, r, a, o, g, l, c, I);
}
async function Ko(t, A) {
  if (typeof Response == "function" && t instanceof Response) {
    if (typeof WebAssembly.instantiateStreaming == "function")
      try {
        return await WebAssembly.instantiateStreaming(t, A);
      } catch (s) {
        if (t.headers.get("Content-Type") != "application/wasm")
          console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve Wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n", s);
        else
          throw s;
      }
    const e = await t.arrayBuffer();
    return await WebAssembly.instantiate(e, A);
  } else {
    const e = await WebAssembly.instantiate(t, A);
    return e instanceof WebAssembly.Instance ? { instance: e, module: t } : e;
  }
}
function $o() {
  const t = {};
  return t.wbg = {}, t.wbg.__wbg_buffer_609cc3eee51ed158 = function(A) {
    return A.buffer;
  }, t.wbg.__wbg_length_3b4f022188ae8db6 = function(A) {
    return A.length;
  }, t.wbg.__wbg_length_6ca527665d89694d = function(A) {
    return A.length;
  }, t.wbg.__wbg_length_8cfd2c6409af88ad = function(A) {
    return A.length;
  }, t.wbg.__wbg_new_9fee97a409b32b68 = function(A) {
    return new Uint16Array(A);
  }, t.wbg.__wbg_new_e3b321dcfef89fc7 = function(A) {
    return new Uint32Array(A);
  }, t.wbg.__wbg_newwithbyteoffsetandlength_e6b7e69acd4c7354 = function(A, e, s) {
    return new Float32Array(A, e >>> 0, s >>> 0);
  }, t.wbg.__wbg_newwithbyteoffsetandlength_f1dead44d1fc7212 = function(A, e, s) {
    return new Uint32Array(A, e >>> 0, s >>> 0);
  }, t.wbg.__wbg_newwithlength_5a5efe313cfd59f1 = function(A) {
    return new Float32Array(A >>> 0);
  }, t.wbg.__wbg_set_10bad9bee0e9c58b = function(A, e, s) {
    A.set(e, s >>> 0);
  }, t.wbg.__wbg_set_d23661d19148b229 = function(A, e, s) {
    A.set(e, s >>> 0);
  }, t.wbg.__wbg_set_f4f1f0daa30696fc = function(A, e, s) {
    A.set(e, s >>> 0);
  }, t.wbg.__wbg_subarray_3aaeec89bb2544f0 = function(A, e, s) {
    return A.subarray(e >>> 0, s >>> 0);
  }, t.wbg.__wbg_subarray_769e1e0f81bb259b = function(A, e, s) {
    return A.subarray(e >>> 0, s >>> 0);
  }, t.wbg.__wbindgen_init_externref_table = function() {
    const A = ZA.__wbindgen_export_0, e = A.grow(4);
    A.set(0, void 0), A.set(e + 0, void 0), A.set(e + 1, null), A.set(e + 2, !0), A.set(e + 3, !1);
  }, t.wbg.__wbindgen_memory = function() {
    return ZA.memory;
  }, t.wbg.__wbindgen_throw = function(A, e) {
    throw new Error(Ho(A, e));
  }, t;
}
function Vo(t, A) {
  return ZA = t.exports, ks.__wbindgen_wasm_module = A, Rt = null, ZA.__wbindgen_start(), ZA;
}
async function ks(t) {
  if (ZA !== void 0) return ZA;
  typeof t < "u" && (Object.getPrototypeOf(t) === Object.prototype ? { module_or_path: t } = t : console.warn("using deprecated parameters for the initialization function; pass a single object instead")), typeof t > "u" && (t = new URL("data:application/wasm;base64,", import.meta.url));
  const A = $o();
  (typeof t == "string" || typeof Request == "function" && t instanceof Request || typeof URL == "function" && t instanceof URL) && (t = fetch(t));
  const { instance: e, module: s } = await Ko(await t, A);
  return Vo(e, s);
}
const TA = -12, UA = 9, Po = Math.exp(TA), Zo = Math.exp(UA), Ts = -30, It = Math.exp(Ts), Ze = 11, Oe = 11, Us = 11, Oo = Ze + Oe, Z = 1 << Ze, HA = 1 << Oe, Gs = 1 << Us, je = 1, jo = Z - 1, Xo = HA - 1, Wo = Gs - 1, Ac = !0, Mh = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  LN_SCALE_MAX: UA,
  LN_SCALE_MIN: TA,
  LN_SCALE_ZERO: Ts,
  SCALE_MAX: Zo,
  SCALE_MIN: Po,
  SCALE_ZERO: It,
  SPLAT_TEX_DEPTH: Gs,
  SPLAT_TEX_DEPTH_BITS: Us,
  SPLAT_TEX_DEPTH_MASK: Wo,
  SPLAT_TEX_HEIGHT: HA,
  SPLAT_TEX_HEIGHT_BITS: Oe,
  SPLAT_TEX_HEIGHT_MASK: Xo,
  SPLAT_TEX_LAYER_BITS: Oo,
  SPLAT_TEX_MIN_HEIGHT: je,
  SPLAT_TEX_WIDTH: Z,
  SPLAT_TEX_WIDTH_BITS: Ze,
  SPLAT_TEX_WIDTH_MASK: jo,
  WASM_SPLAT_SORT: Ac
}, Symbol.toStringTag, { value: "Module" }));
function pt(t) {
  return t === "bool" || t === "bvec2" || t === "bvec3" || t === "bvec4";
}
function ft(t) {
  return t === "int" || t === "uint" || t === "float";
}
function BA(t) {
  return t === "int" || t === "ivec2" || t === "ivec3" || t === "ivec4";
}
function EA(t) {
  return t === "uint" || t === "uvec2" || t === "uvec3" || t === "uvec4";
}
function Vt(t) {
  return t === "float" || t === "vec2" || t === "vec3" || t === "vec4";
}
function Rs(t) {
  return t === "mat2" || t === "mat2x2" || t === "mat2x3" || t === "mat2x4" || t === "mat3" || t === "mat3x2" || t === "mat3x3" || t === "mat3x4" || t === "mat4" || t === "mat4x2" || t === "mat4x3" || t === "mat4x4";
}
function at(t) {
  return Vt(t) || Rs(t);
}
function Ft(t) {
  return t === "vec2" || t === "ivec2" || t === "uvec2";
}
function Nt(t) {
  return t === "vec3" || t === "ivec3" || t === "uvec3";
}
function Pt(t) {
  return t === "vec4" || t === "ivec4" || t === "uvec4";
}
function tc(t) {
  return Ft(t) || Nt(t) || Pt(t);
}
function ot(t) {
  return t === "mat2" || t === "mat2x2";
}
function ct(t) {
  return t === "mat3" || t === "mat3x3";
}
function gt(t) {
  return t === "mat4" || t === "mat4x4";
}
function Ys(t) {
  switch (t) {
    case "vec2":
      return "float";
    case "vec3":
      return "float";
    case "vec4":
      return "float";
    case "ivec2":
      return "int";
    case "ivec3":
      return "int";
    case "ivec4":
      return "int";
    case "uvec2":
      return "uint";
    case "uvec3":
      return "uint";
    case "uvec4":
      return "uint";
    default:
      throw new Error(`Invalid vector type: ${t}`);
  }
}
function Js(t) {
  switch (t) {
    case "vec2":
    case "ivec2":
    case "uvec2":
      return 2;
    case "vec3":
    case "ivec3":
    case "uvec3":
      return 3;
    case "vec4":
    case "ivec4":
    case "uvec4":
      return 4;
    default:
      throw new Error(`Invalid vector type: ${t}`);
  }
}
function ec(t) {
  if (ft(t))
    return "float";
  if (Ft(t))
    return "vec2";
  if (Nt(t))
    return "vec3";
  if (Pt(t))
    return "vec4";
  throw new Error(`Invalid vector type: ${t}`);
}
function _s(t) {
  if (ft(t))
    return "uint";
  if (Ft(t))
    return "uvec2";
  if (Nt(t))
    return "uvec3";
  if (Pt(t))
    return "uvec4";
  throw new Error(`Invalid vector type: ${t}`);
}
function sc(t) {
  if (ft(t))
    return "int";
  if (Ft(t))
    return "ivec2";
  if (Nt(t))
    return "ivec3";
  if (Pt(t))
    return "ivec4";
  throw new Error(`Invalid vector type: ${t}`);
}
function Ls(t) {
  if (typeof t == "string")
    return t;
  if (typeof t == "object" && t.type)
    return t.type;
  throw new Error(`Invalid DynoType: ${String(t)}`);
}
function rA(t) {
  return Math.trunc(t).toString();
}
function aA(t) {
  return `${Math.max(0, Math.trunc(t)).toString()}u`;
}
function H(t) {
  return t === Number.POSITIVE_INFINITY ? "INFINITY" : t === Number.NEGATIVE_INFINITY ? "-INFINITY" : Number.isInteger(t) ? t.toFixed(1) : t.toString();
}
function $(t) {
  return t instanceof it ? t.type : t.dynoOut().type;
}
class it {
  constructor(A) {
    this.__isDynoValue = !0, this.type = A;
  }
}
class K extends it {
  constructor(A, e) {
    super(A.outTypes[e]), this.dyno = A, this.key = e;
  }
}
class Mt extends it {
  constructor(A, e) {
    super(A), this.literal = e;
  }
  getLiteral() {
    return this.literal;
  }
}
function ae(t, A) {
  return new Mt(t, A);
}
class zs extends Mt {
  constructor(A, e) {
    super(A, ""), this.value = e;
  }
  getLiteral() {
    const { type: A, value: e } = this;
    switch (A) {
      case "bool":
        return e ? "true" : "false";
      case "uint":
        return aA(e);
      case "int":
        return rA(e);
      case "float":
        return H(e);
      case "bvec2": {
        const s = e;
        return `bvec2(${s[0]}, ${s[1]})`;
      }
      case "uvec2": {
        if (e instanceof u.Vector2)
          return `uvec2(${aA(e.x)}, ${aA(e.y)})`;
        const s = e;
        return `uvec2(${aA(s[0])}, ${aA(s[1])})`;
      }
      case "ivec2": {
        if (e instanceof u.Vector2)
          return `ivec2(${rA(e.x)}, ${rA(e.y)})`;
        const s = e;
        return `ivec2(${rA(s[0])}, ${rA(s[1])})`;
      }
      case "vec2": {
        if (e instanceof u.Vector2)
          return `vec2(${H(e.x)}, ${H(e.y)})`;
        const s = e;
        return `vec2(${H(s[0])}, ${H(s[1])})`;
      }
      case "bvec3": {
        const s = e;
        return `bvec3(${s[0]}, ${s[1]}, ${s[2]})`;
      }
      case "uvec3": {
        if (e instanceof u.Vector3)
          return `uvec3(${aA(e.x)}, ${aA(e.y)}, ${aA(e.z)})`;
        const s = e;
        return `uvec3(${aA(s[0])}, ${aA(s[1])}, ${aA(s[2])})`;
      }
      case "ivec3": {
        if (e instanceof u.Vector3)
          return `ivec3(${rA(e.x)}, ${rA(e.y)}, ${rA(e.z)})`;
        const s = e;
        return `ivec3(${rA(s[0])}, ${rA(s[1])}, ${rA(s[2])})`;
      }
      case "vec3": {
        if (e instanceof u.Vector3)
          return `vec3(${H(e.x)}, ${H(e.y)}, ${H(e.z)})`;
        const s = e;
        return `vec3(${H(s[0])}, ${H(s[1])}, ${H(s[2])})`;
      }
      case "bvec4": {
        const s = e;
        return `bvec4(${s[0]}, ${s[1]}, ${s[2]}, ${s[3]})`;
      }
      case "uvec4": {
        if (e instanceof u.Vector4)
          return `uvec4(${aA(e.x)}, ${aA(e.y)}, ${aA(e.z)}, ${aA(e.w)})`;
        const s = e;
        return `uvec4(${aA(s[0])}, ${aA(s[1])}, ${aA(s[2])}, ${aA(s[3])})`;
      }
      case "ivec4": {
        if (e instanceof u.Vector4)
          return `ivec4(${rA(e.x)}, ${rA(e.y)}, ${rA(e.z)}, ${rA(e.w)})`;
        const s = e;
        return `ivec4(${rA(s[0])}, ${rA(s[1])}, ${rA(s[2])}, ${rA(s[3])})`;
      }
      case "vec4": {
        if (e instanceof u.Vector4)
          return `vec4(${H(e.x)}, ${H(e.y)}, ${H(e.z)}, ${H(e.w)})`;
        if (e instanceof u.Quaternion)
          return `vec4(${H(e.x)}, ${H(e.y)}, ${H(e.z)}, ${H(e.w)})`;
        const s = e;
        return `vec4(${H(s[0])}, ${H(s[1])}, ${H(s[2])}, ${H(s[3])})`;
      }
      case "mat2":
      case "mat2x2": {
        const s = e, n = s instanceof u.Matrix2 ? s.elements : e, i = new Array(4).fill(0).map((r, a) => H(n[a]));
        return `${A}(${i.join(", ")})`;
      }
      case "mat2x3": {
        const s = e, n = new Array(6).fill(0).map((i, r) => H(s[r]));
        return `${A}(${n.join(", ")})`;
      }
      case "mat2x4": {
        const s = e, n = new Array(8).fill(0).map((i, r) => H(s[r]));
        return `${A}(${n.join(", ")})`;
      }
      case "mat3":
      case "mat3x3": {
        const s = e, n = s instanceof u.Matrix3 ? s.elements : e, i = new Array(9).fill(0).map((r, a) => H(n[a]));
        return `${A}(${i.join(", ")})`;
      }
      case "mat3x2": {
        const s = e, n = new Array(6).fill(0).map((i, r) => H(s[r]));
        return `${A}(${n.join(", ")})`;
      }
      case "mat3x4": {
        const s = e, n = new Array(12).fill(0).map((i, r) => H(s[r]));
        return `${A}(${n.join(", ")})`;
      }
      case "mat4":
      case "mat4x4": {
        const s = e, n = s instanceof u.Matrix4 ? s.elements : e, i = new Array(16).fill(0).map((r, a) => H(n[a]));
        return `${A}(${i.join(", ")})`;
      }
      case "mat4x2": {
        const s = e, n = new Array(8).fill(0).map((i, r) => H(s[r]));
        return `${A}(${n.join(", ")})`;
      }
      case "mat4x3": {
        const s = e, n = new Array(12).fill(0).map((i, r) => H(s[r]));
        return `${A}(${n.join(", ")})`;
      }
      default:
        throw new Error(`Type not implemented: ${String(A)}`);
    }
  }
}
function J(t, A) {
  return new zs(t, A);
}
function Yt(t) {
  const A = String(t);
  if (pt(t))
    return `${A}(false)`;
  if (at(t))
    return `${A}(0.0)`;
  if (BA(t))
    return `${A}(0)`;
  if (EA(t))
    return `${A}(0u)`;
  throw new Error(`Type not implemented: ${A}`);
}
function nc(t) {
  const A = String(t);
  if (pt(t))
    return `${A}(true)`;
  if (at(t))
    return `${A}(1.0)`;
  if (BA(t))
    return `${A}(1)`;
  if (EA(t))
    return `${A}(1u)`;
  throw new Error(`Type not implemented: ${A}`);
}
function ic(t) {
  const A = String(t);
  if (pt(t))
    return `${A}(true)`;
  if (at(t))
    return `${A}(-1.0)`;
  if (BA(t))
    return `${A}(-1)`;
  if (EA(t))
    return `${A}(0xFFFFFFFFu)`;
  throw new Error(`Type not implemented: ${A}`);
}
const us = "    ";
class Hs {
  constructor({ indent: A } = {}) {
    this.globals = /* @__PURE__ */ new Set(), this.statements = [], this.uniforms = {}, this.declares = /* @__PURE__ */ new Set(), this.updaters = [], this.sequence = 0, this.indent = us, this.indent = A ?? us;
  }
  nextSequence() {
    return this.sequence++;
  }
}
class V {
  constructor({
    inTypes: A,
    outTypes: e,
    inputs: s,
    update: n,
    globals: i,
    statements: r,
    generate: a
  }) {
    this.inTypes = A ?? {}, this.outTypes = e ?? {}, this.inputs = s ?? {}, this.update = n, this.globals = i, this.statements = r, this.generate = a ?? (({ inputs: o, outputs: g, compile: l }) => {
      var c, I;
      return {
        globals: (c = this.globals) == null ? void 0 : c.call(this, { inputs: o, outputs: g, compile: l }),
        statements: (I = this.statements) == null ? void 0 : I.call(this, { inputs: o, outputs: g, compile: l })
      };
    });
  }
  get outputs() {
    const A = {};
    for (const e in this.outTypes)
      A[e] = new K(this, e);
    return A;
  }
  apply(A) {
    return Object.assign(this.inputs, A), this.outputs;
  }
  compile({
    inputs: A,
    outputs: e,
    compile: s
  }) {
    const n = [
      `// ${this.constructor.name}(${Object.values(A).join(", ")}) => (${Object.values(e).join(", ")})`
    ], i = [];
    for (const g in e) {
      const l = e[g];
      l && !s.declares.has(l) && (s.declares.add(l), i.push(g));
    }
    const { globals: r, statements: a, uniforms: o } = this.generate({
      inputs: A,
      outputs: e,
      compile: s
    });
    for (const g of r ?? [])
      s.globals.add(g);
    for (const g in o)
      s.uniforms[g] = o[g];
    this.update && s.updaters.push(this.update);
    for (const g of i) {
      const l = e[g];
      l && (s.uniforms[l] || n.push(`${Xe(l, this.outTypes[g])};`));
    }
    return a != null && a.length && (n.push("{"), n.push(...a.map((g) => s.indent + g)), n.push("}")), n;
  }
}
class $A extends V {
  constructor({
    inTypes: A,
    outTypes: e,
    inputs: s,
    update: n,
    globals: i,
    construct: r
  }) {
    super({
      inTypes: A,
      outTypes: e,
      inputs: s,
      update: n,
      globals: i,
      generate: (a) => this.generateBlock(a)
    }), this.construct = r;
  }
  generateBlock({
    inputs: A,
    outputs: e,
    compile: s
  }) {
    var B, C;
    const n = {}, i = {};
    for (const E in A)
      A[E] != null && (n[E] = new Mt(this.inTypes[E], A[E]));
    for (const E in e)
      e[E] != null && (i[E] = new it(this.outTypes[E]));
    const r = { roots: [] }, a = this.construct(n, i, r);
    for (const E of ((B = this.globals) == null ? void 0 : B.call(this, { inputs: A, outputs: e, compile: s })) ?? [])
      s.globals.add(E);
    const o = [], g = /* @__PURE__ */ new Map();
    function l(E, Q, p) {
      let f = g.get(E);
      if (!f) {
        f = {
          sequence: s.nextSequence(),
          outNames: /* @__PURE__ */ new Map(),
          newOuts: /* @__PURE__ */ new Set()
        }, g.set(E, f);
        for (const d in E.inputs) {
          let m = E.inputs[d];
          for (; m; ) {
            if (m instanceof it) {
              m instanceof K && l(m.dyno, m.key);
              break;
            }
            m = m.dynoOut();
          }
        }
        o.push(E);
      }
      Q && (p || f.newOuts.add(Q), f.outNames.set(Q, p ?? `${Q}_${f.sequence}`));
    }
    for (const E of r.roots)
      l(E);
    for (const E in i) {
      let Q = (a == null ? void 0 : a[E]) ?? i[E];
      for (; Q; ) {
        if (Q instanceof it) {
          Q instanceof K && l(Q.dyno, Q.key, e[E]);
          break;
        }
        Q = Q.dynoOut();
      }
      i[E] = Q;
    }
    const c = [];
    for (const E of o) {
      const Q = {}, p = {};
      for (const m in E.inputs) {
        let D = E.inputs[m];
        for (; D; ) {
          if (D instanceof it) {
            if (D instanceof Mt)
              Q[m] = D.getLiteral();
            else if (D instanceof K) {
              const x = (C = g.get(D.dyno)) == null ? void 0 : C.outNames.get(D.key);
              if (!x)
                throw new Error(
                  `Source not found for ${D.dyno.constructor.name}.${D.key}`
                );
              Q[m] = x;
            }
            break;
          }
          D = D.dynoOut();
        }
      }
      const f = g.get(E) ?? { outNames: /* @__PURE__ */ new Map() };
      for (const [m, D] of f.outNames.entries())
        p[m] = D;
      const d = E.compile({ inputs: Q, outputs: p, compile: s });
      c.push(d);
    }
    const I = [];
    for (const E in e)
      i[E] instanceof Mt && I.push(
        `${e[E]} = ${i[E].getLiteral()};`
      );
    return I.length > 0 && c.push(I), { statements: c.flatMap((E, Q) => Q === 0 ? E : ["", ...E]) };
  }
}
function MA(t, A, e, { update: s, globals: n } = {}) {
  return new $A({ inTypes: t, outTypes: A, construct: e, update: s, globals: n });
}
function Zt({
  inTypes: t,
  outTypes: A,
  inputs: e,
  update: s,
  globals: n,
  statements: i,
  generate: r
}) {
  return new V({
    inTypes: t,
    outTypes: A,
    inputs: e,
    update: s,
    globals: n,
    statements: i,
    generate: r
  });
}
function Xe(t, A, e) {
  const s = typeof A == "string" ? A : A.type;
  if (!s)
    throw new Error(`Invalid DynoType: ${String(A)}`);
  return `${s} ${t}${e != null ? `[${e}]` : ""}`;
}
function GA(t) {
  var i;
  let A = !1;
  const e = t.split(`
`).map((r) => {
    const a = r.trimEnd();
    return A ? a : a.length > 0 ? (A = !0, a) : null;
  }).filter((r) => r != null);
  for (; e.length > 0 && e[e.length - 1].length === 0; )
    e.pop();
  if (e.length === 0)
    return [];
  const s = (i = e[0].match(/^\s*/)) == null ? void 0 : i[0];
  if (!s)
    return e;
  const n = new RegExp(`^${s}`);
  return e.map((r) => r.replace(n, ""));
}
function uA(t) {
  return GA(t).join(`
`);
}
class v extends V {
  constructor({
    a: A,
    outKey: e,
    outTypeFunc: s
  }) {
    const n = { a: $(A) }, i = s($(A)), r = { [e]: i };
    super({ inTypes: n, outTypes: r, inputs: { a: A } }), this.outKey = e;
  }
  dynoOut() {
    return new K(this, this.outKey);
  }
}
class tA extends V {
  constructor({
    a: A,
    b: e,
    outKey: s,
    outTypeFunc: n
  }) {
    const i = { a: $(A), b: $(e) }, r = n($(A), $(e)), a = { [s]: r };
    super({ inTypes: i, outTypes: a, inputs: { a: A, b: e } }), this.outKey = s;
  }
  dynoOut() {
    return new K(this, this.outKey);
  }
}
class dt extends V {
  constructor({
    a: A,
    b: e,
    c: s,
    outKey: n,
    outTypeFunc: i
  }) {
    const r = { a: $(A), b: $(e), c: $(s) }, a = i($(A), $(e), $(s)), o = { [n]: a };
    super({ inTypes: r, outTypes: o, inputs: { a: A, b: e, c: s } }), this.outKey = n;
  }
  dynoOut() {
    return new K(this, this.outKey);
  }
}
const AA = { type: "Gsplat" }, Ot = { type: "PackedSplats" }, rc = (t) => new Ks({ packedSplats: t }), vt = (t, A) => new Vs({ packedSplats: t, index: A }), qs = (t, A, e, s) => new Ps({ packedSplats: t, index: A, base: e, count: s }), ut = (t) => new Zs({ gsplat: t }), rt = ({
  gsplat: t,
  flags: A,
  index: e,
  center: s,
  scales: n,
  quaternion: i,
  rgba: r,
  rgb: a,
  opacity: o,
  x: g,
  y: l,
  z: c,
  r: I,
  g: h,
  b: B
}) => new Os({
  gsplat: t,
  flags: A,
  index: e,
  center: s,
  scales: n,
  quaternion: i,
  rgba: r,
  rgb: a,
  opacity: o,
  x: g,
  y: l,
  z: c,
  r: I,
  g: h,
  b: B
}), Ge = (t) => new Xs({ gsplat: t }), We = (t, {
  scale: A,
  rotate: e,
  translate: s,
  recolor: n
}) => new Ws({ gsplat: t, scale: A, rotate: e, translate: s, recolor: n }), vA = uA(`
  struct Gsplat {
    vec3 center;
    uint flags;
    vec3 scales;
    int index;
    vec4 quaternion;
    vec4 rgba;
  };
  const uint GSPLAT_FLAG_ACTIVE = 1u << 0u;

  bool isGsplatActive(uint flags) {
    return (flags & GSPLAT_FLAG_ACTIVE) != 0u;
  }
`), Ee = uA(`
  struct PackedSplats {
    usampler2DArray texture;
    int numSplats;
    vec4 rgbMinMaxLnScaleMinMax;
  };
`);
class Ks extends v {
  constructor({
    packedSplats: A
  }) {
    super({ a: A, outKey: "numSplats", outTypeFunc: () => "int" }), this.statements = ({ inputs: e, outputs: s }) => [
      `${s.numSplats} = ${e.a}.numSplats;`
    ];
  }
}
const $s = uA(`
  bool readPackedSplat(usampler2DArray texture, int numSplats, vec4 rgbMinMaxLnScaleMinMax, int index, out Gsplat gsplat) {
    if ((index >= 0) && (index < numSplats)) {
      uvec4 packed = texelFetch(texture, splatTexCoord(index), 0);
      unpackSplatEncoding(packed, gsplat.center, gsplat.scales, gsplat.quaternion, gsplat.rgba, rgbMinMaxLnScaleMinMax);
      return true;
    } else {
      return false;
    }
  }
`);
class Vs extends V {
  constructor({
    packedSplats: A,
    index: e
  }) {
    super({
      inTypes: { packedSplats: Ot, index: "int" },
      outTypes: { gsplat: AA },
      inputs: { packedSplats: A, index: e },
      globals: () => [vA, Ee, $s],
      statements: ({ inputs: s, outputs: n }) => {
        const { gsplat: i } = n;
        if (!i)
          return [];
        const { packedSplats: r, index: a } = s;
        let o;
        return r && a ? o = GA(`
            if (readPackedSplat(${r}.texture, ${r}.numSplats, ${r}.rgbMinMaxLnScaleMinMax, ${a}, ${i})) {
              bool zeroSize = all(equal(${i}.scales, vec3(0.0, 0.0, 0.0)));
              ${i}.flags = zeroSize ? 0u : GSPLAT_FLAG_ACTIVE;
            } else {
              ${i}.flags = 0u;
            }
          `) : o = [`${i}.flags = 0u;`], o.push(`${i}.index = ${a ?? "0"};`), o;
      }
    });
  }
  dynoOut() {
    return new K(this, "gsplat");
  }
}
class Ps extends V {
  constructor({
    packedSplats: A,
    index: e,
    base: s,
    count: n
  }) {
    super({
      inTypes: {
        packedSplats: Ot,
        index: "int",
        base: "int",
        count: "int"
      },
      outTypes: { gsplat: AA },
      inputs: { packedSplats: A, index: e, base: s, count: n },
      globals: () => [vA, Ee, $s],
      statements: ({ inputs: i, outputs: r }) => {
        const { gsplat: a } = r;
        if (!a)
          return [];
        const { packedSplats: o, index: g, base: l, count: c } = i;
        let I;
        return o && g && l && c ? I = GA(`
            ${a}.flags = 0u;
            if ((${g} >= ${l}) && (${g} < (${l} + ${c}))) {
              if (readPackedSplat(${o}.texture, ${o}.numSplats, ${o}.rgbMinMaxLnScaleMinMax, ${g}, ${a})) {
                bool zeroSize = all(equal(${a}.scales, vec3(0.0, 0.0, 0.0)));
                ${a}.flags = zeroSize ? 0u : GSPLAT_FLAG_ACTIVE;
              }
            }
          `) : I = [`${a}.flags = 0u;`], I.push(`${a}.index = ${g ?? "0"};`), I;
      }
    });
  }
  dynoOut() {
    return new K(this, "gsplat");
  }
}
class Zs extends V {
  constructor({ gsplat: A }) {
    super({
      inTypes: { gsplat: AA },
      outTypes: {
        flags: "uint",
        active: "bool",
        index: "int",
        center: "vec3",
        scales: "vec3",
        quaternion: "vec4",
        rgba: "vec4",
        rgb: "vec3",
        opacity: "float",
        x: "float",
        y: "float",
        z: "float",
        r: "float",
        g: "float",
        b: "float"
      },
      inputs: { gsplat: A },
      globals: () => [vA],
      statements: ({ inputs: e, outputs: s }) => {
        const { gsplat: n } = e, {
          flags: i,
          active: r,
          index: a,
          center: o,
          scales: g,
          quaternion: l,
          rgba: c,
          rgb: I,
          opacity: h,
          x: B,
          y: C,
          z: E,
          r: Q,
          g: p,
          b: f
        } = s;
        return [
          i ? `${i} = ${n ? `${n}.flags` : "0u"};` : null,
          r ? `${r} = isGsplatActive(${n ? `${n}.flags` : "0u"});` : null,
          a ? `${a} = ${n ? `${n}.index` : "0"};` : null,
          o ? `${o} = ${n ? `${n}.center` : "vec3(0.0, 0.0, 0.0)"};` : null,
          g ? `${g} = ${n ? `${n}.scales` : "vec3(0.0, 0.0, 0.0)"};` : null,
          l ? `${l} = ${n ? `${n}.quaternion` : "vec4(0.0, 0.0, 0.0, 1.0)"};` : null,
          c ? `${c} = ${n ? `${n}.rgba` : "vec4(0.0, 0.0, 0.0, 0.0)"};` : null,
          I ? `${I} = ${n ? `${n}.rgba.rgb` : "vec3(0.0, 0.0, 0.0)"};` : null,
          h ? `${h} = ${n ? `${n}.rgba.a` : "0.0"};` : null,
          B ? `${B} = ${n ? `${n}.center.x` : "0.0"};` : null,
          C ? `${C} = ${n ? `${n}.center.y` : "0.0"};` : null,
          E ? `${E} = ${n ? `${n}.center.z` : "0.0"};` : null,
          Q ? `${Q} = ${n ? `${n}.rgba.r` : "0.0"};` : null,
          p ? `${p} = ${n ? `${n}.rgba.g` : "0.0"};` : null,
          f ? `${f} = ${n ? `${n}.rgba.b` : "0.0"};` : null
        ].filter(Boolean);
      }
    });
  }
}
class Os extends V {
  constructor({
    gsplat: A,
    flags: e,
    index: s,
    center: n,
    scales: i,
    quaternion: r,
    rgba: a,
    rgb: o,
    opacity: g,
    x: l,
    y: c,
    z: I,
    r: h,
    g: B,
    b: C
  }) {
    super({
      inTypes: {
        gsplat: AA,
        flags: "uint",
        index: "int",
        center: "vec3",
        scales: "vec3",
        quaternion: "vec4",
        rgba: "vec4",
        rgb: "vec3",
        opacity: "float",
        x: "float",
        y: "float",
        z: "float",
        r: "float",
        g: "float",
        b: "float"
      },
      outTypes: { gsplat: AA },
      inputs: {
        gsplat: A,
        flags: e,
        index: s,
        center: n,
        scales: i,
        quaternion: r,
        rgba: a,
        rgb: o,
        opacity: g,
        x: l,
        y: c,
        z: I,
        r: h,
        g: B,
        b: C
      },
      globals: () => [vA],
      statements: ({ inputs: E, outputs: Q }) => {
        const { gsplat: p } = Q;
        if (!p)
          return [];
        const {
          gsplat: f,
          flags: d,
          index: m,
          center: D,
          scales: x,
          quaternion: y,
          rgba: w,
          rgb: k,
          opacity: M,
          x: S,
          y: U,
          z: F,
          r: b,
          g: T,
          b: R
        } = E;
        return [
          `${p}.flags = ${d ?? (f ? `${f}.flags` : "0u")};`,
          `${p}.index = ${m ?? (f ? `${f}.index` : "0")};`,
          `${p}.center = ${D ?? (f ? `${f}.center` : "vec3(0.0, 0.0, 0.0)")};`,
          `${p}.scales = ${x ?? (f ? `${f}.scales` : "vec3(0.0, 0.0, 0.0)")};`,
          `${p}.quaternion = ${y ?? (f ? `${f}.quaternion` : "vec4(0.0, 0.0, 0.0, 1.0)")};`,
          `${p}.rgba = ${w ?? (f ? `${f}.rgba` : "vec4(0.0, 0.0, 0.0, 0.0)")};`,
          k ? `${p}.rgba.rgb = ${k};` : null,
          M ? `${p}.rgba.a = ${M};` : null,
          S ? `${p}.center.x = ${S};` : null,
          U ? `${p}.center.y = ${U};` : null,
          F ? `${p}.center.z = ${F};` : null,
          b ? `${p}.rgba.r = ${b};` : null,
          T ? `${p}.rgba.g = ${T};` : null,
          R ? `${p}.rgba.b = ${R};` : null
        ].filter(Boolean);
      }
    });
  }
  dynoOut() {
    return new K(this, "gsplat");
  }
}
const js = uA(`
  vec3 gsplatNormal(vec3 scales, vec4 quaternion) {
    float minScale = min(scales.x, min(scales.y, scales.z));
    vec3 normal;
    if (scales.z == minScale) {
      normal = vec3(0.0, 0.0, 1.0);
    } else if (scales.y == minScale) {
      normal = vec3(0.0, 1.0, 0.0);
    } else {
      normal = vec3(1.0, 0.0, 0.0);
    }
    return quatVec(quaternion, normal);
  }
`);
class Xs extends v {
  constructor({ gsplat: A }) {
    super({ a: A, outKey: "normal", outTypeFunc: () => "vec3" }), this.globals = () => [vA, js], this.statements = ({ inputs: e, outputs: s }) => [
      `${s.normal} = gsplatNormal(${e.a}.scales, ${e.a}.quaternion);`
    ];
  }
}
class Ws extends V {
  constructor({
    gsplat: A,
    scale: e,
    rotate: s,
    translate: n,
    recolor: i
  }) {
    super({
      inTypes: {
        gsplat: AA,
        scale: "float",
        rotate: "vec4",
        translate: "vec3",
        recolor: "vec4"
      },
      outTypes: { gsplat: AA },
      inputs: { gsplat: A, scale: e, rotate: s, translate: n, recolor: i },
      globals: () => [vA],
      statements: ({ inputs: r, outputs: a, compile: o }) => {
        const { gsplat: g } = a;
        if (!g || !r.gsplat)
          return [];
        const { scale: l, rotate: c, translate: I, recolor: h } = r, B = o.indent;
        return [
          `${g} = ${r.gsplat};`,
          `if (isGsplatActive(${g}.flags)) {`,
          l ? `${B}${g}.center *= ${l};` : null,
          c ? `${B}${g}.center = quatVec(${c}, ${g}.center);` : null,
          I ? `${B}${g}.center += ${I};` : null,
          l ? `${B}${g}.scales *= ${l};` : null,
          c ? `${B}${g}.quaternion = quatQuat(${c}, ${g}.quaternion);` : null,
          h ? `${B}${g}.rgba *= ${h};` : null,
          "}"
        ].filter(Boolean);
      }
    });
  }
  dynoOut() {
    return new K(this, "gsplat");
  }
}
const An = (t, A) => new tn({ gsplat: t, rgbMinMaxLnScaleMinMax: A }), ac = (t) => new As({ rgba8: t });
class tn extends V {
  constructor({
    gsplat: A,
    rgbMinMaxLnScaleMinMax: e
  }) {
    super({
      inTypes: { gsplat: AA, rgbMinMaxLnScaleMinMax: "vec4" },
      inputs: { gsplat: A, rgbMinMaxLnScaleMinMax: e },
      globals: () => [vA],
      statements: ({ inputs: s, outputs: n }) => {
        const { output: i } = n;
        if (!i)
          return [];
        const { gsplat: r, rgbMinMaxLnScaleMinMax: a } = s;
        return r ? GA(`
            if (isGsplatActive(${r}.flags)) {
              ${i} = packSplatEncoding(${r}.center, ${r}.scales, ${r}.quaternion, ${r}.rgba, ${a});
            } else {
              ${i} = uvec4(0u, 0u, 0u, 0u);
            }
          `) : [`${i} = uvec4(0u, 0u, 0u, 0u);`];
      }
    });
  }
  dynoOut() {
    return new K(this, "output");
  }
}
class As extends V {
  constructor({ rgba8: A }) {
    super({
      inTypes: { rgba8: "vec4" },
      inputs: { rgba8: A },
      statements: ({ inputs: e, outputs: s }) => [
        `target = ${e.rgba8 ?? "vec4(0.0, 0.0, 0.0, 0.0)"};`
      ]
    });
  }
  dynoOut() {
    return new K(this, "rgba8");
  }
}
const oc = (t, A, e) => new N({ key: t, type: A, value: e }), cc = (t = !1, A) => new oe({ key: A, value: t }), gc = (t = 0, A) => new en({ key: A, value: t }), lc = (t = 0, A) => new qt({ key: A, value: t }), LA = (t = 0, A) => new ht({ key: A, value: t }), Ic = (t, A) => new sn({ key: A, value: t }), uc = (t, A) => new nn({ key: A, value: t }), hc = (t, A) => new rn({ key: A, value: t }), Cc = (t, A) => new Lt({ key: A, value: t }), Bc = (t, A) => new an({ key: A, value: t }), Ec = (t, A) => new on({ key: A, value: t }), Qc = (t, A) => new cn({ key: A, value: t }), tt = (t, A) => new bt({ key: A, value: t }), pc = (t, A) => new gn({ key: A, value: t }), fc = (t, A) => new ln({ key: A, value: t }), dc = (t, A) => new In({ key: A, value: t }), yc = (t, A) => new kt({ key: A, value: t }), mc = (t, A) => new un({ key: A, value: t }), wc = (t, A) => new hn({ key: A, value: t }), xc = (t, A) => new Cn({ key: A, value: t }), Sc = (t, A) => new Bn({ key: A, value: t }), Dc = (t, A) => new En({ key: A, value: t }), Mc = (t, A) => new Qn({ key: A, value: t }), vc = (t, A) => new pn({ key: A, value: t }), bc = (t, A) => new fn({ key: A, value: t }), Fc = (t, A) => new dn({ key: A, value: t }), Nc = (t, A) => new yn({ key: A, value: t }), kc = (t, A) => new mn({ key: A, value: t }), Tc = (t, A) => new wn({ key: A, value: t }), Uc = (t, A) => new xn({ key: A, value: t }), Gc = (t, A) => new Sn({ key: A, value: t }), Rc = (t, A) => new Dn({ key: A, value: t }), Yc = (t, A) => new zt({ key: A, value: t }), Jc = (t, A) => new Mn({ key: t, value: A }), _c = (t, A) => new vn({ key: A, value: t }), Lc = (t, A) => new bn({ key: A, value: t }), zc = (t, A) => new Fn({ key: A, value: t }), Hc = (t, A) => new Nn({ key: A, value: t }), qc = (t, A) => new kn({ key: A, value: t }), Kc = (t, A) => new Tn({ key: A, value: t }), $c = (t, A) => new Un({ key: A, value: t }), Vc = (t, A) => new Gn({ key: A, value: t }), Pc = (t, A) => new Rn({ key: A, value: t }), Zc = (t, A) => new Yn({ key: A, value: t });
class N extends V {
  constructor({
    key: A,
    type: e,
    count: s,
    value: n,
    update: i,
    globals: r
  }) {
    A = A ?? "value", super({
      outTypes: { [A]: e },
      update: () => {
        if (i) {
          const a = i(this.value);
          a !== void 0 && (this.value = a);
        }
        this.uniform.value = this.value;
      },
      generate: ({ inputs: a, outputs: o }) => {
        const g = (r == null ? void 0 : r({ inputs: a, outputs: o })) ?? [], l = {}, c = o[A];
        return c && (g.push(`uniform ${Xe(c, e, s)};`), l[c] = this.uniform), { globals: g, uniforms: l };
      }
    }), this.type = e, this.count = s, this.value = n, this.uniform = { value: n }, this.outKey = A;
  }
  dynoOut() {
    return new K(this, this.outKey);
  }
}
class oe extends N {
  constructor({
    key: A,
    value: e,
    update: s
  }) {
    super({ key: A, type: "bool", value: e, update: s });
  }
}
class en extends N {
  constructor({
    key: A,
    value: e,
    update: s
  }) {
    super({ key: A, type: "uint", value: e, update: s });
  }
}
class qt extends N {
  constructor({
    key: A,
    value: e,
    update: s
  }) {
    super({ key: A, type: "int", value: e, update: s });
  }
}
class ht extends N {
  constructor({
    key: A,
    value: e,
    update: s
  }) {
    super({ key: A, type: "float", value: e, update: s });
  }
}
class sn extends N {
  constructor({
    key: A,
    value: e,
    update: s
  }) {
    super({ key: A, type: "bvec2", value: e, update: s });
  }
}
class nn extends N {
  constructor({
    key: A,
    value: e,
    update: s
  }) {
    super({ key: A, type: "uvec2", value: e, update: s });
  }
}
class rn extends N {
  constructor({
    key: A,
    value: e,
    update: s
  }) {
    super({ key: A, type: "ivec2", value: e, update: s });
  }
}
class Lt extends N {
  constructor({
    key: A,
    value: e,
    update: s
  }) {
    super({ key: A, type: "vec2", value: e, update: s });
  }
}
class an extends N {
  constructor({
    key: A,
    value: e,
    update: s
  }) {
    super({ key: A, type: "bvec3", value: e, update: s });
  }
}
class on extends N {
  constructor({
    key: A,
    value: e,
    update: s
  }) {
    super({ key: A, type: "uvec3", value: e, update: s });
  }
}
class cn extends N {
  constructor({
    key: A,
    value: e,
    update: s
  }) {
    super({ key: A, type: "ivec3", value: e, update: s });
  }
}
class bt extends N {
  constructor({
    key: A,
    value: e,
    update: s
  }) {
    super({ key: A, type: "vec3", value: e, update: s });
  }
}
class gn extends N {
  constructor({
    key: A,
    value: e,
    update: s
  }) {
    super({ key: A, type: "bvec4", value: e, update: s });
  }
}
class ln extends N {
  constructor({
    key: A,
    value: e,
    update: s
  }) {
    super({ key: A, type: "uvec4", value: e, update: s });
  }
}
class In extends N {
  constructor({
    key: A,
    value: e,
    update: s
  }) {
    super({ key: A, type: "ivec4", value: e, update: s });
  }
}
class kt extends N {
  constructor({
    key: A,
    value: e,
    update: s
  }) {
    super({ key: A, type: "vec4", value: e, update: s });
  }
}
class un extends N {
  constructor({
    key: A,
    value: e,
    update: s
  }) {
    super({ key: A, type: "mat2", value: e, update: s });
  }
}
class hn extends N {
  constructor({
    key: A,
    value: e,
    update: s
  }) {
    super({ key: A, type: "mat2x2", value: e, update: s });
  }
}
class Cn extends N {
  constructor({
    key: A,
    value: e,
    update: s
  }) {
    super({ key: A, type: "mat2x3", value: e, update: s });
  }
}
class Bn extends N {
  constructor({
    key: A,
    value: e,
    update: s
  }) {
    super({ key: A, type: "mat2x4", value: e, update: s });
  }
}
class En extends N {
  constructor({
    key: A,
    value: e,
    update: s
  }) {
    super({ key: A, type: "mat3", value: e, update: s });
  }
}
class Qn extends N {
  constructor({
    key: A,
    value: e,
    update: s
  }) {
    super({ key: A, type: "mat3x2", value: e, update: s });
  }
}
class pn extends N {
  constructor({
    key: A,
    value: e,
    update: s
  }) {
    super({ key: A, type: "mat3x3", value: e, update: s });
  }
}
class fn extends N {
  constructor({
    key: A,
    value: e,
    update: s
  }) {
    super({ key: A, type: "mat3x4", value: e, update: s });
  }
}
class dn extends N {
  constructor({
    key: A,
    value: e,
    update: s
  }) {
    super({ key: A, type: "mat4", value: e, update: s });
  }
}
class yn extends N {
  constructor({
    key: A,
    value: e,
    update: s
  }) {
    super({ key: A, type: "mat4x2", value: e, update: s });
  }
}
class mn extends N {
  constructor({
    key: A,
    value: e,
    update: s
  }) {
    super({ key: A, type: "mat4x3", value: e, update: s });
  }
}
class wn extends N {
  constructor({
    key: A,
    value: e,
    update: s
  }) {
    super({ key: A, type: "mat4x4", value: e, update: s });
  }
}
class xn extends N {
  constructor({
    key: A,
    value: e,
    update: s
  }) {
    super({ key: A, type: "usampler2D", value: e, update: s });
  }
}
class Sn extends N {
  constructor({
    key: A,
    value: e,
    update: s
  }) {
    super({ key: A, type: "isampler2D", value: e, update: s });
  }
}
class Dn extends N {
  constructor({
    key: A,
    value: e,
    update: s
  }) {
    super({ key: A, type: "sampler2D", value: e, update: s });
  }
}
class zt extends N {
  constructor({
    key: A,
    value: e,
    update: s
  }) {
    super({ key: A, type: "usampler2DArray", value: e, update: s });
  }
}
class Mn extends N {
  constructor({
    key: A,
    value: e,
    update: s
  }) {
    super({ key: A, type: "isampler2DArray", value: e, update: s });
  }
}
class vn extends N {
  constructor({
    key: A,
    value: e,
    update: s
  }) {
    super({ key: A, type: "sampler2DArray", value: e, update: s });
  }
}
class bn extends N {
  constructor({
    key: A,
    value: e,
    update: s
  }) {
    super({ key: A, type: "usampler3D", value: e, update: s });
  }
}
class Fn extends N {
  constructor({
    key: A,
    value: e,
    update: s
  }) {
    super({ key: A, type: "isampler3D", value: e, update: s });
  }
}
class Nn extends N {
  constructor({
    key: A,
    value: e,
    update: s
  }) {
    super({ key: A, type: "sampler3D", value: e, update: s });
  }
}
class kn extends N {
  constructor({
    key: A,
    value: e,
    update: s
  }) {
    super({ key: A, type: "usamplerCube", value: e, update: s });
  }
}
class Tn extends N {
  constructor({
    key: A,
    value: e,
    update: s
  }) {
    super({ key: A, type: "isamplerCube", value: e, update: s });
  }
}
class Un extends N {
  constructor({
    key: A,
    value: e,
    update: s
  }) {
    super({ key: A, type: "samplerCube", value: e, update: s });
  }
}
class Gn extends N {
  constructor({
    key: A,
    value: e,
    update: s
  }) {
    super({ key: A, type: "sampler2DShadow", value: e, update: s });
  }
}
class Rn extends N {
  constructor({
    key: A,
    value: e,
    update: s
  }) {
    super({ key: A, type: "sampler2DArrayShadow", value: e, update: s });
  }
}
class Yn extends N {
  constructor({
    key: A,
    value: e,
    update: s
  }) {
    super({ key: A, type: "samplerCubeShadow", value: e, update: s });
  }
}
const jt = new Float32Array(1), Qe = new Uint32Array(jt.buffer);
function Oc(t) {
  return jt[0] = t, Qe[0];
}
function jc(t) {
  return Qe[0] = t, jt[0];
}
function Ct(t) {
  jt[0] = t;
  const A = Qe[0], e = A >> 31 & 1, s = A >> 23 & 255, n = A & 8388607, i = e << 15;
  if (s === 255)
    return n !== 0 ? i | 32767 : i | 31744;
  const r = s - 127 + 15;
  if (r >= 31)
    return i | 31744;
  if (r <= 0) {
    if (r < -10)
      return i;
    const o = (n | 8388608) >> 1 - r + 13;
    return i | o;
  }
  const a = n >> 13;
  return i | r << 10 | a;
}
function mA(t) {
  const A = t >> 15 & 1, e = t >> 10 & 31, s = t & 1023;
  let n;
  if (e === 0)
    if (s === 0)
      n = A << 31;
    else {
      let i = s, r = -14;
      for (; (i & 1024) === 0; )
        i <<= 1, r--;
      i &= 1023;
      const a = r + 127, o = i << 13;
      n = A << 31 | a << 23 | o;
    }
  else if (e === 31)
    s === 0 ? n = A << 31 | 2139095040 : n = A << 31 | 2143289344;
  else {
    const i = e - 15 + 127, r = s << 13;
    n = A << 31 | i << 23 | r;
  }
  return Qe[0] = n, jt[0];
}
function bA(t) {
  return Math.max(0, Math.min(255, Math.round(t * 255)));
}
function ne(t) {
  return Math.max(-127, Math.min(127, Math.round(t * 127)));
}
function Xc(t) {
  return t / 255;
}
function Wc(t) {
  return t / 127;
}
class Ag {
  // Create a DataCache with a given function that fetches data not in the cache.
  constructor({
    asyncFetch: A,
    maxItems: e = 5
  }) {
    this.asyncFetch = A, this.maxItems = e, this.items = [];
  }
  // Fetch data for the key, returning cached data if available.
  async getFetch(A) {
    const e = this.items.findIndex((n) => n.key === A);
    if (e >= 0) {
      const n = this.items.splice(e, 1)[0];
      return this.items.push(n), n.data;
    }
    const s = await this.asyncFetch(A);
    for (this.items.push({ key: A, data: s }); this.items.length > this.maxItems; )
      this.items.shift();
    return s;
  }
}
function tg(t, A) {
  const e = Object.entries(t).map(([s, n]) => [
    s,
    A(n, s)
  ]);
  return Object.fromEntries(e);
}
function eg(t, A) {
  const e = Object.entries(t).map(([s, n]) => [s, A(n, s)]).filter(([s, n]) => n !== void 0);
  return Object.fromEntries(e);
}
function Jn(t) {
  const A = [], e = /* @__PURE__ */ new Set();
  function s(n) {
    n && typeof n == "object" && !e.has(n) && (e.add(n), n instanceof ArrayBuffer ? A.push(n) : ArrayBuffer.isView(n) ? A.push(n.buffer) : Array.isArray(n) ? n.forEach(s) : Object.values(n).forEach(s));
  }
  return s(t), A;
}
function sg(t, A) {
  return new Array(t).fill(null).map((e, s) => A(s));
}
class _n {
  constructor({
    // Allocate a new item with the given args
    allocate: A,
    // Dispose of an item (optional, if GC is enough)
    dispose: e,
    // Check if an existing item in the list is valid for the given args,
    // allowing you to store heterogeneous items in the list.
    valid: s
  }) {
    this.items = [], this.allocate = A, this.dispose = e, this.valid = s;
  }
  // Allocate a new item from the free list, first checking if a existing item
  // on the freelist is valid for the given args.
  alloc(A) {
    for (; ; ) {
      const e = this.items.pop();
      if (!e)
        break;
      if (this.valid(e, A))
        return e;
      this.dispose && this.dispose(e);
    }
    return this.allocate(A);
  }
  free(A) {
    this.items.push(A);
  }
  disposeAll() {
    let A;
    for (A = this.items.pop(); A; )
      this.dispose && this.dispose(A), A = this.items.pop();
  }
}
function Re(t, A, e, s, n, i, r, a, o, g, l, c, I, h, B, C, E) {
  const Q = (E == null ? void 0 : E.rgbMin) ?? 0, f = ((E == null ? void 0 : E.rgbMax) ?? 1) - Q, d = bA((h - Q) / f), m = bA((B - Q) / f), D = bA((C - Q) / f), x = bA(I), y = ts(
    new u.Quaternion(o, g, l, c)
  ), w = y & 255, k = y >>> 8 & 255, M = y >>> 16 & 255, S = (E == null ? void 0 : E.lnScaleMin) ?? TA, F = 254 / (((E == null ? void 0 : E.lnScaleMax) ?? UA) - S), b = i < It ? 0 : Math.min(
    255,
    Math.max(
      1,
      Math.round((Math.log(i) - S) * F) + 1
    )
  ), T = r < It ? 0 : Math.min(
    255,
    Math.max(
      1,
      Math.round((Math.log(r) - S) * F) + 1
    )
  ), R = a < It ? 0 : Math.min(
    255,
    Math.max(
      1,
      Math.round((Math.log(a) - S) * F) + 1
    )
  ), O = Ct(e), _ = Ct(s), eA = Ct(n), q = A * 4;
  t[q] = d | m << 8 | D << 16 | x << 24, t[q + 1] = O | _ << 16, t[q + 2] = eA | w << 16 | k << 24, t[q + 3] = b | T << 8 | R << 16 | M << 24;
}
function ng(t, A, e, s, n) {
  const i = Ct(e), r = Ct(s), a = Ct(n), o = A * 4;
  t[o + 1] = i | r << 16, t[o + 2] = a | t[o + 2] & 4294901760;
}
function ig(t, A, e, s, n, i) {
  const r = (i == null ? void 0 : i.lnScaleMin) ?? TA, o = 254 / (((i == null ? void 0 : i.lnScaleMax) ?? UA) - r), g = e < It ? 0 : Math.min(
    255,
    Math.max(
      1,
      Math.round((Math.log(e) - r) * o) + 1
    )
  ), l = s < It ? 0 : Math.min(
    255,
    Math.max(
      1,
      Math.round((Math.log(s) - r) * o) + 1
    )
  ), c = n < It ? 0 : Math.min(
    255,
    Math.max(
      1,
      Math.round((Math.log(n) - r) * o) + 1
    )
  ), I = A * 4;
  t[I + 3] = g | l << 8 | c << 16 | t[I + 3] & 4278190080;
}
function rg(t, A, e, s, n, i) {
  const r = ts(
    new u.Quaternion(e, s, n, i)
  ), a = r & 255, o = r >>> 8 & 255, g = r >>> 16 & 255, l = A * 4;
  t[l + 2] = t[l + 2] & 65535 | a << 16 | o << 24, t[l + 3] = t[l + 3] & 16777215 | g << 24;
}
function ag(t, A, e, s, n, i, r) {
  const a = (r == null ? void 0 : r.rgbMin) ?? 0, g = ((r == null ? void 0 : r.rgbMax) ?? 1) - a, l = bA((e - a) / g), c = bA((s - a) / g), I = bA((n - a) / g), h = bA(i), B = A * 4;
  t[B] = l | c << 8 | I << 16 | h << 24;
}
function og(t, A, e, s, n, i) {
  const r = (i == null ? void 0 : i.rgbMin) ?? 0, o = ((i == null ? void 0 : i.rgbMax) ?? 1) - r, g = bA((e - r) / o), l = bA((s - r) / o), c = bA((n - r) / o), I = A * 4;
  t[I] = g | l << 8 | c << 16 | t[I] & 4278190080;
}
function cg(t, A, e) {
  const s = bA(e), n = A * 4;
  t[n] = t[n] & 16777215 | s << 24;
}
const gg = new u.Vector3(), lg = new u.Vector3(), Ig = new u.Quaternion(), ug = new u.Color(), hg = {
  center: gg,
  scales: lg,
  quaternion: Ig,
  color: ug,
  opacity: 0
};
function Ye(t, A, e) {
  const s = hg, n = A * 4, i = t[n], r = t[n + 1], a = t[n + 2], o = t[n + 3], g = (e == null ? void 0 : e.rgbMin) ?? 0, c = ((e == null ? void 0 : e.rgbMax) ?? 1) - g;
  s.color.set(
    g + (i & 255) / 255 * c,
    g + (i >>> 8 & 255) / 255 * c,
    g + (i >>> 16 & 255) / 255 * c
  ), s.opacity = (i >>> 24 & 255) / 255, s.center.set(
    mA(r & 65535),
    mA(r >>> 16 & 65535),
    mA(a & 65535)
  );
  const I = (e == null ? void 0 : e.lnScaleMin) ?? TA, B = (((e == null ? void 0 : e.lnScaleMax) ?? UA) - I) / 254, C = o & 255;
  s.scales.x = C === 0 ? 0 : Math.exp(I + (C - 1) * B);
  const E = o >>> 8 & 255;
  s.scales.y = E === 0 ? 0 : Math.exp(I + (E - 1) * B);
  const Q = o >>> 16 & 255;
  s.scales.z = Q === 0 ? 0 : Math.exp(I + (Q - 1) * B);
  const p = a >>> 16 & 65535 | o >>> 8 & 16711680;
  return Vn(p, s.quaternion), s;
}
function wA(t) {
  const A = Z, e = Math.max(
    je,
    Math.min(HA, Math.ceil(t / A))
  ), s = Math.ceil(t / (A * e)), n = A * e * s;
  return { width: A, height: e, depth: s, maxSplats: n };
}
function Cg(t) {
  const A = Z, e = Math.max(
    je,
    Math.min(HA, Math.ceil(t / A))
  ), s = Math.ceil(t / (A * e));
  return A * e * s;
}
function Bg() {
  return navigator.maxTouchPoints > 0 ? !0 : /Mobi|Android|iPhone|iPad|iPod|Opera Mini|IEMobile/.test(
    navigator.userAgent
  );
}
function Eg() {
  return /Android/.test(navigator.userAgent);
}
function Qg() {
  return /Oculus/.test(navigator.userAgent);
}
function pg(t, A, e) {
  const s = new Uint8Array(A * 4);
  for (let n = 0; n < e / 2; n++) {
    const i = n * A * 4, r = (e - 1 - n) * A * 4;
    s.set(t.subarray(i, i + A * 4)), t.set(
      t.subarray(r, r + A * 4),
      i
    ), t.set(s, r);
  }
  return t;
}
function fg(t, A, e) {
  const s = document.createElement("canvas");
  s.width = A, s.height = e;
  const n = s.getContext("2d");
  if (!n)
    throw new Error("Can't get 2d context");
  const i = n.createImageData(A, e);
  return i.data.set(t), n.putImageData(i, 0, 0), s.toDataURL("image/png");
}
function Ln(t) {
  const A = new u.Clock(t.autoStart);
  return A.startTime = t.startTime, A.oldTime = t.oldTime, A.elapsedTime = t.elapsedTime, A.running = t.running, A;
}
function dg(t) {
  return Object.fromEntries(
    Object.entries(t).filter(([A, e]) => e !== void 0)
  );
}
const zn = uA(`
  precision highp float;

  in vec3 position;

  void main() {
    gl_Position = vec4(position.xy, 0.0, 1.0);
  }
`);
function Hn(t) {
  const A = new u.Vector3();
  for (const e of t)
    A.add(e);
  return A.divideScalar(t.length);
}
function qn(t) {
  if (t.length === 0)
    return new u.Quaternion();
  const A = t[0].clone();
  for (let e = 1; e < t.length; e++)
    t[e].dot(t[0]) < 0 ? (A.x -= t[e].x, A.y -= t[e].y, A.z -= t[e].z, A.w -= t[e].w) : (A.x += t[e].x, A.y += t[e].y, A.z += t[e].z, A.w += t[e].w);
  return A.normalize();
}
function Kn(t, A) {
  const e = new u.Vector3(0, 0, 0).applyMatrix4(t), s = new u.Vector3(0, 0, 0).applyMatrix4(A), n = new u.Vector3(0, 0, -1).applyMatrix4(t).sub(e).normalize(), i = new u.Vector3(0, 0, -1).applyMatrix4(A).sub(s).normalize(), r = e.distanceTo(s), a = n.dot(i);
  return { distance: r, coincidence: a };
}
function yg({
  matrix1: t,
  matrix2: A,
  maxDistance: e
}) {
  const s = new u.Vector3(0, 0, 0).applyMatrix4(t), n = new u.Vector3(0, 0, 0).applyMatrix4(A);
  return s.distanceTo(n) <= e;
}
function mg({
  matrix1: t,
  matrix2: A,
  maxDistance: e,
  minCoincidence: s
}) {
  const { distance: n, coincidence: i } = Kn(t, A);
  return n <= e && (s == null || i >= s);
}
function $n(t, A) {
  const [e, s] = [new u.Vector3(), new u.Quaternion()], [n, i] = [new u.Vector3(), new u.Quaternion()];
  t.decompose(e, s, new u.Vector3()), A.decompose(n, i, new u.Vector3());
  const r = e.distanceTo(n), a = Math.abs(s.dot(i));
  return { distance: r, coorient: a };
}
function ce({
  matrix1: t,
  matrix2: A,
  maxDistance: e,
  minCoorient: s
}) {
  const { distance: n, coorient: i } = $n(t, A);
  return n <= e && (s == null || i >= s);
}
function wg(t, A = 1e-3) {
  return Math.abs(t) < A ? 0 : Math.sign(t);
}
function xg(t) {
  const A = t.w < 0, e = ne(A ? -t.x : t.x), s = ne(A ? -t.y : t.y), n = ne(A ? -t.z : t.z), i = e & 255, r = s & 255, a = n & 255;
  return i | r << 8 | a << 16;
}
function Sg(t, A) {
  const e = t << 24 >> 24, s = t << 16 >> 24, n = t << 8 >> 24;
  A.set(e / 127, s / 127, n / 127, 0);
  const i = A.x * A.x + A.y * A.y + A.z * A.z;
  return A.w = Math.sqrt(Math.max(0, 1 - i)), A;
}
function ts(t) {
  const A = t.clone().normalize();
  A.w < 0 && A.set(-A.x, -A.y, -A.z, -A.w);
  const e = 2 * Math.acos(A.w), s = Math.sqrt(
    A.x * A.x + A.y * A.y + A.z * A.z
  ), n = s < 1e-6 ? new u.Vector3(1, 0, 0) : new u.Vector3(A.x, A.y, A.z).divideScalar(s), i = Math.abs(n.x) + Math.abs(n.y) + Math.abs(n.z);
  let r = n.x / i, a = n.y / i;
  if (n.z < 0) {
    const h = r;
    r = (1 - Math.abs(a)) * (r >= 0 ? 1 : -1), a = (1 - Math.abs(h)) * (a >= 0 ? 1 : -1);
  }
  const o = r * 0.5 + 0.5, g = a * 0.5 + 0.5, l = Math.round(o * 255), c = Math.round(g * 255);
  return Math.round(e * (255 / Math.PI)) << 16 | c << 8 | l;
}
function Vn(t, A) {
  const e = t & 255, s = t >>> 8 & 255, n = t >>> 16 & 255, i = e / 255, r = s / 255;
  let a = (i - 0.5) * 2, o = (r - 0.5) * 2;
  const g = 1 - (Math.abs(a) + Math.abs(o)), l = Math.max(-g, 0);
  a += a >= 0 ? -l : l, o += o >= 0 ? -l : l;
  const c = new u.Vector3(a, o, g).normalize(), h = n / 255 * Math.PI * 0.5, B = Math.sin(h), C = Math.cos(h);
  return A.set(c.x * B, c.y * B, c.z * B, C), A;
}
function Dg(t) {
  const A = t.clone().normalize(), e = 2 * (A.w * A.x + A.y * A.z), s = 1 - 2 * (A.x * A.x + A.y * A.y), n = Math.atan2(e, s), i = 2 * (A.w * A.y - A.z * A.x), r = Math.abs(i) >= 1 ? Math.sign(i) * (Math.PI / 2) : Math.asin(i), a = 2 * (A.w * A.z + A.x * A.y), o = 1 - 2 * (A.y * A.y + A.z * A.z), g = Math.atan2(a, o), l = (n + Math.PI) / (2 * Math.PI), c = (r + Math.PI) / (2 * Math.PI), I = (g + Math.PI) / (2 * Math.PI), h = Math.round(l * 255), B = Math.round(c * 255);
  return Math.round(I * 255) << 16 | B << 8 | h;
}
function Mg(t, A) {
  const e = t & 255, s = t >>> 8 & 255, n = t >>> 16 & 255, i = e / 255, r = s / 255, a = n / 255, o = i * (2 * Math.PI) - Math.PI, g = r * (2 * Math.PI) - Math.PI, l = a * (2 * Math.PI) - Math.PI, c = Math.cos(o * 0.5), I = Math.sin(o * 0.5), h = Math.cos(g * 0.5), B = Math.sin(g * 0.5), C = Math.cos(l * 0.5), E = Math.sin(l * 0.5);
  return A.w = c * h * C + I * B * E, A.x = I * h * C - c * B * E, A.y = c * B * C + I * h * E, A.z = c * h * E - I * B * C, A.normalize(), A;
}
function Wt(t, A, e, s) {
  const n = Math.max(-127, Math.min(127, t * 127)), i = Math.max(-127, Math.min(127, A * 127)), r = Math.max(-127, Math.min(127, e * 127)), a = Math.max(-127, Math.min(127, s * 127));
  return n & 255 | (i & 255) << 8 | (r & 255) << 16 | (a & 255) << 24;
}
function vg(t, A, e, s) {
  const n = (s == null ? void 0 : s.sh1Min) ?? -1, i = (s == null ? void 0 : s.sh1Max) ?? 1, r = 0.5 * (n + i), a = 126 / (i - n), o = A * 2;
  for (let g = 0; g < 9; ++g) {
    const l = (e[g] - r) * a, c = Math.round(Math.max(-63, Math.min(63, l))) & 127, I = g * 7, h = I + 7, B = Math.floor(I / 32), C = I - B * 32, E = c << C & 4294967295;
    if (t[o + B] |= E, h > B * 32 + 32) {
      const Q = c >>> 32 - C & 4294967295;
      t[o + B + 1] |= Q;
    }
  }
}
function bg(t, A, e, s) {
  const n = (s == null ? void 0 : s.sh2Min) ?? -1, i = (s == null ? void 0 : s.sh2Max) ?? 1, r = 0.5 * (n + i), a = 2 / (i - n);
  t[A * 4 + 0] = Wt(
    (e[0] - r) * a,
    (e[1] - r) * a,
    (e[2] - r) * a,
    (e[3] - r) * a
  ), t[A * 4 + 1] = Wt(
    (e[4] - r) * a,
    (e[5] - r) * a,
    (e[6] - r) * a,
    (e[7] - r) * a
  ), t[A * 4 + 2] = Wt(
    (e[8] - r) * a,
    (e[9] - r) * a,
    (e[10] - r) * a,
    (e[11] - r) * a
  ), t[A * 4 + 3] = Wt(
    (e[12] - r) * a,
    (e[13] - r) * a,
    (e[14] - r) * a,
    0
  );
}
function Fg(t, A, e, s) {
  const n = (s == null ? void 0 : s.sh3Min) ?? -1, i = (s == null ? void 0 : s.sh3Max) ?? 1, r = 0.5 * (n + i), a = 62 / (i - n), o = A * 4;
  for (let g = 0; g < 21; ++g) {
    const l = (e[g] - r) * a, c = Math.round(Math.max(-31, Math.min(31, l))) & 63, I = g * 6, h = I + 6, B = Math.floor(I / 32), C = I - B * 32, E = c << C & 4294967295;
    if (t[o + B] |= E, h > B * 32 + 32) {
      const Q = c >>> 32 - C & 4294967295;
      t[o + B + 1] |= Q;
    }
  }
}
function Pn(t, A) {
  const e = [];
  let s = 0, n = null;
  const i = new Fs((o, g) => {
    if (e.push(o), s += o.length, g || s >= A) {
      const l = new Uint8Array(s);
      let c = 0;
      for (const I of e)
        l.set(I, c), c += I.length;
      n = l.slice(0, A);
    }
  }), r = 1024;
  let a = 0;
  for (; n == null && a < t.length; ) {
    const o = t.slice(a, a + r);
    i.push(o, !1), a += r;
  }
  if (n == null && (i.push(new Uint8Array(), !0), n == null))
    throw new Error("Failed to decompress partial gzip");
  return n;
}
class Zn {
  constructor({
    fileBytes: A,
    chunkBytes: e = 64 * 1024
  }) {
    this.fileBytes = A, this.chunkBytes = e, this.offset = 0, this.chunks = [], this.totalBytes = 0, this.gunzip = new Fs((s, n) => {
      this.chunks.push(s), this.totalBytes += s.length;
    });
  }
  read(A) {
    for (; this.totalBytes < A && this.offset < this.fileBytes.length; ) {
      const i = Math.min(
        this.offset + this.chunkBytes,
        this.fileBytes.length
      );
      this.gunzip.push(this.fileBytes.subarray(this.offset, i), !1), this.offset = i;
    }
    if (this.totalBytes < A && this.offset >= this.fileBytes.length && this.gunzip.push(new Uint8Array(0), !0), this.totalBytes < A)
      throw new Error(
        `Unexpected EOF: needed ${A}, got ${this.totalBytes}`
      );
    const e = new Uint8Array(this.totalBytes);
    let s = 0;
    for (const i of this.chunks)
      e.set(i, s), s += i.length;
    const n = e.subarray(0, A);
    return this.chunks = [e.subarray(A)], this.totalBytes -= A, n;
  }
}
const vh = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  DataCache: Ag,
  FreeList: _n,
  GunzipReader: Zn,
  IDENT_VERTEX_SHADER: zn,
  Sint8ToFloat: Wc,
  Uint8ToFloat: Xc,
  averagePositions: Hn,
  averageQuaternions: qn,
  cloneClock: Ln,
  coinciDist: Kn,
  computeMaxSplats: Cg,
  coorientDist: $n,
  decodeQuatEulerXyz888: Mg,
  decodeQuatOctXy88R8: Vn,
  decodeQuatXyz888: Sg,
  decompressPartialGzip: Pn,
  encodeQuatEulerXyz888: Dg,
  encodeQuatOctXy88R8: ts,
  encodeQuatXyz888: xg,
  encodeSh1Rgb: vg,
  encodeSh2Rgb: bg,
  encodeSh3Rgb: Fg,
  epsilonSign: wg,
  flipPixels: pg,
  floatBitsToUint: Oc,
  floatToSint8: ne,
  floatToUint8: bA,
  fromHalf: mA,
  getArrayBuffers: Jn,
  getTextureSize: wA,
  isAndroid: Eg,
  isMobile: Bg,
  isOculus: Qg,
  mapFilterObject: eg,
  mapObject: tg,
  newArray: sg,
  omitUndefined: dg,
  pixelsToPngUrl: fg,
  setPackedSplat: Re,
  setPackedSplatCenter: ng,
  setPackedSplatOpacity: cg,
  setPackedSplatQuat: rg,
  setPackedSplatRgb: og,
  setPackedSplatRgba: ag,
  setPackedSplatScales: ig,
  toHalf: Ct,
  uintBitsToFloat: jc,
  unpackSplat: Ye,
  withinCoinciDist: mg,
  withinCoorientDist: ce,
  withinDist: yg
}, Symbol.toStringTag, { value: "Module" }));
class es {
  constructor({
    graph: A,
    inputs: e,
    outputs: s,
    template: n
  }) {
    this.graph = A, this.template = n, this.inputs = e ?? {}, this.outputs = s ?? {};
    const i = new Hs({ indent: this.template.indent });
    for (const a in this.outputs)
      this.outputs[a] && i.declares.add(this.outputs[a]);
    const r = A.compile({
      inputs: this.inputs,
      outputs: this.outputs,
      compile: i
    });
    this.shader = n.generate({ globals: i.globals, statements: r }), this.uniforms = i.uniforms, this.updaters = i.updaters;
  }
  prepareMaterial() {
    return Ng(this);
  }
  update() {
    for (const A of this.updaters)
      A();
  }
}
class ss {
  constructor(A) {
    const e = A.match(/^([ \t]*)\{\{\s*GLOBALS\s*\}\}/m), s = A.match(/^([ \t]*)\{\{\s*STATEMENTS\s*\}\}/m);
    if (!e || !s)
      throw new Error(
        "Template must contain {{ GLOBALS }} and {{ STATEMENTS }}"
      );
    this.before = A.substring(0, e.index), this.between = A.substring(
      e.index + e[0].length,
      s.index
    ), this.after = A.substring(
      s.index + s[0].length
    ), this.indent = s[1];
  }
  generate({
    globals: A,
    statements: e
  }) {
    return this.before + Array.from(A).join(`

`) + this.between + e.map((s) => this.indent + s).join(`
`) + this.after;
  }
}
const hs = /* @__PURE__ */ new Map();
function Ng(t) {
  let A = hs.get(t);
  return A || (A = new u.RawShaderMaterial({
    glslVersion: u.GLSL3,
    vertexShader: zn,
    fragmentShader: t.shader,
    uniforms: t.uniforms
  }), hs.set(t, A), A);
}
function ns(t, A, e = "add") {
  const s = () => {
    throw new Error(`Invalid ${e} types: ${t}, ${A}`);
  };
  if (t === A) return t;
  if (t === "int") {
    if (BA(A)) return A;
    s();
  }
  if (A === "int") {
    if (BA(t)) return t;
    s();
  }
  if (t === "uint") {
    if (EA(A)) return A;
    s();
  }
  if (A === "uint") {
    if (EA(t)) return t;
    s();
  }
  if (t === "float") {
    if (at(A)) return A;
    s();
  }
  if (A === "float") {
    if (at(t)) return t;
    s();
  }
  throw new Error(`Invalid ${e} types: ${t}, ${A}`);
}
function kg(t, A) {
  return ns(t, A, "sub");
}
function Tg(t, A) {
  const e = () => {
    throw new Error(`Invalid mul types: ${t}, ${A}`);
  }, s = (n) => n;
  if (t === "int") {
    if (BA(A)) return s(A);
    e();
  }
  if (A === "int") {
    if (BA(t)) return s(t);
    e();
  }
  if (t === "uint") {
    if (EA(A)) return s(A);
    e();
  }
  if (A === "uint") {
    if (EA(t)) return s(t);
    e();
  }
  if (t === "float") {
    if (at(A)) return s(A);
    e();
  }
  if (A === "float") {
    if (at(t)) return s(t);
    e();
  }
  if (BA(t) || EA(t) || BA(A) || EA(A)) {
    if (t === A) return s(t);
    e();
  }
  if (t === "vec2") {
    if (A === "vec2" || ot(A)) return s("vec2");
    if (A === "mat3x2") return s("vec3");
    if (A === "mat4x2") return s("vec4");
    e();
  }
  if (t === "vec3") {
    if (A === "mat2x3") return s("vec2");
    if (A === "vec3" || ct(A)) return s("vec3");
    if (A === "mat4x3") return s("vec4");
    e();
  }
  if (t === "vec4") {
    if (A === "mat2x4") return s("vec2");
    if (A === "mat3x4") return s("vec3");
    if (A === "vec4" || gt(A)) return s("vec4");
    e();
  }
  if (A === "vec2") {
    if (ot(t)) return s("vec2");
    if (t === "mat2x3") return s("vec3");
    if (t === "mat2x4") return s("vec4");
    e();
  }
  if (A === "vec3") {
    if (t === "mat3x2") return s("vec2");
    if (ct(t)) return s("vec3");
    if (t === "mat3x4") return s("vec4");
    e();
  }
  if (A === "vec4") {
    if (t === "mat4x2") return s("vec2");
    if (t === "mat4x3") return s("vec3");
    if (gt(t)) return s("vec4");
    e();
  }
  if (ot(t)) {
    if (ot(A)) return s("mat2");
    if (A === "mat3x2") return s("mat3x2");
    if (A === "mat4x2") return s("mat4x2");
    e();
  }
  if (t === "mat2x3") {
    if (ot(A)) return s("mat2x3");
    if (A === "mat3x2") return s("mat3");
    if (A === "mat4x2") return s("mat4x3");
    e();
  }
  if (t === "mat2x4") {
    if (ot(A)) return s("mat2x4");
    if (A === "mat3x2") return s("mat3x4");
    if (A === "mat4x2") return s("mat4");
    e();
  }
  if (t === "mat3x2") {
    if (A === "mat2x3") return s("mat2");
    if (ct(A)) return s("mat3x2");
    if (A === "mat4x3") return s("mat4x2");
    e();
  }
  if (ct(t)) {
    if (A === "mat2x3") return s("mat2x3");
    if (ct(A)) return s("mat3");
    if (A === "mat4x3") return s("mat4x3");
    e();
  }
  if (t === "mat3x4") {
    if (A === "mat2x3") return s("mat2x4");
    if (ct(A)) return s("mat3x4");
    if (A === "mat4x3") return s("mat4");
    e();
  }
  if (t === "mat4x2") {
    if (A === "mat2x4") return s("mat2");
    if (A === "mat3x4") return s("mat3x2");
    if (gt(A)) return s("mat4x2");
    e();
  }
  if (t === "mat4x3") {
    if (A === "mat2x4") return s("mat2x3");
    if (A === "mat3x4") return s("mat3");
    if (gt(A)) return s("mat4x3");
    e();
  }
  if (gt(t)) {
    if (A === "mat2x4") return s("mat2x4");
    if (A === "mat3x4") return s("mat3x4");
    if (gt(A)) return s("mat4");
    e();
  }
  throw new Error(`Invalid mul types: ${t}, ${A}`);
}
function Ug(t, A) {
  return ns(t, A, "div");
}
function Gg(t, A) {
  if (t === A) return t;
  if (t === "int") {
    if (BA(A)) return A;
  } else if (A === "int") {
    if (BA(t)) return t;
  } else if (t === "uint") {
    if (EA(A)) return A;
  } else if (A === "uint" && EA(t))
    return t;
  throw new Error(`Invalid imod types: ${t}, ${A}`);
}
function Rg(t, A) {
  if (t === A || A === "float") return t;
  throw new Error(`Invalid mod types: ${t}, ${A}`);
}
function Yg(t) {
  return t;
}
function Jg(t) {
  return t;
}
function _g(t) {
  return t;
}
function Lg(t) {
  return t;
}
function zg(t) {
  return t;
}
function Hg(t) {
  return t;
}
function qg(t) {
  return t;
}
function Kg(t) {
  return t;
}
function $g(t) {
  return t;
}
function Vg(t) {
  return t;
}
function Pg(t) {
  return t;
}
function Zg(t) {
  return t;
}
function Og(t) {
  return t;
}
function jg(t) {
  return t;
}
function Xg(t) {
  return t;
}
function Wg(t) {
  return t;
}
function On(t, A, e = "min") {
  if (t === A) return t;
  if (A === "float") {
    if (Vt(t)) return t;
  } else if (A === "int") {
    if (BA(t)) return t;
  } else if (A === "uint" && EA(t))
    return t;
  throw new Error(`Invalid ${e} types: ${t}, ${A}`);
}
function Al(t, A) {
  return On(t, A, "max");
}
function tl(t, A, e) {
  if (A === "float") {
    if (Vt(t)) return t;
  } else if (A === "int") {
    if (BA(t)) return t;
  } else if (A === "uint" && EA(t))
    return t;
  throw new Error(`Invalid clamp types: ${t}, ${A}`);
}
function el(t, A, e) {
  if (e === t || e === "float" || e === "bool" && t === "float" || e === "bvec2" && t === "vec2" || e === "bvec3" && t === "vec3" || e === "bvec4" && t === "vec4") return t;
  throw new Error(`Invalid mix types: ${t}, ${A}, ${e}`);
}
function sl(t, A) {
  if (t === A || A === "float") return A;
  throw new Error(`Invalid step types: ${t}, ${A}`);
}
function nl(t, A, e) {
  if (t === A && (t === e || t === "float"))
    return e;
  throw new Error(`Invalid smoothstep types: ${t}, ${A}, ${e}`);
}
function jn(t, A = "isNan") {
  if (t === "float") return "bool";
  if (t === "vec2") return "bvec2";
  if (t === "vec3") return "bvec3";
  if (t === "vec4") return "bvec4";
  throw new Error(`Invalid ${A} types: ${t}`);
}
function il(t) {
  return jn(t, "isInf");
}
const CA = (t, A) => new ti({ a: t, b: A }), Qt = (t, A) => new ei({ a: t, b: A }), iA = (t, A) => new si({ a: t, b: A }), ie = (t, A) => new ni({ a: t, b: A }), Je = (t, A) => new ii({ a: t, b: A }), Xn = (t, A) => new ri({ a: t, b: A }), rl = (t) => new ai({ a: t }).outputs, is = (t) => new oi({ a: t }), al = (t) => new ci({ a: t }), ol = (t) => new gi({ a: t }), cl = (t) => new li({ a: t }), gl = (t) => new Ii({ a: t }), ll = (t) => new ui({ a: t }), Il = (t) => new hi({ a: t }), re = (t) => new Ci({ a: t }), ul = (t, A) => new Bi({ a: t, b: A }), hl = (t) => new Ei({ a: t }), Cl = (t) => new Qi({ a: t }), Bl = (t) => new pi({ a: t }), El = (t) => new fi({ a: t }), Ql = (t) => new di({ a: t }), pl = (t) => new yi({ a: t }), fl = (t) => new mi({ a: t }), dl = (t, A) => new wi({ a: t, b: A }), Wn = (t, A) => new xi({ a: t, b: A }), yl = (t, A, e) => new Si({ a: t, min: A, max: e }), Ai = (t, A, e) => new Di({ a: t, b: A, t: e }), ml = (t, A) => new Mi({ edge: t, x: A }), wl = (t, A, e) => new vi({ edge0: t, edge1: A, x: e }), xl = (t) => new bi({ a: t }), Sl = (t) => new Fi({ a: t });
class ti extends tA {
  constructor({ a: A, b: e }) {
    super({ a: A, b: e, outKey: "sum", outTypeFunc: ns }), this.statements = ({ inputs: s, outputs: n }) => [`${n.sum} = ${s.a} + ${s.b};`];
  }
}
class ei extends tA {
  constructor({ a: A, b: e }) {
    super({ a: A, b: e, outKey: "difference", outTypeFunc: kg }), this.statements = ({ inputs: s, outputs: n }) => [`${n.difference} = ${s.a} - ${s.b};`];
  }
}
class si extends tA {
  constructor({ a: A, b: e }) {
    super({ a: A, b: e, outKey: "product", outTypeFunc: Tg }), this.statements = ({ inputs: s, outputs: n }) => [`${n.product} = ${s.a} * ${s.b};`];
  }
}
class ni extends tA {
  constructor({ a: A, b: e }) {
    super({ a: A, b: e, outKey: "quotient", outTypeFunc: Ug }), this.statements = ({ inputs: s, outputs: n }) => [`${n.quotient} = ${s.a} / ${s.b};`];
  }
}
class ii extends tA {
  constructor({ a: A, b: e }) {
    super({ a: A, b: e, outKey: "remainder", outTypeFunc: Gg }), this.statements = ({ inputs: s, outputs: n }) => [`${n.remainder} = ${s.a} % ${s.b};`];
  }
}
class ri extends tA {
  constructor({ a: A, b: e }) {
    super({ a: A, b: e, outKey: "remainder", outTypeFunc: Rg }), this.statements = ({ inputs: s, outputs: n }) => [`${n.remainder} = mod(${s.a}, ${s.b});`];
  }
}
class ai extends V {
  constructor({ a: A }) {
    const e = { a: $(A) }, s = e.a, n = {
      fract: s,
      integer: s
    };
    super({ inTypes: e, outTypes: n, inputs: { a: A } }), this.statements = ({ inputs: i, outputs: r }) => [`${r.fract} = modf(${i.a}, ${r.integer});`];
  }
}
class oi extends v {
  constructor({ a: A }) {
    super({ a: A, outKey: "neg", outTypeFunc: Yg }), this.statements = ({ inputs: e, outputs: s }) => [`${s.neg} = -${e.a};`];
  }
}
class ci extends v {
  constructor({ a: A }) {
    super({ a: A, outKey: "abs", outTypeFunc: Jg }), this.statements = ({ inputs: e, outputs: s }) => [`${s.abs} = abs(${e.a});`];
  }
}
class gi extends v {
  constructor({ a: A }) {
    super({ a: A, outKey: "sign", outTypeFunc: _g }), this.statements = ({ inputs: e, outputs: s }) => [`${s.sign} = sign(${e.a});`];
  }
}
class li extends v {
  constructor({ a: A }) {
    super({ a: A, outKey: "floor", outTypeFunc: Lg }), this.statements = ({ inputs: e, outputs: s }) => [`${s.floor} = floor(${e.a});`];
  }
}
class Ii extends v {
  constructor({ a: A }) {
    super({ a: A, outKey: "ceil", outTypeFunc: zg }), this.statements = ({ inputs: e, outputs: s }) => [`${s.ceil} = ceil(${e.a});`];
  }
}
class ui extends v {
  constructor({ a: A }) {
    super({ a: A, outKey: "trunc", outTypeFunc: Hg }), this.statements = ({ inputs: e, outputs: s }) => [`${s.trunc} = trunc(${e.a});`];
  }
}
class hi extends v {
  constructor({ a: A }) {
    super({ a: A, outKey: "round", outTypeFunc: qg }), this.statements = ({ inputs: e, outputs: s }) => [`${s.round} = round(${e.a});`];
  }
}
class Ci extends v {
  constructor({ a: A }) {
    super({ a: A, outKey: "fract", outTypeFunc: Kg }), this.statements = ({ inputs: e, outputs: s }) => [`${s.fract} = fract(${e.a});`];
  }
}
class Bi extends tA {
  constructor({ a: A, b: e }) {
    super({ a: A, b: e, outKey: "power", outTypeFunc: $g }), this.statements = ({ inputs: s, outputs: n }) => [`${n.power} = pow(${s.a}, ${s.b});`];
  }
}
class Ei extends v {
  constructor({ a: A }) {
    super({ a: A, outKey: "exp", outTypeFunc: Vg }), this.statements = ({ inputs: e, outputs: s }) => [`${s.exp} = exp(${e.a});`];
  }
}
class Qi extends v {
  constructor({ a: A }) {
    super({ a: A, outKey: "exp2", outTypeFunc: Pg }), this.statements = ({ inputs: e, outputs: s }) => [`${s.exp2} = exp2(${e.a});`];
  }
}
class pi extends v {
  constructor({ a: A }) {
    super({ a: A, outKey: "log", outTypeFunc: Zg }), this.statements = ({ inputs: e, outputs: s }) => [`${s.log} = log(${e.a});`];
  }
}
class fi extends v {
  constructor({ a: A }) {
    super({ a: A, outKey: "log2", outTypeFunc: Og }), this.statements = ({ inputs: e, outputs: s }) => [`${s.log2} = log2(${e.a});`];
  }
}
class di extends v {
  constructor({ a: A }) {
    super({ a: A, outKey: "sqr", outTypeFunc: jg }), this.statements = ({ inputs: e, outputs: s }) => [`${s.sqr} = ${e.a} * ${e.a};`];
  }
}
class yi extends v {
  constructor({ a: A }) {
    super({ a: A, outKey: "sqrt", outTypeFunc: Xg }), this.statements = ({ inputs: e, outputs: s }) => [`${s.sqrt} = sqrt(${e.a});`];
  }
}
class mi extends v {
  constructor({ a: A }) {
    super({ a: A, outKey: "inversesqrt", outTypeFunc: Wg }), this.statements = ({ inputs: e, outputs: s }) => [`${s.inversesqrt} = inversesqrt(${e.a});`];
  }
}
class wi extends tA {
  constructor({ a: A, b: e }) {
    super({ a: A, b: e, outKey: "min", outTypeFunc: On }), this.statements = ({ inputs: s, outputs: n }) => [`${n.min} = min(${s.a}, ${s.b});`];
  }
}
class xi extends tA {
  constructor({ a: A, b: e }) {
    super({ a: A, b: e, outKey: "max", outTypeFunc: Al }), this.statements = ({ inputs: s, outputs: n }) => [`${n.max} = max(${s.a}, ${s.b});`];
  }
}
class Si extends dt {
  constructor({
    a: A,
    min: e,
    max: s
  }) {
    super({
      a: A,
      b: e,
      c: s,
      outKey: "clamp",
      outTypeFunc: tl
    }), this.statements = ({ inputs: n, outputs: i }) => {
      const { a: r, b: a, c: o } = n;
      return [`${i.clamp} = clamp(${r}, ${a}, ${o});`];
    };
  }
}
class Di extends dt {
  constructor({ a: A, b: e, t: s }) {
    super({ a: A, b: e, c: s, outKey: "mix", outTypeFunc: el }), this.statements = ({ inputs: n, outputs: i }) => {
      const { a: r, b: a, c: o } = n;
      return [`${i.mix} = mix(${r}, ${a}, ${o});`];
    };
  }
}
class Mi extends tA {
  constructor({ edge: A, x: e }) {
    super({
      a: A,
      b: e,
      outKey: "step",
      outTypeFunc: sl
    }), this.statements = ({ inputs: s, outputs: n }) => {
      const { a: i, b: r } = s;
      return [`${n.step} = step(${i}, ${r});`];
    };
  }
}
class vi extends dt {
  constructor({
    edge0: A,
    edge1: e,
    x: s
  }) {
    super({
      a: A,
      b: e,
      c: s,
      outKey: "smoothstep",
      outTypeFunc: nl
    }), this.statements = ({ inputs: n, outputs: i }) => {
      const { a: r, b: a, c: o } = n;
      return [`${i.smoothstep} = smoothstep(${r}, ${a}, ${o});`];
    };
  }
}
class bi extends v {
  constructor({ a: A }) {
    super({ a: A, outKey: "isNan", outTypeFunc: jn }), this.statements = ({ inputs: e, outputs: s }) => [`${s.isNan} = isNan(${e.a});`];
  }
}
class Fi extends v {
  constructor({ a: A }) {
    super({ a: A, outKey: "isInf", outTypeFunc: il }), this.statements = ({ inputs: e, outputs: s }) => [`${s.isInf} = isInf(${e.a});`];
  }
}
const Dl = (t, A) => new ki({ a: t, b: A }), Ml = (t, A) => new Ti({ a: t, b: A }), vl = (t, A) => new Ui({ a: t, b: A }), bl = (t) => new Gi({ a: t }), Fl = (t, A) => new Ri({ a: t, b: A }), Nl = (t, A) => new Yi({ a: t, b: A }), kl = (t, A) => new Ji({ a: t, b: A }), Ni = (t, A) => new _i({ a: t, b: A }), Tl = (t, A) => new Li({ a: t, b: A }), Ul = (t, A) => new zi({ a: t, b: A }), Gl = (t) => new Hi({ a: t }), Rl = (t) => new qi({ a: t }), rs = (t, A, e) => new Ki({ cond: t, t: A, f: e }), Yl = (t) => new Vi({ a: t });
class ki extends tA {
  constructor({ a: A, b: e }) {
    super({ a: A, b: e, outTypeFunc: (s, n) => s, outKey: "and" }), this.statements = ({ inputs: s, outputs: n }) => this.outTypes.and === "bool" ? [`${n.and} = ${s.a} && ${s.b};`] : [`${n.and} = ${s.a} & ${s.b};`];
  }
}
class Ti extends tA {
  constructor({ a: A, b: e }) {
    super({ a: A, b: e, outTypeFunc: (s, n) => s, outKey: "or" }), this.statements = ({ inputs: s, outputs: n }) => this.outTypes.or === "bool" ? [`${n.or} = ${s.a} || ${s.b};`] : [`${n.or} = ${s.a} | ${s.b};`];
  }
}
class Ui extends tA {
  constructor({ a: A, b: e }) {
    super({ a: A, b: e, outTypeFunc: (s, n) => s, outKey: "xor" }), this.statements = ({ inputs: s, outputs: n }) => this.outTypes.xor === "bool" ? [`${n.xor} = ${s.a} ^^ ${s.b};`] : [`${n.xor} = ${s.a} ^ ${s.b};`];
  }
}
class Gi extends v {
  constructor({ a: A }) {
    super({ a: A, outTypeFunc: (e) => e, outKey: "not" }), this.statements = ({ inputs: e, outputs: s }) => this.outTypes.not === "bool" ? [`${s.not} = !${e.a};`] : [`${s.not} = not(${e.a});`];
  }
}
class Ri extends tA {
  constructor({ a: A, b: e }) {
    super({
      a: A,
      b: e,
      outTypeFunc: (s, n) => pe(s, "lessThan"),
      outKey: "lessThan"
    }), this.statements = ({ inputs: s, outputs: n }) => this.outTypes.lessThan === "bool" ? [`${n.lessThan} = ${s.a} < ${s.b};`] : [`${n.lessThan} = lessThan(${s.a}, ${s.b});`];
  }
}
class Yi extends tA {
  constructor({ a: A, b: e }) {
    super({
      a: A,
      b: e,
      outTypeFunc: (s, n) => pe(s, "lessThanEqual"),
      outKey: "lessThanEqual"
    }), this.statements = ({ inputs: s, outputs: n }) => this.outTypes.lessThanEqual === "bool" ? [`${n.lessThanEqual} = ${s.a} <= ${s.b};`] : [
      `${n.lessThanEqual} = lessThanEqual(${s.a}, ${s.b});`
    ];
  }
}
class Ji extends tA {
  constructor({ a: A, b: e }) {
    super({
      a: A,
      b: e,
      outTypeFunc: (s, n) => pe(s, "greaterThan"),
      outKey: "greaterThan"
    }), this.statements = ({ inputs: s, outputs: n }) => this.outTypes.greaterThan === "bool" ? [`${n.greaterThan} = ${s.a} > ${s.b};`] : [
      `${n.greaterThan} = greaterThan(${s.a}, ${s.b});`
    ];
  }
}
class _i extends tA {
  constructor({ a: A, b: e }) {
    super({
      a: A,
      b: e,
      outTypeFunc: (s, n) => pe(s, "greaterThanEqual"),
      outKey: "greaterThanEqual"
    }), this.statements = ({ inputs: s, outputs: n }) => this.outTypes.greaterThanEqual === "bool" ? [`${n.greaterThanEqual} = ${s.a} >= ${s.b};`] : [
      `${n.greaterThanEqual} = greaterThanEqual(${s.a}, ${s.b});`
    ];
  }
}
class Li extends tA {
  constructor({ a: A, b: e }) {
    super({ a: A, b: e, outTypeFunc: $i, outKey: "equal" }), this.statements = ({ inputs: s, outputs: n }) => this.outTypes.equal === "bool" ? [`${n.equal} = ${s.a} == ${s.b};`] : [`${n.equal} = equal(${s.a}, ${s.b});`];
  }
}
class zi extends tA {
  constructor({ a: A, b: e }) {
    super({ a: A, b: e, outTypeFunc: Jl, outKey: "notEqual" }), this.statements = ({ inputs: s, outputs: n }) => this.outTypes.notEqual === "bool" ? [`${n.notEqual} = ${s.a} != ${s.b};`] : [`${n.notEqual} = notEqual(${s.a}, ${s.b});`];
  }
}
class Hi extends v {
  constructor({ a: A }) {
    super({ a: A, outTypeFunc: (e) => "bool", outKey: "any" }), this.statements = ({ inputs: e, outputs: s }) => [`${s.any} = any(${e.a});`];
  }
}
class qi extends v {
  constructor({ a: A }) {
    super({ a: A, outTypeFunc: (e) => "bool", outKey: "all" }), this.statements = ({ inputs: e, outputs: s }) => [`${s.all} = all(${e.a});`];
  }
}
class Ki extends dt {
  constructor({
    cond: A,
    t: e,
    f: s
  }) {
    super({
      a: A,
      b: e,
      c: s,
      outKey: "select",
      outTypeFunc: (n, i, r) => i
    }), this.statements = ({ inputs: n, outputs: i }) => {
      const { a: r, b: a, c: o } = n;
      return [`${i.select} = (${r}) ? (${a}) : (${o});`];
    };
  }
}
function pe(t, A) {
  if (ft(t))
    return "bool";
  if (t === "ivec2" || t === "uvec2" || t === "vec2")
    return "bvec2";
  if (t === "ivec3" || t === "uvec3" || t === "vec3")
    return "bvec3";
  if (t === "ivec4" || t === "uvec4" || t === "vec4")
    return "bvec4";
  throw new Error(`Invalid ${A} type: ${t}`);
}
function $i(t, A = "equal") {
  if (ft(t))
    return "bool";
  if (pt(t))
    return t;
  if (t === "ivec2" || t === "uvec2" || t === "vec2")
    return "bvec2";
  if (t === "ivec3" || t === "uvec3" || t === "vec3")
    return "bvec3";
  if (t === "ivec4" || t === "uvec4" || t === "vec4")
    return "bvec4";
  throw new Error(`Invalid ${A} type: ${t}`);
}
function Jl(t) {
  return $i(t, "notEqual");
}
function _l(t) {
  if (pt(t))
    return "bool";
  if (BA(t))
    return "int";
  if (EA(t))
    return "uint";
  throw new Error(`Invalid compXor type: ${t}`);
}
class Vi extends v {
  constructor({ a: A }) {
    const e = _l($(A));
    super({ a: A, outTypeFunc: (s) => e, outKey: "compXor" }), this.statements = ({ inputs: s, outputs: n }) => {
      if (ft(this.outTypes.compXor))
        return [`${n.compXor} = ${s.a};`];
      const r = (Ft(e) ? ["x", "y"] : Nt(e) ? ["x", "y", "z"] : ["x", "y", "z", "w"]).map((o) => `${s.a}.${o}`), a = pt(e) ? "^^" : "^";
      return [`${n.compXor} = ${r.join(` ${a} `)};`];
    };
  }
}
const Ll = (t) => new Ar({ value: t }), zl = (t) => new tr({ value: t }), Hl = (t) => new er({ value: t }), Pi = (t) => new sr({ value: t }), ql = (t) => new nr({ value: t }), Kl = (t) => new ir({ value: t }), $l = (t) => new rr({ value: t }), Vl = (t) => new ar({ value: t }), Pl = (t) => new or({ value: t }), Zl = (t) => new cr({ value: t }), Ol = (t) => new gr({ value: t }), jl = (t) => new lr({ value: t }), Xl = (t) => new Ir({ value: t }), Zi = (t) => new ur({ value: t }), Bt = (t) => new hr({ value: t }), Oi = (t) => new Cr({ value: t }), Wl = (t) => new Br({ value: t }), AI = (t) => new Er({ value: t }), tI = (t) => new Qr({ value: t }), ji = (t) => new pr({ value: t }), Xi = (t) => new fr({ value: t }), eI = (t) => new dr({ value: t }), sI = (t) => new yr({ value: t }), nI = (t) => new mr({ value: t }), iI = (t) => new wr({ value: t }), rI = (t) => new xr({ value: t }), aI = (t) => new Sr({ value: t }), Wi = (t) => new Dr({ value: t }), oI = (t) => new Mr({ value: t }), _e = (t) => new vr({ value: t });
class cA extends v {
  constructor({
    value: A,
    outType: e,
    outKey: s
  }) {
    super({ a: A, outTypeFunc: () => e, outKey: s }), this.statements = ({ inputs: n, outputs: i }) => [
      `${i[s]} = ${Ls(e)}(${n.a});`
    ];
  }
}
class Ar extends cA {
  constructor({
    value: A
  }) {
    super({ value: A, outType: "bool", outKey: "bool" });
  }
}
class tr extends cA {
  constructor({
    value: A
  }) {
    super({ value: A, outType: "int", outKey: "int" });
  }
}
class er extends cA {
  constructor({
    value: A
  }) {
    super({ value: A, outType: "uint", outKey: "uint" });
  }
}
class sr extends cA {
  constructor({
    value: A
  }) {
    super({ value: A, outType: "float", outKey: "float" });
  }
}
class nr extends cA {
  constructor({
    value: A
  }) {
    super({ value: A, outType: "bvec2", outKey: "bvec2" });
  }
}
class ir extends cA {
  constructor({
    value: A
  }) {
    super({ value: A, outType: "bvec3", outKey: "bvec3" });
  }
}
class rr extends cA {
  constructor({
    value: A
  }) {
    super({ value: A, outType: "bvec4", outKey: "bvec4" });
  }
}
class ar extends cA {
  constructor({
    value: A
  }) {
    super({ value: A, outType: "ivec2", outKey: "ivec2" });
  }
}
class or extends cA {
  constructor({
    value: A
  }) {
    super({ value: A, outType: "ivec3", outKey: "ivec3" });
  }
}
class cr extends cA {
  constructor({
    value: A
  }) {
    super({ value: A, outType: "ivec4", outKey: "ivec4" });
  }
}
class gr extends cA {
  constructor({
    value: A
  }) {
    super({ value: A, outType: "uvec2", outKey: "uvec2" });
  }
}
class lr extends cA {
  constructor({
    value: A
  }) {
    super({ value: A, outType: "uvec3", outKey: "uvec3" });
  }
}
class Ir extends cA {
  constructor({
    value: A
  }) {
    super({ value: A, outType: "uvec4", outKey: "uvec4" });
  }
}
class ur extends cA {
  constructor({
    value: A
  }) {
    super({ value: A, outType: "vec2", outKey: "vec2" });
  }
}
class hr extends cA {
  constructor({
    value: A
  }) {
    super({ value: A, outType: "vec3", outKey: "vec3" });
  }
}
class Cr extends cA {
  constructor({
    value: A
  }) {
    super({ value: A, outType: "vec4", outKey: "vec4" });
  }
}
class Br extends cA {
  constructor({
    value: A
  }) {
    super({ value: A, outType: "mat2", outKey: "mat2" });
  }
}
class Er extends cA {
  constructor({
    value: A
  }) {
    super({ value: A, outType: "mat3", outKey: "mat3" });
  }
}
class Qr extends cA {
  constructor({
    value: A
  }) {
    super({ value: A, outType: "mat4", outKey: "mat4" });
  }
}
class pr extends v {
  constructor({ value: A }) {
    super({ a: A, outKey: "int", outTypeFunc: () => "int" }), this.statements = ({ inputs: e, outputs: s }) => [`${s.int} = floatBitsToInt(${e.a});`];
  }
}
class fr extends v {
  constructor({ value: A }) {
    super({ a: A, outKey: "uint", outTypeFunc: () => "uint" }), this.statements = ({ inputs: e, outputs: s }) => [`${s.uint} = floatBitsToUint(${e.a});`];
  }
}
class dr extends v {
  constructor({ value: A }) {
    super({ a: A, outKey: "float", outTypeFunc: () => "float" }), this.statements = ({ inputs: e, outputs: s }) => [`${s.float} = intBitsToFloat(${e.a});`];
  }
}
class yr extends v {
  constructor({ value: A }) {
    super({ a: A, outKey: "float", outTypeFunc: () => "float" }), this.statements = ({ inputs: e, outputs: s }) => [`${s.float} = uintBitsToFloat(${e.a});`];
  }
}
class mr extends v {
  constructor({ value: A }) {
    super({ a: A, outKey: "uint", outTypeFunc: () => "uint" }), this.statements = ({ inputs: e, outputs: s }) => [`${s.uint} = packSnorm2x16(${e.a});`];
  }
}
class wr extends v {
  constructor({ value: A }) {
    super({ a: A, outKey: "vec2", outTypeFunc: () => "vec2" }), this.statements = ({ inputs: e, outputs: s }) => [`${s.vec2} = unpackSnorm2x16(${e.a});`];
  }
}
class xr extends v {
  constructor({ value: A }) {
    super({ a: A, outKey: "uint", outTypeFunc: () => "uint" }), this.statements = ({ inputs: e, outputs: s }) => [`${s.uint} = packUnorm2x16(${e.a});`];
  }
}
class Sr extends v {
  constructor({ value: A }) {
    super({ a: A, outKey: "vec2", outTypeFunc: () => "vec2" }), this.statements = ({ inputs: e, outputs: s }) => [`${s.vec2} = unpackUnorm2x16(${e.a});`];
  }
}
class Dr extends v {
  constructor({ value: A }) {
    super({ a: A, outKey: "uint", outTypeFunc: () => "uint" }), this.statements = ({ inputs: e, outputs: s }) => [`${s.uint} = packHalf2x16(${e.a});`];
  }
}
class Mr extends v {
  constructor({ value: A }) {
    super({ a: A, outKey: "vec2", outTypeFunc: () => "vec2" }), this.statements = ({ inputs: e, outputs: s }) => [`${s.vec2} = unpackHalf2x16(${e.a});`];
  }
}
class vr extends v {
  constructor({ value: A }) {
    super({ a: A, outKey: "rgba8", outTypeFunc: () => "vec4" }), this.statements = ({ inputs: e, outputs: s }) => [
      `uvec4 uRgba = uvec4(${e.a} & 0xffu, (${e.a} >> 8u) & 0xffu, (${e.a} >> 16u) & 0xffu, (${e.a} >> 24u) & 0xffu);`,
      `${s.rgba8} = vec4(uRgba) / 255.0;`
    ];
  }
}
const cI = (t) => new kr({ a: t }), gI = (t, A) => new Tr({ a: t, b: A }), br = (t, A) => new Ur({ a: t, b: A }), lI = (t, A) => new Gr({ a: t, b: A }), Fr = (t) => new Rr({ a: t }), II = (t, A, e) => new _r({ a: t, b: A, c: e }), uI = (t, A) => new Lr({ incident: t, normal: A }), hI = (t, A, e) => new zr({ incident: t, normal: A, eta: e }), Et = (t) => new Pr({ vector: t }), qA = ({
  vector: t,
  vectorType: A,
  x: e,
  y: s,
  z: n,
  w: i,
  r,
  g: a,
  b: o,
  a: g
}) => new Zr({ vector: t, vectorType: A, x: e, y: s, z: n, w: i, r, g: a, b: o, a: g }), CI = (t) => new Yr({ a: t }), Nr = (t, A) => new Jr({ a: t, b: A }), BI = (t, A) => new Or({ vector: t, select: A }), EI = (t, A) => new Hr({ a: t, b: A }), QI = (t, A) => new qr({ a: t, b: A }), pI = (t) => new Kr({ a: t }), fI = (t) => new $r({ a: t }), dI = (t) => new Vr({ a: t });
class kr extends v {
  constructor({ a: A }) {
    super({ a: A, outTypeFunc: (e) => "float", outKey: "length" }), this.statements = ({ inputs: e, outputs: s }) => [
      `${s.length} = length(${e.a});`
    ];
  }
}
class Tr extends tA {
  constructor({ a: A, b: e }) {
    super({ a: A, b: e, outKey: "distance", outTypeFunc: (s, n) => "float" }), this.statements = ({ inputs: s, outputs: n }) => [
      `${n.distance} = distance(${s.a}, ${s.b});`
    ];
  }
}
class Ur extends tA {
  constructor({ a: A, b: e }) {
    super({ a: A, b: e, outKey: "dot", outTypeFunc: (s, n) => "float" }), this.statements = ({ inputs: s, outputs: n }) => [
      `${n.dot} = dot(${s.a}, ${s.b});`
    ];
  }
}
class Gr extends tA {
  constructor({ a: A, b: e }) {
    super({ a: A, b: e, outKey: "cross", outTypeFunc: (s, n) => "vec3" }), this.statements = ({ inputs: s, outputs: n }) => [
      `${n.cross} = cross(${s.a}, ${s.b});`
    ];
  }
}
class Rr extends v {
  constructor({ a: A }) {
    super({ a: A, outTypeFunc: (e) => e, outKey: "normalize" }), this.statements = ({ inputs: e, outputs: s }) => [
      `${s.normalize} = normalize(${e.a});`
    ];
  }
}
function yI(t) {
  if (t === "vec3")
    return "vec2";
  if (t === "vec4")
    return "vec3";
  throw new Error("Invalid type");
}
class Yr extends v {
  constructor({ a: A }) {
    super({
      a: A,
      outTypeFunc: (e) => yI(e),
      outKey: "projected"
    }), this.statements = ({ inputs: e, outputs: s }) => {
      if (this.inTypes.a === "vec3")
        return [`${s.projected} = ${e.a}.xy / ${e.a}.z;`];
      if (this.inTypes.a === "vec4")
        return [`${s.projected} = ${e.a}.xyz / ${e.a}.w;`];
      throw new Error("Invalid type");
    };
  }
}
function mI(t) {
  if (t === "float") return "vec2";
  if (t === "vec2") return "vec3";
  if (t === "vec3") return "vec4";
  throw new Error("Invalid type");
}
class Jr extends tA {
  constructor({ a: A, b: e }) {
    const s = $(A), n = mI(s);
    super({ a: A, b: e, outKey: "extend", outTypeFunc: () => n }), this.statements = ({ inputs: i, outputs: r }) => [
      `${r.extend} = ${n}(${i.a}, ${i.b});`
    ];
  }
}
class _r extends dt {
  constructor({ a: A, b: e, c: s }) {
    super({
      a: A,
      b: e,
      c: s,
      outKey: "forward",
      outTypeFunc: (n, i, r) => n
    }), this.statements = ({ inputs: n, outputs: i }) => [
      `${i.forward} = faceforward(${n.a}, ${n.b}, ${n.c});`
    ];
  }
}
class Lr extends tA {
  constructor({
    incident: A,
    normal: e
  }) {
    super({
      a: A,
      b: e,
      outKey: "reflection",
      outTypeFunc: (s, n) => s
    }), this.statements = ({ inputs: s, outputs: n }) => [
      `${n.reflection} = reflect(${s.a}, ${s.b});`
    ];
  }
}
class zr extends dt {
  constructor({
    incident: A,
    normal: e,
    eta: s
  }) {
    super({
      a: A,
      b: e,
      c: s,
      outKey: "refraction",
      outTypeFunc: (n, i, r) => n
    }), this.statements = ({ inputs: n, outputs: i }) => [
      `${i.refraction} = refract(${n.a}, ${n.b}, ${n.c});`
    ];
  }
}
class Hr extends tA {
  constructor({ a: A, b: e }) {
    super({ a: A, b: e, outKey: "product", outTypeFunc: (s, n) => s }), this.statements = ({ inputs: s, outputs: n }) => [
      `${n.product} = matrixCompMult(${A}, ${e});`
    ];
  }
}
function wI(t, A) {
  if (t === "vec2") {
    if (A === "vec2") return "mat2";
    if (A === "vec3") return "mat3x2";
    if (A === "vec4") return "mat4x2";
  }
  if (t === "vec3") {
    if (A === "vec2") return "mat2x3";
    if (A === "vec3") return "mat3";
    if (A === "vec4") return "mat4x3";
  }
  if (t === "vec4") {
    if (A === "vec2") return "mat2x4";
    if (A === "vec3") return "mat3x4";
    if (A === "vec4") return "mat4";
  }
  throw new Error(`Invalid outer type: ${t}, ${A}`);
}
class qr extends tA {
  constructor({ a: A, b: e }) {
    super({ a: A, b: e, outKey: "outer", outTypeFunc: wI }), this.statements = ({ inputs: s, outputs: n }) => [
      `${n.outer} = outerProduct(${s.a}, ${s.b});`
    ];
  }
}
function xI(t) {
  if (t === "mat2") return "mat2";
  if (t === "mat3") return "mat3";
  if (t === "mat4") return "mat4";
  if (t === "mat2x2") return "mat2x2";
  if (t === "mat2x3") return "mat3x2";
  if (t === "mat2x4") return "mat4x2";
  if (t === "mat3x2") return "mat2x3";
  if (t === "mat3x3") return "mat3x3";
  if (t === "mat3x4") return "mat4x3";
  if (t === "mat4x2") return "mat2x4";
  if (t === "mat4x3") return "mat3x4";
  if (t === "mat4x4") return "mat4x4";
  throw new Error(`Invalid transpose type: ${t}`);
}
class Kr extends v {
  constructor({ a: A }) {
    super({ a: A, outKey: "transpose", outTypeFunc: xI }), this.statements = ({ inputs: e, outputs: s }) => [
      `${s.transpose} = transpose(${e.a});`
    ];
  }
}
class $r extends v {
  constructor({ a: A }) {
    super({ a: A, outKey: "det", outTypeFunc: (e) => "float" }), this.statements = ({ inputs: e, outputs: s }) => [
      `${s.det} = determinant(${e.a});`
    ];
  }
}
class Vr extends v {
  constructor({ a: A }) {
    super({ a: A, outKey: "inverse", outTypeFunc: (e) => e }), this.statements = ({ inputs: e, outputs: s }) => [
      `${s.inverse} = inverse(${A});`
    ];
  }
}
function SI(t) {
  const A = (e) => e;
  switch (t) {
    case "vec2":
      return A({ x: "float", y: "float", r: "float", g: "float" });
    case "vec3":
      return A({
        x: "float",
        y: "float",
        z: "float",
        r: "float",
        g: "float",
        b: "float"
      });
    case "vec4":
      return A({
        x: "float",
        y: "float",
        z: "float",
        w: "float",
        r: "float",
        g: "float",
        b: "float",
        a: "float"
      });
    case "ivec2":
      return A({ x: "int", y: "int", r: "int", g: "int" });
    case "ivec3":
      return A({
        x: "int",
        y: "int",
        z: "int",
        r: "int",
        g: "int",
        b: "int"
      });
    case "ivec4":
      return A({
        x: "int",
        y: "int",
        z: "int",
        w: "int",
        r: "int",
        g: "int",
        b: "int",
        a: "int"
      });
    case "uvec2":
      return A({ x: "uint", y: "uint", r: "uint", g: "uint" });
    case "uvec3":
      return A({
        x: "uint",
        y: "uint",
        z: "uint",
        r: "uint",
        g: "uint",
        b: "uint"
      });
    case "uvec4":
      return A({
        x: "uint",
        y: "uint",
        z: "uint",
        w: "uint",
        r: "uint",
        g: "uint",
        b: "uint",
        a: "uint"
      });
    default:
      throw new Error(`Invalid vector type: ${t}`);
  }
}
class Pr extends V {
  constructor({ vector: A }) {
    const s = { vector: $(A) }, n = SI(s.vector);
    super({ inTypes: s, outTypes: n, inputs: { vector: A } }), this.statements = ({ inputs: i, outputs: r }) => {
      const { x: a, y: o, z: g, w: l, r: c, g: I, b: h, a: B } = r, { vector: C } = i;
      return [
        a ? `${a} = ${C}.x;` : null,
        o ? `${o} = ${C}.y;` : null,
        g ? `${g} = ${C}.z;` : null,
        l ? `${l} = ${C}.w;` : null,
        c ? `${c} = ${C}.r;` : null,
        I ? `${I} = ${C}.g;` : null,
        h ? `${h} = ${C}.b;` : null,
        B ? `${B} = ${C}.a;` : null
      ].filter(Boolean);
    };
  }
}
class Zr extends V {
  constructor({
    vector: A,
    vectorType: e,
    x: s,
    y: n,
    z: i,
    w: r,
    r: a,
    g: o,
    b: g,
    a: l
  }) {
    if (!A && !e)
      throw new Error("Either vector or vectorType must be provided");
    const c = e ?? $(A), I = Ys(c), h = Js(c), B = {
      vector: c,
      x: I,
      y: I,
      r: I,
      g: I
    }, C = { vector: A, x: s, y: n, r: a, g: o };
    h >= 3 && (Object.assign(B, { z: I, b: I }), Object.assign(C, { z: i, b: g })), h >= 4 && (Object.assign(B, { w: I, a: I }), Object.assign(C, { w: r, a: l })), super({ inTypes: B, outTypes: { vector: c }, inputs: C }), this.statements = ({ inputs: E, outputs: Q }) => {
      const { vector: p } = Q, {
        vector: f,
        x: d,
        y: m,
        z: D,
        w: x,
        r: y,
        g: w,
        b: k,
        a: M
      } = E, S = [
        `${p}.x = ${d ?? y ?? (f ? `${f}.x` : Yt(I))};`,
        `${p}.y = ${m ?? w ?? (f ? `${f}.y` : Yt(I))};`
      ];
      return h >= 3 && S.push(
        `${p}.z = ${D ?? k ?? (f ? `${f}.z` : Yt(I))};`
      ), h >= 4 && S.push(
        `${p}.w = ${x ?? M ?? (f ? `${f}.w` : Yt(I))};`
      ), S;
    };
  }
  dynoOut() {
    return new K(
      this,
      "vector"
    );
  }
}
function DI(t, A) {
  let e = null;
  if (Vt(t) ? e = A.length === 1 ? "float" : A.length === 2 ? "vec2" : A.length === 3 ? "vec3" : A.length === 4 ? "vec4" : null : BA(t) ? e = A.length === 1 ? "int" : A.length === 2 ? "ivec2" : A.length === 3 ? "ivec3" : A.length === 4 ? "ivec4" : null : EA(t) && (e = A.length === 1 ? "uint" : A.length === 2 ? "uvec2" : A.length === 3 ? "uvec3" : A.length === 4 ? "uvec4" : null), e == null)
    throw new Error(`Invalid swizzle: ${A}`);
  return e;
}
class Or extends v {
  constructor({ vector: A, select: e }) {
    super({
      a: A,
      outKey: "swizzle",
      outTypeFunc: (s) => DI(s, e)
    }), this.statements = ({ inputs: s, outputs: n }) => [
      `${n.swizzle} = ${s.a}.${e};`
    ];
  }
}
const MI = (t, A, e) => new sa({ index: t, from: A, to: e }), vI = (t) => new Tt({ value: t }), bI = (t) => new NA({ state: t }), FI = (t) => new kA({ state: t }), jr = (t) => new na({ value: t }), Xr = (t) => new ia({ value: t }), Wr = (t) => new ra({ value: t }), Aa = (t) => new aa({ value: t }), NI = (t) => new oa({ value: t }), kI = (t) => new ca({ value: t }), ta = (t) => new ga({ value: t }), Le = (t) => new la({ value: t }), ea = (t, A, e) => new Ia({ z: t, zNear: A, zFar: e }).outputs.depth;
class sa extends V {
  constructor({
    from: A,
    to: e,
    index: s
  }) {
    super({
      inTypes: { from: "int", to: "int", index: "int" },
      outTypes: { index: "int" },
      inputs: { from: A, to: e, index: s },
      statements: ({ inputs: n, outputs: i }) => [
        `${i.index} = ${n.index} - ${n.from} + ${n.to};`
      ]
    });
  }
  dynoOut() {
    return new K(this, "index");
  }
}
class NA extends V {
  constructor({ state: A }) {
    const e = $(A);
    super({
      inTypes: { state: e },
      outTypes: { state: "uint" },
      inputs: { state: A },
      globals: () => [
        uA(`
          uint pcg_next(uint state) {
            return state * 747796405u + 2891336453u;
          }
        `)
      ],
      statements: ({ inputs: s, outputs: n }) => {
        const i = e === "uint" ? `${s.state}` : e === "int" ? `uint(${s.state})` : `floatBitsToUint(${s.state})`;
        return [`${n.state} = pcg_next(${i});`];
      }
    });
  }
  dynoOut() {
    return new K(this, "state");
  }
}
class kA extends V {
  constructor({ state: A }) {
    super({
      inTypes: { state: "uint" },
      outTypes: { hash: "uint" },
      inputs: { state: A },
      globals: () => [
        uA(`
          uint pcg_hash(uint state) {
            uint hash = ((state >> ((state >> 28u) + 4u)) ^ state) * 277803737u;
            return (hash >> 22u) ^ hash;
          }
        `)
      ],
      statements: ({ inputs: e, outputs: s }) => [
        `${s.hash} = pcg_hash(${e.state});`
      ]
    });
  }
  dynoOut() {
    return new K(this, "hash");
  }
}
class Tt extends V {
  constructor({ value: A }) {
    const e = $(A), s = _s(e);
    super({
      inTypes: { value: e },
      outTypes: { state: "uint" },
      inputs: { value: A },
      globals: () => [
        uA(`
          uint pcg_mix(uint value) {
            return value;
          }
          uint pcg_mix(uvec2 value) {
            return value.x + 0x9e3779b9u * value.y;
          }
          uint pcg_mix(uvec3 value) {
            return value.x + 0x9e3779b9u * value.y + 0x85ebca6bu * value.z;
          }
          uint pcg_mix(uvec4 value) {
            return value.x + 0x9e3779b9u * value.y + 0x85ebca6bu * value.z + 0xc2b2ae35u * value.w;
          }
        `)
      ],
      statements: ({ inputs: n, outputs: i }) => {
        const r = EA(e) ? `${n.value}` : BA(e) ? `${s}(${n.value})` : `floatBitsToUint(${n.value})`;
        return [
          `${s} bits = ${r};`,
          `${i.state} = pcg_mix(bits);`
        ];
      }
    });
  }
  dynoOut() {
    return new K(this, "state");
  }
}
class na extends $A {
  constructor({ value: A }) {
    super({
      inTypes: { value: $(A) },
      outTypes: { hash: "uint" },
      inputs: { value: A },
      construct: ({ value: e }) => {
        if (!e)
          throw new Error("value is required");
        let s = new Tt({ value: e }).outputs.state;
        return s = new NA({ state: s }).outputs.state, new kA({ state: s }).outputs;
      }
    });
  }
  dynoOut() {
    return new K(this, "hash");
  }
}
class ia extends $A {
  constructor({ value: A }) {
    super({
      inTypes: { value: $(A) },
      outTypes: { hash: "uvec2" },
      inputs: { value: A },
      construct: ({ value: e }) => {
        if (!e)
          throw new Error("value is required");
        let s = new Tt({ value: e }).outputs.state;
        s = new NA({ state: s }).outputs.state;
        const n = new kA({ state: s }).outputs.hash;
        s = new NA({ state: s }).outputs.state;
        const i = new kA({ state: s }).outputs.hash;
        return { hash: qA({ vectorType: "uvec2", x: n, y: i }) };
      }
    });
  }
  dynoOut() {
    return new K(this, "hash");
  }
}
class ra extends $A {
  constructor({ value: A }) {
    super({
      inTypes: { value: $(A) },
      outTypes: { hash: "uvec3" },
      inputs: { value: A },
      construct: ({ value: e }) => {
        if (!e)
          throw new Error("value is required");
        let s = new Tt({ value: e }).outputs.state;
        s = new NA({ state: s }).outputs.state;
        const n = new kA({ state: s }).outputs.hash;
        s = new NA({ state: s }).outputs.state;
        const i = new kA({ state: s }).outputs.hash;
        s = new NA({ state: s }).outputs.state;
        const r = new kA({ state: s }).outputs.hash;
        return { hash: qA({ vectorType: "uvec3", x: n, y: i, z: r }) };
      }
    });
  }
  dynoOut() {
    return new K(this, "hash");
  }
}
class aa extends $A {
  constructor({ value: A }) {
    super({
      inTypes: { value: $(A) },
      outTypes: { hash: "uvec4" },
      inputs: { value: A },
      construct: ({ value: e }) => {
        if (!e)
          throw new Error("value is required");
        let s = new Tt({ value: e }).outputs.state;
        s = new NA({ state: s }).outputs.state;
        const n = new kA({ state: s }).outputs.hash;
        s = new NA({ state: s }).outputs.state;
        const i = new kA({ state: s }).outputs.hash;
        s = new NA({ state: s }).outputs.state;
        const r = new kA({ state: s }).outputs.hash;
        s = new NA({ state: s }).outputs.state;
        const a = new kA({ state: s }).outputs.hash;
        return { hash: qA({ vectorType: "uvec4", x: n, y: i, z: r, w: a }) };
      }
    });
  }
  dynoOut() {
    return new K(this, "hash");
  }
}
class oa extends $A {
  constructor({ value: A }) {
    super({
      inTypes: { value: $(A) },
      outTypes: { hash: "float" },
      inputs: { value: A },
      construct: ({ value: e }) => {
        if (!e)
          throw new Error("value is required");
        const s = jr(e);
        return { hash: iA(Pi(s), J("float", 1 / 2 ** 32)) };
      }
    });
  }
  dynoOut() {
    return new K(this, "hash");
  }
}
class ca extends $A {
  constructor({ value: A }) {
    super({
      inTypes: { value: $(A) },
      outTypes: { hash: "vec2" },
      inputs: { value: A },
      construct: ({ value: e }) => {
        if (!e)
          throw new Error("value is required");
        const s = Xr(e);
        return { hash: iA(Zi(s), J("float", 1 / 2 ** 32)) };
      }
    });
  }
  dynoOut() {
    return new K(this, "hash");
  }
}
class ga extends $A {
  constructor({ value: A }) {
    super({
      inTypes: { value: $(A) },
      outTypes: { hash: "vec3" },
      inputs: { value: A },
      construct: ({ value: e }) => {
        if (!e)
          throw new Error("value is required");
        const s = Wr(e);
        return { hash: iA(Bt(s), J("float", 1 / 2 ** 32)) };
      }
    });
  }
  dynoOut() {
    return new K(this, "hash");
  }
}
class la extends $A {
  constructor({ value: A }) {
    super({
      inTypes: { value: $(A) },
      outTypes: { hash: "vec4" },
      inputs: { value: A },
      construct: ({ value: e }) => {
        if (!e)
          throw new Error("value is required");
        const s = Aa(e);
        return { hash: iA(Oi(s), J("float", 1 / 2 ** 32)) };
      }
    });
  }
  dynoOut() {
    return new K(this, "hash");
  }
}
class Ia extends V {
  constructor({
    z: A,
    zNear: e,
    zFar: s
  }) {
    super({
      inTypes: { z: "float", zNear: "float", zFar: "float" },
      outTypes: { depth: "float" },
      inputs: { z: A, zNear: e, zFar: s },
      statements: ({ inputs: n, outputs: i }) => [
        `float clamped = clamp(${n.z}, ${n.zNear}, ${n.zFar});`,
        `${i.depth} = (log2(clamped + 1.0) - log2(${n.zNear} + 1.0)) / (log2(${n.zFar} + 1.0) - log2(${n.zNear} + 1.0));`
      ]
    });
  }
  dynoOut() {
    return new K(this, "depth");
  }
}
const ua = (t, {
  scale: A,
  scales: e,
  rotate: s,
  translate: n
}) => new Ca({ position: t, scale: A, scales: e, rotate: s, translate: n }).outputs.position, ha = (t, {
  scale: A,
  scales: e,
  rotate: s
}) => new Ba({ dir: t, scale: A, scales: e, rotate: s }).outputs.dir, TI = (t, { rotate: A }) => new Ea({ quaternion: t, rotate: A }).outputs.quaternion;
class Ca extends V {
  constructor({
    position: A,
    scale: e,
    scales: s,
    rotate: n,
    translate: i
  }) {
    super({
      inTypes: {
        position: "vec3",
        scale: "float",
        scales: "vec3",
        rotate: "vec4",
        translate: "vec3"
      },
      outTypes: { position: "vec3" },
      inputs: { position: A, scale: e, scales: s, rotate: n, translate: i },
      statements: ({ inputs: r, outputs: a }) => {
        const { position: o } = a;
        if (!o)
          return [];
        const { scale: g, scales: l, rotate: c, translate: I } = r;
        return [
          `${o} = ${r.position ?? "vec3(0.0, 0.0, 0.0)"};`,
          g ? `${o} *= ${g};` : null,
          l ? `${o} *= ${l};` : null,
          c ? `${o} = quatVec(${c}, ${o});` : null,
          I ? `${o} += ${I};` : null
        ].filter(Boolean);
      }
    });
  }
}
class Ba extends V {
  constructor({
    dir: A,
    scale: e,
    scales: s,
    rotate: n
  }) {
    super({
      inTypes: { dir: "vec3", scale: "float", scales: "vec3", rotate: "vec4" },
      outTypes: { dir: "vec3" },
      inputs: { dir: A, scale: e, scales: s, rotate: n },
      statements: ({ inputs: i, outputs: r }) => {
        const { dir: a } = r;
        if (!a)
          return [];
        const { scale: o, scales: g, rotate: l } = i;
        return [
          `${a} = ${i.dir ?? "vec3(0.0, 0.0, 0.0)"};`,
          o ? `${a} *= ${o};` : null,
          g ? `${a} *= ${g};` : null,
          l ? `${a} = quatVec(${l}, ${a});` : null
        ].filter(Boolean);
      }
    });
  }
}
class Ea extends V {
  constructor({
    quaternion: A,
    rotate: e
  }) {
    super({
      inTypes: { quaternion: "vec4", rotate: "vec4" },
      outTypes: { quaternion: "vec4" },
      inputs: { quaternion: A, rotate: e },
      statements: ({ inputs: s, outputs: n }) => {
        const { quaternion: i } = n;
        return i ? [
          `${i} = ${s.quaternion ?? "vec4(0.0, 0.0, 0.0, 1.0)"};`,
          e ? `${i} = quatQuat(${s.rotate}, ${i});` : null
        ].filter(Boolean) : [];
      }
    });
  }
}
const UI = () => {
  throw new Error("Not implemented");
}, GI = () => {
  throw new Error("Not implemented");
}, RI = () => {
  throw new Error("Not implemented");
}, YI = () => {
  throw new Error("Not implemented");
}, JI = () => {
  throw new Error("Not implemented");
}, _I = () => {
  throw new Error("Not implemented");
}, LI = (t, A) => new Qa({ texture: t, lod: A }), zI = (t, A, e) => new pa({ texture: t, coord: A, bias: e }), HI = (t, A, e) => new fa({ texture: t, coord: A, lod: e });
class Qa extends V {
  constructor({ texture: A, lod: e }) {
    const s = $(A);
    super({
      inTypes: { texture: s, lod: "int" },
      outTypes: { size: da(s) },
      inputs: { texture: A, lod: e },
      statements: ({ inputs: n, outputs: i }) => [
        `${i.size} = textureSize(${n.texture}, ${n.lod ?? "0"});`
      ]
    });
  }
  dynoOut() {
    return new K(this, "size");
  }
}
class pa extends V {
  constructor({
    texture: A,
    coord: e,
    bias: s
  }) {
    const n = $(A);
    super({
      inTypes: {
        texture: n,
        coord: qI(n),
        bias: "float"
      },
      outTypes: { sample: ya(n) },
      inputs: { texture: A, coord: e, bias: s },
      statements: ({ inputs: i, outputs: r }) => [
        `${r.sample} = texture(${i.texture}, ${i.coord}${i.bias ? `, ${i.bias}` : ""});`
      ]
    });
  }
  dynoOut() {
    return new K(this, "sample");
  }
}
class fa extends V {
  constructor({
    texture: A,
    coord: e,
    lod: s
  }) {
    const n = $(A);
    super({
      inTypes: {
        texture: n,
        coord: da(n),
        lod: "int"
      },
      outTypes: { texel: ya(n) },
      inputs: { texture: A, coord: e, lod: s },
      statements: ({ inputs: i, outputs: r }) => [
        `${r.texel} = texelFetch(${i.texture}, ${i.coord}, ${i.lod ?? "0"});`
      ]
    });
  }
  dynoOut() {
    return new K(this, "texel");
  }
}
function da(t) {
  switch (t) {
    case "sampler2D":
    case "usampler2D":
    case "isampler2D":
    case "samplerCube":
    case "usamplerCube":
    case "isamplerCube":
    case "sampler2DShadow":
    case "samplerCubeShadow":
      return "ivec2";
    case "sampler3D":
    case "usampler3D":
    case "isampler3D":
    case "sampler2DArray":
    case "usampler2DArray":
    case "isampler2DArray":
    case "sampler2DArrayShadow":
      return "ivec3";
    default:
      throw new Error(`Invalid texture type: ${t}`);
  }
}
function qI(t) {
  switch (t) {
    case "sampler2D":
    case "usampler2D":
    case "isampler2D":
      return "vec2";
    case "sampler3D":
    case "usampler3D":
    case "isampler3D":
    case "samplerCube":
    case "usamplerCube":
    case "isamplerCube":
    case "sampler2DArray":
    case "usampler2DArray":
    case "isampler2DArray":
    case "sampler2DShadow":
      return "vec3";
    case "samplerCubeShadow":
    case "sampler2DArrayShadow":
      return "vec4";
    default:
      throw new Error(`Invalid texture type: ${t}`);
  }
}
function ya(t) {
  switch (t) {
    case "sampler2D":
    case "sampler2DArray":
    case "sampler3D":
    case "samplerCube":
    case "sampler2DShadow":
      return "vec4";
    case "usampler2D":
    case "usampler2DArray":
    case "usampler3D":
    case "usamplerCube":
      return "uvec4";
    case "isampler2D":
    case "isampler2DArray":
    case "isampler3D":
    case "isamplerCube":
      return "ivec4";
    case "samplerCubeShadow":
    case "sampler2DArrayShadow":
      return "float";
    default:
      throw new Error(`Invalid texture type: ${t}`);
  }
}
const KI = (t) => new ma({ degrees: t }), $I = (t) => new wa({ radians: t }), ze = (t) => new xa({ radians: t }), VI = (t) => new Sa({ radians: t }), PI = (t) => new Da({ radians: t }), ZI = (t) => new Ma({ sin: t }), OI = (t) => new va({ cos: t }), jI = (t) => new ba({ tan: t }), XI = (t, A) => new Fa({ y: t, x: A }), WI = (t) => new Na({ x: t }), Au = (t) => new ka({ x: t }), tu = (t) => new Ta({ x: t }), eu = (t) => new Ua({ x: t }), su = (t) => new Ga({ x: t }), nu = (t) => new Ra({ x: t });
class ma extends v {
  constructor({ degrees: A }) {
    super({ a: A, outTypeFunc: (e) => e, outKey: "radians" }), this.statements = ({ inputs: e, outputs: s }) => [
      `${s.radians} = radians(${e.a});`
    ];
  }
}
class wa extends v {
  constructor({ radians: A }) {
    super({ a: A, outTypeFunc: (e) => e, outKey: "degrees" }), this.statements = ({ inputs: e, outputs: s }) => [
      `${s.degrees} = degrees(${e.a});`
    ];
  }
}
class xa extends v {
  constructor({ radians: A }) {
    super({ a: A, outTypeFunc: (e) => e, outKey: "sin" }), this.statements = ({ inputs: e, outputs: s }) => [
      `${s.sin} = sin(${e.a});`
    ];
  }
}
class Sa extends v {
  constructor({ radians: A }) {
    super({ a: A, outTypeFunc: (e) => e, outKey: "cos" }), this.statements = ({ inputs: e, outputs: s }) => [
      `${s.cos} = cos(${e.a});`
    ];
  }
}
class Da extends v {
  constructor({ radians: A }) {
    super({ a: A, outTypeFunc: (e) => e, outKey: "tan" }), this.statements = ({ inputs: e, outputs: s }) => [
      `${s.tan} = tan(${e.a});`
    ];
  }
}
class Ma extends v {
  constructor({ sin: A }) {
    super({ a: A, outTypeFunc: (e) => e, outKey: "asin" }), this.statements = ({ inputs: e, outputs: s }) => [
      `${s.asin} = asin(${e.a});`
    ];
  }
}
class va extends v {
  constructor({ cos: A }) {
    super({ a: A, outTypeFunc: (e) => e, outKey: "acos" }), this.statements = ({ inputs: e, outputs: s }) => [
      `${s.acos} = acos(${e.a});`
    ];
  }
}
class ba extends v {
  constructor({ tan: A }) {
    super({ a: A, outTypeFunc: (e) => e, outKey: "atan" }), this.statements = ({ inputs: e, outputs: s }) => [
      `${s.atan} = atan(${e.a});`
    ];
  }
}
class Fa extends tA {
  constructor({ y: A, x: e }) {
    super({
      a: A,
      b: e,
      outTypeFunc: (s, n) => s,
      outKey: "atan2"
    }), this.statements = ({ inputs: s, outputs: n }) => [
      `${n.atan2} = atan2(${s.a}, ${s.b});`
    ];
  }
}
class Na extends v {
  constructor({ x: A }) {
    super({ a: A, outTypeFunc: (e) => e, outKey: "sinh" }), this.statements = ({ inputs: e, outputs: s }) => [
      `${s.sinh} = sinh(${e.a});`
    ];
  }
}
class ka extends v {
  constructor({ x: A }) {
    super({ a: A, outTypeFunc: (e) => e, outKey: "cosh" }), this.statements = ({ inputs: e, outputs: s }) => [
      `${s.cosh} = cosh(${e.a});`
    ];
  }
}
class Ta extends v {
  constructor({ x: A }) {
    super({ a: A, outTypeFunc: (e) => e, outKey: "tanh" }), this.statements = ({ inputs: e, outputs: s }) => [
      `${s.tanh} = tanh(${e.a});`
    ];
  }
}
class Ua extends v {
  constructor({ x: A }) {
    super({ a: A, outTypeFunc: (e) => e, outKey: "asinh" }), this.statements = ({ inputs: e, outputs: s }) => [
      `${s.asinh} = asinh(${e.a});`
    ];
  }
}
class Ga extends v {
  constructor({ x: A }) {
    super({ a: A, outTypeFunc: (e) => e, outKey: "acosh" }), this.statements = ({ inputs: e, outputs: s }) => [
      `${s.acosh} = acosh(${e.a});`
    ];
  }
}
class Ra extends v {
  constructor({ x: A }) {
    super({ a: A, outTypeFunc: (e) => e, outKey: "atanh" }), this.statements = ({ inputs: e, outputs: s }) => [
      `${s.atanh} = atanh(${e.a});`
    ];
  }
}
const bh = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  Abs: ci,
  Acos: va,
  Acosh: Ga,
  Add: ti,
  All: qi,
  And: ki,
  Any: Hi,
  Asin: Ma,
  Asinh: Ua,
  Atan: ba,
  Atan2: Fa,
  Atanh: Ra,
  BVec2: nr,
  BVec3: ir,
  BVec4: rr,
  BinaryOp: tA,
  Bool: Ar,
  Ceil: Ii,
  Clamp: Si,
  Combine: Zr,
  CombineGsplat: Os,
  CompMult: Hr,
  CompXor: Vi,
  Compilation: Hs,
  Cos: Sa,
  Cosh: ka,
  Cross: Gr,
  Degrees: wa,
  Determinant: $r,
  Distance: Tr,
  Div: ni,
  Dot: Ur,
  Dyno: V,
  DynoBlock: $A,
  DynoBool: oe,
  DynoBvec2: sn,
  DynoBvec3: an,
  DynoBvec4: gn,
  DynoConst: zs,
  DynoFloat: ht,
  DynoInt: qt,
  DynoIsampler2D: Sn,
  DynoIsampler2DArray: Mn,
  DynoIsampler3D: Fn,
  DynoIsamplerCube: Tn,
  DynoIvec2: rn,
  DynoIvec3: cn,
  DynoIvec4: In,
  DynoLiteral: Mt,
  DynoMat2: un,
  DynoMat2x2: hn,
  DynoMat2x3: Cn,
  DynoMat2x4: Bn,
  DynoMat3: En,
  DynoMat3x2: Qn,
  DynoMat3x3: pn,
  DynoMat3x4: fn,
  DynoMat4: dn,
  DynoMat4x2: yn,
  DynoMat4x3: mn,
  DynoMat4x4: wn,
  DynoOutput: K,
  DynoProgram: es,
  DynoProgramTemplate: ss,
  DynoRemapIndex: sa,
  DynoSampler2D: Dn,
  DynoSampler2DArray: vn,
  DynoSampler2DArrayShadow: Rn,
  DynoSampler2DShadow: Gn,
  DynoSampler3D: Nn,
  DynoSamplerCube: Un,
  DynoSamplerCubeShadow: Yn,
  DynoUint: en,
  DynoUniform: N,
  DynoUsampler2D: xn,
  DynoUsampler2DArray: zt,
  DynoUsampler3D: bn,
  DynoUsamplerCube: kn,
  DynoUvec2: nn,
  DynoUvec3: on,
  DynoUvec4: ln,
  DynoValue: it,
  DynoVec2: Lt,
  DynoVec3: bt,
  DynoVec4: kt,
  Equal: Li,
  Exp: Ei,
  Exp2: Qi,
  ExtendVec: Jr,
  FaceForward: _r,
  Float: sr,
  FloatBitsToInt: pr,
  FloatBitsToUint: fr,
  Floor: li,
  Fract: Ci,
  GreaterThan: Ji,
  GreaterThanEqual: _i,
  Gsplat: AA,
  GsplatNormal: Xs,
  Hash: na,
  Hash2: ia,
  Hash3: ra,
  Hash4: aa,
  HashFloat: oa,
  HashVec2: ca,
  HashVec3: ga,
  HashVec4: la,
  IMod: ii,
  IVec2: ar,
  IVec3: or,
  IVec4: cr,
  Int: tr,
  IntBitsToFloat: dr,
  Inverse: Vr,
  InverseSqrt: mi,
  IsInf: Fi,
  IsNan: bi,
  Length: kr,
  LessThan: Ri,
  LessThanEqual: Yi,
  Log: pi,
  Log2: fi,
  Mat2: Br,
  Mat3: Er,
  Mat4: Qr,
  Max: xi,
  Min: wi,
  Mix: Di,
  Mod: ri,
  Modf: ai,
  Mul: si,
  Neg: oi,
  Normalize: Rr,
  NormalizedDepth: Ia,
  Not: Gi,
  NotEqual: zi,
  NumPackedSplats: Ks,
  Or: Ti,
  Outer: qr,
  OutputPackedSplat: tn,
  OutputRgba8: As,
  PackHalf2x16: Dr,
  PackSnorm2x16: mr,
  PackUnorm2x16: xr,
  PcgHash: kA,
  PcgMix: Tt,
  PcgNext: NA,
  Pow: Bi,
  ProjectH: Yr,
  Radians: ma,
  ReadPackedSplat: Vs,
  ReadPackedSplatRange: Ps,
  ReflectVec: Lr,
  RefractVec: zr,
  Round: hi,
  Select: Ki,
  Sign: gi,
  SimpleCast: cA,
  Sin: xa,
  Sinh: Na,
  Smoothstep: vi,
  Split: Pr,
  SplitGsplat: Zs,
  Sqr: di,
  Sqrt: yi,
  Step: Mi,
  Sub: ei,
  Swizzle: Or,
  TPackedSplats: Ot,
  Tan: Da,
  Tanh: Ta,
  TexelFetch: fa,
  Texture: pa,
  TextureSize: Qa,
  TransformDir: Ba,
  TransformGsplat: Ws,
  TransformPosition: Ca,
  TransformQuaternion: Ea,
  Transpose: Kr,
  TrinaryOp: dt,
  Trunc: ui,
  UVec2: gr,
  UVec3: lr,
  UVec4: Ir,
  Uint: er,
  UintBitsToFloat: yr,
  UintToRgba8: vr,
  UnaryOp: v,
  UnpackHalf2x16: Mr,
  UnpackSnorm2x16: wr,
  UnpackUnorm2x16: Sr,
  Vec2: ur,
  Vec3: hr,
  Vec4: Cr,
  Xor: Ui,
  abs: al,
  acos: OI,
  acosh: su,
  add: CA,
  all: Rl,
  and: Dl,
  any: Gl,
  arrayIndex: JI,
  arrayLength: _I,
  asin: ZI,
  asinh: eu,
  atan: jI,
  atan2: XI,
  atanh: nu,
  bool: Ll,
  bvec2: ql,
  bvec3: Kl,
  bvec4: $l,
  ceil: gl,
  clamp: yl,
  combine: qA,
  combineGsplat: rt,
  comment: YI,
  compMult: EI,
  compXor: Yl,
  cos: VI,
  cosh: Au,
  cross: lI,
  defineGsplat: vA,
  defineGsplatNormal: js,
  definePackedSplats: Ee,
  degrees: $I,
  determinant: fI,
  distance: gI,
  div: ie,
  dot: br,
  dyno: Zt,
  dynoBlock: MA,
  dynoBool: cc,
  dynoBvec2: Ic,
  dynoBvec3: Bc,
  dynoBvec4: pc,
  dynoConst: J,
  dynoDeclare: Xe,
  dynoFloat: LA,
  dynoFor: RI,
  dynoIf: UI,
  dynoInt: lc,
  dynoIsampler2D: Gc,
  dynoIsampler2DArray: Jc,
  dynoIsampler3D: zc,
  dynoIsamplerCube: Kc,
  dynoIvec2: hc,
  dynoIvec3: Qc,
  dynoIvec4: dc,
  dynoLiteral: ae,
  dynoMat2: mc,
  dynoMat2x2: wc,
  dynoMat2x3: xc,
  dynoMat2x4: Sc,
  dynoMat3: Dc,
  dynoMat3x2: Mc,
  dynoMat3x3: vc,
  dynoMat3x4: bc,
  dynoMat4: Fc,
  dynoMat4x2: Nc,
  dynoMat4x3: kc,
  dynoMat4x4: Tc,
  dynoSampler2D: Rc,
  dynoSampler2DArray: _c,
  dynoSampler2DArrayShadow: Pc,
  dynoSampler2DShadow: Vc,
  dynoSampler3D: Hc,
  dynoSamplerCube: $c,
  dynoSamplerCubeShadow: Zc,
  dynoSwitch: GI,
  dynoUint: gc,
  dynoUsampler2D: Uc,
  dynoUsampler2DArray: Yc,
  dynoUsampler3D: Lc,
  dynoUsamplerCube: qc,
  dynoUvec2: uc,
  dynoUvec3: Ec,
  dynoUvec4: fc,
  dynoVec2: Cc,
  dynoVec3: tt,
  dynoVec4: yc,
  equal: Tl,
  exp: hl,
  exp2: Cl,
  extendVec: Nr,
  faceforward: II,
  float: Pi,
  floatBitsToInt: ji,
  floatBitsToUint: Xi,
  floor: cl,
  fract: re,
  greaterThan: kl,
  greaterThanEqual: Ni,
  gsplatNormal: Ge,
  hash: jr,
  hash2: Xr,
  hash3: Wr,
  hash4: Aa,
  hashFloat: NI,
  hashVec2: kI,
  hashVec3: ta,
  hashVec4: Le,
  imod: Je,
  int: zl,
  intBitsToFloat: eI,
  inverse: dI,
  inversesqrt: fl,
  isAllFloatType: at,
  isBoolType: pt,
  isFloatType: Vt,
  isInf: Sl,
  isIntType: BA,
  isMat2: ot,
  isMat3: ct,
  isMat4: gt,
  isMatFloatType: Rs,
  isNan: xl,
  isScalarType: ft,
  isUintType: EA,
  isVector2Type: Ft,
  isVector3Type: Nt,
  isVector4Type: Pt,
  isVectorType: tc,
  ivec2: Vl,
  ivec3: Pl,
  ivec4: Zl,
  length: cI,
  lessThan: Fl,
  lessThanEqual: Nl,
  literalNegOne: ic,
  literalOne: nc,
  literalZero: Yt,
  log: Bl,
  log2: El,
  mat2: Wl,
  mat3: AI,
  mat4: tI,
  max: Wn,
  min: dl,
  mix: Ai,
  mod: Xn,
  modf: rl,
  mul: iA,
  neg: is,
  normalize: Fr,
  normalizedDepth: ea,
  not: bl,
  notEqual: Ul,
  numPackedSplats: rc,
  numberAsFloat: H,
  numberAsInt: rA,
  numberAsUint: aA,
  or: Ml,
  outer: QI,
  outputPackedSplat: An,
  outputRgba8: ac,
  packHalf2x16: Wi,
  packSnorm2x16: nI,
  packUnorm2x16: rI,
  pcgHash: FI,
  pcgMix: vI,
  pcgNext: bI,
  pow: ul,
  projectH: CI,
  radians: KI,
  readPackedSplat: vt,
  readPackedSplatRange: qs,
  reflectVec: uI,
  refractVec: hI,
  remapIndex: MI,
  round: Il,
  sameSizeIvec: sc,
  sameSizeUvec: _s,
  sameSizeVec: ec,
  select: rs,
  sign: ol,
  sin: ze,
  sinh: WI,
  smoothstep: wl,
  split: Et,
  splitGsplat: ut,
  sqr: Ql,
  sqrt: pl,
  step: ml,
  sub: Qt,
  swizzle: BI,
  tan: PI,
  tanh: tu,
  texelFetch: HI,
  texture: zI,
  textureSize: LI,
  transformDir: ha,
  transformGsplat: We,
  transformPos: ua,
  transformQuat: TI,
  transpose: pI,
  trunc: ll,
  typeLiteral: Ls,
  uint: Hl,
  uintBitsToFloat: sI,
  uintToRgba8: _e,
  uniform: oc,
  unindent: uA,
  unindentLines: GA,
  unpackHalf2x16: oI,
  unpackSnorm2x16: iI,
  unpackUnorm2x16: aI,
  uvec2: Ol,
  uvec3: jl,
  uvec4: Xl,
  valType: $,
  vec2: Zi,
  vec3: Bt,
  vec4: Oi,
  vectorDim: Js,
  vectorElementType: Ys,
  xor: vl
}, Symbol.toStringTag, { value: "Module" }));
var iu = `precision highp float;
precision highp int;
precision highp sampler2D;
precision highp usampler2D;
precision highp isampler2D;
precision highp sampler2DArray;
precision highp usampler2DArray;
precision highp isampler2DArray;
precision highp sampler3D;
precision highp usampler3D;
precision highp isampler3D;

#include <splatDefines>

uniform uint targetLayer;
uniform int targetBase;
uniform int targetCount;

out vec4 target;

{{ GLOBALS }}

void computeReadback(int index) {
    {{ STATEMENTS }}
}

void main() {
    int targetIndex = int(targetLayer << SPLAT_TEX_LAYER_BITS) + int(uint(gl_FragCoord.y) << SPLAT_TEX_WIDTH_BITS) + int(gl_FragCoord.x);
    int index = targetIndex - targetBase;

    if ((index >= 0) && (index < targetCount)) {
        computeReadback(index);
    } else {
        target = vec4(0.0, 0.0, 0.0, 0.0);
    }
}`;
const FA = class FA {
  constructor({ renderer: A } = {}) {
    this.renderer = A, this.capacity = 0, this.count = 0;
  }
  dispose() {
    this.target && (this.target.dispose(), this.target = void 0);
  }
  // Ensure we have a buffer large enough for the readback of count indices.
  // Pass in previous bufer of the desired type.
  ensureBuffer(A, e) {
    const n = Math.ceil(Math.max(1, A) / Z) * Z * 4;
    if (e.byteLength >= n)
      return e;
    const i = new ArrayBuffer(n);
    if (e instanceof ArrayBuffer)
      return i;
    const r = e.constructor;
    return new r(i);
  }
  // Ensure our render target is large enough for the readback of capacity indices.
  ensureCapacity(A) {
    const { width: e, height: s, depth: n, maxSplats: i } = wA(A);
    (!this.target || i > this.capacity) && (this.dispose(), this.capacity = i, this.target = new u.WebGLArrayRenderTarget(e, s, n, {
      depthBuffer: !1,
      stencilBuffer: !1,
      generateMipmaps: !1,
      magFilter: u.NearestFilter,
      minFilter: u.NearestFilter
    }), this.target.texture.format = u.RGBAFormat, this.target.texture.type = u.UnsignedByteType, this.target.texture.internalFormat = "RGBA8", this.target.scissorTest = !0);
  }
  // Get a program and THREE.RawShaderMaterial for a given Rgba8Readback,
  // generating it if necessary and caching the result.
  prepareProgramMaterial(A) {
    let e = FA.readbackProgram.get(A);
    if (!e) {
      const n = MA(
        { index: "int" },
        { rgba8: "vec4" },
        ({ index: i }) => (A.inputs.index = i, { rgba8: new As({ rgba8: A.outputs.rgba8 }) })
      );
      FA.programTemplate || (FA.programTemplate = new ss(iu)), e = new es({
        graph: n,
        inputs: { index: "index" },
        outputs: { rgba8: "target" },
        template: FA.programTemplate
      }), Object.assign(e.uniforms, {
        targetLayer: { value: 0 },
        targetBase: { value: 0 },
        targetCount: { value: 0 }
      }), FA.readbackProgram.set(A, e);
    }
    const s = e.prepareMaterial();
    return FA.fullScreenQuad.material = s, { program: e, material: s };
  }
  saveRenderState(A) {
    return {
      xrEnabled: A.xr.enabled,
      autoClear: A.autoClear
    };
  }
  resetRenderState(A, e) {
    A.setRenderTarget(null), A.xr.enabled = e.xrEnabled, A.autoClear = e.autoClear;
  }
  process({
    count: A,
    material: e
  }) {
    const s = this.renderer;
    if (!s)
      throw new Error("No renderer");
    if (!this.target)
      throw new Error("No target");
    const n = Z * HA;
    e.uniforms.targetBase.value = 0, e.uniforms.targetCount.value = A;
    let i = 0;
    for (; i < A; ) {
      const r = Math.floor(i / n), a = r * n, o = Math.min(
        HA,
        Math.ceil((A - a) / Z)
      );
      e.uniforms.targetLayer.value = r, this.target.scissor.set(0, 0, Z, o), s.setRenderTarget(this.target, r), s.xr.enabled = !1, s.autoClear = !1, FA.fullScreenQuad.render(s), i += Z * o;
    }
    this.count = A;
  }
  async read({
    readback: A
  }) {
    const e = this.renderer;
    if (!e)
      throw new Error("No renderer");
    if (!this.target)
      throw new Error("No target");
    const s = Math.ceil(this.count / Z) * Z;
    if (A.byteLength < s * 4)
      throw new Error(
        `Readback buffer too small: ${A.byteLength} < ${s * 4}`
      );
    const n = new Uint8Array(
      A instanceof ArrayBuffer ? A : A.buffer
    ), i = Z * HA;
    let r = 0;
    const a = [];
    for (; r < this.count; ) {
      const o = Math.floor(r / i), g = o * i, l = Math.min(
        HA,
        Math.ceil((this.count - g) / Z)
      );
      e.setRenderTarget(this.target, o);
      const c = Z * l * 4, I = n.subarray(
        g * 4,
        g * 4 + c
      ), h = e == null ? void 0 : e.readRenderTargetPixelsAsync(
        this.target,
        0,
        0,
        Z,
        l,
        I
      );
      a.push(h), r += Z * l;
    }
    return Promise.all(a).then(() => A);
  }
  // Perform render operation to run the Rgba8Readback program
  // but don't perform the readback yet.
  render({
    reader: A,
    count: e,
    renderer: s
  }) {
    if (this.renderer = s || this.renderer, !this.renderer)
      throw new Error("No renderer");
    this.ensureCapacity(e);
    const { program: n, material: i } = this.prepareProgramMaterial(A);
    n.update();
    const r = this.saveRenderState(this.renderer);
    this.process({ count: e, material: i }), this.resetRenderState(this.renderer, r);
  }
  // Perform a readback of the render target, returning a buffer of the
  // given type.
  async readback({
    readback: A
  }) {
    if (!this.renderer)
      throw new Error("No renderer");
    const e = this.saveRenderState(this.renderer), s = this.read({ readback: A });
    return this.resetRenderState(this.renderer, e), s;
  }
  // Perform a render and readback operation for the given Rgba8Readback,
  // and readback buffer (call ensureBuffer first).
  async renderReadback({
    reader: A,
    count: e,
    renderer: s,
    readback: n
  }) {
    if (this.renderer = s || this.renderer, !this.renderer)
      throw new Error("No renderer");
    this.ensureCapacity(e);
    const { program: i, material: r } = this.prepareProgramMaterial(A);
    i.update();
    const a = this.saveRenderState(this.renderer);
    this.process({ count: e, material: r });
    const o = this.read({ readback: n });
    return this.resetRenderState(this.renderer, a), o;
  }
  getTexture() {
    var A;
    return (A = this.target) == null ? void 0 : A.texture;
  }
};
FA.programTemplate = null, FA.readbackProgram = /* @__PURE__ */ new Map(), FA.fullScreenQuad = new ys(
  new u.RawShaderMaterial({ visible: !1 })
);
let ge = FA;
const lA = class lA {
  constructor(A = {}) {
    this.capacity = 0, this.count = 0, this.array = null, this.readback = null, this.source = null, this.needsUpdate = !0, this.dyno = new N({
      key: "rgbaArray",
      type: Ya,
      globals: () => [Ja],
      value: {
        texture: lA.getEmpty(),
        count: 0
      },
      update: (e) => {
        var s;
        return e.texture = ((s = this.readback) == null ? void 0 : s.getTexture()) ?? this.source ?? lA.getEmpty(), e.count = this.count, e;
      }
    }), A.array ? (this.array = A.array, this.capacity = Math.floor(this.array.length / 4), this.capacity = Math.floor(this.capacity / Z) * Z, this.count = Math.min(
      this.capacity,
      A.count ?? Number.POSITIVE_INFINITY
    )) : (this.capacity = A.capacity ?? 0, this.count = 0);
  }
  // Free up resources
  dispose() {
    this.readback && (this.readback.dispose(), this.readback = null), this.source && (this.source.dispose(), this.source = null);
  }
  // Ensure that our array is large enough to hold capacity RGBA8 values.
  ensureCapacity(A) {
    var e;
    if (!this.array || A > (((e = this.array) == null ? void 0 : e.length) ?? 0) / 4) {
      this.capacity = wA(A).maxSplats;
      const s = new Uint8Array(this.capacity * 4);
      this.array && s.set(this.array), this.array = s;
    }
    return this.array;
  }
  // Get the THREE.DataArrayTexture from either the readback or the source.
  getTexture() {
    var e;
    let A = (e = this.readback) == null ? void 0 : e.getTexture();
    return (this.source || this.array) && (A = this.maybeUpdateSource()), A ?? lA.getEmpty();
  }
  // Create or get a THREE.DataArrayTexture from the data array.
  maybeUpdateSource() {
    if (!this.array)
      throw new Error("No array");
    if (this.needsUpdate || !this.source) {
      if (this.needsUpdate = !1, this.source) {
        const { width: A, height: e, depth: s } = this.source.image;
        this.capacity !== A * e * s && (this.source.dispose(), this.source = null);
      }
      if (this.source)
        this.array.buffer !== this.source.image.data.buffer && (this.source.image.data = new Uint8Array(this.array.buffer));
      else {
        const { width: A, height: e, depth: s } = wA(this.capacity);
        this.source = new u.DataArrayTexture(
          this.array,
          A,
          e,
          s
        ), this.source.format = u.RGBAFormat, this.source.type = u.UnsignedByteType, this.source.internalFormat = "RGBA8", this.source.needsUpdate = !0;
      }
      this.source.needsUpdate = !0;
    }
    return this.source;
  }
  // Generate the RGBA8 values from a Rgba8Readback dyno program.
  render({
    reader: A,
    count: e,
    renderer: s
  }) {
    this.readback || (this.readback = new ge({ renderer: s })), this.readback.render({ reader: A, count: e, renderer: s }), this.capacity = this.readback.capacity, this.count = this.readback.count;
  }
  // Extract the RGBA8 values from a PackedSplats collection.
  fromPackedSplats({
    packedSplats: A,
    base: e,
    count: s,
    renderer: n
  }) {
    const { dynoSplats: i, dynoBase: r, dynoCount: a, reader: o } = lA.makeDynos();
    return i.packedSplats = A, r.value = e, a.value = s, this.render({ reader: o, count: s, renderer: n }), this;
  }
  // Read back the RGBA8 values from the readback buffer.
  async read() {
    if (!this.readback)
      throw new Error("No readback");
    return (!this.array || this.array.length < this.count * 4) && (this.array = new Uint8Array(this.capacity * 4)), (await this.readback.readback({ readback: this.array })).subarray(0, this.count * 4);
  }
  // Can be used where you need an uninitialized THREE.DataArrayTexture like
  // a uniform you will update with the result of this.getTexture() later.
  static getEmpty() {
    if (!lA.emptySource) {
      const A = new Uint8Array(4);
      lA.emptySource = new u.DataArrayTexture(A, 1, 1, 1), lA.emptySource.format = u.RGBAFormat, lA.emptySource.type = u.UnsignedByteType, lA.emptySource.internalFormat = "RGBA8", lA.emptySource.needsUpdate = !0;
    }
    return lA.emptySource;
  }
  // Create a dyno program that can extract RGBA8 values from a PackedSplats
  static makeDynos() {
    if (!lA.dynos) {
      const A = new os(), e = new qt({ value: 0 }), s = new qt({ value: 0 }), n = MA(
        { index: "int" },
        { rgba8: "vec4" },
        ({ index: i }) => {
          if (!i)
            throw new Error("index is undefined");
          i = CA(i, e);
          const r = qs(
            A,
            i,
            e,
            s
          );
          return { rgba8: ut(r).outputs.rgba };
        }
      );
      lA.dynos = { dynoSplats: A, dynoBase: e, dynoCount: s, reader: n };
    }
    return lA.dynos;
  }
};
lA.emptySource = null, lA.dynos = null;
let He = lA;
const Ya = { type: "RgbaArray" }, Ja = uA(`
  struct RgbaArray {
    sampler2DArray texture;
    int count;
  };
`);
function ru(t, A) {
  return new V({
    inTypes: { rgba: Ya, index: "int" },
    outTypes: { rgba: "vec4" },
    inputs: { rgba: t, index: A },
    globals: () => [Ja],
    statements: ({ inputs: s, outputs: n }) => GA(`
        if ((index >= 0) && (index < ${s.rgba}.count)) {
          ${n.rgba} = texelFetch(${s.rgba}.texture, splatTexCoord(index), 0);
        } else {
          ${n.rgba} = vec4(0.0, 0.0, 0.0, 0.0);
        }
      `)
  }).outputs.rgba;
}
var au = /* @__PURE__ */ ((t) => (t.ALL = "all", t.PLANE = "plane", t.SPHERE = "sphere", t.BOX = "box", t.ELLIPSOID = "ellipsoid", t.CYLINDER = "cylinder", t.CAPSULE = "capsule", t.INFINITE_CONE = "infinite_cone", t))(au || {});
function ou(t) {
  switch (t) {
    case "all":
      return 0;
    case "plane":
      return 1;
    case "sphere":
      return 2;
    case "box":
      return 3;
    case "ellipsoid":
      return 4;
    case "cylinder":
      return 5;
    case "capsule":
      return 6;
    case "infinite_cone":
      return 7;
    default:
      throw new Error(`Unknown SDF type: ${t}`);
  }
}
var cu = /* @__PURE__ */ ((t) => (t.MULTIPLY = "multiply", t.SET_RGB = "set_rgb", t.ADD_RGBA = "add_rgba", t))(cu || {});
function gu(t) {
  switch (t) {
    case "multiply":
      return 0;
    case "set_rgb":
      return 1;
    case "add_rgba":
      return 2;
    default:
      throw new Error(`Unknown blend mode: ${t}`);
  }
}
class lu extends u.Object3D {
  constructor(A = {}) {
    super();
    const { type: e, invert: s, opacity: n, color: i, displace: r, radius: a } = A;
    this.type = e ?? "sphere", this.invert = s ?? !1, this.opacity = n ?? 1, this.color = i ?? new u.Color(1, 1, 1), this.displace = r ?? new u.Vector3(0, 0, 0), this.radius = a ?? 0;
  }
}
const Be = class Be extends u.Object3D {
  constructor(A = {}) {
    const {
      name: e,
      rgbaBlendMode: s = "multiply",
      sdfSmooth: n = 0,
      softEdge: i = 0,
      invert: r = !1,
      sdfs: a = null
    } = A;
    super(), this.rgbaBlendMode = s, this.sdfSmooth = n, this.softEdge = i, this.invert = r, this.sdfs = a, this.ordering = Be.nextOrdering++, this.name = e ?? `Edit ${this.ordering}`;
  }
  addSdf(A) {
    this.sdfs == null && (this.sdfs = []), this.sdfs.includes(A) || this.sdfs.push(A);
  }
  removeSdf(A) {
    this.sdfs != null && (this.sdfs = this.sdfs.filter((e) => e !== A));
  }
};
Be.nextOrdering = 1;
let le = Be;
class Iu {
  constructor({ maxSdfs: A, maxEdits: e }) {
    this.maxSdfs = Math.max(16, A ?? 0), this.numSdfs = 0, this.sdfData = new Uint32Array(this.maxSdfs * 8 * 4), this.sdfFloatData = new Float32Array(this.sdfData.buffer), this.sdfTexture = this.newSdfTexture(this.sdfData, this.maxSdfs), this.dynoSdfArray = new N({
      key: "sdfArray",
      type: _a,
      globals: () => [La],
      value: {
        numSdfs: 0,
        sdfTexture: this.sdfTexture
      },
      update: (s) => (s.numSdfs = this.numSdfs, s.sdfTexture = this.sdfTexture, s)
    }), this.maxEdits = Math.max(16, e ?? 0), this.numEdits = 0, this.editData = new Uint32Array(this.maxEdits * 4), this.editFloatData = new Float32Array(this.editData.buffer), this.dynoNumEdits = new qt({ value: 0 }), this.dynoEdits = this.newEdits(this.editData, this.maxEdits);
  }
  newSdfTexture(A, e) {
    const s = new u.DataTexture(
      A,
      8,
      e,
      u.RGBAIntegerFormat,
      u.UnsignedIntType
    );
    return s.internalFormat = "RGBA32UI", s.needsUpdate = !0, s;
  }
  newEdits(A, e) {
    return new N({
      key: "edits",
      type: "uvec4",
      count: e,
      globals: () => [za],
      value: A
    });
  }
  // Ensure our SDF texture and edits uniform array have enough capacity.
  // Reallocate if not.
  ensureCapacity({
    maxSdfs: A,
    maxEdits: e
  }) {
    let s = !1;
    return A > this.sdfTexture.image.height && (this.sdfTexture.dispose(), this.maxSdfs = Math.max(this.maxSdfs * 2, A), this.sdfData = new Uint32Array(this.maxSdfs * 8 * 4), this.sdfFloatData = new Float32Array(this.sdfData.buffer), this.sdfTexture = this.newSdfTexture(this.sdfData, this.maxSdfs)), e > (this.dynoEdits.count ?? 0) && (this.maxEdits = Math.max(this.maxEdits * 2, e), this.editData = new Uint32Array(this.maxEdits * 4), this.editFloatData = new Float32Array(this.editData.buffer), this.dynoEdits = this.newEdits(this.editData, this.maxEdits), s = !0), s;
  }
  updateEditData(A, e) {
    const s = this.editData[A] !== e;
    return this.editData[A] = e, s;
  }
  updateEditFloatData(A, e) {
    yt[0] = e;
    const s = this.editFloatData[A] !== yt[0];
    return s && (this.editFloatData[A] = yt[0]), s;
  }
  encodeEdit(A, {
    sdfFirst: e,
    sdfCount: s,
    invert: n,
    rgbaBlendMode: i,
    softEdge: r,
    sdfSmooth: a
  }) {
    const o = A * 4;
    let g = !1;
    return g = this.updateEditData(o + 0, i | (n ? 256 : 0)) || g, g = this.updateEditData(o + 1, e | s << 16) || g, g = this.updateEditFloatData(o + 2, r) || g, g = this.updateEditFloatData(o + 3, a) || g, g;
  }
  updateSdfData(A, e) {
    const s = this.sdfData[A] !== e;
    return this.sdfData[A] = e, s;
  }
  updateSdfFloatData(A, e) {
    yt[0] = e;
    const s = this.sdfFloatData[A] !== yt[0];
    return s && (this.sdfFloatData[A] = yt[0]), s;
  }
  encodeSdf(A, {
    sdfType: e,
    invert: s,
    center: n,
    quaternion: i,
    scale: r,
    sizes: a
  }, o) {
    const g = A * 32, l = e | (s ? 256 : 0);
    let c = !1;
    c = this.updateSdfFloatData(g + 0, (n == null ? void 0 : n.x) ?? 0) || c, c = this.updateSdfFloatData(g + 1, (n == null ? void 0 : n.y) ?? 0) || c, c = this.updateSdfFloatData(g + 2, (n == null ? void 0 : n.z) ?? 0) || c, c = this.updateSdfData(g + 3, l) || c, c = this.updateSdfFloatData(g + 4, (i == null ? void 0 : i.x) ?? 0) || c, c = this.updateSdfFloatData(g + 5, (i == null ? void 0 : i.y) ?? 0) || c, c = this.updateSdfFloatData(g + 6, (i == null ? void 0 : i.z) ?? 0) || c, c = this.updateSdfFloatData(g + 7, (i == null ? void 0 : i.w) ?? 0) || c, c = this.updateSdfFloatData(g + 8, (r == null ? void 0 : r.x) ?? 0) || c, c = this.updateSdfFloatData(g + 9, (r == null ? void 0 : r.y) ?? 0) || c, c = this.updateSdfFloatData(g + 10, (r == null ? void 0 : r.z) ?? 0) || c, c = this.updateSdfData(g + 11, 0) || c, c = this.updateSdfFloatData(g + 12, (a == null ? void 0 : a.x) ?? 0) || c, c = this.updateSdfFloatData(g + 13, (a == null ? void 0 : a.y) ?? 0) || c, c = this.updateSdfFloatData(g + 14, (a == null ? void 0 : a.z) ?? 0) || c, c = this.updateSdfFloatData(g + 15, (a == null ? void 0 : a.w) ?? 0) || c;
    const I = Math.min(4, o.length);
    for (let h = 0; h < I; ++h) {
      const B = g + 16 + h * 4;
      c = this.updateSdfFloatData(B + 0, o[h].x) || c, c = this.updateSdfFloatData(B + 1, o[h].y) || c, c = this.updateSdfFloatData(B + 2, o[h].z) || c, c = this.updateSdfFloatData(B + 3, o[h].w) || c;
    }
    return c;
  }
  // Update the SDFs and edits from an array of SplatEdits and their
  // associated SplatEditSdfs, updating it for the dyno shader program.
  update(A) {
    const e = A.reduce((c, { sdfs: I }) => c + I.length, 0), s = this.ensureCapacity({
      maxEdits: A.length,
      maxSdfs: e
    }), n = [new u.Vector4(), new u.Vector4()], i = new u.Vector3(), r = new u.Quaternion(), a = new u.Vector3(), o = new u.Vector4();
    let g = 0, l = s;
    A.length !== this.dynoNumEdits.value && (this.dynoNumEdits.value = A.length, this.numEdits = A.length, l = !0);
    for (const [c, { edit: I, sdfs: h }] of A.entries()) {
      l = this.encodeEdit(c, {
        sdfFirst: g,
        sdfCount: h.length,
        invert: I.invert,
        rgbaBlendMode: gu(I.rgbaBlendMode),
        softEdge: I.softEdge,
        sdfSmooth: I.sdfSmooth
      }) || l;
      let B = !1;
      for (const C of h)
        o.set(C.scale.x, C.scale.y, C.scale.z, C.radius), C.scale.setScalar(1), C.updateMatrixWorld(), C.matrixWorld.clone().invert().decompose(i, r, a), C.scale.set(o.x, o.y, o.z), C.updateMatrixWorld(), n[0].set(C.color.r, C.color.g, C.color.b, C.opacity), n[1].set(C.displace.x, C.displace.y, C.displace.z, 1), B = this.encodeSdf(
          g,
          {
            sdfType: ou(C.type),
            invert: C.invert,
            center: i,
            quaternion: r,
            scale: a,
            sizes: o
          },
          n
        ) || B, g += 1;
      this.numSdfs = g, B && (this.sdfTexture.needsUpdate = !0), l || (l = B);
    }
    return { updated: l, dynoUpdated: s };
  }
  // Modify a Gsplat in a dyno shader program using the current edits and SDFs.
  modify(A) {
    return uu(
      A,
      this.dynoSdfArray,
      this.dynoNumEdits,
      this.dynoEdits
    );
  }
}
const _a = { type: "SdfArray" }, La = uA(`
  struct SdfArray {
    int numSdfs;
    usampler2D sdfTexture;
  };

  void unpackSdfArray(
    usampler2D sdfTexture, int sdfIndex, out uint flags,
    out vec3 center, out vec4 quaternion, out vec3 scale, out vec4 sizes,
    int numValues, out vec4 values[4]
  ) {
    uvec4 temp = texelFetch(sdfTexture, ivec2(0, sdfIndex), 0);
    flags = temp.w;
    center = vec3(uintBitsToFloat(temp.x), uintBitsToFloat(temp.y), uintBitsToFloat(temp.z));

    temp = texelFetch(sdfTexture, ivec2(1, sdfIndex), 0);
    quaternion = vec4(uintBitsToFloat(temp.x), uintBitsToFloat(temp.y), uintBitsToFloat(temp.z), uintBitsToFloat(temp.w));

    temp = texelFetch(sdfTexture, ivec2(2, sdfIndex), 0);
    scale = vec3(uintBitsToFloat(temp.x), uintBitsToFloat(temp.y), uintBitsToFloat(temp.z));

    temp = texelFetch(sdfTexture, ivec2(3, sdfIndex), 0);
    sizes = vec4(uintBitsToFloat(temp.x), uintBitsToFloat(temp.y), uintBitsToFloat(temp.z), uintBitsToFloat(temp.w));

    for (int i = 0; i < numValues; ++i) {
      temp = texelFetch(sdfTexture, ivec2(4 + i, sdfIndex), 0);
      values[i] = vec4(uintBitsToFloat(temp.x), uintBitsToFloat(temp.y), uintBitsToFloat(temp.z), uintBitsToFloat(temp.w));
    }
  }

  const uint SDF_FLAG_TYPE = 0xFFu;
  const uint SDF_FLAG_INVERT = 1u << 8u;

  const uint SDF_TYPE_ALL = 0u;
  const uint SDF_TYPE_PLANE = 1u;
  const uint SDF_TYPE_SPHERE = 2u;
  const uint SDF_TYPE_BOX = 3u;
  const uint SDF_TYPE_ELLIPSOID = 4u;
  const uint SDF_TYPE_CYLINDER = 5u;
  const uint SDF_TYPE_CAPSULE = 6u;
  const uint SDF_TYPE_INFINITE_CONE = 7u;

  float evaluateSdfArray(
    usampler2D sdfTexture, int numSdfs, int sdfFirst, int sdfCount, vec3 pos,
    float smoothK, int numValues, out vec4 outValues[4]
  ) {
    float distanceAccum = (smoothK == 0.0) ? 1.0 / 0.0 : 0.0;
    float maxExp = -1.0 / 0.0;
    for (int i = 0; i < numValues; ++i) {
        outValues[i] = vec4(0.0);
    }

    uint flags;
    vec3 center, scale;
    vec4 quaternion, sizes;
    vec4 values[4];

    int sdfLast = min(sdfFirst + sdfCount, numSdfs);
    for (int index = sdfFirst; index < sdfLast; ++index) {
      unpackSdfArray(sdfTexture, index, flags, center, quaternion, scale, sizes, numValues, values);
      uint sdfType = flags & SDF_FLAG_TYPE;
      vec3 sdfPos = quatVec(quaternion, pos * scale) + center;

      float distance;
      switch (sdfType) {
        case SDF_TYPE_ALL:
          distance = -1.0 / 0.0;
          break;
        case SDF_TYPE_PLANE: {
          distance = sdfPos.z;
          break;
        }
        case SDF_TYPE_SPHERE: {
          distance = length(sdfPos) - sizes.w;
          break;
        }
        case SDF_TYPE_BOX: {
          vec3 q = abs(sdfPos) - sizes.xyz + sizes.w;
          distance = length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0) - sizes.w;
          break;
        }
        case SDF_TYPE_ELLIPSOID: {
          vec3 sizes = sizes.xyz;
          float k0 = length(sdfPos / sizes);
          float k1 = length(sdfPos / dot(sizes, sizes));
          distance = k0 * (k0 - 1.0) / k1;
          break;
        }
        case SDF_TYPE_CYLINDER: {
          vec2 d = abs(vec2(length(sdfPos.xz), sdfPos.y)) - sizes.wy;
          distance = min(max(d.x, d.y), 0.0) + length(max(d, 0.0));
          break;
        }
        case SDF_TYPE_CAPSULE: {
          sdfPos.y -= clamp(sdfPos.y, -0.5 * sizes.y, 0.5 * sizes.y);
          distance = length(sdfPos) - sizes.w;
          break;
        }
        case SDF_TYPE_INFINITE_CONE: {
          float angle = 0.25 * PI * sizes.w;
          vec2 c = vec2(sin(angle), cos(angle));
          vec2 q = vec2(length(sdfPos.xy), -sdfPos.z);
          float d = length(q - c * max(dot(q, c), 0.0));
          distance = d * (((q.x * c.y - q.y * c.x) < 0.0) ? -1.0 : 1.0);
          break;
        }
      }

      if ((flags & SDF_FLAG_INVERT) != 0u) {
        distance = -distance;
      }

      if (smoothK == 0.0) {
        if (distance < distanceAccum) {
          distanceAccum = distance;
          for (int i = 0; i < numValues; ++i) {
            outValues[i] = values[i];
          }
        }
      } else {
        float scaledDistance = -distance / smoothK;
        if (scaledDistance > maxExp) {
          float scale = exp(maxExp - scaledDistance);
          distanceAccum *= scale;
          for (int i = 0; i < numValues; ++i) {
            outValues[i] *= scale;
          }
          maxExp = scaledDistance;
        }

        float weight = exp(scaledDistance - maxExp);
        distanceAccum += weight;
        for (int i = 0; i < numValues; ++i) {
          outValues[i] += weight * values[i];
        }
      }
    }

    if (smoothK == 0.0) {
      return distanceAccum;
    } else {
      // Very distant SDFs may result in 0 accumulation
      if (distanceAccum == 0.0) {
        return 1.0 / 0.0;
      }
      for (int i = 0; i < numValues; ++i) {
        outValues[i] /= distanceAccum;
      }
      return (-log(distanceAccum) - maxExp) * smoothK;
    }
  }

  float modulateSdfArray(
    usampler2D sdfTexture, int numSdfs, int sdfFirst, int sdfCount, vec3 pos,
    float smoothK, int numValues, out vec4 values[4],
    float softEdge, bool invert
  ) {
    float distance = evaluateSdfArray(sdfTexture, numSdfs, sdfFirst, sdfCount, pos, smoothK, numValues, values);
    if (invert) {
      distance = -distance;
    }

    return (softEdge == 0.0) ? ((distance < 0.0) ? 1.0 : 0.0)
      : clamp(-distance / softEdge + 0.5, 0.0, 1.0);
  }
`), za = uA(`
  const uint EDIT_FLAG_BLEND = 0xFFu;
  const uint EDIT_BLEND_MULTIPLY = 0u;
  const uint EDIT_BLEND_SET_RGB = 1u;
  const uint EDIT_BLEND_ADD_RGBA = 2u;
  const uint EDIT_FLAG_INVERT = 0x100u;

  void decodeEdit(
    uvec4 packedEdit, out int sdfFirst, out int sdfCount,
    out bool invert, out uint rgbaBlendMode, out float softEdge, out float sdfSmooth
  ) {
    rgbaBlendMode = packedEdit.x & EDIT_FLAG_BLEND;
    invert = (packedEdit.x & EDIT_FLAG_INVERT) != 0u;

    sdfFirst = int(packedEdit.y & 0xFFFFu);
    sdfCount = int(packedEdit.y >> 16u);

    softEdge = uintBitsToFloat(packedEdit.z);
    sdfSmooth = uintBitsToFloat(packedEdit.w);
  }

  void applyRgbaDisplaceEdit(
    usampler2D sdfTexture, int numSdfs, int sdfFirst, int sdfCount, inout vec3 pos,
    float smoothK, float softEdge, bool invert, uint rgbaBlendMode, inout vec4 rgba
  ) {
    vec4 values[4];
    float modulate = modulateSdfArray(sdfTexture, numSdfs, sdfFirst, sdfCount, pos, smoothK, 2, values, softEdge, invert);
    // On Android, moving values[0] is necessary to work around a compiler bug.
    vec4 sdfRgba = values[0];
    vec4 sdfDisplaceScale = values[1];

    vec4 target;
    switch (rgbaBlendMode) {
      case EDIT_BLEND_MULTIPLY:
        target = rgba * sdfRgba;
        break;
      case EDIT_BLEND_SET_RGB:
        target = vec4(sdfRgba.rgb, rgba.a * sdfRgba.a);
        break;
      case EDIT_BLEND_ADD_RGBA:
        target = rgba + sdfRgba;
        break;
      default:
        // Debug output if blend mode not set
        target = vec4(fract(pos), 1.0);
    }
    rgba = mix(rgba, target, modulate);
    pos += sdfDisplaceScale.xyz * modulate;
  }

  void applyPackedRgbaDisplaceEdit(uvec4 packedEdit, usampler2D sdfTexture, int numSdfs, inout vec3 pos, inout vec4 rgba) {
    int sdfFirst, sdfCount;
    bool invert;
    uint rgbaBlendMode;
    float softEdge, sdfSmooth;
    decodeEdit(packedEdit, sdfFirst, sdfCount, invert, rgbaBlendMode, softEdge, sdfSmooth);
    applyRgbaDisplaceEdit(sdfTexture, numSdfs, sdfFirst, sdfCount, pos, sdfSmooth, softEdge, invert, rgbaBlendMode, rgba);
  }
`);
function uu(t, A, e, s) {
  return new V({
    inTypes: {
      gsplat: AA,
      sdfArray: _a,
      numEdits: "int",
      rgbaDisplaceEdits: "uvec4"
    },
    outTypes: { gsplat: AA },
    globals: () => [La, za],
    inputs: { gsplat: t, sdfArray: A, numEdits: e, rgbaDisplaceEdits: s },
    statements: ({ inputs: i, outputs: r }) => {
      const { sdfArray: a, numEdits: o, rgbaDisplaceEdits: g } = i, { gsplat: l } = r;
      return GA(`
        ${l} = ${i.gsplat};
        if (isGsplatActive(${l}.flags)) {
          for (int editIndex = 0; editIndex < ${o}; ++editIndex) {
            applyPackedRgbaDisplaceEdit(
              ${g}[editIndex], ${a}.sdfTexture, ${a}.numSdfs,
              ${l}.center, ${l}.rgba
            );
          }
        }
      `);
    }
  }).outputs.gsplat;
}
const yt = new Float32Array(1);
class hu {
  constructor(A) {
    this.modifier = A, this.cache = /* @__PURE__ */ new Map();
  }
  apply(A) {
    let e = this.cache.get(A);
    return e || (e = MA(
      { index: "int" },
      { gsplat: AA },
      ({ index: s }) => {
        const { gsplat: n } = A.apply({ index: s });
        return this.modifier.apply({ gsplat: n });
      }
    ), this.cache.set(A, e)), e;
  }
}
class xt {
  // Create the dyno uniforms that parameterize the transform, setting them
  // to initial values that are different from any valid transform.
  constructor() {
    this.scale = new ht({ value: Number.NEGATIVE_INFINITY }), this.rotate = new kt({
      value: new u.Quaternion(
        Number.POSITIVE_INFINITY,
        Number.POSITIVE_INFINITY,
        Number.POSITIVE_INFINITY,
        Number.POSITIVE_INFINITY
      )
    }), this.translate = new bt({
      value: new u.Vector3(
        Number.POSITIVE_INFINITY,
        Number.POSITIVE_INFINITY,
        Number.POSITIVE_INFINITY
      )
    });
  }
  // Apply the transform to a Vec3 position in a dyno program.
  apply(A) {
    return ua(A, {
      scale: this.scale,
      rotate: this.rotate,
      translate: this.translate
    });
  }
  applyDir(A) {
    return ha(A, {
      rotate: this.rotate
    });
  }
  // Apply the transform to a Gsplat in a dyno program.
  applyGsplat(A) {
    return We(A, {
      scale: this.scale,
      rotate: this.rotate,
      translate: this.translate
    });
  }
  // Update the uniforms to match the given transform matrix.
  updateFromMatrix(A) {
    const e = new u.Vector3(), s = new u.Quaternion(), n = new u.Vector3();
    A.decompose(n, s, e);
    const i = (e.x + e.y + e.z) / 3;
    let r = !1;
    return i !== this.scale.value && (this.scale.value = i, r = !0), n.equals(this.translate.value) || (this.translate.value.copy(n), r = !0), s.equals(this.rotate.value) || (this.rotate.value.copy(s), r = !0), r;
  }
  // Update this transform to match the object's to-world transform.
  update(A) {
    return A.updateMatrixWorld(), this.updateFromMatrix(A.matrixWorld);
  }
}
class Kt extends u.Object3D {
  constructor({
    numSplats: A,
    generator: e,
    construct: s,
    update: n
  }) {
    if (super(), this.numSplats = A ?? 0, this.generator = e, this.frameUpdate = n, this.version = 0, s) {
      const i = s(this);
      Object.assign(this, i);
    }
  }
  updateVersion() {
    this.version += 1;
  }
  set needsUpdate(A) {
    A && this.updateVersion();
  }
}
const st = class st extends Kt {
  constructor(A = {}) {
    const e = new xt(), s = new xt(), n = new xt(), i = new xt(), r = new kt({
      value: new u.Vector4(
        Number.NEGATIVE_INFINITY,
        Number.NEGATIVE_INFINITY,
        Number.NEGATIVE_INFINITY,
        Number.NEGATIVE_INFINITY
      )
    }), a = new ht({ value: 0 }), o = new ht({ value: 0 }), g = {
      transform: e,
      viewToWorld: s,
      worldToView: n,
      viewToObject: i,
      recolor: r,
      time: a,
      deltaTime: o
    };
    if (super({
      update: ({ time: l, deltaTime: c, viewToWorld: I, globalEdits: h }) => this.update({ time: l, deltaTime: c, viewToWorld: I, globalEdits: h })
    }), this.isInitialized = !1, this.recolor = new u.Color(1, 1, 1), this.opacity = 1, this.enableViewToObject = !1, this.enableViewToWorld = !1, this.enableWorldToView = !1, this.skinning = null, this.edits = null, this.rgbaDisplaceEdits = null, this.splatRgba = null, this.maxSh = 3, this.packedSplats = A.packedSplats ?? new KA(), this.packedSplats.splatEncoding = A.splatEncoding ?? {
      ...fe
    }, this.numSplats = this.packedSplats.numSplats, this.editable = A.editable ?? !0, this.onFrame = A.onFrame, this.context = g, this.objectModifier = A.objectModifier, this.worldModifier = A.worldModifier, this.updateGenerator(), A.url || A.fileBytes || A.constructSplats || A.packedSplats && !A.packedSplats.isInitialized)
      this.initialized = this.asyncInitialize(A).then(async () => {
        if (this.updateGenerator(), this.isInitialized = !0, A.onLoad) {
          const l = A.onLoad(this);
          l instanceof Promise && await l;
        }
        return this;
      });
    else if (this.isInitialized = !0, this.initialized = Promise.resolve(this), A.onLoad) {
      const l = A.onLoad(this);
      l instanceof Promise && (this.initialized = l.then(() => this));
    }
  }
  async asyncInitialize(A) {
    const {
      url: e,
      fileBytes: s,
      fileType: n,
      fileName: i,
      maxSplats: r,
      constructSplats: a,
      splatEncoding: o
    } = A;
    if (e || s || a) {
      const g = {
        url: e,
        fileBytes: s,
        fileType: n,
        fileName: i,
        maxSplats: r,
        construct: a,
        splatEncoding: o
      };
      this.packedSplats.reinitialize(g);
    }
    this.packedSplats && (await this.packedSplats.initialized, this.numSplats = this.packedSplats.numSplats, this.updateGenerator());
  }
  static async staticInitialize() {
    await ks(), st.isStaticInitialized = !0;
  }
  // Creates a new Gsplat with the provided parameters (all values in "float" space,
  // i.e. 0-1 for opacity and color) and adds it to the end of the packedSplats,
  // increasing numSplats by 1. If necessary, reallocates the buffer with an exponential
  // doubling strategy to fit the new data, so it's fairly efficient to just
  // pushSplat(...) each Gsplat you want to create in a loop.
  pushSplat(A, e, s, n, i) {
    this.packedSplats.pushSplat(A, e, s, n, i);
  }
  // This method iterates over all Gsplats in this instance's packedSplats,
  // invoking the provided callback with index: number in 0..=(this.numSplats-1) and
  // center: THREE.Vector3, scales: THREE.Vector3, quaternion: THREE.Quaternion,
  // opacity: number (0..1), and color: THREE.Color (rgb values in 0..1).
  // Note that the objects passed in as center etc. are the same for every callback
  // invocation: these objects are reused for efficiency. Changing these values has
  // no effect as they are decoded/unpacked copies of the underlying data. To update
  // the packedSplats, call .packedSplats.setSplat(index, center, scales,
  // quaternion, opacity, color).
  forEachSplat(A) {
    this.packedSplats.forEachSplat(A);
  }
  // Call this when you are finished with the SplatMesh and want to free
  // any buffers it holds (via packedSplats).
  dispose() {
    this.packedSplats.dispose();
  }
  // Returns axis-aligned bounding box of the SplatMesh. If centers_only is true,
  // only the centers of the splats are used to compute the bounding box.
  // IMPORTANT: This should only be called after the SplatMesh is initialized.
  getBoundingBox(A = !0) {
    if (!this.initialized)
      throw new Error(
        "Cannot get bounding box before SplatMesh is initialized"
      );
    const e = new u.Vector3(
      Number.POSITIVE_INFINITY,
      Number.POSITIVE_INFINITY,
      Number.POSITIVE_INFINITY
    ), s = new u.Vector3(
      Number.NEGATIVE_INFINITY,
      Number.NEGATIVE_INFINITY,
      Number.NEGATIVE_INFINITY
    ), n = new u.Vector3(), i = [-1, 1];
    return this.packedSplats.forEachSplat(
      (a, o, g, l, c, I) => {
        if (A)
          e.min(o), s.max(o);
        else
          for (const h of i)
            for (const B of i)
              for (const C of i)
                n.set(h * g.x, B * g.y, C * g.z), n.applyQuaternion(l), n.add(o), e.min(n), s.max(n);
      }
    ), new u.Box3(e, s);
  }
  constructGenerator(A) {
    const { transform: e, viewToObject: s, recolor: n } = A, i = MA(
      { index: "int" },
      { gsplat: AA },
      ({ index: r }) => {
        if (!r)
          throw new Error("index is undefined");
        let a = vt(this.packedSplats.dyno, r);
        if (this.maxSh >= 1) {
          const { sh1Texture: g, sh2Texture: l, sh3Texture: c } = this.ensureShTextures();
          if (g) {
            let I = function(f, d) {
              const { x: m, y: D } = Et(d).outputs, x = iA(CA(m, D), J("float", 0.5)), y = iA(Qt(D, m), J("float", 0.5));
              return CA(x, iA(f, y));
            };
            const h = s.translate, { center: B } = ut(a).outputs, C = Fr(Qt(B, h)), E = Qu(a, g, C);
            let Q = I(E, this.packedSplats.dynoSh1MinMax);
            if (this.maxSh >= 2 && l) {
              const f = pu(a, l, C);
              Q = CA(
                Q,
                I(f, this.packedSplats.dynoSh2MinMax)
              );
            }
            if (this.maxSh >= 3 && c) {
              const f = fu(a, c, C);
              Q = CA(
                Q,
                I(f, this.packedSplats.dynoSh3MinMax)
              );
            }
            let { rgba: p } = ut(a).outputs;
            p = CA(p, Nr(Q, J("float", 0))), a = rt({ gsplat: a, rgba: p });
          }
        }
        if (this.splatRgba) {
          const g = ru(this.splatRgba.dyno, r);
          a = rt({ gsplat: a, rgba: g });
        }
        this.skinning && (a = this.skinning.modify(a)), this.objectModifier && (a = this.objectModifier.apply({ gsplat: a }).gsplat), a = e.applyGsplat(a);
        const o = iA(n, ut(a).outputs.rgba);
        return a = rt({ gsplat: a, rgba: o }), this.rgbaDisplaceEdits && (a = this.rgbaDisplaceEdits.modify(a)), this.worldModifier && (a = this.worldModifier.apply({ gsplat: a }).gsplat), { gsplat: a };
      }
    );
    this.generator = i;
  }
  // Call this whenever something changes in the Gsplat processing pipeline,
  // for example changing maxSh or updating objectModifier or worldModifier.
  // Compiled generators are cached for efficiency and re-use when the same
  // pipeline structure emerges after successive changes.
  updateGenerator() {
    this.constructGenerator(this.context);
  }
  // This is called automatically by SparkRenderer and you should not have to
  // call it. It updates parameters for the generated pipeline and calls
  // updateGenerator() if the pipeline needs to change.
  update({
    time: A,
    viewToWorld: e,
    deltaTime: s,
    globalEdits: n
  }) {
    var E;
    this.numSplats = this.packedSplats.numSplats, this.context.time.value = A, this.context.deltaTime.value = s, st.dynoTime.value = A;
    const { transform: i, viewToObject: r, recolor: a } = this.context;
    let o = i.update(this);
    this.context.viewToWorld.updateFromMatrix(e) && this.enableViewToWorld && (o = !0);
    const g = e.clone().invert();
    this.context.worldToView.updateFromMatrix(g) && this.enableWorldToView && (o = !0);
    const I = new u.Matrix4().compose(
      i.translate.value,
      i.rotate.value,
      new u.Vector3().setScalar(i.scale.value)
    ).invert().multiply(e);
    r.updateFromMatrix(I) && (this.enableViewToObject || this.packedSplats.extra.sh1) && (o = !0);
    const h = new u.Vector4(
      this.recolor.r,
      this.recolor.g,
      this.recolor.b,
      this.opacity
    );
    h.equals(a.value) || (a.value.copy(h), o = !0);
    const B = this.editable ? (this.edits ?? []).concat(n) : [];
    this.editable && !this.edits && this.traverseVisible((Q) => {
      Q instanceof le && B.push(Q);
    }), B.sort((Q, p) => Q.ordering - p.ordering);
    const C = B.map((Q) => {
      if (Q.sdfs != null)
        return { edit: Q, sdfs: Q.sdfs };
      const p = [];
      return Q.traverseVisible((f) => {
        f instanceof lu && p.push(f);
      }), { edit: Q, sdfs: p };
    });
    if (C.length > 0 && !this.rgbaDisplaceEdits) {
      const Q = C.length, p = C.reduce(
        (f, d) => f + d.sdfs.length,
        0
      );
      this.rgbaDisplaceEdits = new Iu({
        maxEdits: Q,
        maxSdfs: p
      }), this.updateGenerator();
    }
    if (this.rgbaDisplaceEdits) {
      const Q = this.rgbaDisplaceEdits.update(C);
      o || (o = Q.updated), Q.dynoUpdated && this.updateGenerator();
    }
    o && this.updateVersion(), (E = this.onFrame) == null || E.call(this, { mesh: this, time: A, deltaTime: s });
  }
  // This method conforms to the standard THREE.Raycaster API, performing object-ray
  // intersections using this method to populate the provided intersects[] array
  // with each intersection point.
  raycast(A, e) {
    var h, B;
    if (!this.packedSplats.packedArray || !this.packedSplats.numSplats)
      return;
    const { near: s, far: n, ray: i } = A, r = this.matrixWorld.clone().invert(), a = new u.Matrix3().setFromMatrix4(r), o = i.origin.clone().applyMatrix4(r), g = i.direction.clone().applyMatrix3(a), l = new u.Vector3();
    r.decompose(new u.Vector3(), new u.Quaternion(), l), (l.x * l.y * l.z) ** (1 / 3);
    const I = qo(
      o.x,
      o.y,
      o.z,
      g.x,
      g.y,
      g.z,
      s,
      n,
      this.packedSplats.numSplats,
      this.packedSplats.packedArray,
      !0,
      ((h = this.packedSplats.splatEncoding) == null ? void 0 : h.lnScaleMin) ?? TA,
      ((B = this.packedSplats.splatEncoding) == null ? void 0 : B.lnScaleMax) ?? UA
    );
    for (const C of I) {
      const E = i.direction.clone().multiplyScalar(C).add(i.origin);
      e.push({
        distance: C,
        point: E,
        object: this
      });
    }
  }
  ensureShTextures() {
    if (!this.packedSplats.extra.sh1)
      return {};
    let A = this.packedSplats.extra.sh1Texture;
    if (!A) {
      let n = this.packedSplats.extra.sh1;
      const { width: i, height: r, depth: a, maxSplats: o } = wA(
        n.length / 2
      );
      if (n.length < o * 2) {
        const l = new Uint32Array(o * 2);
        l.set(n), this.packedSplats.extra.sh1 = l, n = l;
      }
      const g = new u.DataArrayTexture(n, i, r, a);
      g.format = u.RGIntegerFormat, g.type = u.UnsignedIntType, g.internalFormat = "RG32UI", g.needsUpdate = !0, A = new zt({
        value: g,
        key: "sh1"
      }), this.packedSplats.extra.sh1Texture = A;
    }
    if (!this.packedSplats.extra.sh2)
      return { sh1Texture: A };
    let e = this.packedSplats.extra.sh2Texture;
    if (!e) {
      let n = this.packedSplats.extra.sh2;
      const { width: i, height: r, depth: a, maxSplats: o } = wA(
        n.length / 4
      );
      if (n.length < o * 4) {
        const l = new Uint32Array(o * 4);
        l.set(n), this.packedSplats.extra.sh2 = l, n = l;
      }
      const g = new u.DataArrayTexture(n, i, r, a);
      g.format = u.RGBAIntegerFormat, g.type = u.UnsignedIntType, g.internalFormat = "RGBA32UI", g.needsUpdate = !0, e = new zt({
        value: g,
        key: "sh2"
      }), this.packedSplats.extra.sh2Texture = e;
    }
    if (!this.packedSplats.extra.sh3)
      return { sh1Texture: A, sh2Texture: e };
    let s = this.packedSplats.extra.sh3Texture;
    if (!s) {
      let n = this.packedSplats.extra.sh3;
      const { width: i, height: r, depth: a, maxSplats: o } = wA(
        n.length / 4
      );
      if (n.length < o * 4) {
        const l = new Uint32Array(o * 4);
        l.set(n), this.packedSplats.extra.sh3 = l, n = l;
      }
      const g = new u.DataArrayTexture(n, i, r, a);
      g.format = u.RGBAIntegerFormat, g.type = u.UnsignedIntType, g.internalFormat = "RGBA32UI", g.needsUpdate = !0, s = new zt({
        value: g,
        key: "sh3"
      }), this.packedSplats.extra.sh3Texture = s;
    }
    return { sh1Texture: A, sh2Texture: e, sh3Texture: s };
  }
};
st.staticInitialized = st.staticInitialize(), st.isStaticInitialized = !1, st.dynoTime = new ht({ value: 0 });
let OA = st;
const Cu = uA(`
  vec3 evaluateSH1(Gsplat gsplat, usampler2DArray sh1, vec3 viewDir) {
    // Extract sint7 values packed into 2 x uint32
    uvec2 packed = texelFetch(sh1, splatTexCoord(gsplat.index), 0).rg;
    vec3 sh1_0 = vec3(ivec3(
      int(packed.x << 25u) >> 25,
      int(packed.x << 18u) >> 25,
      int(packed.x << 11u) >> 25
    )) / 63.0;
    vec3 sh1_1 = vec3(ivec3(
      int(packed.x << 4u) >> 25,
      int((packed.x >> 3u) | (packed.y << 29u)) >> 25,
      int(packed.y << 22u) >> 25
    )) / 63.0;
    vec3 sh1_2 = vec3(ivec3(
      int(packed.y << 15u) >> 25,
      int(packed.y << 8u) >> 25,
      int(packed.y << 1u) >> 25
    )) / 63.0;

    return sh1_0 * (-0.4886025 * viewDir.y)
      + sh1_1 * (0.4886025 * viewDir.z)
      + sh1_2 * (-0.4886025 * viewDir.x);
  }
`), Bu = uA(`
  vec3 evaluateSH2(Gsplat gsplat, usampler2DArray sh2, vec3 viewDir) {
    // Extract sint8 values packed into 4 x uint32
    uvec4 packed = texelFetch(sh2, splatTexCoord(gsplat.index), 0);
    vec3 sh2_0 = vec3(ivec3(
      int(packed.x << 24u) >> 24,
      int(packed.x << 16u) >> 24,
      int(packed.x << 8u) >> 24
    )) / 127.0;
    vec3 sh2_1 = vec3(ivec3(
      int(packed.x) >> 24,
      int(packed.y << 24u) >> 24,
      int(packed.y << 16u) >> 24
    )) / 127.0;
    vec3 sh2_2 = vec3(ivec3(
      int(packed.y << 8u) >> 24,
      int(packed.y) >> 24,
      int(packed.z << 24u) >> 24
    )) / 127.0;
    vec3 sh2_3 = vec3(ivec3(
      int(packed.z << 16u) >> 24,
      int(packed.z << 8u) >> 24,
      int(packed.z) >> 24
    )) / 127.0;
    vec3 sh2_4 = vec3(ivec3(
      int(packed.w << 24u) >> 24,
      int(packed.w << 16u) >> 24,
      int(packed.w << 8u) >> 24
    )) / 127.0;

    return sh2_0 * (1.0925484 * viewDir.x * viewDir.y)
      + sh2_1 * (-1.0925484 * viewDir.y * viewDir.z)
      + sh2_2 * (0.3153915 * (2.0 * viewDir.z * viewDir.z - viewDir.x * viewDir.x - viewDir.y * viewDir.y))
      + sh2_3 * (-1.0925484 * viewDir.x * viewDir.z)
      + sh2_4 * (0.5462742 * (viewDir.x * viewDir.x - viewDir.y * viewDir.y));
  }
`), Eu = uA(`
  vec3 evaluateSH3(Gsplat gsplat, usampler2DArray sh3, vec3 viewDir) {
    // Extract sint6 values packed into 4 x uint32
    uvec4 packed = texelFetch(sh3, splatTexCoord(gsplat.index), 0);
    vec3 sh3_0 = vec3(ivec3(
      int(packed.x << 26u) >> 26,
      int(packed.x << 20u) >> 26,
      int(packed.x << 14u) >> 26
    )) / 31.0;
    vec3 sh3_1 = vec3(ivec3(
      int(packed.x << 8u) >> 26,
      int(packed.x << 2u) >> 26,
      int((packed.x >> 4u) | (packed.y << 28u)) >> 26
    )) / 31.0;
    vec3 sh3_2 = vec3(ivec3(
      int(packed.y << 22u) >> 26,
      int(packed.y << 16u) >> 26,
      int(packed.y << 10u) >> 26
    )) / 31.0;
    vec3 sh3_3 = vec3(ivec3(
      int(packed.y << 4u) >> 26,
      int((packed.y >> 2u) | (packed.z << 30u)) >> 26,
      int(packed.z << 24u) >> 26
    )) / 31.0;
    vec3 sh3_4 = vec3(ivec3(
      int(packed.z << 18u) >> 26,
      int(packed.z << 12u) >> 26,
      int(packed.z << 6u) >> 26
    )) / 31.0;
    vec3 sh3_5 = vec3(ivec3(
      int(packed.z) >> 26,
      int(packed.w << 26u) >> 26,
      int(packed.w << 20u) >> 26
    )) / 31.0;
    vec3 sh3_6 = vec3(ivec3(
      int(packed.w << 14u) >> 26,
      int(packed.w << 8u) >> 26,
      int(packed.w << 2u) >> 26
    )) / 31.0;

    float xx = viewDir.x * viewDir.x;
    float yy = viewDir.y * viewDir.y;
    float zz = viewDir.z * viewDir.z;
    float xy = viewDir.x * viewDir.y;
    float yz = viewDir.y * viewDir.z;
    float zx = viewDir.z * viewDir.x;

    return sh3_0 * (-0.5900436 * viewDir.y * (3.0 * xx - yy))
      + sh3_1 * (2.8906114 * xy * viewDir.z) +
      + sh3_2 * (-0.4570458 * viewDir.y * (4.0 * zz - xx - yy))
      + sh3_3 * (0.3731763 * viewDir.z * (2.0 * zz - 3.0 * xx - 3.0 * yy))
      + sh3_4 * (-0.4570458 * viewDir.x * (4.0 * zz - xx - yy))
      + sh3_5 * (1.4453057 * viewDir.z * (xx - yy))
      + sh3_6 * (-0.5900436 * viewDir.x * (xx - 3.0 * yy));
  }
`);
function Qu(t, A, e) {
  return Zt({
    inTypes: { gsplat: AA, sh1: "usampler2DArray", viewDir: "vec3" },
    outTypes: { rgb: "vec3" },
    inputs: { gsplat: t, sh1: A, viewDir: e },
    globals: () => [vA, Cu],
    statements: ({ inputs: s, outputs: n }) => GA(`
        if (isGsplatActive(${s.gsplat}.flags)) {
          ${n.rgb} = evaluateSH1(${s.gsplat}, ${s.sh1}, ${s.viewDir});
        } else {
          ${n.rgb} = vec3(0.0);
        }
      `)
  }).outputs.rgb;
}
function pu(t, A, e) {
  return Zt({
    inTypes: { gsplat: AA, sh2: "usampler2DArray", viewDir: "vec3" },
    outTypes: { rgb: "vec3" },
    inputs: { gsplat: t, sh2: A, viewDir: e },
    globals: () => [vA, Bu],
    statements: ({ inputs: s, outputs: n }) => GA(`
        if (isGsplatActive(${s.gsplat}.flags)) {
          ${n.rgb} = evaluateSH2(${s.gsplat}, ${s.sh2}, ${s.viewDir});
        } else {
          ${n.rgb} = vec3(0.0);
        }
      `)
  }).outputs.rgb;
}
function fu(t, A, e) {
  return Zt({
    inTypes: { gsplat: AA, sh3: "usampler2DArray", viewDir: "vec3" },
    outTypes: { rgb: "vec3" },
    inputs: { gsplat: t, sh3: A, viewDir: e },
    globals: () => [vA, Eu],
    statements: ({ inputs: s, outputs: n }) => GA(`
        if (isGsplatActive(${s.gsplat}.flags)) {
          ${n.rgb} = evaluateSH3(${s.gsplat}, ${s.sh3}, ${s.viewDir});
        } else {
          ${n.rgb} = vec3(0.0);
        }
      `)
  }).outputs.rgb;
}
const St = class St {
  // Create a PlyReader from a Uint8Array/ArrayBuffer, no parsing done yet
  constructor({ fileBytes: A }) {
    this.header = "", this.littleEndian = !0, this.elements = {}, this.comments = [], this.data = null, this.numSplats = 0, this.fileBytes = A instanceof ArrayBuffer ? new Uint8Array(A) : A;
  }
  // Identify and parse the PLY text header (assumed to be <64KB in size).
  // this.elements will contain all the elements in the file, typically
  // "vertex" contains the Gsplat data.
  async parseHeader() {
    const e = new ReadableStream({
      start: (r) => {
        r.enqueue(this.fileBytes.slice(0, 65536)), r.close();
      }
    }).pipeThrough(new TextDecoderStream()).getReader();
    this.header = "";
    const s = `end_header
`;
    for (; ; ) {
      const { value: r, done: a } = await e.read();
      if (a)
        throw new Error("Failed to read header");
      this.header += r;
      const o = this.header.indexOf(s);
      if (o >= 0) {
        this.header = this.header.slice(0, o + s.length);
        break;
      }
    }
    const n = new TextEncoder().encode(this.header).length;
    this.data = new DataView(this.fileBytes.buffer, n), this.elements = {};
    let i = null;
    this.comments = [], this.header.trim().split(`
`).forEach((r, a) => {
      const o = r.trim();
      if (a === 0) {
        if (o !== "ply")
          throw new Error("Invalid PLY header");
        return;
      }
      if (o.length === 0)
        return;
      const g = o.split(" ");
      switch (g[0]) {
        case "format":
          if (g[1] === "binary_little_endian")
            this.littleEndian = !0;
          else if (g[1] === "binary_big_endian")
            this.littleEndian = !1;
          else
            throw new Error(`Unsupported PLY format: ${g[1]}`);
          if (g[2] !== "1.0")
            throw new Error(`Unsupported PLY version: ${g[2]}`);
          break;
        case "end_header":
          break;
        case "comment":
          this.comments.push(o.slice(8));
          break;
        case "element": {
          const l = g[1];
          i = {
            name: l,
            count: Number.parseInt(g[2]),
            properties: {}
          }, this.elements[l] = i;
          break;
        }
        case "property":
          if (i == null)
            throw new Error("Property must be inside an element");
          g[1] === "list" ? i.properties[g[4]] = {
            isList: !0,
            type: g[3],
            countType: g[2]
          } : i.properties[g[2]] = {
            isList: !1,
            type: g[1]
          };
          break;
      }
    }), this.elements.vertex && (this.numSplats = this.elements.vertex.count);
  }
  parseData(A) {
    let e = 0;
    const s = this.data;
    if (s == null)
      throw new Error("No data to parse");
    for (const n in this.elements) {
      const i = this.elements[n], { count: r, properties: a } = i, o = {}, g = [];
      for (const [c, I] of Object.entries(a))
        I.isList ? (o[c] = [], g.push(() => {
          const h = o[c];
          h.length = te[I.countType](
            s,
            e,
            this.littleEndian
          ), e += mt[I.countType];
          for (let B = 0; B < h.length; B++)
            h[B] = te[I.type](
              s,
              e,
              this.littleEndian
            ), e += mt[I.type];
        })) : (o[c] = 0, g.push(() => {
          o[c] = te[I.type](
            s,
            e,
            this.littleEndian
          ), e += mt[I.type];
        }));
      const l = A(i) ?? (() => {
      });
      for (let c = 0; c < r; c++) {
        for (const I of g)
          I();
        l(c, o);
      }
    }
  }
  // Parse all the Gsplat data in the PLY file in go, invoking the given
  // callbacks for each Gsplat.
  parseSplats(A, e) {
    if (this.elements.vertex == null)
      throw new Error("No vertex element found");
    let s = !1;
    const n = [];
    let i = 0, r = [], a = [], o = [], g, l, c;
    function I() {
      const Q = yu[i];
      r = new Array(3).fill(null).flatMap(
        (p, f) => [0, 1, 2].map((d, m) => `f_rest_${f + m * Q / 3}`)
      ), a = new Array(5).fill(null).flatMap(
        (p, f) => [0, 1, 2].map((d, m) => `f_rest_${3 + f + m * Q / 3}`)
      ), o = new Array(7).fill(null).flatMap(
        (p, f) => [0, 1, 2].map((d, m) => `f_rest_${8 + f + m * Q / 3}`)
      ), g = i >= 1 ? new Float32Array(3 * 3) : void 0, l = i >= 2 ? new Float32Array(5 * 3) : void 0, c = i >= 3 ? new Float32Array(7 * 3) : void 0;
    }
    function h(Q, p) {
      if (!g)
        throw new Error("Missing sh1");
      for (const [f, d] of r.entries())
        g[f] = p[d] * 8 / 255 - 4;
      if (l)
        for (const [f, d] of a.entries())
          l[f] = p[d] * 8 / 255 - 4;
      if (c)
        for (const [f, d] of o.entries())
          c[f] = p[d] * 8 / 255 - 4;
      e == null || e(Q, g, l, c);
    }
    function B(Q) {
      const {
        min_x: p,
        min_y: f,
        min_z: d,
        max_x: m,
        max_y: D,
        max_z: x,
        min_scale_x: y,
        min_scale_y: w,
        min_scale_z: k,
        max_scale_x: M,
        max_scale_y: S,
        max_scale_z: U
      } = Q.properties;
      if (!p || !f || !d || !m || !D || !x || !y || !w || !k || !M || !S || !U)
        throw new Error("Missing PLY chunk properties");
      return s = !0, (F, b) => {
        const {
          min_x: T,
          min_y: R,
          min_z: O,
          max_x: _,
          max_y: eA,
          max_z: q,
          min_scale_x: j,
          min_scale_y: L,
          min_scale_z: X,
          max_scale_x: P,
          max_scale_y: W,
          max_scale_z: G,
          min_r: pA,
          min_g: gA,
          min_b: fA,
          max_r: dA,
          max_g: xA,
          max_b: hA
        } = b;
        n.push({
          min_x: T,
          min_y: R,
          min_z: O,
          max_x: _,
          max_y: eA,
          max_z: q,
          min_scale_x: j,
          min_scale_y: L,
          min_scale_z: X,
          max_scale_x: P,
          max_scale_y: W,
          max_scale_z: G,
          min_r: pA,
          min_g: gA,
          min_b: fA,
          max_r: dA,
          max_g: xA,
          max_b: hA
        });
      };
    }
    function C(Q) {
      if (e && Q.name === "sh")
        return i = Bs(Q.properties), I(), h;
      if (Q.name !== "vertex")
        return null;
      const { packed_position: p, packed_rotation: f, packed_scale: d, packed_color: m } = Q.properties;
      if (!p || !f || !d || !m)
        throw new Error(
          "Missing PLY properties: packed_position, packed_rotation, packed_scale, packed_color"
        );
      const D = Math.sqrt(2);
      return (x, y) => {
        const w = n[x >>> 8];
        if (w == null)
          throw new Error("Missing PLY chunk");
        const {
          min_x: k,
          min_y: M,
          min_z: S,
          max_x: U,
          max_y: F,
          max_z: b,
          min_scale_x: T,
          min_scale_y: R,
          min_scale_z: O,
          max_scale_x: _,
          max_scale_y: eA,
          max_scale_z: q,
          min_r: j,
          min_g: L,
          min_b: X,
          max_r: P,
          max_g: W,
          max_b: G
        } = w, { packed_position: pA, packed_rotation: gA, packed_scale: fA, packed_color: dA } = y, xA = (pA >>> 21 & 2047) / 2047 * (U - k) + k, hA = (pA >>> 11 & 1023) / 1023 * (F - M) + M, RA = (pA & 2047) / 2047 * (b - S) + S, SA = ((gA >>> 20 & 1023) / 1023 - 0.5) * D, jA = ((gA >>> 10 & 1023) / 1023 - 0.5) * D, XA = ((gA & 1023) / 1023 - 0.5) * D, Y = Math.sqrt(Math.max(0, 1 - SA * SA - jA * jA - XA * XA)), QA = gA >>> 30, VA = QA === 0 ? SA : QA === 1 ? Y : jA, Ut = QA <= 1 ? jA : QA === 2 ? Y : XA, Xt = QA <= 2 ? XA : Y, DA = QA === 0 ? Y : SA, z = Math.exp(
          (fA >>> 21 & 2047) / 2047 * (_ - T) + T
        ), PA = Math.exp(
          (fA >>> 11 & 1023) / 1023 * (eA - R) + R
        ), de = Math.exp(
          (fA & 2047) / 2047 * (q - O) + O
        ), ye = (dA >>> 24 & 255) / 255 * ((P ?? 1) - (j ?? 0)) + (j ?? 0), me = (dA >>> 16 & 255) / 255 * ((W ?? 1) - (L ?? 0)) + (L ?? 0), we = (dA >>> 8 & 255) / 255 * ((G ?? 1) - (X ?? 0)) + (X ?? 0), xe = (dA & 255) / 255;
        A(
          x,
          xA,
          hA,
          RA,
          z,
          PA,
          de,
          VA,
          Ut,
          Xt,
          DA,
          xe,
          ye,
          me,
          we
        );
      };
    }
    const E = (Q) => {
      if (Q.name === "chunk")
        return B(Q);
      if (s)
        return C(Q);
      if (Q.name !== "vertex")
        return null;
      const {
        x: p,
        y: f,
        z: d,
        scale_0: m,
        scale_1: D,
        scale_2: x,
        rot_0: y,
        rot_1: w,
        rot_2: k,
        rot_3: M,
        opacity: S,
        f_dc_0: U,
        f_dc_1: F,
        f_dc_2: b,
        red: T,
        green: R,
        blue: O,
        alpha: _
      } = Q.properties;
      if (!p || !f || !d)
        throw new Error("Missing PLY properties: x, y, z");
      const eA = m && D && x, q = y && w && k && M, j = _ != null ? ee[_.type] : 1, L = T != null ? ee[T.type] : 1, X = R != null ? ee[R.type] : 1, P = O != null ? ee[O.type] : 1;
      return i = Bs(Q.properties), I(), (W, G) => {
        const pA = eA ? Math.exp(G.scale_0) : St.defaultPointScale, gA = eA ? Math.exp(G.scale_1) : St.defaultPointScale, fA = eA ? Math.exp(G.scale_2) : St.defaultPointScale, dA = q ? G.rot_1 : 0, xA = q ? G.rot_2 : 0, hA = q ? G.rot_3 : 0, RA = q ? G.rot_0 : 1, SA = S != null ? 1 / (1 + Math.exp(-G.opacity)) : _ != null ? G.alpha / j : 1, jA = U != null ? G.f_dc_0 * Ae + 0.5 : T != null ? G.red / L : 1, XA = F != null ? G.f_dc_1 * Ae + 0.5 : R != null ? G.green / X : 1, Y = b != null ? G.f_dc_2 * Ae + 0.5 : O != null ? G.blue / P : 1;
        if (A(
          W,
          G.x,
          G.y,
          G.z,
          pA,
          gA,
          fA,
          dA,
          xA,
          hA,
          RA,
          SA,
          jA,
          XA,
          Y
        ), e && g) {
          if (g)
            for (const [QA, VA] of r.entries())
              g[QA] = G[VA];
          if (l)
            for (const [QA, VA] of a.entries())
              l[QA] = G[VA];
          if (c)
            for (const [QA, VA] of o.entries())
              c[QA] = G[VA];
          e(W, g, l, c);
        }
      };
    };
    this.parseData(E);
  }
  // Inject RGBA values into original PLY file, which can be used to modify
  // the color/opacity of the Gsplats and write out the modified PLY file.
  injectRgba(A) {
    let e = 0;
    const s = this.data;
    if (s == null)
      throw new Error("No parsed data");
    if (A.length !== this.numSplats * 4)
      throw new Error("Invalid RGBA array length");
    for (const n in this.elements) {
      const i = this.elements[n], { count: r, properties: a } = i, o = [];
      let g = 0;
      const l = n === "vertex";
      if (l) {
        for (const c of ["opacity", "f_dc_0", "f_dc_1", "f_dc_2"])
          if (!a[c] || a[c].type !== "float")
            throw new Error(`Can't injectRgba due to property: ${c}`);
      }
      for (const [c, I] of Object.entries(a))
        if (I.isList)
          o.push(() => {
            const h = te[I.countType](
              s,
              e,
              this.littleEndian
            );
            e += mt[I.countType], e += h * mt[I.type];
          });
        else {
          if (l)
            if (c === "f_dc_0" || c === "f_dc_1" || c === "f_dc_2") {
              const h = Number.parseInt(
                c.slice(5)
              );
              o.push(() => {
                const B = (A[g + h] / 255 - 0.5) / Ae;
                Cs[I.type](
                  s,
                  e,
                  this.littleEndian,
                  B
                );
              });
            } else c === "opacity" && o.push(() => {
              const h = Math.max(
                -100,
                Math.min(
                  100,
                  -Math.log(1 / (A[g + 3] / 255) - 1)
                )
              );
              Cs[I.type](
                s,
                e,
                this.littleEndian,
                h
              );
            });
          o.push(() => {
            e += mt[I.type];
          });
        }
      for (let c = 0; c < r; c++) {
        for (const I of o)
          I();
        l && (g += 4);
      }
    }
  }
};
St.defaultPointScale = 1e-3;
let Ie = St;
const Ae = 0.28209479177387814, te = {
  char: (t, A, e) => t.getInt8(A),
  uchar: (t, A, e) => t.getUint8(A),
  short: (t, A, e) => t.getInt16(A, e),
  ushort: (t, A, e) => t.getUint16(A, e),
  int: (t, A, e) => t.getInt32(A, e),
  uint: (t, A, e) => t.getUint32(A, e),
  float: (t, A, e) => t.getFloat32(A, e),
  double: (t, A, e) => t.getFloat64(A, e)
}, Cs = {
  char: (t, A, e, s) => {
    t.setInt8(A, s);
  },
  uchar: (t, A, e, s) => {
    t.setUint8(A, s);
  },
  short: (t, A, e, s) => {
    t.setInt16(A, s, e);
  },
  ushort: (t, A, e, s) => {
    t.setUint16(A, s, e);
  },
  int: (t, A, e, s) => {
    t.setInt32(A, s, e);
  },
  uint: (t, A, e, s) => {
    t.setUint32(A, s, e);
  },
  float: (t, A, e, s) => {
    t.setFloat32(A, s, e);
  },
  double: (t, A, e, s) => {
    t.setFloat64(A, s, e);
  }
}, mt = {
  char: 1,
  uchar: 1,
  short: 2,
  ushort: 2,
  int: 4,
  uint: 4,
  float: 4,
  double: 8
}, ee = {
  char: 127,
  uchar: 255,
  short: 32767,
  ushort: 65535,
  int: 2147483647,
  uint: 4294967295,
  float: 1,
  double: 1
}, du = {
  0: 0,
  9: 1,
  24: 2,
  45: 3
}, yu = {
  0: 0,
  1: 9,
  2: 24,
  3: 45
};
function Bs(t) {
  let A = 0;
  for (; t[`f_rest_${A}`]; )
    A += 1;
  const e = du[A];
  if (e == null)
    throw new Error(`Unsupported number of SH coefficients: ${A}`);
  return e;
}
const Ha = '(function(){"use strict";let xA;const ss=typeof TextDecoder<"u"?new TextDecoder("utf-8",{ignoreBOM:!0,fatal:!0}):{decode:()=>{throw Error("TextDecoder not available")}};typeof TextDecoder<"u"&&ss.decode();let VA=null;function js(){return(VA===null||VA.byteLength===0)&&(VA=new Uint8Array(xA.memory.buffer)),VA}function Vs(e,A){return e=e>>>0,ss.decode(js().subarray(e,e+A))}function Os(e,A,t){return xA.sort_splats(e,A,t)>>>0}function $s(e,A,t){return xA.sort32_splats(e,A,t)>>>0}async function Ae(e,A){if(typeof Response=="function"&&e instanceof Response){if(typeof WebAssembly.instantiateStreaming=="function")try{return await WebAssembly.instantiateStreaming(e,A)}catch(s){if(e.headers.get("Content-Type")!="application/wasm")console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve Wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n",s);else throw s}const t=await e.arrayBuffer();return await WebAssembly.instantiate(t,A)}else{const t=await WebAssembly.instantiate(e,A);return t instanceof WebAssembly.Instance?{instance:t,module:e}:t}}function te(){const e={};return e.wbg={},e.wbg.__wbg_buffer_609cc3eee51ed158=function(A){return A.buffer},e.wbg.__wbg_length_3b4f022188ae8db6=function(A){return A.length},e.wbg.__wbg_length_6ca527665d89694d=function(A){return A.length},e.wbg.__wbg_length_8cfd2c6409af88ad=function(A){return A.length},e.wbg.__wbg_new_9fee97a409b32b68=function(A){return new Uint16Array(A)},e.wbg.__wbg_new_e3b321dcfef89fc7=function(A){return new Uint32Array(A)},e.wbg.__wbg_newwithbyteoffsetandlength_e6b7e69acd4c7354=function(A,t,s){return new Float32Array(A,t>>>0,s>>>0)},e.wbg.__wbg_newwithbyteoffsetandlength_f1dead44d1fc7212=function(A,t,s){return new Uint32Array(A,t>>>0,s>>>0)},e.wbg.__wbg_newwithlength_5a5efe313cfd59f1=function(A){return new Float32Array(A>>>0)},e.wbg.__wbg_set_10bad9bee0e9c58b=function(A,t,s){A.set(t,s>>>0)},e.wbg.__wbg_set_d23661d19148b229=function(A,t,s){A.set(t,s>>>0)},e.wbg.__wbg_set_f4f1f0daa30696fc=function(A,t,s){A.set(t,s>>>0)},e.wbg.__wbg_subarray_3aaeec89bb2544f0=function(A,t,s){return A.subarray(t>>>0,s>>>0)},e.wbg.__wbg_subarray_769e1e0f81bb259b=function(A,t,s){return A.subarray(t>>>0,s>>>0)},e.wbg.__wbindgen_init_externref_table=function(){const A=xA.__wbindgen_export_0,t=A.grow(4);A.set(0,void 0),A.set(t+0,void 0),A.set(t+1,null),A.set(t+2,!0),A.set(t+3,!1)},e.wbg.__wbindgen_memory=function(){return xA.memory},e.wbg.__wbindgen_throw=function(A,t){throw new Error(Vs(A,t))},e}function se(e,A){return xA=e.exports,es.__wbindgen_wasm_module=A,VA=null,xA.__wbindgen_start(),xA}async function es(e){if(xA!==void 0)return xA;typeof e<"u"&&(Object.getPrototypeOf(e)===Object.prototype?{module_or_path:e}=e:console.warn("using deprecated parameters for the initialization function; pass a single object instead")),typeof e>"u"&&(e=new URL("data:application/wasm;base64,AGFzbQEAAAABzAEeYAJ/fwF/YAJ/fwBgA39/fwF/YAN/f38AYAF/AX9gAX8AYANvf38Bb2AFf39/f38Bf2AFf39/f38AYAFvAW9gA29vfwBgAW8Bf2AAAGAAAX9gBH9/f38AYAR/f39/AX9gA39vbwF/YAF/AW9gAAFvYAF9AX1gBn9/f39/fwBgDX19fX19fX19f29/fX0Bb2AGf39/f39/AX9gBX9/fX9/AGAEf31/fwBgBX9/fn9/AGAEf35/fwBgBX9/fH9/AGAEf3x/fwBgAn19AX0C8gQRA3diZx1fX3diZ19idWZmZXJfNjA5Y2MzZWVlNTFlZDE1OAAJA3diZxpfX3diZ19uZXdfOWZlZTk3YTQwOWIzMmI2OAAJA3diZxpfX3diZ19zZXRfZjRmMWYwZGFhMzA2OTZmYwAKA3diZx1fX3diZ19sZW5ndGhfOGNmZDJjNjQwOWFmODhhZAALA3diZzFfX3diZ19uZXd3aXRoYnl0ZW9mZnNldGFuZGxlbmd0aF9mMWRlYWQ0NGQxZmM3MjEyAAYDd2JnGl9fd2JnX25ld19lM2IzMjFkY2ZlZjg5ZmM3AAkDd2JnGl9fd2JnX3NldF9kMjM2NjFkMTkxNDhiMjI5AAoDd2JnHV9fd2JnX2xlbmd0aF82Y2E1Mjc2NjVkODk2OTRkAAsDd2JnMV9fd2JnX25ld3dpdGhieXRlb2Zmc2V0YW5kbGVuZ3RoX2U2YjdlNjlhY2Q0YzczNTQABgN3YmcaX193Ymdfc2V0XzEwYmFkOWJlZTBlOWM1OGIACgN3YmcdX193YmdfbGVuZ3RoXzNiNGYwMjIxODhhZThkYjYACwN3YmcfX193Ymdfc3ViYXJyYXlfNzY5ZTFlMGY4MWJiMjU5YgAGA3diZx9fX3diZ19zdWJhcnJheV8zYWFlZWM4OWJiMjU0NGYwAAYDd2JnJF9fd2JnX25ld3dpdGhsZW5ndGhfNWE1ZWZlMzEzY2ZkNTlmMQARA3diZxBfX3diaW5kZ2VuX3Rocm93AAEDd2JnEV9fd2JpbmRnZW5fbWVtb3J5ABIDd2JnH19fd2JpbmRnZW5faW5pdF9leHRlcm5yZWZfdGFibGUADANeXQQAAQcFAgMCEwEBAAABAQAADQABAwgIAwEBBQ0BFA4DAAMBAwIMDAIBAQcDABUBFhcIGQcb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wAA2AgBBrJnAAEGkmcAANgIAQbiZwABBrJnAADYCAEG0mcAAQayZwAA2AgBBwJnAAEG0mcAANgIAQbyZwABBtJnAADYCAEHImcAAQbyZwAA2AgBBxJnAAEG8mcAANgIAQdCZwABBxJnAADYCAEHYmcAAQcyZwAA2AgBBzJnAAEHEmcAANgIAQeCZwABB1JnAADYCAEHUmcAAQcyZwAA2AgBB6JnAAEHcmcAANgIAQdyZwABB1JnAADYCAEHwmcAAQeSZwAA2AgBB5JnAAEHcmcAANgIAQfiZwABB7JnAADYCAEHsmcAAQeSZwAA2AgBBgJrAAEH0mcAANgIAQfSZwABB7JnAADYCAEGImsAAQfyZwAA2AgBB/JnAAEH0mcAANgIAQZCawABBhJrAADYCAEGEmsAAQfyZwAA2AgBBmJrAAEGMmsAANgIAQYyawABBhJrAADYCAEGgmsAAQZSawAA2AgBBlJrAAEGMmsAANgIAQaiawABBnJrAADYCAEGcmsAAQZSawAA2AgBBsJrAAEGkmsAANgIAQaSawABBnJrAADYCAEG4msAAQayawAA2AgBBrJrAAEGkmsAANgIAQcCawABBtJrAADYCAEG0msAAQayawAA2AgBByJrAAEG8msAANgIAQbyawABBtJrAADYCAEHgmsAAIAFBD2pBeHEiAEEIayICNgIAQcSawABBvJrAADYCAEHYmsAAIARBKGsiAyABIABrakEIaiIANgIAIAIgAEEBcjYCBCABIANqQSg2AgRB7JrAAEGAgIABNgIADAgLIAIgA0kgASACTXINACAAKAIMIgNBAXENACADQQF2IAZGDQMLQfCawABB8JrAACgCACIAIAEgACABSRs2AgAgASAEaiEDQbSYwAAhAAJAAkADQCADIAAoAgAiB0cEQCAAKAIIIgANAQwCCwsgACgCDCIDQQFxDQAgA0EBdiAGRg0BC0G0mMAAIQADQAJAIAIgACgCACIDTwRAIAIgAyAAKAIEaiIHSQ0BCyAAKAIIIQAMAQsLQeCawAAgAUEPakF4cSIAQQhrIgM2AgBB2JrAACAEQShrIgkgASAAa2pBCGoiADYCACADIABBAXI2AgQgASAJakEoNgIEQeyawABBgICAATYCACACIAdBIGtBeHFBCGsiACAAIAJBEGpJGyIDQRs2AgRBtJjAACkCACEK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NgIYIABCBDcCICAAQRhqQZSKwAAQPwALIABBKGogAikDADcCACAAIAApAwg3AiAgACABNgIcIABBATYCGAJAIABBGGoiASgCAEUNACABKAIEIgJFDQAgASgCCCACQQJ0EGELIABBADYCKCAAQQE2AhwgAEG0isAANgIYIABCBDcCICABQbyKwAAQPwALhgIBA38jAEGAAWsiBCQAIAAoAgAhAAJ/AkAgASgCCCICQYCAgBBxRQRAIAJBgICAIHENASAAKAIAIAEQHQwCCyAAKAIAIQBBACECA0AgAiAEakH/AGogAEEPcSIDQTByIANB1wBqIANBCkkbOgAAIAJBAWshAiAAQQ9LIABBBHYhAA0ACyABQceTwABBAiACIARqQYABakEAIAJrEBQMAQsgACgCACEAQQAhAgNAIAIgBGpB/wBqIABBD3EiA0EwciADQTdqIANBCkkbOgAAIAJBAWshAiAAQQ9LIABBBHYhAA0ACyABQceTwABBAiACIARqQYABakEAIAJrEBQLIARBgAFqJAALqAICA38BfiMAQUBqIgIkACABKAIAQYCAgIB4RgRAIAEoAgwhAyACQSRqIgRBADYCACACQoCAgIAQNwIcIAJBMGogAygCACIDQQhqKQIANwMAIAJBOGogA0EQaikCADcDACACIAMpAgA3AyggAkEcakGsi8AAIAJBKGoQGBogAkEYaiAEKAIAIgM2AgAgAiACKQIcIgU3AxAgAUEIaiADNgIAIAEgBTcCAAsgASkCACEFIAFCgICAgBA3AgAgAkEIaiIDIAFBCGoiASgCADYCACABQQA2AgBBlZfAAC0AABogAiAFNwMAQQxBBBBZIgFFBEBBBEEMEGoACyABIAIpAwA3AgAgAUEIaiADKAIANgIAIABBpI7AADYCBCAAIAE2AgAgAkFAayQAC9QBAgR/AX4jAEEgayIDJAACQAJAIAEgASACaiICSwRAQQAhAQwBC0EAIQFBCCACIAAoAgAiBUEBdCIEIAIgBEsbIgIgAkEITRsiBK0iB0IgiFBFDQAgB6ciBkH/////B0sNACADIAUEfyADIAU2AhwgAyAAKAIENgIUQQEFQQALNgIYIANBCGpBASAGIANBFGoQLyADKAIIQQFHDQEgAygCECECIAMoAgwhAQsgASACQZyLwAAQTAALIAMoAgwhASAAIAQ2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ACAIJQEgCBArC/oBAgJ/AX4jAEEQayICJAAgAkEBOwEMIAIgATYCCCACIAA2AgQjAEEQayIBJAAgAkEEaiIAKQIAIQQgASAANgIMIAEgBDcCBCMAQRBrIgAkACABQQRqIgEoAgAiAigCDCEDAkACQAJAAkAgAigCBA4CAAECCyADDQFBASECQQAhAwwCCyADDQAgAigCACICKAIEIQMgAigCACECDAELIABBgICAgHg2AgAgACABNgIMIABB4I7AACABKAIEIAEoAggiAC0ACCAALQAJECcACyAAIAM2AgQgACACNgIAIABBxI7AACABKAIEIAEoAggiAC0ACCAALQAJECcACyQAIABFBEBB0IjAAEEyEGUACyAAIAIgAyAEIAUgASgCEBEHAAsiACAARQRAQdCIwABBMhBlAAsgACACIAMgBCABKAIQERgACyIAIABFBEBB0IjAAEEyEGUACyAAIAIgAyAEIAEoAhARDgALIgAgAEUEQEHQiMAAQTIQZQALIAAgAiADIAQgASgCEBEaAAsiACAARQRAQdCIwABBMhBlAAsgACACIAMgBCABKAIQEQ8ACyIAIABFBEBB0IjAAEEyEGUACyAAIAIgAyAEIAEoAhARHAALJQEBfyAAKAIAIgFBgICAgHhyQYCAgIB4RwRAIAAoAgQgARBhCwsgACAARQRAQdCIwABBMhBlAAsgACACIAMgASgCEBEDAAseACAARQRAQdCIwABBMhBlAAsgACACIAEoAhARAAALrw8BEX8QLCIDIAEmARAsIgQgAiYBIwBBIGsiCyQAIAsgBDYCCCALIAM2AgQgCyAANgIAIAsgC0EEaiIAKAIAEGw2AgwgCyALQQhqNgIcIAsgCzYCGCALIAA2AhQgCyALQQxqNgIQIAtBEGohACMAQdAAayIGJAACQAJAAkACQAJAQQBBjIHAACgCABEEACIPBEAgDygCAA0BIAAoAgwhESAAKAIIIQggD0F/NgIAIAAoAgQgACgCACgCACIFIA9BBGoiDiIEKAIIIgNLBEAgBSADIgBrIgkgBCgCACAAa0sEQCAEIAAgCUECQQIQJiAEKAIIIQALIAQoAgQiByAAQQF0aiEKIAlBAk8EQCAFIANBf3NqQQF0IgwEQCAKQQAgDPwLAAsgACAFakEBdCADQQF0ayAHakECayEKIAAgCWpBAWsh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EAAcAAAARQAAAC0AAADUARAAHAAAAF4AAAAoAAAAc3BhcmstaW50ZXJuYWwtcnMvc3JjL3NvcnQucnMAAABIAhAAHQAAABsAAAAdAAAARXhwZWN0ZWQgIGFjdGl2ZSBzcGxhdHMgYnV0IGdvdCB4AhAACQAAAIECEAAXAAAASAIQAB0AAAAzAAAAHQAAAEgCEAAdAAAAMwAAABUAAABIAhAAHQAAACQAAAAUAAAASAIQAB0AAAB0AAAAGQAAAEgCEAAdAAAApwAAABMAAABIAhAAHQAAAJ8AAAATAAAASAIQAB0AAACiAAAAHQAAAEgCEAAdAAAAogAAABEAAABIAhAAHQAAAJAAAAAgAAAASAIQAB0AAACQAAAAFAAAAEgCEAAdAAAAfAAAABgAAABIAhAAHQAAAH0AAAAYAAAAL2hvbWUvcnVubmVyLy5jYXJnby9yZWdpc3RyeS9zcmMvaW5kZXguY3JhdGVzLmlvLTE5NDljZjhjNmI1YjU1N2YvanMtc3lzLTAuMy43Ny9zcmMvbGliLnJzAABoAxAAWgAAAPsYAAABAAAAL2hvbWUvcnVubmVyLy5jYXJnby9yZWdpc3RyeS9zcmMvaW5kZXguY3JhdGVzLmlvLTE5NDljZjhjNmI1YjU1N2Yvd2FzbS1iaW5kZ2VuLTAuMi4xMDAvc3JjL2NvbnZlcnQvc2xpY2VzLnJz1AMQAGwAAAAkAQAADgAAAGNsb3N1cmUgaW52b2tlZCByZWN1cnNpdmVseSBvciBhZnRlciBiZWluZyBkcm9wcGVkTGF6eSBpbnN0YW5jZSBoYXMgcHJldmlvdXNseSBiZWVuIHBvaXNvbmVkggQQACoAAAAvaG9tZS9ydW5uZXIvLmNhcmdvL3JlZ2lzdHJ5L3NyYy9pbmRleC5jcmF0ZXMuaW8tMTk0OWNmOGM2YjViNTU3Zi9vbmNlX2NlbGwtMS4yMS4zL3NyYy9saWIucnMAAAC0BBAAXQAAAAgDAAAZAAAAcmVlbnRyYW50IGluaXQAACQFEAAOAAAAtAQQAF0AAAB6AgAADQAAAC9ydXN0Yy82YjAwYmMzODgwMTk4NjAwMTMwZTFjZjYyYjhmOGE5MzQ5NDQ4OGNjL2xpYnJhcnkvYWxsb2Mvc3JjL3Jhd192ZWMvbW9kLnJzTAUQAFAAAAAuAgAAEQAAABUAAAAMAAAABAAAABYAAAAXAAAAGAAAAC9ydXN0L2RlcHMvZGxtYWxsb2MtMC4yLjgvc3JjL2RsbWFsbG9jLnJzYXNzZXJ0aW9uIGZhaWxlZDogcHNpemUgPj0gc2l6ZSArIG1pbl9vdmVyaGVhZADEBRAAKQAAAKwEAAAJAAAAYXNzZXJ0aW9uIGZhaWxlZDogcHNpemUgPD0gc2l6ZSArIG1heF9vdmVyaGVhZAAAxAUQACkAAACyBAAADQAAAEFjY2Vzc0Vycm9yY2Fubm90IGFjY2VzcyBhIFRocmVhZCBMb2NhbCBTdG9yYWdlIHZhbHVlIGR1cmluZyBvciBhZnRlciBkZXN0cnVjdGlvbjogAHcGEABIAAAAbWVtb3J5IGFsbG9jYXRpb24gb2YgIGJ5dGVzIGZhaWxlZAAAyAYQABUAAADdBhAADQAAAGxpYnJhcnkvc3RkL3NyYy9hbGxvYy5yc/wGEAAYAAAAZAEAAAkAAAAVAAAADAAAAAQAAAAZAAAAAAAAAAgAAAAEAAAAGgAAAAAAAAAIAAAABAAAABsAAAAcAAAAHQAAAB4AAAAfAAAAEAAAAAQAAAAgAAAAIQAAACIAAAAjAAAARXJyb3IAAAAkAAAADAAAAAQAAAAlAAAAJgAAACcAAABjYXBhY2l0eSBvdmVyZmxvdwAAAJwHEAARAAAAbGlicmFyeS9hbGxvYy9zcmMvcmF3X3ZlYy9tb2QucnO4BxAAIAAAAC4CAAARAAAAbGlicmFyeS9hbGxvYy9zcmMvc3RyaW5nLnJzAOgHEAAbAAAA6AEAABcAQZyQwAAL2AUBAAAAKAAAAGEgZm9ybWF0dGluZyB0cmFpdCBpbXBsZW1lbnRhdGlvbiByZXR1cm5lZCBhbiBlcnJvciB3aGVuIHRoZSB1bmRlcmx5aW5nIHN0cmVhbSBkaWQgbm90bGlicmFyeS9hbGxvYy9zcmMvZm10LnJzAAB6CBAAGAAAAIoCAAAOAAAAQm9ycm93TXV0RXJyb3JhbHJlYWR5IGJvcnJvd2VkOiCyCBAAEgAAAGluZGV4IG91dCBvZiBib3VuZHM6IHRoZSBsZW4gaXMgIGJ1dCB0aGUgaW5kZXggaXMgAADMCBAAIAAAAOwIEAASAAAAAAAAAAQAAAAEAAAALQAAAD09IT1tYXRjaGVzYXNzZXJ0aW9uIGBsZWZ0ICByaWdodGAgZmFpbGVkCiAgbGVmdDogCiByaWdodDogACsJEAAQAAAAOwkQABcAAABSCRAACQAAACByaWdodGAgZmFpbGVkOiAKICBsZWZ0OiAAAAArCRAAEAAAAHQJEAAQAAAAhAkQAAkAAABSCRAACQAAADogAAABAAAAAAAAALAJEAACAAAAfSB9MHgwMDAxMDIwMzA0MDUwNjA3MDgwOTEwMTExMjEzMTQxNTE2MTcxODE5MjAyMTIyMjMyNDI1MjYyNzI4MjkzMDMxMzIzMzM0MzUzNjM3MzgzOTQwNDE0MjQzNDQ0NTQ2NDc0ODQ5NTA1MTUyNTM1NDU1NTY1NzU4NTk2MDYxNjI2MzY0NjU2NjY3Njg2OTcwNzE3MjczNzQ3NTc2Nzc3ODc5ODA4MTgyODM4NDg1ODY4Nzg4ODk5MDkxOTI5Mzk0OTU5Njk3OTg5OSBvdXQgb2YgcmFuZ2UgZm9yIHNsaWNlIG9mIGxlbmd0aCByYW5nZSBlbmQgaW5kZXggALMKEAAQAAAAkQoQACIAAAAgCRAAIgkQACQJEAACAAAAAgAAAAcAAAAAAAA/AAAAvwBBjJbAAAsBEgB8CXByb2R1Y2VycwIIbGFuZ3VhZ2UBBFJ1c3QADHByb2Nlc3NlZC1ieQMFcnVzdGMdMS44OC4wICg2YjAwYmMzODggMjAyNS0wNi0yMykGd2FscnVzBjAuMjMuMwx3YXNtLWJpbmRnZW4TMC4yLjEwMCAoMjQwNWVjMmI0KQBrD3RhcmdldF9mZWF0dXJlcwYrD211dGFibGUtZ2xvYmFscysTbm9udHJhcHBpbmctZnB0b2ludCsLYnVsay1tZW1vcnkrCHNpZ24tZXh0Kw9yZWZlcmVuY2UtdHlwZXMrCm11bHRpdmFsdWU=",self.location.href));const A=te();(typeof e=="string"||typeof Request=="function"&&e instanceof Request||typeof URL=="function"&&e instanceof URL)&&(e=fetch(e));const{instance:t,module:s}=await Ae(await e,A);return se(t,s)}var is={},ee=function(e,A,t,s,i){var n=new Worker(is[A]||(is[A]=URL.createObjectURL(new Blob([e+\';addEventListener("error",function(e){e=e.error;postMessage({$e$:[e.message,e.code,e.stack]})})\'],{type:"text/javascript"}))));return n.onmessage=function(g){var r=g.data,I=r.$e$;if(I){var o=new Error(I[0]);o.code=I[1],o.stack=I[2],i(o,null)}else i(null,r)},n.postMessage(t,s),n},j=Uint8Array,_A=Uint16Array,ns=Int32Array,pt=new j([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0,0]),Ft=new j([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,0,0]),gs=new j([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),rs=function(e,A){for(var t=new _A(31),s=0;s<31;++s)t[s]=A+=1<<e[s-1];for(var i=new ns(t[30]),s=1;s<30;++s)for(var n=t[s];n<t[s+1];++n)i[n]=n-t[s]<<5|s;return{b:t,r:i}},Is=rs(pt,2),dt=Is.b,ie=Is.r;dt[28]=258,ie[258]=28;for(var ne=rs(Ft,0),os=ne.b,gt=new _A(32768),X=0;X<32768;++X){var FA=(X&43690)>>1|(X&21845)<<1;FA=(FA&52428)>>2|(FA&13107)<<2,FA=(FA&61680)>>4|(FA&3855)<<4,gt[X]=((FA&65280)>>8|(FA&255)<<8)>>1}for(var LA=function(e,A,t){for(var s=e.length,i=0,n=new _A(A);i<s;++i)e[i]&&++n[e[i]-1];var g=new _A(A);for(i=1;i<A;++i)g[i]=g[i-1]+n[i-1]<<1;var r;if(t){r=new _A(1<<A);var I=15-A;for(i=0;i<s;++i)if(e[i])for(var o=i<<4|e[i],a=A-e[i],C=g[e[i]-1]++<<a,h=C|(1<<a)-1;C<=h;++C)r[gt[C]>>I]=o}else for(r=new _A(s),i=0;i<s;++i)e[i]&&(r[i]=gt[g[e[i]-1]++]>>15-e[i]);return r},OA=new j(288),X=0;X<144;++X)OA[X]=8;for(var X=144;X<256;++X)OA[X]=9;for(var X=256;X<280;++X)OA[X]=7;for(var X=280;X<288;++X)OA[X]=8;for(var as=new j(32),X=0;X<32;++X)as[X]=5;var Cs=LA(OA,9,1),Bs=LA(as,5,1),rt=function(e){for(var A=e[0],t=1;t<e.length;++t)e[t]>A&&(A=e[t]);return A},BA=function(e,A,t){var s=A/8|0;return(e[s]|e[s+1]<<8)>>(A&7)&t},It=function(e,A){var t=A/8|0;return(e[t]|e[t+1]<<8|e[t+2]<<16)>>(A&7)},Nt=function(e){return(e+7)/8|0},dA=function(e,A,t){return(A==null||A<0)&&(A=0),(t==null||t>e.length)&&(t=e.length),new j(e.subarray(A,t))},hs=["unexpected EOF","invalid block type","invalid length/literal","invalid distance","stream finished","no stream handler",,"no callback","invalid UTF-8 data","extra field too long","date not in range 1980-2099","filename too long","stream finishing","invalid zip data"],V=function(e,A,t){var s=new Error(A||hs[e]);if(s.code=e,Error.captureStackTrace&&Error.captureStackTrace(s,V),!t)throw s;return s},kt=function(e,A,t,s){var i=e.length,n=s?s.length:0;if(!i||A.f&&!A.l)return t||new j(0);var g=!t,r=g||A.i!=2,I=A.i;g&&(t=new j(i*3));var o=function(gA){var oA=t.length;if(gA>oA){var aA=new j(Math.max(oA*2,gA));aA.set(t),t=aA}},a=A.f||0,C=A.p||0,h=A.b||0,B=A.l,E=A.d,l=A.m,c=A.n,Q=i*8;do{if(!B){a=BA(e,C,1);var u=BA(e,C+1,3);if(C+=3,u)if(u==1)B=Cs,E=Bs,l=9,c=5;else if(u==2){var F=BA(e,C,31)+257,J=BA(e,C+10,15)+4,x=F+BA(e,C+5,31)+1;C+=14;for(var m=new j(x),U=new j(19),S=0;S<J;++S)U[gs[S]]=BA(e,C+S*3,7);C+=J*3;for(var w=rt(U),M=(1<<w)-1,z=LA(U,w,1),S=0;S<x;){var Y=z[BA(e,C,M)];C+=Y&15;var y=Y>>4;if(y<16)m[S++]=y;else{var N=0,v=0;for(y==16?(v=3+BA(e,C,3),C+=2,N=m[S-1]):y==17?(v=3+BA(e,C,7),C+=3):y==18&&(v=11+BA(e,C,127),C+=7);v--;)m[S++]=N}}var q=m.subarray(0,F),T=m.subarray(F);l=rt(q),c=rt(T),B=LA(q,l,1),E=LA(T,c,1)}else V(1);else{var y=Nt(C)+4,f=e[y-4]|e[y-3]<<8,D=y+f;if(D>i){I&&V(0);break}r&&o(h+f),t.set(e.subarray(y,D),h),A.b=h+=f,A.p=C=D*8,A.f=a;continue}if(C>Q){I&&V(0);break}}r&&o(h+131072);for(var P=(1<<l)-1,Z=(1<<c)-1,W=C;;W=C){var N=B[It(e,C)&P],H=N>>4;if(C+=N&15,C>Q){I&&V(0);break}if(N||V(2),H<256)t[h++]=H;else if(H==256){W=C,B=null;break}else{var K=H-254;if(H>264){var S=H-257,_=pt[S];K=BA(e,C,(1<<_)-1)+dt[S],C+=_}var R=E[It(e,C)&Z],p=R>>4;R||V(3),C+=R&15;var T=os[p];if(p>3){var _=Ft[p];T+=It(e,C)&(1<<_)-1,C+=_}if(C>Q){I&&V(0);break}r&&o(h+131072);var eA=h+K;if(h<T){var iA=n-T,IA=Math.min(T,eA);for(iA+h<0&&V(3);h<IA;++h)t[h]=s[iA+h]}for(;h<eA;++h)t[h]=t[h-T]}}A.l=B,A.p=W,A.b=h,A.f=a,B&&(a=1,A.m=l,A.d=E,A.n=c)}while(!a);return h!=t.length&&g?dA(t,0,h):t.subarray(0,h)},ge=new j(0),re=function(e,A){var t={};for(var s in e)t[s]=e[s];for(var s in A)t[s]=A[s];return t},Es=function(e,A,t){for(var s=e(),i=e.toString(),n=i.slice(i.indexOf("[")+1,i.lastIndexOf("]")).replace(/\\s+/g,"").split(","),g=0;g<s.length;++g){var r=s[g],I=n[g];if(typeof r=="function"){A+=";"+I+"=";var o=r.toString();if(r.prototype)if(o.indexOf("[native code]")!=-1){var a=o.indexOf(" ",8)+1;A+=o.slice(a,o.indexOf("(",a))}else{A+=o;for(var C in r.prototype)A+=";"+I+".prototype."+C+"="+r.prototype[C].toString()}else A+=o}else t[I]=r}return A},ot=[],Ie=function(e){var A=[];for(var t in e)e[t].buffer&&A.push((e[t]=new e[t].constructor(e[t])).buffer);return A},oe=function(e,A,t,s){if(!ot[t]){for(var i="",n={},g=e.length-1,r=0;r<g;++r)i=Es(e[r],i,n);ot[t]={c:Es(e[g],i,n),e:n}}var I=re({},ot[t].e);return ee(ot[t].c+";onmessage=function(e){for(var k in e.data)self[k]=e.data[k];onmessage="+A.toString()+"}",t,I,Ie(I),s)},ae=function(){return[j,_A,ns,pt,Ft,gs,dt,os,Cs,Bs,gt,hs,LA,rt,BA,It,Nt,dA,V,kt,at,Qs,cs]},Qs=function(e){return postMessage(e,[e.buffer])},cs=function(e){return e&&{out:e.size&&new j(e.size),dictionary:e.dictionary}},Ce=function(e,A,t,s,i,n){var g=oe(t,s,i,function(r,I){g.terminate(),n(r,I)});return g.postMessage([e,A],A.consume?[e.buffer]:[]),function(){g.terminate()}},lA=function(e,A){return e[A]|e[A+1]<<8},tA=function(e,A){return(e[A]|e[A+1]<<8|e[A+2]<<16|e[A+3]<<24)>>>0},Ut=function(e,A){return tA(e,A)+tA(e,A+4)*4294967296},Be=function(e){(e[0]!=31||e[1]!=139||e[2]!=8)&&V(6,"invalid gzip data");var A=e[3],t=10;A&4&&(t+=(e[10]|e[11]<<8)+2);for(var s=(A>>3&1)+(A>>4&1);s>0;s-=!e[t++]);return t+(A&2)},Gt=function(){function e(A,t){typeof A=="function"&&(t=A,A={}),this.ondata=t;var s=A&&A.dictionary&&A.dictionary.subarray(-32768);this.s={i:0,b:s?s.length:0},this.o=new j(32768),this.p=new j(0),s&&this.o.set(s)}return e.prototype.e=function(A){if(this.ondata||V(5),this.d&&V(4),!this.p.length)this.p=A;else if(A.length){var t=new j(this.p.length+A.length);t.set(this.p),t.set(A,this.p.length),this.p=t}},e.prototype.c=function(A){this.s.i=+(this.d=A||!1);var t=this.s.b,s=kt(this.p,this.s,this.o);this.ondata(dA(s,t,this.s.b),this.d),this.o=dA(s,this.s.b-32768),this.s.b=this.o.length,this.p=dA(this.p,this.s.p/8|0),this.s.p&=7},e.prototype.push=function(A,t){this.e(A),this.c(t)},e}();function he(e,A,t){return t||(t=A,A={}),typeof t!="function"&&V(7),Ce(e,A,[ae],function(s){return Qs(at(s.data[0],cs(s.data[1])))},1,t)}function at(e,A){return kt(e,{i:2},A&&A.out,A&&A.dictionary)}var ls=function(){function e(A,t){this.v=1,this.r=0,Gt.call(this,A,t)}return e.prototype.push=function(A,t){if(Gt.prototype.e.call(this,A),this.r+=A.length,this.v){var s=this.p.subarray(this.v-1),i=s.length>3?Be(s):4;if(i>s.length){if(!t)return}else this.v>1&&this.onmember&&this.onmember(this.r-s.length);this.p=s.subarray(i),this.v=0}Gt.prototype.c.call(this,t),this.s.f&&!this.s.l&&!t&&(this.v=Nt(this.s.p)+9,this.s={i:0},this.o=new j(0),this.push(new j(0),t))},e}(),Yt=typeof TextDecoder<"u"&&new TextDecoder;try{Yt.decode(ge,{stream:!0})}catch{}var Ee=function(e){for(var A="",t=0;;){var s=e[t++],i=(s>127)+(s>223)+(s>239);if(t+i>e.length)return{s:A,r:dA(e,t-1)};i?i==3?(s=((s&15)<<18|(e[t++]&63)<<12|(e[t++]&63)<<6|e[t++]&63)-65536,A+=String.fromCharCode(55296|s>>10,56320|s&1023)):i&1?A+=String.fromCharCode((s&31)<<6|e[t++]&63):A+=String.fromCharCode((s&15)<<12|(e[t++]&63)<<6|e[t++]&63):A+=String.fromCharCode(s)}};function Qe(e,A){if(A){for(var t="",s=0;s<e.length;s+=16384)t+=String.fromCharCode.apply(null,e.subarray(s,s+16384));return t}else{if(Yt)return Yt.decode(e);var i=Ee(e),n=i.s,t=i.r;return t.length&&V(8),n}}var us=function(e,A){return A+30+lA(e,A+26)+lA(e,A+28)},ys=function(e,A,t){var s=lA(e,A+28),i=Qe(e.subarray(A+46,A+46+s),!(lA(e,A+8)&2048)),n=A+46+s,g=tA(e,A+20),r=t&&g==4294967295?ce(e,n):[g,tA(e,A+24),tA(e,A+42)],I=r[0],o=r[1],a=r[2];return[lA(e,A+10),I,o,i,n+lA(e,A+30)+lA(e,A+32),a]},ce=function(e,A){for(;lA(e,A)!=1;A+=4+lA(e,A+2));return[Ut(e,A+12),Ut(e,A+4),Ut(e,A+20)]},fs=typeof queueMicrotask=="function"?queueMicrotask:typeof setTimeout=="function"?setTimeout:function(e){e()};function le(e,A,t){t||(t=A,A={}),typeof t!="function"&&V(7);var s=[],i=function(){for(var c=0;c<s.length;++c)s[c]()},n={},g=function(c,Q){fs(function(){t(c,Q)})};fs(function(){g=t});for(var r=e.length-22;tA(e,r)!=101010256;--r)if(!r||e.length-r>65558)return g(V(13,0,1),null),i;var I=lA(e,r+8);if(I){var o=I,a=tA(e,r+16),C=a==4294967295||o==65535;if(C){var h=tA(e,r-12);C=tA(e,h)==101075792,C&&(o=I=tA(e,h+32),a=tA(e,h+48))}for(var B=A&&A.filter,E=function(c){var Q=ys(e,a,C),u=Q[0],y=Q[1],f=Q[2],D=Q[3],F=Q[4],J=Q[5],x=us(e,J);a=F;var m=function(S,w){S?(i(),g(S,null)):(w&&(n[D]=w),--I||g(null,n))};if(!B||B({name:D,size:y,originalSize:f,compression:u}))if(!u)m(null,dA(e,x,x+y));else if(u==8){var U=e.subarray(x,x+y);if(f<524288||y>.8*f)try{m(null,at(U,{out:new j(f)}))}catch(S){m(S,null)}else s.push(he(U,{size:f},m))}else m(V(14,"unknown compression type "+u,1),null);else m(null,null)},l=0;l<o;++l)E(l)}else g(null,{});return i}function ue(e,A){for(var t={},s=e.length-22;tA(e,s)!=101010256;--s)(!s||e.length-s>65558)&&V(13);var i=lA(e,s+8);if(!i)return{};var n=tA(e,s+16),g=n==4294967295||i==65535;if(g){var r=tA(e,s-12);g=tA(e,r)==101075792,g&&(i=tA(e,r+32),n=tA(e,r+48))}for(var I=A&&A.filter,o=0;o<i;++o){var a=ys(e,n,g),C=a[0],h=a[1],B=a[2],E=a[3],l=a[4],c=a[5],Q=us(e,c);n=l,(!I||I({name:E,size:h,originalSize:B,compression:C}))&&(C?C==8?t[E]=at(e.subarray(Q,Q+h),{out:new j(B)}):V(14,"unknown compression type "+C):t[E]=dA(e,Q,Q+h))}return t}/**\n * @license\n * Copyright 2010-2024 Three.js Authors\n * SPDX-License-Identifier: MIT\n */const ws="172",ye="",uA="srgb",ms="srgb-linear",xs="linear",Rt="srgb";function rA(e,A,t){return Math.max(A,Math.min(t,e))}function fe(e,A){return(e%A+A)%A}function Jt(e,A,t){return(1-t)*e+t*A}class $A{constructor(A,t,s,i,n,g,r,I,o){$A.prototype.isMatrix3=!0,this.elements=[1,0,0,0,1,0,0,0,1],A!==void 0&&this.set(A,t,s,i,n,g,r,I,o)}set(A,t,s,i,n,g,r,I,o){const a=this.elements;return a[0]=A,a[1]=i,a[2]=r,a[3]=t,a[4]=n,a[5]=I,a[6]=s,a[7]=g,a[8]=o,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(A){const t=this.elements,s=A.elements;return t[0]=s[0],t[1]=s[1],t[2]=s[2],t[3]=s[3],t[4]=s[4],t[5]=s[5],t[6]=s[6],t[7]=s[7],t[8]=s[8],this}extractBasis(A,t,s){return A.setFromMatrix3Column(this,0),t.setFromMatrix3Column(this,1),s.setFromMatrix3Column(this,2),this}setFromMatrix4(A){const t=A.elements;return this.set(t[0],t[4],t[8],t[1],t[5],t[9],t[2],t[6],t[10]),this}multiply(A){return this.multiplyMatrices(this,A)}premultiply(A){return this.multiplyMatrices(A,this)}multiplyMatrices(A,t){const s=A.elements,i=t.elements,n=this.elements,g=s[0],r=s[3],I=s[6],o=s[1],a=s[4],C=s[7],h=s[2],B=s[5],E=s[8],l=i[0],c=i[3],Q=i[6],u=i[1],y=i[4],f=i[7],D=i[2],F=i[5],J=i[8];return n[0]=g*l+r*u+I*D,n[3]=g*c+r*y+I*F,n[6]=g*Q+r*f+I*J,n[1]=o*l+a*u+C*D,n[4]=o*c+a*y+C*F,n[7]=o*Q+a*f+C*J,n[2]=h*l+B*u+E*D,n[5]=h*c+B*y+E*F,n[8]=h*Q+B*f+E*J,this}multiplyScalar(A){const t=this.elements;return t[0]*=A,t[3]*=A,t[6]*=A,t[1]*=A,t[4]*=A,t[7]*=A,t[2]*=A,t[5]*=A,t[8]*=A,this}determinant(){const A=this.elements,t=A[0],s=A[1],i=A[2],n=A[3],g=A[4],r=A[5],I=A[6],o=A[7],a=A[8];return t*g*a-t*r*o-s*n*a+s*r*I+i*n*o-i*g*I}invert(){const A=this.elements,t=A[0],s=A[1],i=A[2],n=A[3],g=A[4],r=A[5],I=A[6],o=A[7],a=A[8],C=a*g-r*o,h=r*I-a*n,B=o*n-g*I,E=t*C+s*h+i*B;if(E===0)return this.set(0,0,0,0,0,0,0,0,0);const l=1/E;return A[0]=C*l,A[1]=(i*o-a*s)*l,A[2]=(r*s-i*g)*l,A[3]=h*l,A[4]=(a*t-i*I)*l,A[5]=(i*n-r*t)*l,A[6]=B*l,A[7]=(s*I-o*t)*l,A[8]=(g*t-s*n)*l,this}transpose(){let A;const t=this.elements;return A=t[1],t[1]=t[3],t[3]=A,A=t[2],t[2]=t[6],t[6]=A,A=t[5],t[5]=t[7],t[7]=A,this}getNormalMatrix(A){return this.setFromMatrix4(A).invert().transpose()}transposeIntoArray(A){const t=this.elements;return A[0]=t[0],A[1]=t[3],A[2]=t[6],A[3]=t[1],A[4]=t[4],A[5]=t[7],A[6]=t[2],A[7]=t[5],A[8]=t[8],this}setUvTransform(A,t,s,i,n,g,r){const I=Math.cos(n),o=Math.sin(n);return this.set(s*I,s*o,-s*(I*g+o*r)+g+A,-i*o,i*I,-i*(-o*g+I*r)+r+t,0,0,1),this}scale(A,t){return this.premultiply(_t.makeScale(A,t)),this}rotate(A){return this.premultiply(_t.makeRotation(-A)),this}translate(A,t){return this.premultiply(_t.makeTranslation(A,t)),this}makeTranslation(A,t){return A.isVector2?this.set(1,0,A.x,0,1,A.y,0,0,1):this.set(1,0,A,0,1,t,0,0,1),this}makeRotation(A){const t=Math.cos(A),s=Math.sin(A);return this.set(t,-s,0,s,t,0,0,0,1),this}makeScale(A,t){return this.set(A,0,0,0,t,0,0,0,1),this}equals(A){const t=this.elements,s=A.elements;for(let i=0;i<9;i++)if(t[i]!==s[i])return!1;return!0}fromArray(A,t=0){for(let s=0;s<9;s++)this.elements[s]=A[s+t];return this}toArray(A=[],t=0){const s=this.elements;return A[t]=s[0],A[t+1]=s[1],A[t+2]=s[2],A[t+3]=s[3],A[t+4]=s[4],A[t+5]=s[5],A[t+6]=s[6],A[t+7]=s[7],A[t+8]=s[8],A}clone(){return new this.constructor().fromArray(this.elements)}}const _t=new $A,Ds=new $A().set(.4123908,.3575843,.1804808,.212639,.7151687,.0721923,.0193308,.1191948,.9505322),Ss=new $A().set(3.2409699,-1.5373832,-.4986108,-.9692436,1.8759675,.0415551,.0556301,-.203977,1.0569715);function we(){const e={enabled:!0,workingColorSpace:ms,spaces:{},convert:function(i,n,g){return this.enabled===!1||n===g||!n||!g||(this.spaces[n].transfer===Rt&&(i.r=vA(i.r),i.g=vA(i.g),i.b=vA(i.b)),this.spaces[n].primaries!==this.spaces[g].primaries&&(i.applyMatrix3(this.spaces[n].toXYZ),i.applyMatrix3(this.spaces[g].fromXYZ)),this.spaces[g].transfer===Rt&&(i.r=TA(i.r),i.g=TA(i.g),i.b=TA(i.b))),i},fromWorkingColorSpace:function(i,n){return this.convert(i,this.workingColorSpace,n)},toWorkingColorSpace:function(i,n){return this.convert(i,n,this.workingColorSpace)},getPrimaries:function(i){return this.spaces[i].primaries},getTransfer:function(i){return i===ye?xs:this.spaces[i].transfer},getLuminanceCoefficients:function(i,n=this.workingColorSpace){return i.fromArray(this.spaces[n].luminanceCoefficients)},define:function(i){Object.assign(this.spaces,i)},_getMatrix:function(i,n,g){return i.copy(this.spaces[n].toXYZ).multiply(this.spaces[g].fromXYZ)},_getDrawingBufferColorSpace:function(i){return this.spaces[i].outputColorSpaceConfig.drawingBufferColorSpace},_getUnpackColorSpace:function(i=this.workingColorSpace){return this.spaces[i].workingColorSpaceConfig.unpackColorSpace}},A=[.64,.33,.3,.6,.15,.06],t=[.2126,.7152,.0722],s=[.3127,.329];return e.define({[ms]:{primaries:A,whitePoint:s,transfer:xs,toXYZ:Ds,fromXYZ:Ss,luminanceCoefficients:t,workingColorSpaceConfig:{unpackColorSpace:uA},outputColorSpaceConfig:{drawingBufferColorSpace:uA}},[uA]:{primaries:A,whitePoint:s,transfer:Rt,toXYZ:Ds,fromXYZ:Ss,luminanceCoefficients:t,outputColorSpaceConfig:{drawingBufferColorSpace:uA}}}),e}const yA=we();function vA(e){return e<.04045?e*.0773993808:Math.pow(e*.9478672986+.0521327014,2.4)}function TA(e){return e<.0031308?e*12.92:1.055*Math.pow(e,.41666)-.055}class NA{constructor(A=0,t=0,s=0,i=1){this.isQuaternion=!0,this._x=A,this._y=t,this._z=s,this._w=i}static slerpFlat(A,t,s,i,n,g,r){let I=s[i+0],o=s[i+1],a=s[i+2],C=s[i+3];const h=n[g+0],B=n[g+1],E=n[g+2],l=n[g+3];if(r===0){A[t+0]=I,A[t+1]=o,A[t+2]=a,A[t+3]=C;return}if(r===1){A[t+0]=h,A[t+1]=B,A[t+2]=E,A[t+3]=l;return}if(C!==l||I!==h||o!==B||a!==E){let c=1-r;const Q=I*h+o*B+a*E+C*l,u=Q>=0?1:-1,y=1-Q*Q;if(y>Number.EPSILON){const D=Math.sqrt(y),F=Math.atan2(D,Q*u);c=Math.sin(c*F)/D,r=Math.sin(r*F)/D}const f=r*u;if(I=I*c+h*f,o=o*c+B*f,a=a*c+E*f,C=C*c+l*f,c===1-r){const D=1/Math.sqrt(I*I+o*o+a*a+C*C);I*=D,o*=D,a*=D,C*=D}}A[t]=I,A[t+1]=o,A[t+2]=a,A[t+3]=C}static multiplyQuaternionsFlat(A,t,s,i,n,g){const r=s[i],I=s[i+1],o=s[i+2],a=s[i+3],C=n[g],h=n[g+1],B=n[g+2],E=n[g+3];return A[t]=r*E+a*C+I*B-o*h,A[t+1]=I*E+a*h+o*C-r*B,A[t+2]=o*E+a*B+r*h-I*C,A[t+3]=a*E-r*C-I*h-o*B,A}get x(){return this._x}set x(A){this._x=A,this._onChangeCallback()}get y(){return this._y}set y(A){this._y=A,this._onChangeCallback()}get z(){return this._z}set z(A){this._z=A,this._onChangeCallback()}get w(){return this._w}set w(A){this._w=A,this._onChangeCallback()}set(A,t,s,i){return this._x=A,this._y=t,this._z=s,this._w=i,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(A){return this._x=A.x,this._y=A.y,this._z=A.z,this._w=A.w,this._onChangeCallback(),this}setFromEuler(A,t=!0){const s=A._x,i=A._y,n=A._z,g=A._order,r=Math.cos,I=Math.sin,o=r(s/2),a=r(i/2),C=r(n/2),h=I(s/2),B=I(i/2),E=I(n/2);switch(g){case"XYZ":this._x=h*a*C+o*B*E,this._y=o*B*C-h*a*E,this._z=o*a*E+h*B*C,this._w=o*a*C-h*B*E;break;case"YXZ":this._x=h*a*C+o*B*E,this._y=o*B*C-h*a*E,this._z=o*a*E-h*B*C,this._w=o*a*C+h*B*E;break;case"ZXY":this._x=h*a*C-o*B*E,this._y=o*B*C+h*a*E,this._z=o*a*E+h*B*C,this._w=o*a*C-h*B*E;break;case"ZYX":this._x=h*a*C-o*B*E,this._y=o*B*C+h*a*E,this._z=o*a*E-h*B*C,this._w=o*a*C+h*B*E;break;case"YZX":this._x=h*a*C+o*B*E,this._y=o*B*C+h*a*E,this._z=o*a*E-h*B*C,this._w=o*a*C-h*B*E;break;case"XZY":this._x=h*a*C-o*B*E,this._y=o*B*C-h*a*E,this._z=o*a*E+h*B*C,this._w=o*a*C+h*B*E;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+g)}return t===!0&&this._onChangeCallback(),this}setFromAxisAngle(A,t){const s=t/2,i=Math.sin(s);return this._x=A.x*i,this._y=A.y*i,this._z=A.z*i,this._w=Math.cos(s),this._onChangeCallback(),this}setFromRotationMatrix(A){const t=A.elements,s=t[0],i=t[4],n=t[8],g=t[1],r=t[5],I=t[9],o=t[2],a=t[6],C=t[10],h=s+r+C;if(h>0){const B=.5/Math.sqrt(h+1);this._w=.25/B,this._x=(a-I)*B,this._y=(n-o)*B,this._z=(g-i)*B}else if(s>r&&s>C){const B=2*Math.sqrt(1+s-r-C);this._w=(a-I)/B,this._x=.25*B,this._y=(i+g)/B,this._z=(n+o)/B}else if(r>C){const B=2*Math.sqrt(1+r-s-C);this._w=(n-o)/B,this._x=(i+g)/B,this._y=.25*B,this._z=(I+a)/B}else{const B=2*Math.sqrt(1+C-s-r);this._w=(g-i)/B,this._x=(n+o)/B,this._y=(I+a)/B,this._z=.25*B}return this._onChangeCallback(),this}setFromUnitVectors(A,t){let s=A.dot(t)+1;return s<Number.EPSILON?(s=0,Math.abs(A.x)>Math.abs(A.z)?(this._x=-A.y,this._y=A.x,this._z=0,this._w=s):(this._x=0,this._y=-A.z,this._z=A.y,this._w=s)):(this._x=A.y*t.z-A.z*t.y,this._y=A.z*t.x-A.x*t.z,this._z=A.x*t.y-A.y*t.x,this._w=s),this.normalize()}angleTo(A){return 2*Math.acos(Math.abs(rA(this.dot(A),-1,1)))}rotateTowards(A,t){const s=this.angleTo(A);if(s===0)return this;const i=Math.min(1,t/s);return this.slerp(A,i),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(A){return this._x*A._x+this._y*A._y+this._z*A._z+this._w*A._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let A=this.length();return A===0?(this._x=0,this._y=0,this._z=0,this._w=1):(A=1/A,this._x=this._x*A,this._y=this._y*A,this._z=this._z*A,this._w=this._w*A),this._onChangeCallback(),this}multiply(A){return this.multiplyQuaternions(this,A)}premultiply(A){return this.multiplyQuaternions(A,this)}multiplyQuaternions(A,t){const s=A._x,i=A._y,n=A._z,g=A._w,r=t._x,I=t._y,o=t._z,a=t._w;return this._x=s*a+g*r+i*o-n*I,this._y=i*a+g*I+n*r-s*o,this._z=n*a+g*o+s*I-i*r,this._w=g*a-s*r-i*I-n*o,this._onChangeCallback(),this}slerp(A,t){if(t===0)return this;if(t===1)return this.copy(A);const s=this._x,i=this._y,n=this._z,g=this._w;let r=g*A._w+s*A._x+i*A._y+n*A._z;if(r<0?(this._w=-A._w,this._x=-A._x,this._y=-A._y,this._z=-A._z,r=-r):this.copy(A),r>=1)return this._w=g,this._x=s,this._y=i,this._z=n,this;const I=1-r*r;if(I<=Number.EPSILON){const B=1-t;return this._w=B*g+t*this._w,this._x=B*s+t*this._x,this._y=B*i+t*this._y,this._z=B*n+t*this._z,this.normalize(),this}const o=Math.sqrt(I),a=Math.atan2(o,r),C=Math.sin((1-t)*a)/o,h=Math.sin(t*a)/o;return this._w=g*C+this._w*h,this._x=s*C+this._x*h,this._y=i*C+this._y*h,this._z=n*C+this._z*h,this._onChangeCallback(),this}slerpQuaternions(A,t,s){return this.copy(A).slerp(t,s)}random(){const A=2*Math.PI*Math.random(),t=2*Math.PI*Math.random(),s=Math.random(),i=Math.sqrt(1-s),n=Math.sqrt(s);return this.set(i*Math.sin(A),i*Math.cos(A),n*Math.sin(t),n*Math.cos(t))}equals(A){return A._x===this._x&&A._y===this._y&&A._z===this._z&&A._w===this._w}fromArray(A,t=0){return this._x=A[t],this._y=A[t+1],this._z=A[t+2],this._w=A[t+3],this._onChangeCallback(),this}toArray(A=[],t=0){return A[t]=this._x,A[t+1]=this._y,A[t+2]=this._z,A[t+3]=this._w,A}fromBufferAttribute(A,t){return this._x=A.getX(t),this._y=A.getY(t),this._z=A.getZ(t),this._w=A.getW(t),this._onChangeCallback(),this}toJSON(){return this.toArray()}_onChange(A){return this._onChangeCallback=A,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._w}}class d{constructor(A=0,t=0,s=0){d.prototype.isVector3=!0,this.x=A,this.y=t,this.z=s}set(A,t,s){return s===void 0&&(s=this.z),this.x=A,this.y=t,this.z=s,this}setScalar(A){return this.x=A,this.y=A,this.z=A,this}setX(A){return this.x=A,this}setY(A){return this.y=A,this}setZ(A){return this.z=A,this}setComponent(A,t){switch(A){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;default:throw new Error("index is out of range: "+A)}return this}getComponent(A){switch(A){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+A)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(A){return this.x=A.x,this.y=A.y,this.z=A.z,this}add(A){return this.x+=A.x,this.y+=A.y,this.z+=A.z,this}addScalar(A){return this.x+=A,this.y+=A,this.z+=A,this}addVectors(A,t){return this.x=A.x+t.x,this.y=A.y+t.y,this.z=A.z+t.z,this}addScaledVector(A,t){return this.x+=A.x*t,this.y+=A.y*t,this.z+=A.z*t,this}sub(A){return this.x-=A.x,this.y-=A.y,this.z-=A.z,this}subScalar(A){return this.x-=A,this.y-=A,this.z-=A,this}subVectors(A,t){return this.x=A.x-t.x,this.y=A.y-t.y,this.z=A.z-t.z,this}multiply(A){return this.x*=A.x,this.y*=A.y,this.z*=A.z,this}multiplyScalar(A){return this.x*=A,this.y*=A,this.z*=A,this}multiplyVectors(A,t){return this.x=A.x*t.x,this.y=A.y*t.y,this.z=A.z*t.z,this}applyEuler(A){return this.applyQuaternion(Ms.setFromEuler(A))}applyAxisAngle(A,t){return this.applyQuaternion(Ms.setFromAxisAngle(A,t))}applyMatrix3(A){const t=this.x,s=this.y,i=this.z,n=A.elements;return this.x=n[0]*t+n[3]*s+n[6]*i,this.y=n[1]*t+n[4]*s+n[7]*i,this.z=n[2]*t+n[5]*s+n[8]*i,this}applyNormalMatrix(A){return this.applyMatrix3(A).normalize()}applyMatrix4(A){const t=this.x,s=this.y,i=this.z,n=A.elements,g=1/(n[3]*t+n[7]*s+n[11]*i+n[15]);return this.x=(n[0]*t+n[4]*s+n[8]*i+n[12])*g,this.y=(n[1]*t+n[5]*s+n[9]*i+n[13])*g,this.z=(n[2]*t+n[6]*s+n[10]*i+n[14])*g,this}applyQuaternion(A){const t=this.x,s=this.y,i=this.z,n=A.x,g=A.y,r=A.z,I=A.w,o=2*(g*i-r*s),a=2*(r*t-n*i),C=2*(n*s-g*t);return this.x=t+I*o+g*C-r*a,this.y=s+I*a+r*o-n*C,this.z=i+I*C+n*a-g*o,this}project(A){return this.applyMatrix4(A.matrixWorldInverse).applyMatrix4(A.projectionMatrix)}unproject(A){return this.applyMatrix4(A.projectionMatrixInverse).applyMatrix4(A.matrixWorld)}transformDirection(A){const t=this.x,s=this.y,i=this.z,n=A.elements;return this.x=n[0]*t+n[4]*s+n[8]*i,this.y=n[1]*t+n[5]*s+n[9]*i,this.z=n[2]*t+n[6]*s+n[10]*i,this.normalize()}divide(A){return this.x/=A.x,this.y/=A.y,this.z/=A.z,this}divideScalar(A){return this.multiplyScalar(1/A)}min(A){return this.x=Math.min(this.x,A.x),this.y=Math.min(this.y,A.y),this.z=Math.min(this.z,A.z),this}max(A){return this.x=Math.max(this.x,A.x),this.y=Math.max(this.y,A.y),this.z=Math.max(this.z,A.z),this}clamp(A,t){return this.x=rA(this.x,A.x,t.x),this.y=rA(this.y,A.y,t.y),this.z=rA(this.z,A.z,t.z),this}clampScalar(A,t){return this.x=rA(this.x,A,t),this.y=rA(this.y,A,t),this.z=rA(this.z,A,t),this}clampLength(A,t){const s=this.length();return this.divideScalar(s||1).multiplyScalar(rA(s,A,t))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(A){return this.x*A.x+this.y*A.y+this.z*A.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(A){return this.normalize().multiplyScalar(A)}lerp(A,t){return this.x+=(A.x-this.x)*t,this.y+=(A.y-this.y)*t,this.z+=(A.z-this.z)*t,this}lerpVectors(A,t,s){return this.x=A.x+(t.x-A.x)*s,this.y=A.y+(t.y-A.y)*s,this.z=A.z+(t.z-A.z)*s,this}cross(A){return this.crossVectors(this,A)}crossVectors(A,t){const s=A.x,i=A.y,n=A.z,g=t.x,r=t.y,I=t.z;return this.x=i*I-n*r,this.y=n*g-s*I,this.z=s*r-i*g,this}projectOnVector(A){const t=A.lengthSq();if(t===0)return this.set(0,0,0);const s=A.dot(this)/t;return this.copy(A).multiplyScalar(s)}projectOnPlane(A){return bt.copy(this).projectOnVector(A),this.sub(bt)}reflect(A){return this.sub(bt.copy(A).multiplyScalar(2*this.dot(A)))}angleTo(A){const t=Math.sqrt(this.lengthSq()*A.lengthSq());if(t===0)return Math.PI/2;const s=this.dot(A)/t;return Math.acos(rA(s,-1,1))}distanceTo(A){return Math.sqrt(this.distanceToSquared(A))}distanceToSquared(A){const t=this.x-A.x,s=this.y-A.y,i=this.z-A.z;return t*t+s*s+i*i}manhattanDistanceTo(A){return Math.abs(this.x-A.x)+Math.abs(this.y-A.y)+Math.abs(this.z-A.z)}setFromSpherical(A){return this.setFromSphericalCoords(A.radius,A.phi,A.theta)}setFromSphericalCoords(A,t,s){const i=Math.sin(t)*A;return this.x=i*Math.sin(s),this.y=Math.cos(t)*A,this.z=i*Math.cos(s),this}setFromCylindrical(A){return this.setFromCylindricalCoords(A.radius,A.theta,A.y)}setFromCylindricalCoords(A,t,s){return this.x=A*Math.sin(t),this.y=s,this.z=A*Math.cos(t),this}setFromMatrixPosition(A){const t=A.elements;return this.x=t[12],this.y=t[13],this.z=t[14],this}setFromMatrixScale(A){const t=this.setFromMatrixColumn(A,0).length(),s=this.setFromMatrixColumn(A,1).length(),i=this.setFromMatrixColumn(A,2).length();return this.x=t,this.y=s,this.z=i,this}setFromMatrixColumn(A,t){return this.fromArray(A.elements,t*4)}setFromMatrix3Column(A,t){return this.fromArray(A.elements,t*3)}setFromEuler(A){return this.x=A._x,this.y=A._y,this.z=A._z,this}setFromColor(A){return this.x=A.r,this.y=A.g,this.z=A.b,this}equals(A){return A.x===this.x&&A.y===this.y&&A.z===this.z}fromArray(A,t=0){return this.x=A[t],this.y=A[t+1],this.z=A[t+2],this}toArray(A=[],t=0){return A[t]=this.x,A[t+1]=this.y,A[t+2]=this.z,A}fromBufferAttribute(A,t){return this.x=A.getX(t),this.y=A.getY(t),this.z=A.getZ(t),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){const A=Math.random()*Math.PI*2,t=Math.random()*2-1,s=Math.sqrt(1-t*t);return this.x=s*Math.cos(A),this.y=t,this.z=s*Math.sin(A),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}}const bt=new d,Ms=new NA;class ps{constructor(A=new d(1/0,1/0,1/0),t=new d(-1/0,-1/0,-1/0)){this.isBox3=!0,this.min=A,this.max=t}set(A,t){return this.min.copy(A),this.max.copy(t),this}setFromArray(A){this.makeEmpty();for(let t=0,s=A.length;t<s;t+=3)this.expandByPoint(fA.fromArray(A,t));return this}setFromBufferAttribute(A){this.makeEmpty();for(let t=0,s=A.count;t<s;t++)this.expandByPoint(fA.fromBufferAttribute(A,t));return this}setFromPoints(A){this.makeEmpty();for(let t=0,s=A.length;t<s;t++)this.expandByPoint(A[t]);return this}setFromCenterAndSize(A,t){const s=fA.copy(t).multiplyScalar(.5);return this.min.copy(A).sub(s),this.max.copy(A).add(s),this}setFromObject(A,t=!1){return this.makeEmpty(),this.expandByObject(A,t)}clone(){return new this.constructor().copy(this)}copy(A){return this.min.copy(A.min),this.max.copy(A.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(A){return this.isEmpty()?A.set(0,0,0):A.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(A){return this.isEmpty()?A.set(0,0,0):A.subVectors(this.max,this.min)}expandByPoint(A){return this.min.min(A),this.max.max(A),this}expandByVector(A){return this.min.sub(A),this.max.add(A),this}expandByScalar(A){return this.min.addScalar(-A),this.max.addScalar(A),this}expandByObject(A,t=!1){A.updateWorldMatrix(!1,!1);const s=A.geometry;if(s!==void 0){const n=s.getAttribute("position");if(t===!0&&n!==void 0&&A.isInstancedMesh!==!0)for(let g=0,r=n.count;g<r;g++)A.isMesh===!0?A.getVertexPosition(g,fA):fA.fromBufferAttribute(n,g),fA.applyMatrix4(A.matrixWorld),this.expandByPoint(fA);else A.boundingBox!==void 0?(A.boundingBox===null&&A.computeBoundingBox(),Ct.copy(A.boundingBox)):(s.boundingBox===null&&s.computeBoundingBox(),Ct.copy(s.boundingBox)),Ct.applyMatrix4(A.matrixWorld),this.union(Ct)}const i=A.children;for(let n=0,g=i.length;n<g;n++)this.expandByObject(i[n],t);return this}containsPoint(A){return A.x>=this.min.x&&A.x<=this.max.x&&A.y>=this.min.y&&A.y<=this.max.y&&A.z>=this.min.z&&A.z<=this.max.z}containsBox(A){return this.min.x<=A.min.x&&A.max.x<=this.max.x&&this.min.y<=A.min.y&&A.max.y<=this.max.y&&this.min.z<=A.min.z&&A.max.z<=this.max.z}getParameter(A,t){return t.set((A.x-this.min.x)/(this.max.x-this.min.x),(A.y-this.min.y)/(this.max.y-this.min.y),(A.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(A){return A.max.x>=this.min.x&&A.min.x<=this.max.x&&A.max.y>=this.min.y&&A.min.y<=this.max.y&&A.max.z>=this.min.z&&A.min.z<=this.max.z}intersectsSphere(A){return this.clampPoint(A.center,fA),fA.distanceToSquared(A.center)<=A.radius*A.radius}intersectsPlane(A){let t,s;return A.normal.x>0?(t=A.normal.x*this.min.x,s=A.normal.x*this.max.x):(t=A.normal.x*this.max.x,s=A.normal.x*this.min.x),A.normal.y>0?(t+=A.normal.y*this.min.y,s+=A.normal.y*this.max.y):(t+=A.normal.y*this.max.y,s+=A.normal.y*this.min.y),A.normal.z>0?(t+=A.normal.z*this.min.z,s+=A.normal.z*this.max.z):(t+=A.normal.z*this.max.z,s+=A.normal.z*this.min.z),t<=-A.constant&&s>=-A.constant}intersectsTriangle(A){if(this.isEmpty())return!1;this.getCenter(At),Bt.subVectors(this.max,At),KA.subVectors(A.a,At),qA.subVectors(A.b,At),ZA.subVectors(A.c,At),kA.subVectors(qA,KA),UA.subVectors(ZA,qA),bA.subVectors(KA,ZA);let t=[0,-kA.z,kA.y,0,-UA.z,UA.y,0,-bA.z,bA.y,kA.z,0,-kA.x,UA.z,0,-UA.x,bA.z,0,-bA.x,-kA.y,kA.x,0,-UA.y,UA.x,0,-bA.y,bA.x,0];return!zt(t,KA,qA,ZA,Bt)||(t=[1,0,0,0,1,0,0,0,1],!zt(t,KA,qA,ZA,Bt))?!1:(ht.crossVectors(kA,UA),t=[ht.x,ht.y,ht.z],zt(t,KA,qA,ZA,Bt))}clampPoint(A,t){return t.copy(A).clamp(this.min,this.max)}distanceToPoint(A){return this.clampPoint(A,fA).distanceTo(A)}getBoundingSphere(A){return this.isEmpty()?A.makeEmpty():(this.getCenter(A.center),A.radius=this.getSize(fA).length()*.5),A}intersect(A){return this.min.max(A.min),this.max.min(A.max),this.isEmpty()&&this.makeEmpty(),this}union(A){return this.min.min(A.min),this.max.max(A.max),this}applyMatrix4(A){return this.isEmpty()?this:(MA[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(A),MA[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(A),MA[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(A),MA[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(A),MA[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(A),MA[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(A),MA[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(A),MA[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(A),this.setFromPoints(MA),this)}translate(A){return this.min.add(A),this.max.add(A),this}equals(A){return A.min.equals(this.min)&&A.max.equals(this.max)}}const MA=[new d,new d,new d,new d,new d,new d,new d,new d],fA=new d,Ct=new ps,KA=new d,qA=new d,ZA=new d,kA=new d,UA=new d,bA=new d,At=new d,Bt=new d,ht=new d,zA=new d;function zt(e,A,t,s,i){for(let n=0,g=e.length-3;n<=g;n+=3){zA.fromArray(e,n);const r=i.x*Math.abs(zA.x)+i.y*Math.abs(zA.y)+i.z*Math.abs(zA.z),I=A.dot(zA),o=t.dot(zA),a=s.dot(zA);if(Math.max(-Math.max(I,o,a),Math.min(I,o,a))>r)return!1}return!0}const Fs={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},GA={h:0,s:0,l:0},Et={h:0,s:0,l:0};function Ht(e,A,t){return t<0&&(t+=1),t>1&&(t-=1),t<1/6?e+(A-e)*6*t:t<1/2?A:t<2/3?e+(A-e)*6*(2/3-t):e}class Lt{constructor(A,t,s){return this.isColor=!0,this.r=1,this.g=1,this.b=1,this.set(A,t,s)}set(A,t,s){if(t===void 0&&s===void 0){const i=A;i&&i.isColor?this.copy(i):typeof i=="number"?this.setHex(i):typeof i=="string"&&this.setStyle(i)}else this.setRGB(A,t,s);return this}setScalar(A){return this.r=A,this.g=A,this.b=A,this}setHex(A,t=uA){return A=Math.floor(A),this.r=(A>>16&255)/255,this.g=(A>>8&255)/255,this.b=(A&255)/255,yA.toWorkingColorSpace(this,t),this}setRGB(A,t,s,i=yA.workingColorSpace){return this.r=A,this.g=t,this.b=s,yA.toWorkingColorSpace(this,i),this}setHSL(A,t,s,i=yA.workingColorSpace){if(A=fe(A,1),t=rA(t,0,1),s=rA(s,0,1),t===0)this.r=this.g=this.b=s;else{const n=s<=.5?s*(1+t):s+t-s*t,g=2*s-n;this.r=Ht(g,n,A+1/3),this.g=Ht(g,n,A),this.b=Ht(g,n,A-1/3)}return yA.toWorkingColorSpace(this,i),this}setStyle(A,t=uA){function s(n){n!==void 0&&parseFloat(n)<1&&console.warn("THREE.Color: Alpha component of "+A+" will be ignored.")}let i;if(i=/^(\\w+)\\(([^\\)]*)\\)/.exec(A)){let n;const g=i[1],r=i[2];switch(g){case"rgb":case"rgba":if(n=/^\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(r))return s(n[4]),this.setRGB(Math.min(255,parseInt(n[1],10))/255,Math.min(255,parseInt(n[2],10))/255,Math.min(255,parseInt(n[3],10))/255,t);if(n=/^\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(r))return s(n[4]),this.setRGB(Math.min(100,parseInt(n[1],10))/100,Math.min(100,parseInt(n[2],10))/100,Math.min(100,parseInt(n[3],10))/100,t);break;case"hsl":case"hsla":if(n=/^\\s*(\\d*\\.?\\d+)\\s*,\\s*(\\d*\\.?\\d+)\\%\\s*,\\s*(\\d*\\.?\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(r))return s(n[4]),this.setHSL(parseFloat(n[1])/360,parseFloat(n[2])/100,parseFloat(n[3])/100,t);break;default:console.warn("THREE.Color: Unknown color model "+A)}}else if(i=/^\\#([A-Fa-f\\d]+)$/.exec(A)){const n=i[1],g=n.length;if(g===3)return this.setRGB(parseInt(n.charAt(0),16)/15,parseInt(n.charAt(1),16)/15,parseInt(n.charAt(2),16)/15,t);if(g===6)return this.setHex(parseInt(n,16),t);console.warn("THREE.Color: Invalid hex color "+A)}else if(A&&A.length>0)return this.setColorName(A,t);return this}setColorName(A,t=uA){const s=Fs[A.toLowerCase()];return s!==void 0?this.setHex(s,t):console.warn("THREE.Color: Unknown color "+A),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(A){return this.r=A.r,this.g=A.g,this.b=A.b,this}copySRGBToLinear(A){return this.r=vA(A.r),this.g=vA(A.g),this.b=vA(A.b),this}copyLinearToSRGB(A){return this.r=TA(A.r),this.g=TA(A.g),this.b=TA(A.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(A=uA){return yA.fromWorkingColorSpace(sA.copy(this),A),Math.round(rA(sA.r*255,0,255))*65536+Math.round(rA(sA.g*255,0,255))*256+Math.round(rA(sA.b*255,0,255))}getHexString(A=uA){return("000000"+this.getHex(A).toString(16)).slice(-6)}getHSL(A,t=yA.workingColorSpace){yA.fromWorkingColorSpace(sA.copy(this),t);const s=sA.r,i=sA.g,n=sA.b,g=Math.max(s,i,n),r=Math.min(s,i,n);let I,o;const a=(r+g)/2;if(r===g)I=0,o=0;else{const C=g-r;switch(o=a<=.5?C/(g+r):C/(2-g-r),g){case s:I=(i-n)/C+(i<n?6:0);break;case i:I=(n-s)/C+2;break;case n:I=(s-i)/C+4;break}I/=6}return A.h=I,A.s=o,A.l=a,A}getRGB(A,t=yA.workingColorSpace){return yA.fromWorkingColorSpace(sA.copy(this),t),A.r=sA.r,A.g=sA.g,A.b=sA.b,A}getStyle(A=uA){yA.fromWorkingColorSpace(sA.copy(this),A);const t=sA.r,s=sA.g,i=sA.b;return A!==uA?`color(${A} ${t.toFixed(3)} ${s.toFixed(3)} ${i.toFixed(3)})`:`rgb(${Math.round(t*255)},${Math.round(s*255)},${Math.round(i*255)})`}offsetHSL(A,t,s){return this.getHSL(GA),this.setHSL(GA.h+A,GA.s+t,GA.l+s)}add(A){return this.r+=A.r,this.g+=A.g,this.b+=A.b,this}addColors(A,t){return this.r=A.r+t.r,this.g=A.g+t.g,this.b=A.b+t.b,this}addScalar(A){return this.r+=A,this.g+=A,this.b+=A,this}sub(A){return this.r=Math.max(0,this.r-A.r),this.g=Math.max(0,this.g-A.g),this.b=Math.max(0,this.b-A.b),this}multiply(A){return this.r*=A.r,this.g*=A.g,this.b*=A.b,this}multiplyScalar(A){return this.r*=A,this.g*=A,this.b*=A,this}lerp(A,t){return this.r+=(A.r-this.r)*t,this.g+=(A.g-this.g)*t,this.b+=(A.b-this.b)*t,this}lerpColors(A,t,s){return this.r=A.r+(t.r-A.r)*s,this.g=A.g+(t.g-A.g)*s,this.b=A.b+(t.b-A.b)*s,this}lerpHSL(A,t){this.getHSL(GA),A.getHSL(Et);const s=Jt(GA.h,Et.h,t),i=Jt(GA.s,Et.s,t),n=Jt(GA.l,Et.l,t);return this.setHSL(s,i,n),this}setFromVector3(A){return this.r=A.x,this.g=A.y,this.b=A.z,this}applyMatrix3(A){const t=this.r,s=this.g,i=this.b,n=A.elements;return this.r=n[0]*t+n[3]*s+n[6]*i,this.g=n[1]*t+n[4]*s+n[7]*i,this.b=n[2]*t+n[5]*s+n[8]*i,this}equals(A){return A.r===this.r&&A.g===this.g&&A.b===this.b}fromArray(A,t=0){return this.r=A[t],this.g=A[t+1],this.b=A[t+2],this}toArray(A=[],t=0){return A[t]=this.r,A[t+1]=this.g,A[t+2]=this.b,A}fromBufferAttribute(A,t){return this.r=A.getX(t),this.g=A.getY(t),this.b=A.getZ(t),this}toJSON(){return this.getHex()}*[Symbol.iterator](){yield this.r,yield this.g,yield this.b}}const sA=new Lt;Lt.NAMES=Fs,typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:ws}})),typeof window<"u"&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__=ws);const ds=-12,Ns=9,XA=Math.exp(-30),me=11,xe=11,ks=1<<me,Us=1<<xe,Gs=1;function De(e){var n;let A=!1;const t=e.split(`\n`).map(g=>{const r=g.trimEnd();return A?r:r.length>0?(A=!0,r):null}).filter(g=>g!=null);for(;t.length>0&&t[t.length-1].length===0;)t.pop();if(t.length===0)return[];const s=(n=t[0].match(/^\\s*/))==null?void 0:n[0];if(!s)return t;const i=new RegExp(`^${s}`);return t.map(g=>g.replace(i,""))}function Se(e){return De(e).join(`\n`)}const vt=new Float32Array(1),Ys=new Uint32Array(vt.buffer);function WA(e){vt[0]=e;const A=Ys[0],t=A>>31&1,s=A>>23&255,i=A&8388607,n=t<<15;if(s===255)return i!==0?n|32767:n|31744;const g=s-127+15;if(g>=31)return n|31744;if(g<=0){if(g<-10)return n;const I=(i|8388608)>>1-g+13;return n|I}const r=i>>13;return n|g<<10|r}function O(e){const A=e>>15&1,t=e>>10&31,s=e&1023;let i;if(t===0)if(s===0)i=A<<31;else{let n=s,g=-14;for(;(n&1024)===0;)n<<=1,g--;n&=1023;const r=g+127,I=n<<13;i=A<<31|r<<23|I}else if(t===31)s===0?i=A<<31|2139095040:i=A<<31|2143289344;else{const n=t-15+127,g=s<<13;i=A<<31|n<<23|g}return Ys[0]=i,vt[0]}function hA(e){return Math.max(0,Math.min(255,Math.round(e*255)))}function Me(e){const A=[],t=new Set;function s(i){i&&typeof i=="object"&&!t.has(i)&&(t.add(i),i instanceof ArrayBuffer?A.push(i):ArrayBuffer.isView(i)?A.push(i.buffer):Array.isArray(i)?i.forEach(s):Object.values(i).forEach(s))}return s(e),A}function Tt(e,A,t,s,i,n,g,r,I,o,a,C,h,B,E,l,c){const Q=(c==null?void 0:c.rgbMin)??0,y=((c==null?void 0:c.rgbMax)??1)-Q,f=hA((B-Q)/y),D=hA((E-Q)/y),F=hA((l-Q)/y),J=hA(h),x=bs(new NA(I,o,a,C)),m=x&255,U=x>>>8&255,S=x>>>16&255,w=(c==null?void 0:c.lnScaleMin)??ds,z=254/(((c==null?void 0:c.lnScaleMax)??Ns)-w),Y=n<XA?0:Math.min(255,Math.max(1,Math.round((Math.log(n)-w)*z)+1)),N=g<XA?0:Math.min(255,Math.max(1,Math.round((Math.log(g)-w)*z)+1)),v=r<XA?0:Math.min(255,Math.max(1,Math.round((Math.log(r)-w)*z)+1)),q=WA(t),T=WA(s),P=WA(i),Z=A*4;e[Z]=f|D<<8|F<<16|J<<24,e[Z+1]=q|T<<16,e[Z+2]=P|m<<16|U<<24,e[Z+3]=Y|N<<8|v<<16|S<<24}function Rs(e,A,t,s,i){const n=WA(t),g=WA(s),r=WA(i),I=A*4;e[I+1]=n|g<<16,e[I+2]=r|e[I+2]&4294901760}function Js(e,A,t,s,i,n){const g=(n==null?void 0:n.lnScaleMin)??ds,I=254/(((n==null?void 0:n.lnScaleMax)??Ns)-g),o=t<XA?0:Math.min(255,Math.max(1,Math.round((Math.log(t)-g)*I)+1)),a=s<XA?0:Math.min(255,Math.max(1,Math.round((Math.log(s)-g)*I)+1)),C=i<XA?0:Math.min(255,Math.max(1,Math.round((Math.log(i)-g)*I)+1)),h=A*4;e[h+3]=o|a<<8|C<<16|e[h+3]&4278190080}function _s(e,A,t,s,i,n){const g=bs(new NA(t,s,i,n)),r=g&255,I=g>>>8&255,o=g>>>16&255,a=A*4;e[a+2]=e[a+2]&65535|r<<16|I<<24,e[a+3]=e[a+3]&16777215|o<<24}function pe(e,A,t,s,i,n,g){const r=(g==null?void 0:g.rgbMin)??0,o=((g==null?void 0:g.rgbMax)??1)-r,a=hA((t-r)/o),C=hA((s-r)/o),h=hA((i-r)/o),B=hA(n),E=A*4;e[E]=a|C<<8|h<<16|B<<24}function Fe(e,A,t,s,i,n){const g=(n==null?void 0:n.rgbMin)??0,I=((n==null?void 0:n.rgbMax)??1)-g,o=hA((t-g)/I),a=hA((s-g)/I),C=hA((i-g)/I),h=A*4;e[h]=o|a<<8|C<<16|e[h]&4278190080}function de(e,A,t){const s=hA(t),i=A*4;e[i]=e[i]&16777215|s<<24}new d,new d,new Lt;function Ne(e){const A=ks,t=Math.max(Gs,Math.min(Us,Math.ceil(e/A))),s=Math.ceil(e/(A*t)),i=A*t*s;return{width:A,height:t,depth:s,maxSplats:i}}function Qt(e){const A=ks,t=Math.max(Gs,Math.min(Us,Math.ceil(e/A))),s=Math.ceil(e/(A*t));return A*t*s}Se(`\n  precision highp float;\n\n  in vec3 position;\n\n  void main() {\n    gl_Position = vec4(position.xy, 0.0, 1.0);\n  }\n`);function bs(e){const A=e.clone().normalize();A.w<0&&A.set(-A.x,-A.y,-A.z,-A.w);const t=2*Math.acos(A.w),s=Math.sqrt(A.x*A.x+A.y*A.y+A.z*A.z),i=s<1e-6?new d(1,0,0):new d(A.x,A.y,A.z).divideScalar(s),n=Math.abs(i.x)+Math.abs(i.y)+Math.abs(i.z);let g=i.x/n,r=i.y/n;if(i.z<0){const B=g;g=(1-Math.abs(r))*(g>=0?1:-1),r=(1-Math.abs(B))*(r>=0?1:-1)}const I=g*.5+.5,o=r*.5+.5,a=Math.round(I*255),C=Math.round(o*255);return Math.round(t*(255/Math.PI))<<16|C<<8|a}function ct(e,A,t,s){const i=Math.max(-127,Math.min(127,e*127)),n=Math.max(-127,Math.min(127,A*127)),g=Math.max(-127,Math.min(127,t*127)),r=Math.max(-127,Math.min(127,s*127));return i&255|(n&255)<<8|(g&255)<<16|(r&255)<<24}function lt(e,A,t,s){const i=(s==null?void 0:s.sh1Min)??-1,n=(s==null?void 0:s.sh1Max)??1,g=.5*(i+n),r=126/(n-i),I=A*2;for(let o=0;o<9;++o){const a=(t[o]-g)*r,C=Math.round(Math.max(-63,Math.min(63,a)))&127,h=o*7,B=h+7,E=Math.floor(h/32),l=h-E*32,c=C<<l&4294967295;if(e[I+E]|=c,B>E*32+32){const Q=C>>>32-l&4294967295;e[I+E+1]|=Q}}}function ut(e,A,t,s){const i=(s==null?void 0:s.sh2Min)??-1,n=(s==null?void 0:s.sh2Max)??1,g=.5*(i+n),r=2/(n-i);e[A*4+0]=ct((t[0]-g)*r,(t[1]-g)*r,(t[2]-g)*r,(t[3]-g)*r),e[A*4+1]=ct((t[4]-g)*r,(t[5]-g)*r,(t[6]-g)*r,(t[7]-g)*r),e[A*4+2]=ct((t[8]-g)*r,(t[9]-g)*r,(t[10]-g)*r,(t[11]-g)*r),e[A*4+3]=ct((t[12]-g)*r,(t[13]-g)*r,(t[14]-g)*r,0)}function yt(e,A,t,s){const i=(s==null?void 0:s.sh3Min)??-1,n=(s==null?void 0:s.sh3Max)??1,g=.5*(i+n),r=62/(n-i),I=A*4;for(let o=0;o<21;++o){const a=(t[o]-g)*r,C=Math.round(Math.max(-31,Math.min(31,a)))&63,h=o*6,B=h+6,E=Math.floor(h/32),l=h-E*32,c=C<<l&4294967295;if(e[I+E]|=c,B>E*32+32){const Q=C>>>32-l&4294967295;e[I+E+1]|=Q}}}function ke(e,A){const t=[];let s=0,i=null;const n=new ls((I,o)=>{if(t.push(I),s+=I.length,o||s>=A){const a=new Uint8Array(s);let C=0;for(const h of t)a.set(h,C),C+=h.length;i=a.slice(0,A)}}),g=1024;let r=0;for(;i==null&&r<e.length;){const I=e.slice(r,r+g);n.push(I,!1),r+=g}if(i==null&&(n.push(new Uint8Array,!0),i==null))throw new Error("Failed to decompress partial gzip");return i}class Ue{constructor({fileBytes:A,chunkBytes:t=64*1024}){this.fileBytes=A,this.chunkBytes=t,this.offset=0,this.chunks=[],this.totalBytes=0,this.gunzip=new ls((s,i)=>{this.chunks.push(s),this.totalBytes+=s.length})}read(A){for(;this.totalBytes<A&&this.offset<this.fileBytes.length;){const n=Math.min(this.offset+this.chunkBytes,this.fileBytes.length);this.gunzip.push(this.fileBytes.subarray(this.offset,n),!1),this.offset=n}if(this.totalBytes<A&&this.offset>=this.fileBytes.length&&this.gunzip.push(new Uint8Array(0),!0),this.totalBytes<A)throw new Error(`Unexpected EOF: needed ${A}, got ${this.totalBytes}`);const t=new Uint8Array(this.totalBytes);let s=0;for(const n of this.chunks)t.set(n,s),s+=n.length;const i=t.subarray(0,A);return this.chunks=[t.subarray(A)],this.totalBytes-=A,i}}function zs(e,A,t){const s=Math.floor(e.length/32);if(s*32!==e.length)throw new Error("Invalid .splat file size");A(s);const i=new Float32Array(e.buffer);for(let n=0;n<s;++n){const g=n*32,r=n*8,I=i[r+0],o=i[r+1],a=i[r+2],C=i[r+3],h=i[r+4],B=i[r+5],E=e[g+24]/255,l=e[g+25]/255,c=e[g+26]/255,Q=e[g+27]/255,u=(e[g+28]-128)/128,y=(e[g+29]-128)/128,f=(e[g+30]-128)/128,D=(e[g+31]-128)/128;t(n,I,o,a,C,h,B,y,f,D,u,Q,E,l,c)}}function Ge(e,A){let t=0,s=0,i=new Uint32Array(0);return zs(e,n=>{t=n,s=Qt(t),i=new Uint32Array(s*4)},(n,g,r,I,o,a,C,h,B,E,l,c,Q,u,y)=>{Tt(i,n,g,r,I,o,a,C,h,B,E,l,c,Q,u,y,A)}),{packedArray:i,numSplats:t}}const ft={0:{bytesPerCenter:12,bytesPerScale:12,bytesPerRotation:16,bytesPerColor:4,bytesPerSphericalHarmonicsComponent:4,scaleOffsetBytes:12,rotationOffsetBytes:24,colorOffsetBytes:40,sphericalHarmonicsOffsetBytes:44,scaleRange:1},1:{bytesPerCenter:6,bytesPerScale:6,bytesPerRotation:8,bytesPerColor:4,bytesPerSphericalHarmonicsComponent:2,scaleOffsetBytes:6,rotationOffsetBytes:12,colorOffsetBytes:20,sphericalHarmonicsOffsetBytes:24,scaleRange:32767},2:{bytesPerCenter:6,bytesPerScale:6,bytesPerRotation:8,bytesPerColor:4,bytesPerSphericalHarmonicsComponent:1,scaleOffsetBytes:6,rotationOffsetBytes:12,colorOffsetBytes:20,sphericalHarmonicsOffsetBytes:24,scaleRange:32767}},Hs={0:0,1:9,2:24,3:45};function Ye(e,A,t,s){var l;let g=0;const r=new DataView(e.buffer,g,4096);g+=4096;const I=r.getUint8(0),o=r.getUint8(1);if(I!==0||o<1)throw new Error(`Unsupported .ksplat version: ${I}.${o}`);const a=r.getUint32(4,!0);r.getUint32(16,!0);const C=r.getUint16(20,!0);if(C<0||C>2)throw new Error(`Invalid .ksplat compression level: ${C}`);const h=r.getFloat32(36,!0)||-1.5,B=r.getFloat32(40,!0)||1.5;let E=4096+a*1024;for(let c=0;c<a;++c){let Q=function(nA,G){if(C===0)return k.getFloat32(nA+_+G*4,!0);if(C===1)return O(k.getUint16(nA+_+G*2,!0));const cA=k.getUint8(nA+_+G)/255;return h+cA*(B-h)};const u=new DataView(e.buffer,g,1024);g+=1024;const y=u.getUint32(0,!0),f=u.getUint32(4,!0),D=u.getUint32(8,!0),F=u.getUint32(12,!0),J=u.getFloat32(16,!0),x=u.getUint16(20,!0),m=(u.getUint32(24,!0)||((l=ft[C])==null?void 0:l.scaleRange))??1,U=u.getUint32(32,!0),S=U*D,w=u.getUint32(36,!0),M=w*4,z=x*F+M,Y=u.getUint16(40,!0),N=Hs[Y],{bytesPerCenter:v,bytesPerScale:q,bytesPerRotation:T,bytesPerColor:P,bytesPerSphericalHarmonicsComponent:Z,scaleOffsetBytes:W,rotationOffsetBytes:H,colorOffsetBytes:K,sphericalHarmonicsOffsetBytes:_}=ft[C],R=v+q+T+P+N*Z,p=R*f,eA=p+z,iA=[0,3,6,1,4,7,2,5,8],IA=[9,14,19,10,15,20,11,16,21,12,17,22,13,18,23],gA=[24,31,38,25,32,39,26,33,40,27,34,41,28,35,42,29,36,43,30,37,44],oA=Y>=1?new Float32Array(3*3):void 0,aA=Y>=2?new Float32Array(5*3):void 0,pA=Y>=3?new Float32Array(7*3):void 0,CA=J/2/m,EA=E+M,QA=E+z,k=new DataView(e.buffer,QA,p),$=new Float32Array(e.buffer,EA,F*3),wA=new Uint32Array(e.buffer,E,w);let L=U,RA=S;for(let nA=0;nA<y;++nA){const G=nA*R;let cA;if(nA<S)cA=Math.floor(nA/D);else{const SA=wA[L-U];nA>=RA+SA&&(L+=1,RA+=SA),cA=L}const AA=C===0?k.getFloat32(G+0,!0):(k.getUint16(G+0,!0)-m)*CA+$[3*cA+0],b=C===0?k.getFloat32(G+4,!0):(k.getUint16(G+2,!0)-m)*CA+$[3*cA+1],mA=C===0?k.getFloat32(G+8,!0):(k.getUint16(G+4,!0)-m)*CA+$[3*cA+2],et=C===0?k.getFloat32(G+W+0,!0):O(k.getUint16(G+W+0,!0)),it=C===0?k.getFloat32(G+W+4,!0):O(k.getUint16(G+W+2,!0)),Xt=C===0?k.getFloat32(G+W+8,!0):O(k.getUint16(G+W+4,!0)),Wt=C===0?k.getFloat32(G+H+0,!0):O(k.getUint16(G+H+0,!0)),Pt=C===0?k.getFloat32(G+H+4,!0):O(k.getUint16(G+H+2,!0)),jt=C===0?k.getFloat32(G+H+8,!0):O(k.getUint16(G+H+4,!0)),Vt=C===0?k.getFloat32(G+H+12,!0):O(k.getUint16(G+H+6,!0)),Ot=k.getUint8(G+K+0)/255,$t=k.getUint8(G+K+1)/255,As=k.getUint8(G+K+2)/255,ts=k.getUint8(G+K+3)/255;if(t(nA,AA,b,mA,et,it,Xt,Pt,jt,Vt,Wt,ts,Ot,$t,As),Y>=1&&oA){for(const[SA,HA]of iA.entries())oA[SA]=Q(G,HA);if(aA)for(const[SA,HA]of IA.entries())aA[SA]=Q(G,HA);if(pA)for(const[SA,HA]of gA.entries())pA[SA]=Q(G,HA);s==null||s(nA,oA,aA,pA)}}E+=eA}}function Re(e,A){var u;let i=0;const n=new DataView(e.buffer,i,4096);i+=4096;const g=n.getUint8(0),r=n.getUint8(1);if(g!==0||r<1)throw new Error(`Unsupported .ksplat version: ${g}.${r}`);const I=n.getUint32(4,!0),o=n.getUint32(16,!0),a=n.getUint16(20,!0);if(a<0||a>2)throw new Error(`Invalid .ksplat compression level: ${a}`);const C=n.getFloat32(36,!0)||-1.5,h=n.getFloat32(40,!0)||1.5,B=o,E=Qt(B),l=new Uint32Array(E*4),c={};let Q=4096+I*1024;for(let y=0;y<I;++y){let f=function(AA,b){if(a===0)return L.getFloat32(AA+eA+b*4,!0);if(a===1)return O(L.getUint16(AA+eA+b*2,!0));const mA=L.getUint8(AA+eA+b)/255;return C+mA*(h-C)};const D=new DataView(e.buffer,i,1024);i+=1024;const F=D.getUint32(0,!0),J=D.getUint32(4,!0),x=D.getUint32(8,!0),m=D.getUint32(12,!0),U=D.getFloat32(16,!0),S=D.getUint16(20,!0),w=(D.getUint32(24,!0)||((u=ft[a])==null?void 0:u.scaleRange))??1,M=D.getUint32(32,!0),z=M*x,Y=D.getUint32(36,!0),N=Y*4,v=S*m+N,q=D.getUint16(40,!0),T=Hs[q],{bytesPerCenter:P,bytesPerScale:Z,bytesPerRotation:W,bytesPerColor:H,bytesPerSphericalHarmonicsComponent:K,scaleOffsetBytes:_,rotationOffsetBytes:R,colorOffsetBytes:p,sphericalHarmonicsOffsetBytes:eA}=ft[a],iA=P+Z+W+H+T*K,IA=iA*J,gA=IA+v,oA=[0,3,6,1,4,7,2,5,8],aA=[9,14,19,10,15,20,11,16,21,12,17,22,13,18,23],pA=[24,31,38,25,32,39,26,33,40,27,34,41,28,35,42,29,36,43,30,37,44],CA=q>=1?new Float32Array(3*3):void 0,EA=q>=2?new Float32Array(5*3):void 0,QA=q>=3?new Float32Array(7*3):void 0,k=U/2/w,$=Q+N,wA=Q+v,L=new DataView(e.buffer,wA,IA),RA=new Float32Array(e.buffer,$,m*3),nA=new Uint32Array(e.buffer,Q,Y);let G=M,cA=z;for(let AA=0;AA<F;++AA){const b=AA*iA;let mA;if(AA<z)mA=Math.floor(AA/x);else{const JA=nA[G-M];AA>=cA+JA&&(G+=1,cA+=JA),mA=G}const et=a===0?L.getFloat32(b+0,!0):(L.getUint16(b+0,!0)-w)*k+RA[3*mA+0],it=a===0?L.getFloat32(b+4,!0):(L.getUint16(b+2,!0)-w)*k+RA[3*mA+1],Xt=a===0?L.getFloat32(b+8,!0):(L.getUint16(b+4,!0)-w)*k+RA[3*mA+2],Wt=a===0?L.getFloat32(b+_+0,!0):O(L.getUint16(b+_+0,!0)),Pt=a===0?L.getFloat32(b+_+4,!0):O(L.getUint16(b+_+2,!0)),jt=a===0?L.getFloat32(b+_+8,!0):O(L.getUint16(b+_+4,!0)),Vt=a===0?L.getFloat32(b+R+0,!0):O(L.getUint16(b+R+0,!0)),Ot=a===0?L.getFloat32(b+R+4,!0):O(L.getUint16(b+R+2,!0)),$t=a===0?L.getFloat32(b+R+8,!0):O(L.getUint16(b+R+4,!0)),As=a===0?L.getFloat32(b+R+12,!0):O(L.getUint16(b+R+6,!0)),ts=L.getUint8(b+p+0)/255,SA=L.getUint8(b+p+1)/255,HA=L.getUint8(b+p+2)/255,Oe=L.getUint8(b+p+3)/255;if(Tt(l,AA,et,it,Xt,Wt,Pt,jt,Ot,$t,As,Vt,Oe,ts,SA,HA,A),q>=1){if(CA){c.sh1||(c.sh1=new Uint32Array(B*2));for(const[JA,nt]of oA.entries())CA[JA]=f(b,nt);lt(c.sh1,AA,CA,A)}if(EA){c.sh2||(c.sh2=new Uint32Array(B*4));for(const[JA,nt]of aA.entries())EA[JA]=f(b,nt);ut(c.sh2,AA,EA,A)}if(QA){c.sh3||(c.sh3=new Uint32Array(B*4));for(const[JA,nt]of pA.entries())QA[JA]=f(b,nt);yt(c.sh3,AA,QA,A)}}}Q+=gA}return{packedArray:l,numSplats:B,extra:c}}const jA=class jA{constructor({fileBytes:A}){this.header="",this.littleEndian=!0,this.elements={},this.comments=[],this.data=null,this.numSplats=0,this.fileBytes=A instanceof ArrayBuffer?new Uint8Array(A):A}async parseHeader(){const t=new ReadableStream({start:g=>{g.enqueue(this.fileBytes.slice(0,65536)),g.close()}}).pipeThrough(new TextDecoderStream).getReader();this.header="";const s=`end_header\n`;for(;;){const{value:g,done:r}=await t.read();if(r)throw new Error("Failed to read header");this.header+=g;const I=this.header.indexOf(s);if(I>=0){this.header=this.header.slice(0,I+s.length);break}}const i=new TextEncoder().encode(this.header).length;this.data=new DataView(this.fileBytes.buffer,i),this.elements={};let n=null;this.comments=[],this.header.trim().split(`\n`).forEach((g,r)=>{const I=g.trim();if(r===0){if(I!=="ply")throw new Error("Invalid PLY header");return}if(I.length===0)return;const o=I.split(" ");switch(o[0]){case"format":if(o[1]==="binary_little_endian")this.littleEndian=!0;else if(o[1]==="binary_big_endian")this.littleEndian=!1;else throw new Error(`Unsupported PLY format: ${o[1]}`);if(o[2]!=="1.0")throw new Error(`Unsupported PLY version: ${o[2]}`);break;case"end_header":break;case"comment":this.comments.push(I.slice(8));break;case"element":{const a=o[1];n={name:a,count:Number.parseInt(o[2]),properties:{}},this.elements[a]=n;break}case"property":if(n==null)throw new Error("Property must be inside an element");o[1]==="list"?n.properties[o[4]]={isList:!0,type:o[3],countType:o[2]}:n.properties[o[2]]={isList:!1,type:o[1]};break}}),this.elements.vertex&&(this.numSplats=this.elements.vertex.count)}parseData(A){let t=0;const s=this.data;if(s==null)throw new Error("No data to parse");for(const i in this.elements){const n=this.elements[i],{count:g,properties:r}=n,I={},o=[];for(const[C,h]of Object.entries(r))h.isList?(I[C]=[],o.push(()=>{const B=I[C];B.length=xt[h.countType](s,t,this.littleEndian),t+=PA[h.countType];for(let E=0;E<B.length;E++)B[E]=xt[h.type](s,t,this.littleEndian),t+=PA[h.type]})):(I[C]=0,o.push(()=>{I[C]=xt[h.type](s,t,this.littleEndian),t+=PA[h.type]}));const a=A(n)??(()=>{});for(let C=0;C<g;C++){for(const h of o)h();a(C,I)}}}parseSplats(A,t){if(this.elements.vertex==null)throw new Error("No vertex element found");let s=!1;const i=[];let n=0,g=[],r=[],I=[],o,a,C;function h(){const Q=_e[n];g=new Array(3).fill(null).flatMap((u,y)=>[0,1,2].map((f,D)=>`f_rest_${y+D*Q/3}`)),r=new Array(5).fill(null).flatMap((u,y)=>[0,1,2].map((f,D)=>`f_rest_${3+y+D*Q/3}`)),I=new Array(7).fill(null).flatMap((u,y)=>[0,1,2].map((f,D)=>`f_rest_${8+y+D*Q/3}`)),o=n>=1?new Float32Array(3*3):void 0,a=n>=2?new Float32Array(5*3):void 0,C=n>=3?new Float32Array(7*3):void 0}function B(Q,u){if(!o)throw new Error("Missing sh1");for(const[y,f]of g.entries())o[y]=u[f]*8/255-4;if(a)for(const[y,f]of r.entries())a[y]=u[f]*8/255-4;if(C)for(const[y,f]of I.entries())C[y]=u[f]*8/255-4;t==null||t(Q,o,a,C)}function E(Q){const{min_x:u,min_y:y,min_z:f,max_x:D,max_y:F,max_z:J,min_scale_x:x,min_scale_y:m,min_scale_z:U,max_scale_x:S,max_scale_y:w,max_scale_z:M}=Q.properties;if(!u||!y||!f||!D||!F||!J||!x||!m||!U||!S||!w||!M)throw new Error("Missing PLY chunk properties");return s=!0,(z,Y)=>{const{min_x:N,min_y:v,min_z:q,max_x:T,max_y:P,max_z:Z,min_scale_x:W,min_scale_y:H,min_scale_z:K,max_scale_x:_,max_scale_y:R,max_scale_z:p,min_r:eA,min_g:iA,min_b:IA,max_r:gA,max_g:oA,max_b:aA}=Y;i.push({min_x:N,min_y:v,min_z:q,max_x:T,max_y:P,max_z:Z,min_scale_x:W,min_scale_y:H,min_scale_z:K,max_scale_x:_,max_scale_y:R,max_scale_z:p,min_r:eA,min_g:iA,min_b:IA,max_r:gA,max_g:oA,max_b:aA})}}function l(Q){if(t&&Q.name==="sh")return n=vs(Q.properties),h(),B;if(Q.name!=="vertex")return null;const{packed_position:u,packed_rotation:y,packed_scale:f,packed_color:D}=Q.properties;if(!u||!y||!f||!D)throw new Error("Missing PLY properties: packed_position, packed_rotation, packed_scale, packed_color");const F=Math.sqrt(2);return(J,x)=>{const m=i[J>>>8];if(m==null)throw new Error("Missing PLY chunk");const{min_x:U,min_y:S,min_z:w,max_x:M,max_y:z,max_z:Y,min_scale_x:N,min_scale_y:v,min_scale_z:q,max_scale_x:T,max_scale_y:P,max_scale_z:Z,min_r:W,min_g:H,min_b:K,max_r:_,max_g:R,max_b:p}=m,{packed_position:eA,packed_rotation:iA,packed_scale:IA,packed_color:gA}=x,oA=(eA>>>21&2047)/2047*(M-U)+U,aA=(eA>>>11&1023)/1023*(z-S)+S,pA=(eA&2047)/2047*(Y-w)+w,CA=((iA>>>20&1023)/1023-.5)*F,EA=((iA>>>10&1023)/1023-.5)*F,QA=((iA&1023)/1023-.5)*F,k=Math.sqrt(Math.max(0,1-CA*CA-EA*EA-QA*QA)),$=iA>>>30,wA=$===0?CA:$===1?k:EA,L=$<=1?EA:$===2?k:QA,RA=$<=2?QA:k,nA=$===0?k:CA,G=Math.exp((IA>>>21&2047)/2047*(T-N)+N),cA=Math.exp((IA>>>11&1023)/1023*(P-v)+v),AA=Math.exp((IA&2047)/2047*(Z-q)+q),b=(gA>>>24&255)/255*((_??1)-(W??0))+(W??0),mA=(gA>>>16&255)/255*((R??1)-(H??0))+(H??0),et=(gA>>>8&255)/255*((p??1)-(K??0))+(K??0),it=(gA&255)/255;A(J,oA,aA,pA,G,cA,AA,wA,L,RA,nA,it,b,mA,et)}}const c=Q=>{if(Q.name==="chunk")return E(Q);if(s)return l(Q);if(Q.name!=="vertex")return null;const{x:u,y,z:f,scale_0:D,scale_1:F,scale_2:J,rot_0:x,rot_1:m,rot_2:U,rot_3:S,opacity:w,f_dc_0:M,f_dc_1:z,f_dc_2:Y,red:N,green:v,blue:q,alpha:T}=Q.properties;if(!u||!y||!f)throw new Error("Missing PLY properties: x, y, z");const P=D&&F&&J,Z=x&&m&&U&&S,W=T!=null?Dt[T.type]:1,H=N!=null?Dt[N.type]:1,K=v!=null?Dt[v.type]:1,_=q!=null?Dt[q.type]:1;return n=vs(Q.properties),h(),(R,p)=>{const eA=P?Math.exp(p.scale_0):jA.defaultPointScale,iA=P?Math.exp(p.scale_1):jA.defaultPointScale,IA=P?Math.exp(p.scale_2):jA.defaultPointScale,gA=Z?p.rot_1:0,oA=Z?p.rot_2:0,aA=Z?p.rot_3:0,pA=Z?p.rot_0:1,CA=w!=null?1/(1+Math.exp(-p.opacity)):T!=null?p.alpha/W:1,EA=M!=null?p.f_dc_0*mt+.5:N!=null?p.red/H:1,QA=z!=null?p.f_dc_1*mt+.5:v!=null?p.green/K:1,k=Y!=null?p.f_dc_2*mt+.5:q!=null?p.blue/_:1;if(A(R,p.x,p.y,p.z,eA,iA,IA,gA,oA,aA,pA,CA,EA,QA,k),t&&o){if(o)for(const[$,wA]of g.entries())o[$]=p[wA];if(a)for(const[$,wA]of r.entries())a[$]=p[wA];if(C)for(const[$,wA]of I.entries())C[$]=p[wA];t(R,o,a,C)}}};this.parseData(c)}injectRgba(A){let t=0;const s=this.data;if(s==null)throw new Error("No parsed data");if(A.length!==this.numSplats*4)throw new Error("Invalid RGBA array length");for(const i in this.elements){const n=this.elements[i],{count:g,properties:r}=n,I=[];let o=0;const a=i==="vertex";if(a){for(const C of["opacity","f_dc_0","f_dc_1","f_dc_2"])if(!r[C]||r[C].type!=="float")throw new Error(`Can\'t injectRgba due to property: ${C}`)}for(const[C,h]of Object.entries(r))if(h.isList)I.push(()=>{const B=xt[h.countType](s,t,this.littleEndian);t+=PA[h.countType],t+=B*PA[h.type]});else{if(a)if(C==="f_dc_0"||C==="f_dc_1"||C==="f_dc_2"){const B=Number.parseInt(C.slice(5));I.push(()=>{const E=(A[o+B]/255-.5)/mt;Ls[h.type](s,t,this.littleEndian,E)})}else C==="opacity"&&I.push(()=>{const B=Math.max(-100,Math.min(100,-Math.log(1/(A[o+3]/255)-1)));Ls[h.type](s,t,this.littleEndian,B)});I.push(()=>{t+=PA[h.type]})}for(let C=0;C<g;C++){for(const h of I)h();a&&(o+=4)}}}};jA.defaultPointScale=.001;let wt=jA;const mt=.28209479177387814,xt={char:(e,A,t)=>e.getInt8(A),uchar:(e,A,t)=>e.getUint8(A),short:(e,A,t)=>e.getInt16(A,t),ushort:(e,A,t)=>e.getUint16(A,t),int:(e,A,t)=>e.getInt32(A,t),uint:(e,A,t)=>e.getUint32(A,t),float:(e,A,t)=>e.getFloat32(A,t),double:(e,A,t)=>e.getFloat64(A,t)},Ls={char:(e,A,t,s)=>{e.setInt8(A,s)},uchar:(e,A,t,s)=>{e.setUint8(A,s)},short:(e,A,t,s)=>{e.setInt16(A,s,t)},ushort:(e,A,t,s)=>{e.setUint16(A,s,t)},int:(e,A,t,s)=>{e.setInt32(A,s,t)},uint:(e,A,t,s)=>{e.setUint32(A,s,t)},float:(e,A,t,s)=>{e.setFloat32(A,s,t)},double:(e,A,t,s)=>{e.setFloat64(A,s,t)}},PA={char:1,uchar:1,short:2,ushort:2,int:4,uint:4,float:4,double:8},Dt={char:127,uchar:255,short:32767,ushort:65535,int:2147483647,uint:4294967295,float:1,double:1},Je={0:0,9:1,24:2,45:3},_e={0:0,1:9,2:24,3:45};function vs(e){let A=0;for(;e[`f_rest_${A}`];)A+=1;const t=Je[A];if(t==null)throw new Error(`Unsupported number of SH coefficients: ${A}`);return t}var tt=(e=>(e.PLY="ply",e.SPZ="spz",e.SPLAT="splat",e.KSPLAT="ksplat",e.PCSOGS="pcsogs",e.PCSOGSZIP="pcsogszip",e))(tt||{});function be(e){const A=new DataView(e.buffer);if((A.getUint32(0,!0)&16777215)===7957616)return"ply";if((A.getUint32(0,!0)&16777215)===559903){const t=ke(e,4);return new DataView(t.buffer).getUint32(0,!0)===1347635022?"spz":void 0}if(A.getUint32(0,!0)===67324752)return Ts(e)?"pcsogszip":void 0}function ze(e){const A=e.split(/[?#]/,1)[0],t=Math.max(A.lastIndexOf("/"),A.lastIndexOf("\\\\")),s=A.slice(t+1),i=s.lastIndexOf(".");return i<=0||i===s.length-1?"":s.slice(i+1).toLowerCase()}function He(e){const A=ze(e);if(A==="ply")return"ply";if(A==="spz")return"spz";if(A==="splat")return"splat";if(A==="ksplat")return"ksplat"}function Le(e){try{let A;if(typeof e=="string")A=e;else{const s=e instanceof ArrayBuffer?new Uint8Array(e):e;if(s.length>65536)return;A=new TextDecoder().decode(s)}const t=JSON.parse(A);if(!t||typeof t!="object"||Array.isArray(t))return;for(const s of["means","scales","quats","sh0"])if(!t[s]||typeof t[s]!="object"||Array.isArray(t[s])||!t[s].shape||!t[s].files||s!=="quats"&&(!t[s].mins||!t[s].maxs))return;return t}catch{return}}function Ts(e){try{const A=e instanceof ArrayBuffer?new Uint8Array(e):e;let t=null;const s=ue(A,{filter:({name:n})=>n.split(/[\\\\/]/).pop()==="meta.json"?(t=n,!0):!1});if(!t)return;const i=Le(s[t]);return i?{name:t,json:i}:void 0}catch{return}}class ve{constructor({maxSplats:A=1}={}){this.numSplats=0,this.maxSplats=Ne(A).maxSplats,this.centers=new Float32Array(this.maxSplats*3),this.scales=new Float32Array(this.maxSplats*3),this.quaternions=new Float32Array(this.maxSplats*4),this.opacities=new Float32Array(this.maxSplats),this.colors=new Float32Array(this.maxSplats*3)}pushSplat(){const A=this.numSplats;return this.ensureIndex(A),this.numSplats+=1,A}unpushSplat(A){if(A===this.numSplats-1)this.numSplats-=1;else throw new Error("Cannot unpush splat from non-last position")}ensureCapacity(A){if(A>this.maxSplats){const t=Math.max(A,this.maxSplats*2),s=new Float32Array(t*3),i=new Float32Array(t*3),n=new Float32Array(t*4),g=new Float32Array(t),r=new Float32Array(t*3);if(s.set(this.centers),i.set(this.scales),n.set(this.quaternions),g.set(this.opacities),r.set(this.colors),this.centers=s,this.scales=i,this.quaternions=n,this.opacities=g,this.colors=r,this.sh1){const I=new Float32Array(t*9);I.set(this.sh1),this.sh1=I}if(this.sh2){const I=new Float32Array(t*15);I.set(this.sh2),this.sh2=I}if(this.sh3){const I=new Float32Array(t*21);I.set(this.sh3),this.sh3=I}this.maxSplats=t}}ensureIndex(A){this.ensureCapacity(A+1)}setCenter(A,t,s,i){this.centers[A*3]=t,this.centers[A*3+1]=s,this.centers[A*3+2]=i}setScale(A,t,s,i){this.scales[A*3]=t,this.scales[A*3+1]=s,this.scales[A*3+2]=i}setQuaternion(A,t,s,i,n){this.quaternions[A*4]=t,this.quaternions[A*4+1]=s,this.quaternions[A*4+2]=i,this.quaternions[A*4+3]=n}setOpacity(A,t){this.opacities[A]=t}setColor(A,t,s,i){this.colors[A*3]=t,this.colors[A*3+1]=s,this.colors[A*3+2]=i}setSh1(A,t){this.sh1||(this.sh1=new Float32Array(this.maxSplats*9));for(let s=0;s<9;++s)this.sh1[A*9+s]=t[s]}setSh2(A,t){this.sh2||(this.sh2=new Float32Array(this.maxSplats*15));for(let s=0;s<15;++s)this.sh2[A*15+s]=t[s]}setSh3(A,t){this.sh3||(this.sh3=new Float32Array(this.maxSplats*21));for(let s=0;s<21;++s)this.sh3[A*21+s]=t[s]}}async function Ks(e,A,t){if(e.quats.encoding!=="quaternion_packed")throw new Error("Unsupported quaternion encoding");const s=e.means.shape[0],i=Qt(s),n=new Uint32Array(i*4),g={},r=Promise.all([st(A[e.means.files[0]]),st(A[e.means.files[1]])]).then(h=>{for(let B=0;B<s;++B){const E=B*4,l=(h[0][E+0]+(h[1][E+0]<<8))/65535,c=(h[0][E+1]+(h[1][E+1]<<8))/65535,Q=(h[0][E+2]+(h[1][E+2]<<8))/65535;let u=e.means.mins[0]+(e.means.maxs[0]-e.means.mins[0])*l,y=e.means.mins[1]+(e.means.maxs[1]-e.means.mins[1])*c,f=e.means.mins[2]+(e.means.maxs[2]-e.means.mins[2])*Q;u=Math.sign(u)*(Math.exp(Math.abs(u))-1),y=Math.sign(y)*(Math.exp(Math.abs(y))-1),f=Math.sign(f)*(Math.exp(Math.abs(f))-1),Rs(n,B,u,y,f)}}),I=st(A[e.scales.files[0]]).then(h=>{for(let B=0;B<s;++B){const E=B*4,l=h[E+0]/255,c=h[E+1]/255,Q=h[E+2]/255,u=e.scales.mins[0]+(e.scales.maxs[0]-e.scales.mins[0])*l,y=e.scales.mins[1]+(e.scales.maxs[1]-e.scales.mins[1])*c,f=e.scales.mins[2]+(e.scales.maxs[2]-e.scales.mins[2])*Q;Js(n,B,Math.exp(u),Math.exp(y),Math.exp(f),t)}}),o=st(A[e.quats.files[0]]).then(h=>{const B=Math.sqrt(2);for(let E=0;E<s;++E){const l=E*4,c=(h[l+0]/255-.5)*B,Q=(h[l+1]/255-.5)*B,u=(h[l+2]/255-.5)*B,y=Math.sqrt(Math.max(0,1-c*c-Q*Q-u*u)),f=h[l+3]-252,D=f===0?c:f===1?y:Q,F=f<=1?Q:f===2?y:u,J=f<=2?u:y;_s(n,E,D,F,J,f===0?y:c)}}),a=st(A[e.sh0.files[0]]).then(h=>{const B=.28209479177387814;for(let E=0;E<s;++E){const l=E*4,c=h[l+0]/255,Q=h[l+1]/255,u=h[l+2]/255,y=h[l+3]/255,f=e.sh0.mins[0]+(e.sh0.maxs[0]-e.sh0.mins[0])*c,D=e.sh0.mins[1]+(e.sh0.maxs[1]-e.sh0.mins[1])*Q,F=e.sh0.mins[2]+(e.sh0.maxs[2]-e.sh0.mins[2])*u,J=e.sh0.mins[3]+(e.sh0.maxs[3]-e.sh0.mins[3])*y,x=B*f+.5,m=B*D+.5,U=B*F+.5,S=1/(1+Math.exp(-J));pe(n,E,x,m,U,S,t)}}),C=[r,I,o,a];if(e.shN){const h=e.shN.shape[1]>=45,B=e.shN.shape[1]>=24,E=e.shN.shape[1]>=9;E&&(g.sh1=new Uint32Array(s*2)),B&&(g.sh2=new Uint32Array(s*4)),h&&(g.sh3=new Uint32Array(s*4));const l=new Float32Array(9),c=new Float32Array(15),Q=new Float32Array(21),u=e.shN,y=Promise.all([Kt(A[e.shN.files[0]]),Kt(A[e.shN.files[1]])]).then(([f,D])=>{for(let F=0;F<s;++F){const J=F*4,x=D.rgba[J+0]+(D.rgba[J+1]<<8),m=(x&63)*15,S=(x>>>6)*f.width+m;for(let w=0;w<3;++w){if(E)for(let M=0;M<3;++M)l[M*3+w]=u.mins+(u.maxs-u.mins)*f.rgba[(S+M)*4+w]/255;if(B)for(let M=0;M<5;++M)c[M*3+w]=u.mins+(u.maxs-u.mins)*f.rgba[(S+3+M)*4+w]/255;if(h)for(let M=0;M<7;++M)Q[M*3+w]=u.mins+(u.maxs-u.mins)*f.rgba[(S+8+M)*4+w]/255}E&&lt(g.sh1,F,l,t),B&&ut(g.sh2,F,c,t),h&&yt(g.sh3,F,Q,t)}});C.push(y)}return await Promise.all(C),{packedArray:n,numSplats:s,extra:g}}let St=null;async function Kt(e){if(!St&&(St=new OffscreenCanvas(1,1).getContext("webgl2"),!St))throw new Error("Failed to create WebGL2 context");const A=new Blob([e]),t=await createImageBitmap(A,{premultiplyAlpha:"none"}),s=St,i=s.createTexture();s.bindTexture(s.TEXTURE_2D,i),s.pixelStorei(s.UNPACK_FLIP_Y_WEBGL,!0),s.texImage2D(s.TEXTURE_2D,0,s.RGBA,s.RGBA,s.UNSIGNED_BYTE,t),s.texParameteri(s.TEXTURE_2D,s.TEXTURE_MAG_FILTER,s.NEAREST),s.texParameteri(s.TEXTURE_2D,s.TEXTURE_MIN_FILTER,s.NEAREST);const n=s.createFramebuffer();s.bindFramebuffer(s.FRAMEBUFFER,n),s.framebufferTexture2D(s.FRAMEBUFFER,s.COLOR_ATTACHMENT0,s.TEXTURE_2D,i,0);const g=new Uint8Array(t.width*t.height*4);return s.readPixels(0,0,t.width,t.height,s.RGBA,s.UNSIGNED_BYTE,g),s.deleteTexture(i),s.deleteFramebuffer(n),{rgba:g,width:t.width,height:t.height}}async function st(e){const{rgba:A}=await Kt(e);return A}async function Te(e,A){var h;const t=Ts(e);if(!t)throw new Error("Invalid PC SOGS zip file");const{name:s,json:i}=t,n=s.lastIndexOf("/"),g=s.lastIndexOf("\\\\"),r=s.slice(0,Math.max(n,g)+1),I=new Map,o=[...i.means.files,...i.scales.files,...i.quats.files,...i.sh0.files,...((h=i.shN)==null?void 0:h.files)??[]];for(const B of o)I.set(r+B,B);const a=await new Promise((B,E)=>{le(e,{filter:({name:l})=>I.has(l)},(l,c)=>{l?E(l):B(c)})}),C={};for(const[B,E]of I.entries())C[E]=a[B];return await Ks(i,C,A)}class qs{constructor({fileBytes:A}){this.fileBytes=A instanceof ArrayBuffer?new Uint8Array(A):A,this.reader=new Ue({fileBytes:this.fileBytes});const t=new DataView(this.reader.read(16).buffer);if(t.getUint32(0,!0)!==1347635022)throw new Error("Invalid SPZ file");if(this.version=t.getUint32(4,!0),this.version<1||this.version>2)throw new Error(`Unsupported SPZ version: ${this.version}`);this.numSplats=t.getUint32(8,!0),this.shDegree=t.getUint8(12),this.fractionalBits=t.getUint8(13),this.flags=t.getUint8(14),this.flagAntiAlias=(this.flags&1)!==0,this.reserved=t.getUint8(15),this.parsed=!1}parseSplats(A,t,s,i,n,g){if(this.parsed)throw new Error("SPZ file already parsed");if(this.parsed=!0,this.version===1){const r=this.reader.read(this.numSplats*3*2),I=new Uint16Array(r.buffer);for(let o=0;o<this.numSplats;o++){const a=o*3,C=O(I[a]),h=O(I[a+1]),B=O(I[a+2]);A==null||A(o,C,h,B)}}else if(this.version===2){const r=1<<this.fractionalBits,I=this.reader.read(this.numSplats*3*3);for(let o=0;o<this.numSplats;o++){const a=o*9,C=((I[a+2]<<24|I[a+1]<<16|I[a]<<8)>>8)/r,h=((I[a+5]<<24|I[a+4]<<16|I[a+3]<<8)>>8)/r,B=((I[a+8]<<24|I[a+7]<<16|I[a+6]<<8)>>8)/r;A==null||A(o,C,h,B)}}else throw new Error("Unreachable");{const r=this.reader.read(this.numSplats);for(let I=0;I<this.numSplats;I++)t==null||t(I,r[I]/255)}{const r=this.reader.read(this.numSplats*3),I=Xs/.15;for(let o=0;o<this.numSplats;o++){const a=o*3,C=(r[a]/255-.5)*I+.5,h=(r[a+1]/255-.5)*I+.5,B=(r[a+2]/255-.5)*I+.5;s==null||s(o,C,h,B)}}{const r=this.reader.read(this.numSplats*3);for(let I=0;I<this.numSplats;I++){const o=I*3,a=Math.exp(r[o]/16-10),C=Math.exp(r[o+1]/16-10),h=Math.exp(r[o+2]/16-10);i==null||i(I,a,C,h)}}{const r=this.reader.read(this.numSplats*3);for(let I=0;I<this.numSplats;I++){const o=I*3,a=r[o]/127.5-1,C=r[o+1]/127.5-1,h=r[o+2]/127.5-1,B=Math.sqrt(Math.max(0,1-a*a-C*C-h*h));n==null||n(I,a,C,h,B)}}if(g&&this.shDegree>=1){const r=new Float32Array(9),I=this.shDegree>=2?new Float32Array(5*3):void 0,o=this.shDegree>=3?new Float32Array(7*3):void 0,a=this.reader.read(this.numSplats*Zs[this.shDegree]*3);let C=0;for(let h=0;h<this.numSplats;h++){for(let B=0;B<9;++B)r[B]=(a[C+B]-128)/128;if(C+=9,I){for(let B=0;B<15;++B)I[B]=(a[C+B]-128)/128;C+=15}if(o){for(let B=0;B<21;++B)o[B]=(a[C+B]-128)/128;C+=21}g==null||g(h,r,I,o)}}}}const Zs={1:3,2:8,3:15},Xs=.28209479177387814,Ke=1347635022,qe=2,Ze=1;class YA{constructor({numSplats:A,shDegree:t,fractionalBits:s=12,flagAntiAlias:i=!0}){this.clippedCount=0;const n=19+(t>=1?9:0)+(t>=2?15:0)+(t>=3?21:0),g=16+A*n;this.buffer=new ArrayBuffer(g),this.view=new DataView(this.buffer),this.view.setUint32(0,Ke,!0),this.view.setUint32(4,qe,!0),this.view.setUint32(8,A,!0),this.view.setUint8(12,t),this.view.setUint8(13,s),this.view.setUint8(14,i?Ze:0),this.view.setUint8(15,0),this.numSplats=A,this.shDegree=t,this.fractionalBits=s,this.fraction=1<<s,this.flagAntiAlias=i}setCenter(A,t,s,i){const n=Math.round(t*this.fraction),g=Math.max(-8388607,Math.min(8388607,n)),r=Math.round(s*this.fraction),I=Math.max(-8388607,Math.min(8388607,r)),o=Math.round(i*this.fraction),a=Math.max(-8388607,Math.min(8388607,o));(n!==g||r!==I||o!==a)&&(this.clippedCount+=1);const B=16+A*9;this.view.setUint8(B,g&255),this.view.setUint8(B+1,g>>8&255),this.view.setUint8(B+2,g>>16&255),this.view.setUint8(B+3,I&255),this.view.setUint8(B+4,I>>8&255),this.view.setUint8(B+5,I>>16&255),this.view.setUint8(B+6,a&255),this.view.setUint8(B+7,a>>8&255),this.view.setUint8(B+8,a>>16&255)}setAlpha(A,t){const s=16+this.numSplats*9+A;this.view.setUint8(s,Math.max(0,Math.min(255,Math.round(t*255))))}static scaleRgb(A){const t=((A-.5)/(Xs/.15)+.5)*255;return Math.max(0,Math.min(255,Math.round(t)))}setRgb(A,t,s,i){const n=16+this.numSplats*10+A*3;this.view.setUint8(n,YA.scaleRgb(t)),this.view.setUint8(n+1,YA.scaleRgb(s)),this.view.setUint8(n+2,YA.scaleRgb(i))}setScale(A,t,s,i){const n=16+this.numSplats*13+A*3;this.view.setUint8(n,Math.max(0,Math.min(255,Math.round((Math.log(t)+10)*16)))),this.view.setUint8(n+1,Math.max(0,Math.min(255,Math.round((Math.log(s)+10)*16)))),this.view.setUint8(n+2,Math.max(0,Math.min(255,Math.round((Math.log(i)+10)*16))))}setQuat(A,t,s,i,n){const g=16+this.numSplats*16+A*3,r=n<0;this.view.setUint8(g,Math.max(0,Math.min(255,Math.round(((r?-t:t)+1)*127.5)))),this.view.setUint8(g+1,Math.max(0,Math.min(255,Math.round(((r?-s:s)+1)*127.5)))),this.view.setUint8(g+2,Math.max(0,Math.min(255,Math.round(((r?-i:i)+1)*127.5))))}static quantizeSh(A,t){const s=Math.round(A*128)+128,i=1<<8-t,n=Math.floor((s+i/2)/i)*i;return Math.max(0,Math.min(255,n))}setSh(A,t,s,i){const n=Zs[this.shDegree]||0,g=16+this.numSplats*19+A*n*3;for(let r=0;r<9;++r)this.view.setUint8(g+r,YA.quantizeSh(t[r],5));if(s){const r=g+9;for(let I=0;I<15;++I)this.view.setUint8(r+I,YA.quantizeSh(s[I],4));if(i){const I=r+15;for(let o=0;o<21;++o)this.view.setUint8(I+o,YA.quantizeSh(i[o],4))}}}async finalize(){const A=new Uint8Array(this.buffer),s=new ReadableStream({async start(g){g.enqueue(A),g.close()}}).pipeThrough(new CompressionStream("gzip")),n=await new Response(s).arrayBuffer();return console.log("Compressed",A.length,"bytes to",n.byteLength,"bytes"),new Uint8Array(n)}}async function Xe(e){var a,C,h;const A=new ve,{inputs:t,clipXyz:s,maxSh:i,fractionalBits:n=12,opacityThreshold:g}=e;for(const B of t){let E=function(x){return x.multiplyScalar(y),x.applyQuaternion(f),x.add(D),x},l=function(x){return x.multiplyScalar(y),x},c=function(x){return x.premultiply(f),x},Q=function(x){return!F||F.containsPoint(x)},u=function(x){return g!==void 0?x>=g:!0};const y=((a=B.transform)==null?void 0:a.scale)??1,f=new NA().fromArray(((C=B.transform)==null?void 0:C.quaternion)??[0,0,0,1]),D=new d().fromArray(((h=B.transform)==null?void 0:h.translate)??[0,0,0]),F=s?new ps(new d().fromArray(s.min),new d().fromArray(s.max)):void 0;let J=B.fileType;switch(J||(J=be(B.fileBytes),!J&&B.pathOrUrl&&(J=He(B.pathOrUrl))),J){case tt.PLY:{const x=new wt({fileBytes:B.fileBytes});await x.parseHeader();let m=null;x.parseSplats((U,S,w,M,z,Y,N,v,q,T,P,Z,W,H,K)=>{const _=E(new d(S,w,M));if(Q(_)&&u(Z)){m=A.pushSplat(),A.setCenter(m,_.x,_.y,_.z);const R=l(new d(z,Y,N));A.setScale(m,R.x,R.y,R.z);const p=c(new NA(v,q,T,P));A.setQuaternion(m,p.x,p.y,p.z,p.w),A.setOpacity(m,Z),A.setColor(m,W,H,K)}else m=null},(U,S,w,M)=>{S&&m!==null&&A.setSh1(m,S),w&&m!==null&&A.setSh2(m,w),M&&m!==null&&A.setSh3(m,M)});break}case tt.SPZ:{const x=new qs({fileBytes:B.fileBytes}),m=new Int32Array(x.numSplats);m.fill(-1);const U=new Float32Array(x.numSplats*3),S=new d;x.parseSplats((w,M,z,Y)=>{const N=E(new d(M,z,Y));U[w*3]=N.x,U[w*3+1]=N.y,U[w*3+2]=N.z},(w,M)=>{S.fromArray(U,w*3),Q(S)&&u(M)&&(m[w]=A.pushSplat(),A.setCenter(m[w],S.x,S.y,S.z),A.setOpacity(m[w],M))},(w,M,z,Y)=>{m[w]>=0&&A.setColor(m[w],M,z,Y)},(w,M,z,Y)=>{if(m[w]>=0){const N=l(new d(M,z,Y));A.setScale(m[w],N.x,N.y,N.z)}},(w,M,z,Y,N)=>{if(m[w]>=0){const v=c(new NA(M,z,Y,N));A.setQuaternion(m[w],v.x,v.y,v.z,v.w)}},(w,M,z,Y)=>{m[w]>=0&&(A.setSh1(m[w],M),z&&A.setSh2(m[w],z),Y&&A.setSh3(m[w],Y))});break}case tt.SPLAT:zs(B.fileBytes,x=>{},(x,m,U,S,w,M,z,Y,N,v,q,T,P,Z,W)=>{const H=E(new d(m,U,S));if(Q(H)&&u(T)){const K=A.pushSplat();A.setCenter(K,H.x,H.y,H.z);const _=l(new d(w,M,z));A.setScale(K,_.x,_.y,_.z);const R=c(new NA(Y,N,v,q));A.setQuaternion(K,R.x,R.y,R.z,R.w),A.setOpacity(K,T),A.setColor(K,P,Z,W)}});break;case tt.KSPLAT:{let x=null;Ye(B.fileBytes,m=>{},(m,U,S,w,M,z,Y,N,v,q,T,P,Z,W,H)=>{const K=E(new d(U,S,w));if(Q(K)&&u(P)){x=A.pushSplat(),A.setCenter(x,K.x,K.y,K.z);const _=l(new d(M,z,Y));A.setScale(x,_.x,_.y,_.z);const R=c(new NA(N,v,q,T));A.setQuaternion(x,R.x,R.y,R.z,R.w),A.setOpacity(x,P),A.setColor(x,Z,W,H)}else x=null},(m,U,S,w)=>{x!==null&&(A.setSh1(x,U),S&&A.setSh2(x,S),w&&A.setSh3(x,w))});break}default:throw new Error(`transcodeSpz not implemented for ${J}`)}}const r=Math.min(i??3,A.sh3?3:A.sh2?2:A.sh1?1:0),I=new YA({numSplats:A.numSplats,shDegree:r,fractionalBits:n,flagAntiAlias:!0});for(let B=0;B<A.numSplats;++B){const E=B*3,l=B*4;I.setCenter(B,A.centers[E],A.centers[E+1],A.centers[E+2]),I.setScale(B,A.scales[E],A.scales[E+1],A.scales[E+2]),I.setQuat(B,A.quaternions[l],A.quaternions[l+1],A.quaternions[l+2],A.quaternions[l+3]),I.setAlpha(B,A.opacities[B]),I.setRgb(B,A.colors[E],A.colors[E+1],A.colors[E+2]),A.sh1&&r>=1&&I.setSh(B,A.sh1.slice(B*9,(B+1)*9),r>=2&&A.sh2?A.sh2.slice(B*15,(B+1)*15):void 0,r>=3&&A.sh3?A.sh3.slice(B*21,(B+1)*21):void 0)}return{fileBytes:await I.finalize(),clippedCount:I.clippedCount}}async function Ws(e){const{name:A,args:t,id:s}=e.data;let i,n;try{switch(A){case"unpackPly":{const{packedArray:g,fileBytes:r,splatEncoding:I}=t,o=await We({packedArray:g,fileBytes:r,splatEncoding:I});i={id:s,numSplats:o.numSplats,packedArray:o.packedArray,extra:o.extra};break}case"decodeSpz":{const{fileBytes:g,splatEncoding:r}=t,I=Pe(g,r);i={id:s,numSplats:I.numSplats,packedArray:I.packedArray,extra:I.extra};break}case"decodeAntiSplat":{const{fileBytes:g,splatEncoding:r}=t,I=Ge(g,r);i={id:s,numSplats:I.numSplats,packedArray:I.packedArray};break}case"decodeKsplat":{const{fileBytes:g,splatEncoding:r}=t,I=Re(g,r);i={id:s,numSplats:I.numSplats,packedArray:I.packedArray,extra:I.extra};break}case"decodePcSogs":{const{fileBytes:g,extraFiles:r,splatEncoding:I}=t,o=JSON.parse(new TextDecoder().decode(g)),a=await Ks(o,r,I);i={id:s,numSplats:a.numSplats,packedArray:a.packedArray,extra:a.extra};break}case"decodePcSogsZip":{const{fileBytes:g,splatEncoding:r}=t,I=await Te(g,r);i={id:s,numSplats:I.numSplats,packedArray:I.packedArray,extra:I.extra};break}case"sortSplats":{const{totalSplats:g,readback:r,ordering:I}=t;i={id:s,readback:r,...je({totalSplats:g,readback:r,ordering:I})};break}case"sortDoubleSplats":{const{numSplats:g,readback:r,ordering:I}=t;i={id:s,readback:r,ordering:I,activeSplats:Os(g,r,I)};break}case"sort32Splats":{const{numSplats:g,readback:r,ordering:I}=t;i={id:s,readback:r,ordering:I,activeSplats:$s(g,r,I)};break}case"transcodeSpz":{const g=t,r=await Xe(g);i={id:s,fileBytes:r,input:g};break}default:throw new Error(`Unknown name: ${A}`)}}catch(g){n=g,console.error(n)}self.postMessage({id:s,result:i,error:n},{transfer:Me(i)})}async function We({packedArray:e,fileBytes:A,splatEncoding:t}){const s=new wt({fileBytes:A});await s.parseHeader();const i=s.numSplats,n={};return s.parseSplats((g,r,I,o,a,C,h,B,E,l,c,Q,u,y,f)=>{Tt(e,g,r,I,o,a,C,h,B,E,l,c,Q,u,y,f,t)},(g,r,I,o)=>{r&&(n.sh1||(n.sh1=new Uint32Array(i*2)),lt(n.sh1,g,r,t)),I&&(n.sh2||(n.sh2=new Uint32Array(i*4)),ut(n.sh2,g,I,t)),o&&(n.sh3||(n.sh3=new Uint32Array(i*4)),yt(n.sh3,g,o,t))}),{packedArray:e,numSplats:i,extra:n}}function Pe(e,A){const t=new qs({fileBytes:e}),s=t.numSplats,i=Qt(s),n=new Uint32Array(i*4),g={};return t.parseSplats((r,I,o,a)=>{Rs(n,r,I,o,a)},(r,I)=>{de(n,r,I)},(r,I,o,a)=>{Fe(n,r,I,o,a,A)},(r,I,o,a)=>{Js(n,r,I,o,a,A)},(r,I,o,a,C)=>{_s(n,r,I,o,a,C)},(r,I,o,a)=>{I&&(g.sh1||(g.sh1=new Uint32Array(s*2)),lt(g.sh1,r,I,A)),o&&(g.sh2||(g.sh2=new Uint32Array(s*4)),ut(g.sh2,r,o,A)),a&&(g.sh3||(g.sh3=new Uint32Array(s*4)),yt(g.sh3,r,a,A))}),{packedArray:n,numSplats:s,extra:g}}const qt=31744,Mt=qt+1;let DA=null;function je({totalSplats:e,readback:A,ordering:t}){DA||(DA=new Uint32Array(Mt)),DA.fill(0);const s=A.map(I=>new Uint32Array(I.buffer)),i=s[0].length,n=Math.ceil(e/i);let g=0;for(let I=0;I<n;++I){const o=s[I],a=Math.min(o.length,e-g);for(let C=0;C<a;++C){const h=o[C]&32767;h<qt&&(DA[h]+=1)}g+=a}let r=0;for(let I=0;I<Mt;++I){const o=r+DA[I];DA[I]=r,r=o}g=0;for(let I=0;I<n;++I){const o=s[I],a=Math.min(o.length,e-g);for(let C=0;C<a;++C){const h=o[C]&32767;h<qt&&(t[DA[h]]=g+C,DA[h]+=1)}g+=a}if(DA[Mt-1]!==r)throw new Error(`Expected ${r} active splats but got ${DA[Mt-1]}`);return{activeSplats:r,ordering:t}}const Zt=[];function Ps(e){Zt.push(e)}async function Ve(){self.addEventListener("message",Ps),await es(),self.removeEventListener("message",Ps),self.addEventListener("message",Ws);for(const e of Zt)Ws(e);Zt.length=0}Ve().catch(console.error)})();\n//# sourceMappingURL=worker-BPZWK3_F.js.map\n', Es = typeof self < "u" && self.Blob && new Blob([Ha], { type: "text/javascript;charset=utf-8" });
function mu(t) {
  let A;
  try {
    if (A = Es && (self.URL || self.webkitURL).createObjectURL(Es), !A) throw "";
    const e = new Worker(A, {
      name: t == null ? void 0 : t.name
    });
    return e.addEventListener("error", () => {
      (self.URL || self.webkitURL).revokeObjectURL(A);
    }), e;
  } catch {
    return new Worker(
      "data:text/javascript;charset=utf-8," + encodeURIComponent(Ha),
      {
        name: t == null ? void 0 : t.name
      }
    );
  } finally {
    A && (self.URL || self.webkitURL).revokeObjectURL(A);
  }
}
class wu {
  constructor() {
    this.messages = {}, this.messageIdNext = 0, this.worker = new mu(), this.worker.onmessage = (A) => this.onMessage(A);
  }
  makeMessageId() {
    return ++this.messageIdNext;
  }
  makeMessagePromiseId() {
    const A = this.makeMessageId(), e = new Promise((s, n) => {
      this.messages[A] = { resolve: s, reject: n };
    });
    return { id: A, promise: e };
  }
  onMessage(A) {
    const { id: e, result: s, error: n } = A.data, i = this.messages[e];
    i && (delete this.messages[e], n ? i.reject(n) : i.resolve(s));
  }
  // Invoke an RPC on the worker with the given name and arguments.
  // The normal usage of a worker is to run one activity at a time,
  // but this function allows for concurrent calls, tagging each request
  // with a unique message Id and awaiting a response to that same Id.
  // The method will automatically transfer any ArrayBuffers in the
  // arguments to the worker. If you'd like to transfer a copy of a
  // buffer then you must clone it before passing to this function.
  async call(A, e) {
    const { id: s, promise: n } = this.makeMessagePromiseId();
    return this.worker.postMessage(
      { name: A, args: e, id: s },
      { transfer: Jn(e) }
    ), n;
  }
}
let qa = 4, ue = 0;
const Ka = [], $a = [];
async function xu() {
  const t = Ka.shift();
  if (t)
    return t;
  if (ue < qa) {
    const A = new wu();
    return ue += 1, A;
  }
  return new Promise((A) => {
    $a.push(A);
  });
}
function Su(t) {
  if (ue > qa) {
    ue -= 1;
    return;
  }
  const A = $a.shift();
  if (A) {
    A(t);
    return;
  }
  Ka.push(t);
}
async function lt(t) {
  const A = await xu();
  try {
    return await t(A);
  } finally {
    Su(A);
  }
}
class Du extends Qo {
  constructor(A) {
    super(A), this.fileLoader = new po(A);
  }
  load(A, e, s, n) {
    const i = this.manager.resolveURL(
      (this.path ?? "") + (A ?? "")
    ), r = new Headers(this.requestHeader), a = this.withCredentials ? "include" : "same-origin", o = new Request(i, { headers: r, credentials: a });
    let g = this.fileType;
    this.manager.itemStart(i), Qs(o, s).then(async (l) => {
      var E;
      const c = [
        new ProgressEvent("progress", {
          lengthComputable: !0,
          loaded: l.byteLength,
          total: l.byteLength
        })
      ];
      function I() {
        if (s) {
          const Q = c.every((d) => d.lengthComputable || d.loaded === 0 && d.total === 0), p = c.reduce((d, m) => d + m.loaded, 0), f = c.reduce((d, m) => d + m.total, 0);
          s(
            new ProgressEvent("progress", {
              lengthComputable: Q,
              loaded: p,
              total: f
            })
          );
        }
      }
      const h = {}, B = [], C = as(l);
      if (g === "pcsogs" && C === void 0)
        throw new Error("Invalid PC SOGS file");
      if (C !== void 0) {
        g = "pcsogs";
        for (const Q of ["means", "scales", "quats", "sh0", "shN"]) {
          const p = C[Q];
          if (p)
            for (const f of p.files) {
              const d = new URL(f, i).toString(), m = c.length;
              c.push(new ProgressEvent("progress")), this.manager.itemStart(d);
              const D = new Request(d, { headers: r, credentials: a }), x = Qs(D, (y) => {
                c[m] = y, I();
              }).then((y) => {
                h[f] = y;
              }).catch((y) => {
                throw this.manager.itemError(d), y;
              }).finally(() => {
                this.manager.itemEnd(d);
              });
              B.push(x);
            }
        }
      }
      if (await Promise.all(B), e) {
        const Q = ((E = this.packedSplats) == null ? void 0 : E.splatEncoding) ?? fe, p = await Za({
          input: l,
          extraFiles: h,
          fileType: g,
          pathOrUrl: i,
          splatEncoding: Q
        });
        this.packedSplats ? (this.packedSplats.initialize(p), e(this.packedSplats)) : e(new KA(p));
      }
    }).catch((l) => {
      this.manager.itemError(i), n == null || n(l);
    }).finally(() => {
      this.manager.itemEnd(i);
    });
  }
  async loadAsync(A, e) {
    return new Promise((s, n) => {
      this.load(
        A,
        (i) => {
          s(i);
        },
        e,
        n
      );
    });
  }
  parse(A) {
    return new OA({ packedSplats: A });
  }
}
async function Qs(t, A) {
  const e = await fetch(t);
  if (!e.ok)
    throw new Error(
      `${e.status} "${e.statusText}" fetching URL: ${t.url}`
    );
  if (!e.body)
    throw new Error(`Response body is null for URL: ${t.url}`);
  const s = e.body.getReader(), n = Number.parseInt(
    e.headers.get("Content-Length") || "0"
  ), i = Number.isNaN(n) ? 0 : n;
  let r = 0;
  const a = [];
  for (; ; ) {
    const { done: l, value: c } = await s.read();
    if (l)
      break;
    a.push(c), r += c.length, A && A(
      new ProgressEvent("progress", {
        lengthComputable: i !== 0,
        loaded: r,
        total: i
      })
    );
  }
  const o = new Uint8Array(r);
  let g = 0;
  for (const l of a)
    o.set(l, g), g += l.length;
  return o.buffer;
}
var Jt = /* @__PURE__ */ ((t) => (t.PLY = "ply", t.SPZ = "spz", t.SPLAT = "splat", t.KSPLAT = "ksplat", t.PCSOGS = "pcsogs", t.PCSOGSZIP = "pcsogszip", t))(Jt || {});
function Va(t) {
  const A = new DataView(t.buffer);
  if ((A.getUint32(0, !0) & 16777215) === 7957616)
    return "ply";
  if ((A.getUint32(0, !0) & 16777215) === 559903) {
    const e = Pn(t, 4);
    return new DataView(e.buffer).getUint32(0, !0) === 1347635022 ? "spz" : void 0;
  }
  if (A.getUint32(0, !0) === 67324752)
    return vu(t) ? "pcsogszip" : void 0;
}
function Mu(t) {
  const A = t.split(/[?#]/, 1)[0], e = Math.max(
    A.lastIndexOf("/"),
    A.lastIndexOf("\\")
  ), s = A.slice(e + 1), n = s.lastIndexOf(".");
  return n <= 0 || n === s.length - 1 ? "" : s.slice(n + 1).toLowerCase();
}
function Pa(t) {
  const A = Mu(t);
  if (A === "ply")
    return "ply";
  if (A === "spz")
    return "spz";
  if (A === "splat")
    return "splat";
  if (A === "ksplat")
    return "ksplat";
}
function Fh(t) {
  return as(t) !== void 0;
}
function as(t) {
  try {
    let A;
    if (typeof t == "string")
      A = t;
    else {
      const s = t instanceof ArrayBuffer ? new Uint8Array(t) : t;
      if (s.length > 65536)
        return;
      A = new TextDecoder().decode(s);
    }
    const e = JSON.parse(A);
    if (!e || typeof e != "object" || Array.isArray(e))
      return;
    for (const s of ["means", "scales", "quats", "sh0"])
      if (!e[s] || typeof e[s] != "object" || Array.isArray(e[s]) || !e[s].shape || !e[s].files || s !== "quats" && (!e[s].mins || !e[s].maxs))
        return;
    return e;
  } catch {
    return;
  }
}
function vu(t) {
  try {
    const A = t instanceof ArrayBuffer ? new Uint8Array(t) : t;
    let e = null;
    const s = Lo(A, {
      filter: ({ name: i }) => i.split(/[\\/]/).pop() === "meta.json" ? (e = i, !0) : !1
    });
    if (!e)
      return;
    const n = as(s[e]);
    return n ? { name: e, json: n } : void 0;
  } catch {
    return;
  }
}
async function Za({
  input: t,
  extraFiles: A,
  fileType: e,
  pathOrUrl: s,
  splatEncoding: n
}) {
  const i = t instanceof ArrayBuffer ? new Uint8Array(t) : t;
  let r = e;
  switch (e || (r = Va(i), !r && s && (r = Pa(s))), r) {
    case "ply": {
      const a = new Ie({ fileBytes: i });
      await a.parseHeader();
      const o = a.numSplats, g = wA(o).maxSplats, l = {
        fileBytes: i,
        packedArray: new Uint32Array(g * 4),
        splatEncoding: n
      };
      return await lt(async (c) => {
        const { packedArray: I, numSplats: h, extra: B } = await c.call(
          "unpackPly",
          l
        );
        return { packedArray: I, numSplats: h, extra: B };
      });
    }
    case "spz":
      return await lt(async (a) => {
        const { packedArray: o, numSplats: g, extra: l } = await a.call(
          "decodeSpz",
          {
            fileBytes: i,
            splatEncoding: n
          }
        );
        return { packedArray: o, numSplats: g, extra: l };
      });
    case "splat":
      return await lt(async (a) => {
        const { packedArray: o, numSplats: g } = await a.call(
          "decodeAntiSplat",
          {
            fileBytes: i,
            splatEncoding: n
          }
        );
        return { packedArray: o, numSplats: g };
      });
    case "ksplat":
      return await lt(async (a) => {
        const { packedArray: o, numSplats: g, extra: l } = await a.call(
          "decodeKsplat",
          { fileBytes: i, splatEncoding: n }
        );
        return { packedArray: o, numSplats: g, extra: l };
      });
    case "pcsogs":
      return await lt(async (a) => {
        const { packedArray: o, numSplats: g, extra: l } = await a.call(
          "decodePcSogs",
          { fileBytes: i, extraFiles: A, splatEncoding: n }
        );
        return { packedArray: o, numSplats: g, extra: l };
      });
    case "pcsogszip":
      return await lt(async (a) => {
        const { packedArray: o, numSplats: g, extra: l } = await a.call(
          "decodePcSogsZip",
          { fileBytes: i, splatEncoding: n }
        );
        return { packedArray: o, numSplats: g, extra: l };
      });
    default:
      throw new Error(`Unknown splat file type: ${r}`);
  }
}
class bu {
  constructor({ maxSplats: A = 1 } = {}) {
    this.numSplats = 0, this.maxSplats = wA(A).maxSplats, this.centers = new Float32Array(this.maxSplats * 3), this.scales = new Float32Array(this.maxSplats * 3), this.quaternions = new Float32Array(this.maxSplats * 4), this.opacities = new Float32Array(this.maxSplats), this.colors = new Float32Array(this.maxSplats * 3);
  }
  pushSplat() {
    const A = this.numSplats;
    return this.ensureIndex(A), this.numSplats += 1, A;
  }
  unpushSplat(A) {
    if (A === this.numSplats - 1)
      this.numSplats -= 1;
    else
      throw new Error("Cannot unpush splat from non-last position");
  }
  ensureCapacity(A) {
    if (A > this.maxSplats) {
      const e = Math.max(A, this.maxSplats * 2), s = new Float32Array(e * 3), n = new Float32Array(e * 3), i = new Float32Array(e * 4), r = new Float32Array(e), a = new Float32Array(e * 3);
      if (s.set(this.centers), n.set(this.scales), i.set(this.quaternions), r.set(this.opacities), a.set(this.colors), this.centers = s, this.scales = n, this.quaternions = i, this.opacities = r, this.colors = a, this.sh1) {
        const o = new Float32Array(e * 9);
        o.set(this.sh1), this.sh1 = o;
      }
      if (this.sh2) {
        const o = new Float32Array(e * 15);
        o.set(this.sh2), this.sh2 = o;
      }
      if (this.sh3) {
        const o = new Float32Array(e * 21);
        o.set(this.sh3), this.sh3 = o;
      }
      this.maxSplats = e;
    }
  }
  ensureIndex(A) {
    this.ensureCapacity(A + 1);
  }
  setCenter(A, e, s, n) {
    this.centers[A * 3] = e, this.centers[A * 3 + 1] = s, this.centers[A * 3 + 2] = n;
  }
  setScale(A, e, s, n) {
    this.scales[A * 3] = e, this.scales[A * 3 + 1] = s, this.scales[A * 3 + 2] = n;
  }
  setQuaternion(A, e, s, n, i) {
    this.quaternions[A * 4] = e, this.quaternions[A * 4 + 1] = s, this.quaternions[A * 4 + 2] = n, this.quaternions[A * 4 + 3] = i;
  }
  setOpacity(A, e) {
    this.opacities[A] = e;
  }
  setColor(A, e, s, n) {
    this.colors[A * 3] = e, this.colors[A * 3 + 1] = s, this.colors[A * 3 + 2] = n;
  }
  setSh1(A, e) {
    this.sh1 || (this.sh1 = new Float32Array(this.maxSplats * 9));
    for (let s = 0; s < 9; ++s)
      this.sh1[A * 9 + s] = e[s];
  }
  setSh2(A, e) {
    this.sh2 || (this.sh2 = new Float32Array(this.maxSplats * 15));
    for (let s = 0; s < 15; ++s)
      this.sh2[A * 15 + s] = e[s];
  }
  setSh3(A, e) {
    this.sh3 || (this.sh3 = new Float32Array(this.maxSplats * 21));
    for (let s = 0; s < 21; ++s)
      this.sh3[A * 21 + s] = e[s];
  }
}
var Fu = `precision highp float;
precision highp int;
precision highp sampler2D;
precision highp usampler2D;
precision highp isampler2D;
precision highp sampler2DArray;
precision highp usampler2DArray;
precision highp isampler2DArray;
precision highp sampler3D;
precision highp usampler3D;
precision highp isampler3D;

#include <splatDefines>

uniform uint targetLayer;
uniform int targetBase;
uniform int targetCount;

out uvec4 target;

{{ GLOBALS }}

void produceSplat(int index) {
    {{ STATEMENTS }}
}

void main() {
    int targetIndex = int(targetLayer << SPLAT_TEX_LAYER_BITS) + int(uint(gl_FragCoord.y) << SPLAT_TEX_WIDTH_BITS) + int(gl_FragCoord.x);
    int index = targetIndex - targetBase;

    if ((index >= 0) && (index < targetCount)) {
        produceSplat(index);
    } else {
        target = uvec4(0u, 0u, 0u, 0u);
    }
}`;
const fe = {
  rgbMin: 0,
  rgbMax: 1,
  lnScaleMin: TA,
  lnScaleMax: UA,
  sh1Min: -1,
  sh1Max: 1,
  sh2Min: -1,
  sh2Max: 1,
  sh3Min: -1,
  sh3Max: 1
}, nA = class nA {
  constructor(A = {}) {
    this.maxSplats = 0, this.numSplats = 0, this.packedArray = null, this.isInitialized = !1, this.target = null, this.source = null, this.needsUpdate = !0, this.extra = {}, this.dyno = new os({ packedSplats: this }), this.dynoRgbMinMaxLnScaleMinMax = new kt({
      key: "rgbMinMaxLnScaleMinMax",
      value: new u.Vector4(0, 1, TA, UA),
      update: (e) => {
        var s, n, i, r;
        return e.set(
          ((s = this.splatEncoding) == null ? void 0 : s.rgbMin) ?? 0,
          ((n = this.splatEncoding) == null ? void 0 : n.rgbMax) ?? 1,
          ((i = this.splatEncoding) == null ? void 0 : i.lnScaleMin) ?? TA,
          ((r = this.splatEncoding) == null ? void 0 : r.lnScaleMax) ?? UA
        ), e;
      }
    }), this.dynoSh1MinMax = new Lt({
      key: "sh1MinMax",
      value: new u.Vector2(-1, 1),
      update: (e) => {
        var s, n;
        return e.set(
          ((s = this.splatEncoding) == null ? void 0 : s.sh1Min) ?? -1,
          ((n = this.splatEncoding) == null ? void 0 : n.sh1Max) ?? 1
        ), e;
      }
    }), this.dynoSh2MinMax = new Lt({
      key: "sh2MinMax",
      value: new u.Vector2(-1, 1),
      update: (e) => {
        var s, n;
        return e.set(
          ((s = this.splatEncoding) == null ? void 0 : s.sh2Min) ?? -1,
          ((n = this.splatEncoding) == null ? void 0 : n.sh2Max) ?? 1
        ), e;
      }
    }), this.dynoSh3MinMax = new Lt({
      key: "sh3MinMax",
      value: new u.Vector2(-1, 1),
      update: (e) => {
        var s, n;
        return e.set(
          ((s = this.splatEncoding) == null ? void 0 : s.sh3Min) ?? -1,
          ((n = this.splatEncoding) == null ? void 0 : n.sh3Max) ?? 1
        ), e;
      }
    }), this.initialized = Promise.resolve(this), this.reinitialize(A);
  }
  reinitialize(A) {
    this.isInitialized = !1, this.extra = {}, this.splatEncoding = A.splatEncoding, A.url || A.fileBytes || A.construct ? this.initialized = this.asyncInitialize(A).then(() => (this.isInitialized = !0, this)) : (this.initialize(A), this.isInitialized = !0, this.initialized = Promise.resolve(this));
  }
  initialize(A) {
    A.packedArray ? (this.packedArray = A.packedArray, this.maxSplats = Math.floor(this.packedArray.length / 4), this.maxSplats = Math.floor(this.maxSplats / Z) * Z, this.numSplats = Math.min(
      this.maxSplats,
      A.numSplats ?? Number.POSITIVE_INFINITY
    )) : (this.maxSplats = A.maxSplats ?? 0, this.numSplats = 0), this.extra = A.extra ?? {};
  }
  async asyncInitialize(A) {
    const { url: e, fileBytes: s, construct: n } = A;
    if (e) {
      const i = new Du();
      i.packedSplats = this, await i.loadAsync(e);
    } else if (s) {
      const i = await Za({
        input: s,
        fileType: A.fileType,
        pathOrUrl: A.fileName ?? e,
        splatEncoding: A.splatEncoding ?? fe
      });
      this.initialize(i);
    }
    if (n) {
      const i = n(this);
      i instanceof Promise && await i;
    }
  }
  // Call this when you are finished with the PackedSplats and want to free
  // any buffers it holds.
  dispose() {
    this.target && (this.target.dispose(), this.target = null), this.source && (this.source.dispose(), this.source = null);
  }
  // Ensures that this.packedArray can fit numSplats Gsplats. If it's too small,
  // resize exponentially and copy over the original data.
  //
  // Typically you don't need to call this, because calling this.setSplat(index, ...)
  // and this.pushSplat(...) will automatically call ensureSplats() so we have
  // enough splats.
  ensureSplats(A) {
    const e = A <= this.maxSplats ? this.maxSplats : (
      // Grow exponentially to avoid frequent reallocations
      Math.max(A, 2 * this.maxSplats)
    ), s = this.packedArray ? this.packedArray.length / 4 : 0;
    if (!this.packedArray || e > s) {
      this.maxSplats = wA(e).maxSplats;
      const n = new Uint32Array(this.maxSplats * 4);
      this.packedArray && n.set(this.packedArray), this.packedArray = n;
    }
    return this.packedArray;
  }
  // Ensure the extra array for the given level is large enough to hold numSplats
  ensureSplatsSh(A, e) {
    let s, n;
    if (A === 0)
      return this.ensureSplats(e);
    if (A === 1)
      s = 2, n = "sh1";
    else if (A === 2)
      s = 4, n = "sh2";
    else if (A === 3)
      s = 4, n = "sh3";
    else
      throw new Error(`Invalid level: ${A}`);
    let i = this.extra[n] ? this.extra[n].length / s : 0;
    const r = e <= i ? i : Math.max(e, 2 * i);
    if (!this.extra[n] || r > i) {
      i = wA(r).maxSplats;
      const a = new Uint32Array(i * s);
      this.extra[n] && a.set(this.extra[n]), this.extra[n] = a;
    }
    return this.extra[n];
  }
  // Unpack the 16-byte Gsplat data at index into the Three.js components
  // center: THREE.Vector3, scales: THREE.Vector3, quaternion: THREE.Quaternion,
  // opacity: number 0..1, color: THREE.Color 0..1.
  getSplat(A) {
    if (!this.packedArray || A >= this.numSplats)
      throw new Error("Invalid index");
    return Ye(this.packedArray, A, this.splatEncoding);
  }
  // Set all PackedSplat components at index with the provided Gsplat attributes
  // (can be the same objects returned by getSplat). Ensures there is capacity
  // for at least index+1 Gsplats.
  setSplat(A, e, s, n, i, r) {
    const a = this.ensureSplats(A + 1);
    Re(
      a,
      A,
      e.x,
      e.y,
      e.z,
      s.x,
      s.y,
      s.z,
      n.x,
      n.y,
      n.z,
      n.w,
      i,
      r.r,
      r.g,
      r.b
    ), this.numSplats = Math.max(this.numSplats, A + 1);
  }
  // Effectively calls this.setSplat(this.numSplats++, center, ...), useful on
  // construction where you just want to iterate and create a collection of Gsplats.
  pushSplat(A, e, s, n, i) {
    const r = this.ensureSplats(this.numSplats + 1);
    Re(
      r,
      this.numSplats,
      A.x,
      A.y,
      A.z,
      e.x,
      e.y,
      e.z,
      s.x,
      s.y,
      s.z,
      s.w,
      n,
      i.r,
      i.g,
      i.b
    ), ++this.numSplats;
  }
  // Iterate over Gsplats index 0..=(this.numSplats-1), unpack each Gsplat
  // and invoke the callback function with the Gsplat attributes.
  forEachSplat(A) {
    if (!(!this.packedArray || !this.numSplats))
      for (let e = 0; e < this.numSplats; ++e) {
        const s = Ye(this.packedArray, e, this.splatEncoding);
        A(
          e,
          s.center,
          s.scales,
          s.quaternion,
          s.opacity,
          s.color
        );
      }
  }
  // Ensures our PackedSplats.target render target has enough space to generate
  // maxSplats total Gsplats, and reallocate if not large enough.
  ensureGenerate(A) {
    if (this.target && (A ?? 1) <= this.maxSplats)
      return !1;
    this.dispose();
    const e = wA(A ?? 1), { width: s, height: n, depth: i } = e;
    return this.maxSplats = e.maxSplats, this.target = new u.WebGLArrayRenderTarget(s, n, i, {
      depthBuffer: !1,
      stencilBuffer: !1,
      generateMipmaps: !1,
      magFilter: u.NearestFilter,
      minFilter: u.NearestFilter
    }), this.target.texture.format = u.RGBAIntegerFormat, this.target.texture.type = u.UnsignedIntType, this.target.texture.internalFormat = "RGBA32UI", this.target.scissorTest = !0, !0;
  }
  // Given an array of splatCounts (.numSplats for each
  // SplatGenerator/SplatMesh in the scene), compute a
  // "mapping layout" in the composite array of generated outputs.
  generateMapping(A) {
    let e = 0;
    const s = A.map((n) => {
      const i = e, r = Math.ceil(n / Z) * Z;
      return e += r, { base: i, count: n };
    });
    return { maxSplats: e, mapping: s };
  }
  // Returns a THREE.DataArrayTexture representing the PackedSplats content as
  // a Uint32x4 data array texture (2048 x 2048 x depth in size)
  getTexture() {
    return this.target ? this.target.texture : this.source || this.packedArray ? this.maybeUpdateSource() : nA.getEmpty();
  }
  // Check if source texture needs to be created/updated
  maybeUpdateSource() {
    if (!this.packedArray)
      throw new Error("No packed splats");
    if (this.needsUpdate || !this.source) {
      if (this.needsUpdate = !1, this.source) {
        const { width: A, height: e, depth: s } = this.source.image;
        this.maxSplats !== A * e * s && (this.source.dispose(), this.source = null);
      }
      if (this.source)
        this.packedArray.buffer !== this.source.image.data.buffer && (this.source.image.data = new Uint8Array(this.packedArray.buffer));
      else {
        const { width: A, height: e, depth: s } = wA(this.maxSplats);
        this.source = new u.DataArrayTexture(
          this.packedArray,
          A,
          e,
          s
        ), this.source.format = u.RGBAIntegerFormat, this.source.type = u.UnsignedIntType, this.source.internalFormat = "RGBA32UI", this.source.needsUpdate = !0;
      }
      this.source.needsUpdate = !0;
    }
    return this.source;
  }
  // Can be used where you need an uninitialized THREE.DataArrayTexture like
  // a uniform you will update with the result of this.getTexture() later.
  static getEmpty() {
    if (!nA.emptySource) {
      const { width: A, height: e, depth: s, maxSplats: n } = wA(1), i = new Uint32Array(n * 4);
      nA.emptySource = new u.DataArrayTexture(
        i,
        A,
        e,
        s
      ), nA.emptySource.format = u.RGBAIntegerFormat, nA.emptySource.type = u.UnsignedIntType, nA.emptySource.internalFormat = "RGBA32UI", nA.emptySource.needsUpdate = !0;
    }
    return nA.emptySource;
  }
  // Get a program and THREE.RawShaderMaterial for a given GsplatGenerator,
  // generating it if necessary and caching the result.
  prepareProgramMaterial(A) {
    let e = nA.generatorProgram.get(A);
    if (!e) {
      const n = MA(
        { index: "int" },
        { output: "uvec4" },
        ({ index: i }) => {
          A.inputs.index = i;
          const r = A.outputs.gsplat;
          return { output: An(
            r,
            this.dynoRgbMinMaxLnScaleMinMax
          ) };
        }
      );
      nA.programTemplate || (nA.programTemplate = new ss(
        Fu
      )), e = new es({
        graph: n,
        inputs: { index: "index" },
        outputs: { output: "target" },
        template: nA.programTemplate
      }), Object.assign(e.uniforms, {
        targetLayer: { value: 0 },
        targetBase: { value: 0 },
        targetCount: { value: 0 }
      }), nA.generatorProgram.set(A, e);
    }
    const s = e.prepareMaterial();
    return nA.fullScreenQuad.material = s, { program: e, material: s };
  }
  saveRenderState(A) {
    return {
      xrEnabled: A.xr.enabled,
      autoClear: A.autoClear
    };
  }
  resetRenderState(A, e) {
    A.setRenderTarget(null), A.xr.enabled = e.xrEnabled, A.autoClear = e.autoClear;
  }
  // Executes a dyno program specified by generator which is any DynoBlock that
  // maps { index: "int" } to { gsplat: Gsplat }. This is called in
  // SparkRenderer.updateInternal() to re-generate Gsplats in the scene for
  // SplatGenerator instances whose version is newer than what was generated
  // for it last time.
  generate({
    generator: A,
    base: e,
    count: s,
    renderer: n
  }) {
    if (!this.target)
      throw new Error("Target must be initialized with ensureSplats");
    if (e + s > this.maxSplats)
      throw new Error("Base + count exceeds maxSplats");
    const { program: i, material: r } = this.prepareProgramMaterial(A);
    i.update();
    const a = this.saveRenderState(n), o = Math.ceil((e + s) / Z) * Z, g = Z * HA;
    for (r.uniforms.targetBase.value = e, r.uniforms.targetCount.value = s; e < o; ) {
      const l = Math.floor(e / g);
      r.uniforms.targetLayer.value = l;
      const c = l * g, I = Math.floor((e - c) / Z), h = Math.min(
        HA,
        Math.ceil((o - c) / Z)
      );
      this.target.scissor.set(
        0,
        I,
        Z,
        h - I
      ), n.setRenderTarget(this.target, l), n.xr.enabled = !1, n.autoClear = !1, nA.fullScreenQuad.render(n), e += Z * (h - I);
    }
    return this.resetRenderState(n, a), { nextBase: o };
  }
};
nA.emptySource = null, nA.programTemplate = null, nA.generatorProgram = /* @__PURE__ */ new Map(), nA.fullScreenQuad = new ys(
  new u.RawShaderMaterial({ visible: !1 })
);
let KA = nA;
class os extends N {
  constructor({ packedSplats: A } = {}) {
    super({
      key: "packedSplats",
      type: Ot,
      globals: () => [Ee],
      value: {
        texture: KA.getEmpty(),
        numSplats: 0,
        rgbMinMaxLnScaleMinMax: new u.Vector4(
          0,
          1,
          TA,
          UA
        )
      },
      update: (e) => {
        var s, n, i, r, a, o, g, l, c, I;
        return e.texture = ((s = this.packedSplats) == null ? void 0 : s.getTexture()) ?? KA.getEmpty(), e.numSplats = ((n = this.packedSplats) == null ? void 0 : n.numSplats) ?? 0, e.rgbMinMaxLnScaleMinMax.set(
          ((r = (i = this.packedSplats) == null ? void 0 : i.splatEncoding) == null ? void 0 : r.rgbMin) ?? 0,
          ((o = (a = this.packedSplats) == null ? void 0 : a.splatEncoding) == null ? void 0 : o.rgbMax) ?? 1,
          ((l = (g = this.packedSplats) == null ? void 0 : g.splatEncoding) == null ? void 0 : l.lnScaleMin) ?? TA,
          ((I = (c = this.packedSplats) == null ? void 0 : c.splatEncoding) == null ? void 0 : I.lnScaleMax) ?? UA
        ), e;
      }
    }), this.packedSplats = A;
  }
}
class qe extends u.InstancedBufferGeometry {
  constructor(A, e) {
    super(), this.ordering = A, this.setAttribute("position", new u.BufferAttribute(Nu, 3)), this.setIndex(new u.BufferAttribute(ku, 1)), this._maxInstanceCount = A.length, this.instanceCount = e, this.attribute = new u.InstancedBufferAttribute(A, 1, !1, 1), this.attribute.setUsage(u.DynamicDrawUsage), this.setAttribute("splatIndex", this.attribute);
  }
  update(A, e) {
    this.ordering = A, this.attribute.array = A, this.instanceCount = e, this.attribute.addUpdateRange(0, e), this.attribute.needsUpdate = !0;
  }
}
const Nu = new Float32Array([
  -1,
  -1,
  0,
  1,
  -1,
  0,
  1,
  1,
  0,
  -1,
  1,
  0
]), ku = new Uint16Array([0, 1, 2, 0, 2, 3]), nt = class nt {
  constructor(A) {
    if (this.lastTime = null, this.encodeLinear = !1, this.superXY = 1, this.display = null, this.sorting = null, this.pending = null, this.sortingCheck = !1, this.readback16 = new Uint16Array(0), this.readback32 = new Uint32Array(0), this.spark = A.spark, this.camera = A.camera, this.viewToWorld = A.viewToWorld ?? new u.Matrix4(), A.target) {
      const { width: e, height: s, doubleBuffer: n } = A.target, i = Math.max(1, Math.min(4, A.target.superXY ?? 1));
      if (this.superXY = i, e * i > 8192 || s * i > 8192)
        throw new Error("Target size too large");
      this.target = new u.WebGLRenderTarget(
        e * i,
        s * i,
        {
          format: u.RGBAFormat,
          type: u.UnsignedByteType,
          colorSpace: u.SRGBColorSpace
        }
      ), n && (this.back = new u.WebGLRenderTarget(
        e * i,
        s * i,
        {
          format: u.RGBAFormat,
          type: u.UnsignedByteType,
          colorSpace: u.SRGBColorSpace
        }
      )), this.encodeLinear = !0;
    }
    this.onTextureUpdated = A.onTextureUpdated, this.sortRadial = A.sortRadial ?? !0, this.sortDistance = A.sortDistance, this.sortCoorient = A.sortCoorient, this.depthBias = A.depthBias, this.sort360 = A.sort360, this.sort32 = A.sort32, this.stochastic = A.stochastic ?? !1, this.orderingFreelist = new _n({
      allocate: (e) => new Uint32Array(e),
      valid: (e, s) => e.length === s
    }), this.autoUpdate = !1, this.setAutoUpdate(A.autoUpdate ?? !1);
  }
  // Call this when you are done with the SparkViewpoint and want to
  // free up its resources (GPU targets, pixel buffers, etc.)
  dispose() {
    var A;
    this.setAutoUpdate(!1), this.target && (this.target.dispose(), this.target = void 0), this.back && (this.back.dispose(), this.back = void 0), this.display && (this.spark.releaseAccumulator(this.display.accumulator), this.display.geometry.dispose(), this.display = null), (A = this.pending) != null && A.accumulator && (this.spark.releaseAccumulator(this.pending.accumulator), this.pending = null);
  }
  // Use this function to change whether this viewpoint will auto-update
  // its sort order whenever the attached SparkRenderer updates the Gsplats.
  // Turn this on or off depending on whether you expect to do renders from
  // this viewpoint most frames.
  setAutoUpdate(A) {
    !this.autoUpdate && A ? this.spark.autoViewpoints.push(this) : this.autoUpdate && !A && (this.spark.autoViewpoints = this.spark.autoViewpoints.filter(
      (e) => e !== this
    )), this.autoUpdate = A;
  }
  // See below async prepareRenderPixels() for explanation of parameters.
  // Awaiting this method updates the Gsplats in the scene and performs a sort of the
  // Gsplats from this viewpoint, preparing it for a subsequent this.renderTarget()
  // call in the same tick.
  async prepare({
    scene: A,
    camera: e,
    viewToWorld: s,
    update: n,
    forceOrigin: i
  }) {
    var a;
    for (s ? this.viewToWorld = s : (this.camera = e ?? this.camera, this.camera && (this.camera.updateMatrixWorld(), this.viewToWorld = this.camera.matrixWorld.clone())); n ?? !0; ) {
      const o = i ? this.viewToWorld : void 0;
      if (this.spark.updateInternal({ scene: A, originToWorld: o }))
        break;
      await new Promise((l) => setTimeout(l, 10));
    }
    const r = this.spark.active;
    r !== ((a = this.display) == null ? void 0 : a.accumulator) && (this.spark.active.refCount += 1), await this.sortUpdate({ accumulator: r, viewToWorld: this.viewToWorld });
  }
  // Render out the viewpoint to the view target RGBA buffer.
  // Swaps buffers if doubleBuffer: true was set.
  // Calls onTextureUpdated(texture) with the resulting texture.
  renderTarget({
    scene: A,
    camera: e
  }) {
    var n;
    const s = this.back ?? this.target;
    if (!s)
      throw new Error("Must initialize SparkViewpoint with target");
    if (e = e ?? this.camera, !e)
      throw new Error("Must provide camera");
    if (e instanceof u.PerspectiveCamera) {
      const i = new u.PerspectiveCamera().copy(e, !1);
      i.aspect = s.width / s.height, i.updateProjectionMatrix(), e = i;
    }
    this.viewToWorld = e.matrixWorld.clone();
    try {
      this.spark.renderer.setRenderTarget(s), this.spark.prepareViewpoint(this), this.spark.renderer.render(A, e);
    } finally {
      this.spark.prepareViewpoint(this.spark.defaultView), this.spark.renderer.setRenderTarget(null);
    }
    s !== this.target && ([this.target, this.back] = [this.back, this.target]), (n = this.onTextureUpdated) == null || n.call(this, s.texture);
  }
  // Read back the previously rendered target image as a Uint8Array of packed
  // RGBA values (in that order). If superXY was set greater than 1 then
  // downsampling is performed in the target pixel array with simple averaging
  // to derive the returned pixel values. Subsequent calls to this.readTarget()
  // will reuse the same buffers to minimize memory allocations.
  async readTarget() {
    if (!this.target)
      throw new Error("Must initialize SparkViewpoint with target");
    const { width: A, height: e } = this.target, s = A * e * 4;
    (!this.superPixels || this.superPixels.length < s) && (this.superPixels = new Uint8Array(s)), await this.spark.renderer.readRenderTargetPixelsAsync(
      this.target,
      0,
      0,
      A,
      e,
      this.superPixels
    );
    const { superXY: n } = this;
    if (n === 1)
      return this.superPixels;
    const i = A / n, r = e / n, a = i * r * 4;
    (!this.pixels || this.pixels.length < a) && (this.pixels = new Uint8Array(a));
    const { superPixels: o, pixels: g } = this, l = n * n;
    for (let c = 0; c < r; c++) {
      const I = c * i;
      for (let h = 0; h < i; h++) {
        const B = h * n;
        let C = 0, E = 0, Q = 0, p = 0;
        for (let d = 0; d < n; d++) {
          const m = (c * n + d) * this.target.width;
          for (let D = 0; D < n; D++) {
            const x = (m + B + D) * 4;
            C += o[x], E += o[x + 1], Q += o[x + 2], p += o[x + 3];
          }
        }
        const f = (I + h) * 4;
        g[f] = C / l, g[f + 1] = E / l, g[f + 2] = Q / l, g[f + 3] = p / l;
      }
    }
    return g;
  }
  // Render out a viewpoint as a Uint8Array of RGBA values for the provided scene
  // and any camera/viewToWorld viewpoint overrides. By default update is true,
  // which triggers its SparkRenderer to check and potentially update the Gsplats.
  // Setting update to false disables this and sorts the Gsplats as they are.
  // Setting forceOrigin (default: false) to true forces the view update to
  // recalculate the splats with this view origin, potentially altering any
  // view-dependent effects. If you expect view-dependent effects to play a role
  // in the rendering quality, enable this.
  //
  // Underneath, prepareRenderPixels() simply calls await this.prepare(...),
  // this.renderTarget(...), and finally returns the result this.readTarget(),
  // a Promise to a Uint8Array with RGBA values for all the pixels (potentially
  // downsampled if the superXY parameter was used). These steps can also be called
  // manually, for example if you need to alter the scene before and after
  // this.renderTarget(...) to hide UI elements from being rendered.
  async prepareRenderPixels({
    scene: A,
    camera: e,
    viewToWorld: s,
    update: n,
    forceOrigin: i
  }) {
    return await this.prepare({ scene: A, camera: e, viewToWorld: s, update: n, forceOrigin: i }), this.renderTarget({ scene: A, camera: e }), this.readTarget();
  }
  // This is called automatically by SparkRenderer, there is no need to call it!
  // The method cannot be private because then SparkRenderer would
  // not be able to call it.
  autoPoll({ accumulator: A }) {
    var i, r, a, o;
    this.camera && (this.camera.updateMatrixWorld(), this.viewToWorld = this.camera.matrixWorld.clone());
    let e = !1, s = !1;
    if (!this.display)
      e = !0;
    else if (A) {
      e = !0;
      const { mappingVersion: g } = this.display.accumulator;
      A.mappingVersion === g && (this.spark.releaseAccumulator(this.display.accumulator), this.display.accumulator = A, s = !0);
    }
    const n = ((i = this.sorting) == null ? void 0 : i.viewToWorld) ?? ((r = this.display) == null ? void 0 : r.viewToWorld);
    n && !ce({
      matrix1: this.viewToWorld,
      matrix2: n,
      // By default update sort each 1 cm
      maxDistance: this.sortDistance ?? 0.01,
      // By default for radial sort, update for intermittent movement so that
      // we bring back splats culled by being behind the camera.
      // For depth sort, small rotations can change sort order a lot, so
      // update sort for even small rotations.
      minCoorient: this.sortCoorient ?? this.sortRadial ? 0.99 : 0.999
    }) && (e = !0), e && (A && (A.refCount += 1), A && ((a = this.pending) != null && a.accumulator) && this.pending.accumulator !== ((o = this.display) == null ? void 0 : o.accumulator) && this.spark.releaseAccumulator(this.pending.accumulator), this.pending = { accumulator: A, viewToWorld: this.viewToWorld, displayed: s }, this.driveSort());
  }
  async driveSort() {
    var A;
    for (; ; ) {
      if (this.sorting || !this.pending)
        return;
      const { viewToWorld: e, displayed: s } = this.pending;
      let n = this.pending.accumulator ?? ((A = this.display) == null ? void 0 : A.accumulator);
      if (n || (n = this.spark.active, n.refCount += 1), this.pending = null, !n)
        throw new Error("No accumulator to sort");
      this.sorting = { viewToWorld: e }, await this.sortUpdate({ accumulator: n, viewToWorld: e, displayed: s }), this.sorting = null;
    }
  }
  async sortUpdate({
    accumulator: A,
    viewToWorld: e,
    displayed: s = !1
  }) {
    if (this.sortingCheck)
      throw new Error("Only one sort at a time");
    this.sortingCheck = !0, A = A ?? this.spark.active;
    const { numSplats: n, maxSplats: i } = A.splats;
    let r = 0, a = this.orderingFreelist.alloc(i);
    if (this.stochastic) {
      r = n;
      for (let o = 0; o < n; ++o)
        a[o] = o;
    } else if (n > 0) {
      const {
        reader: o,
        doubleSortReader: g,
        sort32Reader: l,
        dynoSortRadial: c,
        dynoOrigin: I,
        dynoDirection: h,
        dynoDepthBias: B,
        dynoSort360: C,
        dynoSplats: E
      } = nt.makeSorter(), Q = this.sort32 ?? !1;
      let p;
      if (Q)
        this.readback32 = o.ensureBuffer(i, this.readback32), p = this.readback32;
      else {
        const y = Math.ceil(i / 2);
        this.readback16 = o.ensureBuffer(y, this.readback16), p = this.readback16;
      }
      const f = A.toWorld.clone().invert(), d = e.clone().premultiply(f);
      c.value = this.sort360 ? !0 : this.sortRadial, I.value.set(0, 0, 0).applyMatrix4(d), h.value.set(0, 0, -1).applyMatrix4(d).sub(I.value).normalize(), B.value = this.depthBias ?? 1, C.value = this.sort360 ?? !1, E.packedSplats = A.splats;
      const m = Q ? l : g, D = Q ? n : Math.ceil(n / 2);
      await o.renderReadback({
        renderer: this.spark.renderer,
        reader: m,
        count: D,
        readback: p
      });
      const x = await lt(async (y) => {
        const w = Q ? "sort32Splats" : "sortDoubleSplats";
        return y.call(w, {
          maxSplats: i,
          numSplats: n,
          readback: p,
          ordering: a
        });
      });
      Q ? this.readback32 = x.readback : this.readback16 = x.readback, a = x.ordering, r = x.activeSplats;
    }
    this.updateDisplay({
      accumulator: A,
      viewToWorld: e,
      ordering: a,
      activeSplats: r,
      displayed: s
    }), this.sortingCheck = !1;
  }
  updateDisplay({
    accumulator: A,
    viewToWorld: e,
    ordering: s,
    activeSplats: n,
    displayed: i = !1
  }) {
    if (!this.display)
      this.display = {
        accumulator: A,
        viewToWorld: e,
        geometry: new qe(s, n)
      };
    else {
      !i && A !== this.display.accumulator && (this.spark.releaseAccumulator(this.display.accumulator), this.display.accumulator = A), this.display.viewToWorld = e;
      const r = this.display.geometry.ordering;
      r.length === s.length ? this.display.geometry.update(s, n) : (this.display.geometry.dispose(), this.display.geometry = new qe(s, n)), this.orderingFreelist.free(r);
    }
    this.spark.viewpoint === this && this.spark.prepareViewpoint(this);
  }
  static makeSorter() {
    if (!nt.dynos) {
      const A = new oe({ value: !0 }), e = new bt({ value: new u.Vector3() }), s = new bt({ value: new u.Vector3() }), n = new ht({ value: 1 }), i = new oe({ value: !1 }), r = new os(), a = new ge(), o = MA(
        { index: "int" },
        { rgba8: "vec4" },
        ({ index: l }) => {
          if (!l)
            throw new Error("No index");
          const c = {
            sortRadial: A,
            sortOrigin: e,
            sortDirection: s,
            sortDepthBias: n,
            sort360: i
          }, I = iA(l, J("int", 2)), h = vt(r, I), B = Fe({ gsplat: h, ...c }), C = vt(
            r,
            CA(I, J("int", 1))
          ), E = Fe({ gsplat: C, ...c }), Q = qA({
            vectorType: "vec2",
            x: B,
            y: E
          });
          return { rgba8: _e(Wi(Q)) };
        }
      ), g = MA(
        { index: "int" },
        { rgba8: "vec4" },
        ({ index: l }) => {
          if (!l)
            throw new Error("No index");
          const c = {
            sortRadial: A,
            sortOrigin: e,
            sortDirection: s,
            sortDepthBias: n,
            sort360: i
          }, I = vt(r, l), h = Fe({ gsplat: I, ...c });
          return { rgba8: _e(Xi(h)) };
        }
      );
      nt.dynos = {
        dynoSortRadial: A,
        dynoOrigin: e,
        dynoDirection: s,
        dynoDepthBias: n,
        dynoSort360: i,
        dynoSplats: r,
        reader: a,
        doubleSortReader: o,
        sort32Reader: g
      };
    }
    return nt.dynos;
  }
};
nt.EMPTY_TEXTURE = new u.Texture(), nt.dynos = null;
let he = nt;
const Tu = uA(`
  float computeSort(Gsplat gsplat, bool sortRadial, vec3 sortOrigin, vec3 sortDirection, float sortDepthBias, bool sort360) {
    if (!isGsplatActive(gsplat.flags)) {
      return INFINITY;
    }

    vec3 center = gsplat.center - sortOrigin;
    float biasedDepth = dot(center, sortDirection) + sortDepthBias;
    if (!sort360 && (biasedDepth <= 0.0)) {
      return INFINITY;
    }

    return sortRadial ? length(center) : biasedDepth;
  }
`);
function Fe({
  gsplat: t,
  sortRadial: A,
  sortOrigin: e,
  sortDirection: s,
  sortDepthBias: n,
  sort360: i
}) {
  return Zt({
    inTypes: {
      gsplat: AA,
      sortRadial: "bool",
      sortOrigin: "vec3",
      sortDirection: "vec3",
      sortDepthBias: "float",
      sort360: "bool"
    },
    outTypes: { metric: "float" },
    globals: () => [vA, Tu],
    inputs: {
      gsplat: t,
      sortRadial: A,
      sortOrigin: e,
      sortDirection: s,
      sortDepthBias: n,
      sort360: i
    },
    statements: ({ inputs: r, outputs: a }) => {
      const {
        gsplat: o,
        sortRadial: g,
        sortOrigin: l,
        sortDirection: c,
        sortDepthBias: I,
        sort360: h
      } = r;
      return GA(`
        ${a.metric} = computeSort(${o}, ${g}, ${l}, ${c}, ${I}, ${h});
      `);
    }
  }).outputs.metric;
}
class Ne {
  constructor() {
    this.splats = new KA(), this.toWorld = new u.Matrix4(), this.mapping = [], this.refCount = 0, this.splatsVersion = -1, this.mappingVersion = -1;
  }
  ensureGenerate(A) {
    this.splats.ensureGenerate(A) && (this.mapping = []);
  }
  // Generate all Gsplats from an array of generators
  generateSplats({
    renderer: A,
    modifier: e,
    generators: s,
    forceUpdate: n,
    originToWorld: i
  }) {
    const r = this.mapping.reduce((g, l) => (g.set(l.node, l), g), /* @__PURE__ */ new Map());
    let a = 0, o = 0;
    for (const { node: g, generator: l, version: c, base: I, count: h } of s) {
      const B = r.get(g);
      if ((n || l !== (B == null ? void 0 : B.generator) || c !== (B == null ? void 0 : B.version) || I !== (B == null ? void 0 : B.base) || h !== (B == null ? void 0 : B.count)) && l && h > 0) {
        const C = e.apply(l);
        try {
          this.splats.generate({
            generator: C,
            base: I,
            count: h,
            renderer: A
          });
        } catch (E) {
          g.generator = void 0, g.generatorError = E;
        }
        a += 1;
      }
      o = Math.max(o, I + h);
    }
    return this.splats.numSplats = o, this.toWorld = i, this.mapping = s, a !== 0;
  }
  // Check if this accumulator has exactly the same generator mapping as
  // the previous one. If so, we can reuse the Gsplat sort order.
  hasCorrespondence(A) {
    return this.mapping.length !== A.mapping.length ? !1 : this.mapping.every(({ node: e, base: s, count: n }, i) => {
      const {
        node: r,
        base: a,
        count: o
      } = A.mapping[i];
      return e === r && s === a && n === o;
    });
  }
}
var Uu = `const float LN_SCALE_MIN = -12.0;
const float LN_SCALE_MAX = 9.0;

const uint SPLAT_TEX_WIDTH_BITS = 11u;
const uint SPLAT_TEX_HEIGHT_BITS = 11u;
const uint SPLAT_TEX_DEPTH_BITS = 11u;
const uint SPLAT_TEX_LAYER_BITS = SPLAT_TEX_WIDTH_BITS + SPLAT_TEX_HEIGHT_BITS;

const uint SPLAT_TEX_WIDTH = 1u << SPLAT_TEX_WIDTH_BITS;
const uint SPLAT_TEX_HEIGHT = 1u << SPLAT_TEX_HEIGHT_BITS;
const uint SPLAT_TEX_DEPTH = 1u << SPLAT_TEX_DEPTH_BITS;

const uint SPLAT_TEX_WIDTH_MASK = SPLAT_TEX_WIDTH - 1u;
const uint SPLAT_TEX_HEIGHT_MASK = SPLAT_TEX_HEIGHT - 1u;
const uint SPLAT_TEX_DEPTH_MASK = SPLAT_TEX_DEPTH - 1u;

const uint F16_INF = 0x7c00u;
const float PI = 3.1415926535897932384626433832795;

const float INFINITY = 1.0 / 0.0;
const float NEG_INFINITY = -INFINITY;

float sqr(float x) {
    return x * x;
}

float pow4(float x) {
    float x2 = x * x;
    return x2 * x2;
}

float pow8(float x) {
    float x4 = pow4(x);
    return x4 * x4;
}

vec3 srgbToLinear(vec3 rgb) {
    return pow(rgb, vec3(2.2));
}

vec3 linearToSrgb(vec3 rgb) {
    return pow(rgb, vec3(1.0 / 2.2));
}

uint encodeQuatOctXy88R8(vec4 q) {
    
    if (q.w < 0.0) {
        q = -q;
    }
    
    float theta = 2.0 * acos(q.w);
    float halfTheta = theta * 0.5;
    float s = sin(halfTheta);
    
    vec3 axis = (abs(s) < 1e-6) ? vec3(1.0, 0.0, 0.0) : q.xyz / s;
    
    
    
    float sum = abs(axis.x) + abs(axis.y) + abs(axis.z);
    vec2 p = vec2(axis.x, axis.y) / sum;
    
    if (axis.z < 0.0) {
        float oldPx = p.x;
        p.x = (1.0 - abs(p.y)) * (p.x >= 0.0 ? 1.0 : -1.0);
        p.y = (1.0 - abs(oldPx)) * (p.y >= 0.0 ? 1.0 : -1.0);
    }
    
    float u_f = p.x * 0.5 + 0.5;
    float v_f = p.y * 0.5 + 0.5;
    
    uint quantU = uint(clamp(round(u_f * 255.0), 0.0, 255.0));
    uint quantV = uint(clamp(round(v_f * 255.0), 0.0, 255.0));
    
    
    
    uint angleInt = uint(clamp(round((theta / 3.14159265359) * 255.0), 0.0, 255.0));
    
    
    return (angleInt << 16u) | (quantV << 8u) | quantU;
}

vec4 decodeQuatOctXy88R8(uint encoded) {
    
    uint quantU = encoded & uint(0xFFu);               
    uint quantV = (encoded >> 8u) & uint(0xFFu);         
    uint angleInt = encoded >> 16u;                      

    
    float u_f = float(quantU) / 255.0;
    float v_f = float(quantV) / 255.0;
    vec2 f = vec2(u_f * 2.0 - 1.0, v_f * 2.0 - 1.0);

    vec3 axis = vec3(f.xy, 1.0 - abs(f.x) - abs(f.y));
    float t = max(-axis.z, 0.0);
    axis.x += (axis.x >= 0.0) ? -t : t;
    axis.y += (axis.y >= 0.0) ? -t : t;
    axis = normalize(axis);
    
    
    float theta = (float(angleInt) / 255.0) * 3.14159265359;
    float halfTheta = theta * 0.5;
    float s = sin(halfTheta);
    float w = cos(halfTheta);
    
    return vec4(axis * s, w);
}

    

    

    

    

    

    

    

    

    

    

uvec4 packSplatEncoding(
    vec3 center, vec3 scales, vec4 quaternion, vec4 rgba, vec4 rgbMinMaxLnScaleMinMax
) {
    float rgbMin = rgbMinMaxLnScaleMinMax.x;
    float rgbMax = rgbMinMaxLnScaleMinMax.y;
    vec3 encRgb = (rgba.rgb - vec3(rgbMin)) / (rgbMax - rgbMin);
    uvec4 uRgba = uvec4(round(clamp(vec4(encRgb, rgba.a) * 255.0, 0.0, 255.0)));

    uint uQuat = encodeQuatOctXy88R8(quaternion);
    
    
    uvec3 uQuat3 = uvec3(uQuat & 0xffu, (uQuat >> 8u) & 0xffu, (uQuat >> 16u) & 0xffu);

    
    float lnScaleMin = rgbMinMaxLnScaleMinMax.z;
    float lnScaleMax = rgbMinMaxLnScaleMinMax.w;
    float lnScaleScale = 254.0 / (lnScaleMax - lnScaleMin);
    uvec3 uScales = uvec3(
        (scales.x == 0.0) ? 0u : uint(round(clamp((log(scales.x) - lnScaleMin) * lnScaleScale, 0.0, 254.0))) + 1u,
        (scales.y == 0.0) ? 0u : uint(round(clamp((log(scales.y) - lnScaleMin) * lnScaleScale, 0.0, 254.0))) + 1u,
        (scales.z == 0.0) ? 0u : uint(round(clamp((log(scales.z) - lnScaleMin) * lnScaleScale, 0.0, 254.0))) + 1u
    );

    
    uint word0 = uRgba.r | (uRgba.g << 8u) | (uRgba.b << 16u) | (uRgba.a << 24u);
    uint word1 = packHalf2x16(center.xy);
    uint word2 = packHalf2x16(vec2(center.z, 0.0)) | (uQuat3.x << 16u) | (uQuat3.y << 24u);
    uint word3 = uScales.x | (uScales.y << 8u) | (uScales.z << 16u) | (uQuat3.z << 24u);
    return uvec4(word0, word1, word2, word3);
}

uvec4 packSplat(vec3 center, vec3 scales, vec4 quaternion, vec4 rgba) {
    return packSplatEncoding(center, scales, quaternion, rgba, vec4(0.0, 1.0, LN_SCALE_MIN, LN_SCALE_MAX));
}

void unpackSplatEncoding(uvec4 packed, out vec3 center, out vec3 scales, out vec4 quaternion, out vec4 rgba, vec4 rgbMinMaxLnScaleMinMax) {
    uint word0 = packed.x, word1 = packed.y, word2 = packed.z, word3 = packed.w;

    uvec4 uRgba = uvec4(word0 & 0xffu, (word0 >> 8u) & 0xffu, (word0 >> 16u) & 0xffu, (word0 >> 24u) & 0xffu);
    float rgbMin = rgbMinMaxLnScaleMinMax.x;
    float rgbMax = rgbMinMaxLnScaleMinMax.y;
    rgba = (vec4(uRgba) / 255.0);
    rgba.rgb = rgba.rgb * (rgbMax - rgbMin) + rgbMin;

    center = vec4(
        unpackHalf2x16(word1),
        unpackHalf2x16(word2 & 0xffffu)
    ).xyz;

    uvec3 uScales = uvec3(word3 & 0xffu, (word3 >> 8u) & 0xffu, (word3 >> 16u) & 0xffu);
    float lnScaleMin = rgbMinMaxLnScaleMinMax.z;
    float lnScaleMax = rgbMinMaxLnScaleMinMax.w;
    float lnScaleScale = (lnScaleMax - lnScaleMin) / 254.0;
    scales = vec3(
        (uScales.x == 0u) ? 0.0 : exp(lnScaleMin + float(uScales.x - 1u) * lnScaleScale),
        (uScales.y == 0u) ? 0.0 : exp(lnScaleMin + float(uScales.y - 1u) * lnScaleScale),
        (uScales.z == 0u) ? 0.0 : exp(lnScaleMin + float(uScales.z - 1u) * lnScaleScale)
    );

    uint uQuat = ((word2 >> 16u) & 0xFFFFu) | ((word3 >> 8u) & 0xFF0000u);
    quaternion = decodeQuatOctXy88R8(uQuat);
    
    
}

void unpackSplat(uvec4 packed, out vec3 center, out vec3 scales, out vec4 quaternion, out vec4 rgba) {
    unpackSplatEncoding(packed, center, scales, quaternion, rgba, vec4(0.0, 1.0, LN_SCALE_MIN, LN_SCALE_MAX));
}

vec3 quatVec(vec4 q, vec3 v) {
    
    vec3 t = 2.0 * cross(q.xyz, v);
    return v + q.w * t + cross(q.xyz, t);
}

vec4 quatQuat(vec4 q1, vec4 q2) {
    return vec4(
        q1.w * q2.x + q1.x * q2.w + q1.y * q2.z - q1.z * q2.y,
        q1.w * q2.y - q1.x * q2.z + q1.y * q2.w + q1.z * q2.x,
        q1.w * q2.z + q1.x * q2.y - q1.y * q2.x + q1.z * q2.w,
        q1.w * q2.w - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z
    );
}

mat3 scaleQuaternionToMatrix(vec3 s, vec4 q) {
    
    return mat3(
        s.x * (1.0 - 2.0 * (q.y * q.y + q.z * q.z)),
        s.x * (2.0 * (q.x * q.y + q.w * q.z)),
        s.x * (2.0 * (q.x * q.z - q.w * q.y)),
        s.y * (2.0 * (q.x * q.y - q.w * q.z)),
        s.y * (1.0 - 2.0 * (q.x * q.x + q.z * q.z)),
        s.y * (2.0 * (q.y * q.z + q.w * q.x)),
        s.z * (2.0 * (q.x * q.z + q.w * q.y)),
        s.z * (2.0 * (q.y * q.z - q.w * q.x)),
        s.z * (1.0 - 2.0 * (q.x * q.x + q.y * q.y))
    );
}

vec4 slerp(vec4 q1, vec4 q2, float t) {
    
    float cosHalfTheta = dot(q1, q2);

    
    if (abs(cosHalfTheta) >= 0.999) {
        return q1;
    }
    
    
    
    if (cosHalfTheta < 0.0) {
        q2 = -q2;
        cosHalfTheta = -cosHalfTheta;
    }

    
    float halfTheta = acos(cosHalfTheta);
    float sinHalfTheta = sqrt(1.0 - cosHalfTheta * cosHalfTheta);

    
    float ratioA = sin((1.0 - t) * halfTheta) / sinHalfTheta;
    float ratioB = sin(t * halfTheta) / sinHalfTheta;

    
    return q1 * ratioA + q2 * ratioB;
}

ivec3 splatTexCoord(int index) {
    uint x = uint(index) & SPLAT_TEX_WIDTH_MASK;
    uint y = (uint(index) >> SPLAT_TEX_WIDTH_BITS) & SPLAT_TEX_HEIGHT_MASK;
    uint z = uint(index) >> SPLAT_TEX_LAYER_BITS;
    return ivec3(x, y, z);
}`, Gu = `precision highp float;
precision highp int;

#include <splatDefines>

uniform float near;
uniform float far;
uniform bool encodeLinear;
uniform float time;
uniform bool debugFlag;
uniform float maxStdDev;
uniform float minAlpha;
uniform bool stochastic;
uniform bool disableFalloff;
uniform float falloff;

uniform bool splatTexEnable;
uniform sampler3D splatTexture;
uniform mat2 splatTexMul;
uniform vec2 splatTexAdd;
uniform float splatTexNear;
uniform float splatTexFar;
uniform float splatTexMid;

out vec4 fragColor;

in vec4 vRgba;
in vec2 vSplatUv;
in vec3 vNdc;
flat in uint vSplatIndex;

void main() {
    vec4 rgba = vRgba;

    float z = dot(vSplatUv, vSplatUv);
    if (!splatTexEnable) {
        if (z > (maxStdDev * maxStdDev)) {
            discard;
        }
    } else {
        vec2 uv = splatTexMul * vSplatUv + splatTexAdd;
        float ndcZ = vNdc.z;
        float depth = (2.0 * near * far) / (far + near - ndcZ * (far - near));
        float clampedFar = max(splatTexFar, splatTexNear);
        float clampedDepth = clamp(depth, splatTexNear, clampedFar);
        float logDepth = log2(clampedDepth + 1.0);
        float logNear = log2(splatTexNear + 1.0);
        float logFar = log2(clampedFar + 1.0);

        float texZ;
        if (splatTexMid > 0.0) {
            float clampedMid = clamp(splatTexMid, splatTexNear, clampedFar);
            float logMid = log2(clampedMid + 1.0);
            texZ = (clampedDepth <= clampedMid) ?
                (0.5 * ((logDepth - logNear) / (logMid - logNear))) :
                (0.5 * ((logDepth - logMid) / (logFar - logMid)) + 0.5);
        } else {
            texZ = (logDepth - logNear) / (logFar - logNear);
        }

        vec4 modulate = texture(splatTexture, vec3(uv, 1.0 - texZ));
        rgba *= modulate;
    }

    rgba.a *= mix(1.0, exp(-0.5 * z), falloff);

    if (rgba.a < minAlpha) {
        discard;
    }
    if (encodeLinear) {
        rgba.rgb = srgbToLinear(rgba.rgb);
    }

    if (stochastic) {
        const bool STEADY = false;
        uint uTime = STEADY ? 0u : floatBitsToUint(time);
        uvec2 coord = uvec2(gl_FragCoord.xy);
        uint state = uTime + 0x9e3779b9u * coord.x + 0x85ebca6bu * coord.y + 0xc2b2ae35u * uint(vSplatIndex);
        state = state * 747796405u + 2891336453u;
        uint hash = ((state >> ((state >> 28u) + 4u)) ^ state) * 277803737u;
        hash = (hash >> 22u) ^ hash;
        float rand = float(hash) / 4294967296.0;
        if (rand < rgba.a) {
            fragColor = vec4(rgba.rgb, 1.0);
        } else {
            discard;
        }
    } else {
        #ifdef PREMULTIPLIED_ALPHA
            fragColor = vec4(rgba.rgb * rgba.a, rgba.a);
        #else
            fragColor = rgba;
        #endif
    }
}`, Ru = `precision highp float;
precision highp int;
precision highp usampler2DArray;

#include <splatDefines>

attribute uint splatIndex;

out vec4 vRgba;
out vec2 vSplatUv;
out vec3 vNdc;
flat out uint vSplatIndex;

uniform vec2 renderSize;
uniform uint numSplats;
uniform vec4 renderToViewQuat;
uniform vec3 renderToViewPos;
uniform float maxStdDev;
uniform float maxPixelRadius;
uniform float time;
uniform float deltaTime;
uniform bool debugFlag;
uniform float minAlpha;
uniform bool stochastic;
uniform bool enable2DGS;
uniform float blurAmount;
uniform float preBlurAmount;
uniform float focalDistance;
uniform float apertureAngle;
uniform float clipXY;
uniform float focalAdjustment;

uniform usampler2DArray packedSplats;
uniform vec4 rgbMinMaxLnScaleMinMax;

void main() {
    
    gl_Position = vec4(0.0, 0.0, 2.0, 1.0);

    if (uint(gl_InstanceID) >= numSplats) {
        return;
    }

    ivec3 texCoord;
    if (stochastic) {
        texCoord = ivec3(
            uint(gl_InstanceID) & SPLAT_TEX_WIDTH_MASK,
            (uint(gl_InstanceID) >> SPLAT_TEX_WIDTH_BITS) & SPLAT_TEX_HEIGHT_MASK,
            (uint(gl_InstanceID) >> SPLAT_TEX_LAYER_BITS)
        );
    } else {
        if (splatIndex == 0xffffffffu) {
            
            return;
        }
        texCoord = ivec3(
            splatIndex & SPLAT_TEX_WIDTH_MASK,
            (splatIndex >> SPLAT_TEX_WIDTH_BITS) & SPLAT_TEX_HEIGHT_MASK,
            splatIndex >> SPLAT_TEX_LAYER_BITS
        );
    }
    uvec4 packed = texelFetch(packedSplats, texCoord, 0);

    vec3 center, scales;
    vec4 quaternion, rgba;
    unpackSplatEncoding(packed, center, scales, quaternion, rgba, rgbMinMaxLnScaleMinMax);

    if (rgba.a < minAlpha) {
        return;
    }
    bvec3 zeroScales = equal(scales, vec3(0.0));
    if (all(zeroScales)) {
        return;
    }

    
    vec3 viewCenter = quatVec(renderToViewQuat, center) + renderToViewPos;

    
    if (viewCenter.z >= 0.0) {
        return;
    }

    
    vec4 clipCenter = projectionMatrix * vec4(viewCenter, 1.0);

    
    if (abs(clipCenter.z) >= clipCenter.w) {
        return;
    }

    
    float clip = clipXY * clipCenter.w;
    if (abs(clipCenter.x) > clip || abs(clipCenter.y) > clip) {
        return;
    }

    
    vSplatIndex = splatIndex;

    
    vec4 viewQuaternion = quatQuat(renderToViewQuat, quaternion);

    if (enable2DGS && any(zeroScales)) {
        vRgba = rgba;
        vSplatUv = position.xy * maxStdDev;

        vec3 offset;
        if (zeroScales.z) {
            offset = vec3(vSplatUv.xy * scales.xy, 0.0);
        } else if (zeroScales.y) {
            offset = vec3(vSplatUv.x * scales.x, 0.0, vSplatUv.y * scales.z);
        } else {
            offset = vec3(0.0, vSplatUv.xy * scales.yz);
        }

        vec3 viewPos = viewCenter + quatVec(viewQuaternion, offset);
        gl_Position = projectionMatrix * vec4(viewPos, 1.0);
        vNdc = gl_Position.xyz / gl_Position.w;
        return;
    }

    
    vec3 ndcCenter = clipCenter.xyz / clipCenter.w;

    
    mat3 RS = scaleQuaternionToMatrix(scales, viewQuaternion);
    mat3 cov3D = RS * transpose(RS);

    
    vec2 scaledRenderSize = renderSize * focalAdjustment;
    vec2 focal = 0.5 * scaledRenderSize * vec2(projectionMatrix[0][0], projectionMatrix[1][1]);
    float invZ = 1.0 / viewCenter.z;
    vec2 J1 = focal * invZ;
    vec2 J2 = -(J1 * viewCenter.xy) * invZ;
    mat3 J = mat3(
        J1.x, 0.0, J2.x,
        0.0, J1.y, J2.y,
        0.0, 0.0, 0.0
    );

    
    
    
    
    
    
    
    mat3 cov2D = transpose(J) * cov3D * J;
    float a = cov2D[0][0];
    float d = cov2D[1][1];
    float b = cov2D[0][1];

    
    a += preBlurAmount;
    d += preBlurAmount;

    float fullBlurAmount = blurAmount;
    if ((focalDistance > 0.0) && (apertureAngle > 0.0)) {
        float focusRadius = maxPixelRadius;
        if (viewCenter.z < 0.0) {
            float focusBlur = abs((-viewCenter.z - focalDistance) / viewCenter.z);
            float apertureRadius = focal.x * tan(0.5 * apertureAngle);
            focusRadius = focusBlur * apertureRadius;
        }
        fullBlurAmount = clamp(sqr(focusRadius), blurAmount, sqr(maxPixelRadius));
    }

    
    float detOrig = a * d - b * b;
    a += fullBlurAmount;
    d += fullBlurAmount;
    float det = a * d - b * b;

    
    float blurAdjust = sqrt(max(0.0, detOrig / det));
    rgba.a *= blurAdjust;
    if (rgba.a < minAlpha) {
        return;
    }

    
    float eigenAvg = 0.5 * (a + d);
    float eigenDelta = sqrt(max(0.0, eigenAvg * eigenAvg - det));
    float eigen1 = eigenAvg + eigenDelta;
    float eigen2 = eigenAvg - eigenDelta;

    vec2 eigenVec1 = normalize(vec2((abs(b) < 0.001) ? 1.0 : b, eigen1 - a));
    vec2 eigenVec2 = vec2(eigenVec1.y, -eigenVec1.x);

    float scale1 = position.x * min(maxPixelRadius, maxStdDev * sqrt(eigen1));
    float scale2 = position.y * min(maxPixelRadius, maxStdDev * sqrt(eigen2));

    
    vec2 pixelOffset = eigenVec1 * scale1 + eigenVec2 * scale2;
    vec2 ndcOffset = (2.0 / scaledRenderSize) * pixelOffset;
    vec3 ndc = vec3(ndcCenter.xy + ndcOffset, ndcCenter.z);

    vRgba = rgba;
    vSplatUv = position.xy * maxStdDev;
    vNdc = ndc;
    gl_Position = vec4(ndc.xy * clipCenter.w, clipCenter.zw);
}`;
let ke = null;
function Yu() {
  return ke || (u.ShaderChunk.splatDefines = Uu, ke = {
    splatVertex: Ru,
    splatFragment: Gu
  }), ke;
}
const ps = 5;
let Ke = !1, $e = !1, Oa;
function Ju(t) {
  let A = !1;
  return t instanceof OA ? !0 : (t.traverse((e) => {
    A = A || e instanceof OA;
  }), A);
}
const ja = u.Scene.prototype.add;
u.Scene.prototype.add = function(t) {
  return Ke = Ke || Ju(t), $e = $e || t instanceof Ce, ja.call(this, t), this;
};
const _u = u.Scene.prototype.onBeforeRender;
u.Scene.prototype.onBeforeRender = function(t) {
  if (Ke) {
    if (!$e) {
      const A = Oa || new Ce({ renderer: t });
      this.add(A);
    }
    u.Scene.prototype.onBeforeRender = _u, u.Scene.prototype.add = ja;
  }
};
const oA = class oA extends u.Mesh {
  constructor(A) {
    const e = oA.makeUniforms(), s = Yu(), n = A.premultipliedAlpha ?? !0, i = new u.ShaderMaterial({
      glslVersion: u.GLSL3,
      vertexShader: s.splatVertex,
      fragmentShader: s.splatFragment,
      uniforms: e,
      premultipliedAlpha: n,
      transparent: !0,
      depthTest: !0,
      depthWrite: !1,
      side: u.DoubleSide
    });
    super(fs, i), this.splatTexture = null, this.autoViewpoints = [], this.rotateToAccumulator = new kt({ value: new u.Quaternion() }), this.translateToAccumulator = new bt({ value: new u.Vector3() }), this.lastFrame = -1, this.lastUpdateTime = null, this.defaultCameras = [], this.lastStochastic = null, this.pendingUpdate = null, this.envViewpoint = null, this.frustumCulled = !1, this.renderer = A.renderer, this.material = i, this.uniforms = e;
    const r = MA(
      { gsplat: AA },
      { gsplat: AA },
      ({ gsplat: a }) => {
        if (!a)
          throw new Error("gsplat not defined");
        return a = We(a, {
          rotate: this.rotateToAccumulator,
          translate: this.translateToAccumulator
        }), { gsplat: a };
      }
    );
    this.modifier = new hu(r), this.premultipliedAlpha = n, this.autoUpdate = A.autoUpdate ?? !0, this.preUpdate = A.preUpdate ?? !1, this.needsUpdate = !1, this.originDistance = A.originDistance ?? 1, this.maxStdDev = A.maxStdDev ?? Math.sqrt(8), this.maxPixelRadius = A.maxPixelRadius ?? 512, this.minAlpha = A.minAlpha ?? 0.5 * (1 / 255), this.enable2DGS = A.enable2DGS ?? !1, this.preBlurAmount = A.preBlurAmount ?? 0, this.blurAmount = A.blurAmount ?? 0.3, this.focalDistance = A.focalDistance ?? 0, this.apertureAngle = A.apertureAngle ?? 0, this.falloff = A.falloff ?? 1, this.clipXY = A.clipXY ?? 1.4, this.focalAdjustment = A.focalAdjustment ?? 1, this.splatEncoding = A.splatEncoding ?? { ...fe }, this.active = new Ne(), this.accumulatorCount = 1, this.freeAccumulators = [];
    for (let a = 0; a < 1; ++a)
      this.freeAccumulators.push(new Ne()), this.accumulatorCount += 1;
    this.defaultView = new he({
      ...A.view,
      autoUpdate: !0,
      spark: this
    }), this.viewpoint = this.defaultView, this.prepareViewpoint(this.viewpoint), this.clock = A.clock ? Ln(A.clock) : new u.Clock(), Oa = this;
  }
  static makeUniforms() {
    return {
      // Size of render viewport in pixels
      renderSize: { value: new u.Vector2() },
      // Near and far plane distances
      near: { value: 0.1 },
      far: { value: 1e3 },
      // Total number of Gsplats in packedSplats to render
      numSplats: { value: 0 },
      // SplatAccumulator to view transformation quaternion
      renderToViewQuat: { value: new u.Quaternion() },
      // SplatAccumulator to view transformation translation
      renderToViewPos: { value: new u.Vector3() },
      // Maximum distance (in stddevs) from Gsplat center to render
      maxStdDev: { value: 1 },
      // Maximum pixel radius for splat rendering
      maxPixelRadius: { value: 512 },
      // Minimum alpha value for splat rendering
      minAlpha: { value: 0.00196078431372549 },
      // Enable stochastic splat rendering
      stochastic: { value: !1 },
      // Enable interpreting 0-thickness Gsplats as 2DGS
      enable2DGS: { value: !1 },
      // Add to projected 2D splat covariance diagonal (thickens and brightens)
      preBlurAmount: { value: 0 },
      // Add to 2D splat covariance diagonal and adjust opacity (anti-aliasing)
      blurAmount: { value: 0.3 },
      // Depth-of-field distance to focal plane
      focalDistance: { value: 0 },
      // Full-width angle of aperture opening (in radians)
      apertureAngle: { value: 0 },
      // Modulate Gaussian kernal falloff. 0 means "no falloff, flat shading",
      // 1 is normal e^-x^2 falloff.
      falloff: { value: 1 },
      // Clip Gsplats that are clipXY times beyond the +-1 frustum bounds
      clipXY: { value: 1.4 },
      // Debug renderSize scale factor
      focalAdjustment: { value: 1 },
      // Enable splat texture rendering
      splatTexEnable: { value: !1 },
      // Splat texture to render
      splatTexture: { type: "t", value: oA.EMPTY_SPLAT_TEXTURE },
      // Splat texture UV transform (multiply)
      splatTexMul: { value: new u.Matrix2() },
      // Splat texture UV transform (add)
      splatTexAdd: { value: new u.Vector2() },
      // Splat texture near plane distance
      splatTexNear: { value: 0.1 },
      // Splat texture far plane distance
      splatTexFar: { value: 1e3 },
      // Splat texture mid plane distance, or 0.0 to disable
      splatTexMid: { value: 0 },
      // Gsplat collection to render
      packedSplats: { type: "t", value: KA.getEmpty() },
      // Splat encoding ranges
      rgbMinMaxLnScaleMinMax: { value: new u.Vector4() },
      // Time in seconds for time-based effects
      time: { value: 0 },
      // Delta time in seconds since last frame
      deltaTime: { value: 0 },
      // Whether to encode Gsplat with linear RGB (for environment mapping)
      encodeLinear: { value: !1 },
      // Debug flag that alternates each frame
      debugFlag: { value: !1 }
    };
  }
  canAllocAccumulator() {
    return this.freeAccumulators.length > 0 || this.accumulatorCount < ps;
  }
  maybeAllocAccumulator() {
    let A = this.freeAccumulators.pop();
    if (A === void 0) {
      if (this.accumulatorCount >= ps)
        return null;
      A = new Ne(), this.accumulatorCount += 1;
    }
    return A.refCount = 1, A;
  }
  releaseAccumulator(A) {
    A.refCount -= 1, A.refCount === 0 && this.freeAccumulators.push(A);
  }
  newViewpoint(A) {
    return new he({ ...A, spark: this });
  }
  onBeforeRender(A, e, s) {
    var h, B;
    const n = this.time ?? this.clock.getElapsedTime(), i = n - (this.viewpoint.lastTime ?? n);
    this.viewpoint.lastTime = n;
    const r = A.info.render.frame, a = r !== this.lastFrame;
    this.lastFrame = r;
    const o = this.viewpoint;
    if (o === this.defaultView) {
      if (a)
        if (!A.xr.isPresenting)
          this.defaultView.viewToWorld = s.matrixWorld.clone(), this.defaultCameras = [this.defaultView.viewToWorld];
        else {
          const C = A.xr.getCamera().cameras;
          this.defaultCameras = C.map((E) => E.matrixWorld), this.defaultView.viewToWorld = Lu(this.defaultCameras) ?? new u.Matrix4();
        }
      this.autoUpdate && this.update({ scene: e, viewToWorld: this.defaultView.viewToWorld });
    }
    if (a && (this.material.premultipliedAlpha !== this.premultipliedAlpha && (this.material.premultipliedAlpha = this.premultipliedAlpha, this.material.needsUpdate = !0), this.uniforms.time.value = n, this.uniforms.deltaTime.value = i, this.uniforms.debugFlag.value = performance.now() / 1e3 % 2 < 1, o.display && o.stochastic && (this.geometry.instanceCount = this.uniforms.numSplats.value)), o.target)
      this.uniforms.renderSize.value.set(
        o.target.width,
        o.target.height
      );
    else {
      const C = A.getDrawingBufferSize(
        this.uniforms.renderSize.value
      );
      if (C.x === 1 && C.y === 1) {
        const E = (h = A.xr.getSession()) == null ? void 0 : h.renderState.baseLayer;
        E && (C.x = E.framebufferWidth, C.y = E.framebufferHeight);
      }
    }
    const g = s;
    if (this.uniforms.near.value = g.near, this.uniforms.far.value = g.far, this.uniforms.encodeLinear.value = o.encodeLinear, this.uniforms.maxStdDev.value = this.maxStdDev, this.uniforms.maxPixelRadius.value = this.maxPixelRadius, this.uniforms.minAlpha.value = this.minAlpha, this.uniforms.stochastic.value = o.stochastic, this.uniforms.enable2DGS.value = this.enable2DGS, this.uniforms.preBlurAmount.value = this.preBlurAmount, this.uniforms.blurAmount.value = this.blurAmount, this.uniforms.focalDistance.value = this.focalDistance, this.uniforms.apertureAngle.value = this.apertureAngle, this.uniforms.falloff.value = this.falloff, this.uniforms.clipXY.value = this.clipXY, this.uniforms.focalAdjustment.value = this.focalAdjustment, this.lastStochastic !== !o.stochastic && (this.lastStochastic = !o.stochastic, this.material.transparent = !o.stochastic, this.material.depthWrite = o.stochastic, this.material.needsUpdate = !0), this.splatTexture) {
      const { enable: C, texture: E, multiply: Q, add: p, near: f, far: d, mid: m } = this.splatTexture;
      C && E ? (this.uniforms.splatTexEnable.value = !0, this.uniforms.splatTexture.value = E, Q ? this.uniforms.splatTexMul.value.fromArray(Q.elements) : this.uniforms.splatTexMul.value.set(
        0.5 / this.maxStdDev,
        0,
        0,
        0.5 / this.maxStdDev
      ), this.uniforms.splatTexAdd.value.set((p == null ? void 0 : p.x) ?? 0.5, (p == null ? void 0 : p.y) ?? 0.5), this.uniforms.splatTexNear.value = f ?? this.uniforms.near.value, this.uniforms.splatTexFar.value = d ?? this.uniforms.far.value, this.uniforms.splatTexMid.value = m ?? 0) : (this.uniforms.splatTexEnable.value = !1, this.uniforms.splatTexture.value = oA.EMPTY_SPLAT_TEXTURE);
    } else
      this.uniforms.splatTexEnable.value = !1, this.uniforms.splatTexture.value = oA.EMPTY_SPLAT_TEXTURE;
    const l = ((B = o.display) == null ? void 0 : B.accumulator.toWorld) ?? new u.Matrix4(), c = s.matrixWorld.clone().invert();
    l.clone().premultiply(c).decompose(
      this.uniforms.renderToViewPos.value,
      this.uniforms.renderToViewQuat.value,
      new u.Vector3()
    );
  }
  // Update the uniforms for the given viewpoint.
  // Note that the client expects to be able to call render() at any point
  // to update the canvas, so we must switch the viewpoint back to
  // defaultView when we're finished.
  prepareViewpoint(A) {
    var e, s, n, i;
    if (this.viewpoint = A ?? this.viewpoint, this.viewpoint.display) {
      const { accumulator: r, geometry: a } = this.viewpoint.display;
      this.uniforms.numSplats.value = r.splats.numSplats, this.uniforms.packedSplats.value = r.splats.getTexture(), this.uniforms.rgbMinMaxLnScaleMinMax.value.set(
        ((e = r.splats.splatEncoding) == null ? void 0 : e.rgbMin) ?? 0,
        ((s = r.splats.splatEncoding) == null ? void 0 : s.rgbMax) ?? 1,
        ((n = r.splats.splatEncoding) == null ? void 0 : n.lnScaleMin) ?? TA,
        ((i = r.splats.splatEncoding) == null ? void 0 : i.lnScaleMax) ?? UA
      ), this.geometry = a, this.material.transparent = !this.viewpoint.stochastic, this.material.depthWrite = this.viewpoint.stochastic, this.material.needsUpdate = !0;
    } else
      this.uniforms.numSplats.value = 0, this.uniforms.packedSplats.value = KA.getEmpty(), this.geometry = fs;
  }
  // If spark.autoUpdate is false then you must manually call
  // spark.update({ scene }) to have the scene Gsplats be re-generated.
  update({
    scene: A,
    viewToWorld: e
  }) {
    const s = this.matrixWorld.clone();
    this.preUpdate ? this.updateInternal({ scene: A, originToWorld: s, viewToWorld: e }) : (this.pendingUpdate = {
      scene: A,
      originToWorld: s
    }, setTimeout(() => {
      if (this.pendingUpdate) {
        const { scene: n, originToWorld: i } = this.pendingUpdate;
        this.pendingUpdate = null, this.updateInternal({ scene: n, originToWorld: i, viewToWorld: e });
      }
    }, 1));
  }
  updateInternal({
    scene: A,
    originToWorld: e,
    viewToWorld: s
  }) {
    var B;
    if (!this.canAllocAccumulator())
      return !1;
    e || (e = this.active.toWorld), s = s ?? e.clone();
    const n = this.time ?? this.clock.getElapsedTime(), i = n - (this.lastUpdateTime ?? n);
    this.lastUpdateTime = n;
    const r = this.active.mapping.reduce((C, E) => (C.set(E.node, E), C), /* @__PURE__ */ new Map()), { generators: a, visibleGenerators: o, globalEdits: g } = this.compileScene(A);
    for (const C of a)
      (B = C.frameUpdate) == null || B.call(C, {
        object: C,
        time: n,
        deltaTime: i,
        viewToWorld: s,
        globalEdits: g
      });
    const l = new Set(o.map((C) => C.uuid));
    for (const C of a) {
      const E = r.get(C), p = C.generator && l.has(C.uuid) ? C.numSplats : 0;
      (this.needsUpdate || C.generator !== (E == null ? void 0 : E.generator) || p !== (E == null ? void 0 : E.count)) && C.updateVersion();
    }
    const c = !ce({
      matrix1: e,
      matrix2: this.active.toWorld,
      maxDistance: this.originDistance
    }), I = this.needsUpdate || c || a.length !== r.size || a.some((C) => {
      var E;
      return C.version !== ((E = r.get(C)) == null ? void 0 : E.version);
    });
    this.needsUpdate = !1;
    let h = null;
    if (I) {
      if (h = this.maybeAllocAccumulator(), !h)
        throw new Error("Unreachable");
      const C = !ce({
        matrix1: e,
        matrix2: this.active.toWorld,
        maxDistance: 1e-5,
        minCoorient: 0.99999
      }), Q = o.map((x, y) => {
        const w = r.get(x);
        return w ? (
          // Sort by version deltas then by previous ordering in the mapping,
          // attempting to keep unchanging generators near the front
          // to improve our chances of avoiding a re-generation.
          [x.version - w.version, w.base, x]
        ) : [Number.POSITIVE_INFINITY, x.version, x];
      }).sort((x, y) => x[0] !== y[0] ? x[0] - y[0] : x[1] - y[1]).map(([x, y, w]) => w), p = Q.map((x) => x.numSplats), { maxSplats: f, mapping: d } = h.splats.generateMapping(p), m = Q.map((x, y) => {
        const { base: w, count: k } = d[y];
        return {
          node: x,
          generator: x.generator,
          version: x.version,
          base: w,
          count: k
        };
      });
      e.clone().invert().decompose(
        this.translateToAccumulator.value,
        this.rotateToAccumulator.value,
        new u.Vector3()
      ), h.ensureGenerate(f), h.splats.splatEncoding = { ...this.splatEncoding }, h.generateSplats({
        renderer: this.renderer,
        modifier: this.modifier,
        generators: m,
        forceUpdate: C,
        originToWorld: e
      }), h.splatsVersion = this.active.splatsVersion + 1;
      const D = h.hasCorrespondence(this.active);
      h.mappingVersion = this.active.mappingVersion + (D ? 0 : 1), this.releaseAccumulator(this.active), this.active = h, this.prepareViewpoint();
    }
    return setTimeout(() => {
      for (const C of this.autoViewpoints)
        C.autoPoll({ accumulator: h ?? void 0 });
    }, 1), !0;
  }
  compileScene(A) {
    const e = [];
    A.traverse((i) => {
      i instanceof Kt && e.push(i);
    });
    const s = [];
    A.traverseVisible((i) => {
      i instanceof Kt && s.push(i);
    });
    const n = /* @__PURE__ */ new Set();
    return A.traverseVisible((i) => {
      if (i instanceof le) {
        let r = i.parent;
        for (; r != null && !(r instanceof OA); )
          r = r.parent;
        r == null && n.add(i);
      }
    }), {
      generators: e,
      visibleGenerators: s,
      globalEdits: Array.from(n)
    };
  }
  // Renders out the scene to an environment map that can be used for
  // Image-based lighting or similar applications. First optionally updates Gsplats,
  // sorts them with respect to the provided worldCenter, renders 6 cube faces,
  // then pre-filters them using THREE.PMREMGenerator and returns a THREE.Texture
  // that can assigned directly to a THREE.MeshStandardMaterial.envMap property.
  async renderEnvMap({
    renderer: A,
    scene: e,
    worldCenter: s,
    size: n = 256,
    near: i = 0.1,
    far: r = 1e3,
    hideObjects: a = [],
    update: o = !1
  }) {
    var h, B;
    if (this.envViewpoint || (this.envViewpoint = this.newViewpoint({ sort360: !0 })), !oA.cubeRender || oA.cubeRender.target.width !== n || oA.cubeRender.near !== i || oA.cubeRender.far !== r) {
      oA.cubeRender && oA.cubeRender.target.dispose();
      const C = new u.WebGLCubeRenderTarget(n, {
        format: u.RGBAFormat,
        generateMipmaps: !0,
        minFilter: u.LinearMipMapLinearFilter
      }), E = new u.CubeCamera(i, r, C);
      oA.cubeRender = { target: C, camera: E, near: i, far: r };
    }
    oA.pmrem || (oA.pmrem = new u.PMREMGenerator(A ?? this.renderer));
    const g = new u.Matrix4().setPosition(s);
    await ((h = this.envViewpoint) == null ? void 0 : h.prepare({ scene: e, viewToWorld: g, update: o }));
    const { target: l, camera: c } = oA.cubeRender;
    c.position.copy(s);
    const I = /* @__PURE__ */ new Map();
    for (const C of a)
      I.set(C, C.visible), C.visible = !1;
    this.prepareViewpoint(this.envViewpoint), c.update(A ?? this.renderer, e), this.prepareViewpoint(this.defaultView);
    for (const [C, E] of I.entries())
      C.visible = E;
    return (B = oA.pmrem) == null ? void 0 : B.fromCubemap(l.texture).texture;
  }
  // Utility function to recursively set the envMap property for any
  // THREE.MeshStandardMaterial within the subtree of root.
  recurseSetEnvMap(A, e) {
    A.traverse((s) => {
      if (s instanceof u.Mesh)
        if (Array.isArray(s.material))
          for (const n of s.material)
            n instanceof u.MeshStandardMaterial && (n.envMap = e);
        else
          s.material instanceof u.MeshStandardMaterial && (s.material.envMap = e);
    });
  }
  // Utility function that helps extract the Gsplat RGBA values from a
  // SplatGenerator, including the result of any real-time RGBA SDF edits applied
  // to a SplatMesh. This effectively "bakes" any computed RGBA values, which can
  // now be used as a pipeline input via SplatMesh.splatRgba to inject these
  // baked values into the Gsplat data.
  getRgba({
    generator: A,
    rgba: e
  }) {
    const s = this.active.mapping.find(({ node: n }) => n === A);
    if (!s)
      throw new Error("Generator not found");
    return e = e ?? new He(), e.fromPackedSplats({
      packedSplats: this.active.splats,
      base: s.base,
      count: s.count,
      renderer: this.renderer
    }), e;
  }
  // Utility function that builds on getRgba({ generator }) and additionally
  // reads back the RGBA values to the CPU in a Uint8Array with packed RGBA
  // in that byte order.
  async readRgba({
    generator: A,
    rgba: e
  }) {
    return e = this.getRgba({ generator: A, rgba: e }), e.read();
  }
};
oA.cubeRender = null, oA.pmrem = null, oA.EMPTY_SPLAT_TEXTURE = new u.Data3DTexture();
let Ce = oA;
const fs = new qe(new Uint32Array(1), 0);
MA(
  { packedSplats: Ot, index: "int" },
  { gsplat: AA },
  ({ packedSplats: t, index: A }) => {
    if (!t || !A)
      throw new Error("Invalid input");
    return { gsplat: vt(t, A) };
  }
);
function Lu(t) {
  if (t.length === 0)
    return null;
  const A = new u.Vector3(), e = new u.Quaternion(), s = new u.Vector3(), n = [], i = [];
  for (const r of t)
    r.decompose(A, e, s), n.push(A), i.push(e);
  return new u.Matrix4().compose(
    Hn(n),
    qn(i),
    new u.Vector3(1, 1, 1)
  );
}
function zu(t, A, e) {
  const s = Math.floor(t.length / 32);
  if (s * 32 !== t.length)
    throw new Error("Invalid .splat file size");
  const n = new Float32Array(t.buffer);
  for (let i = 0; i < s; ++i) {
    const r = i * 32, a = i * 8, o = n[a + 0], g = n[a + 1], l = n[a + 2], c = n[a + 3], I = n[a + 4], h = n[a + 5], B = t[r + 24] / 255, C = t[r + 25] / 255, E = t[r + 26] / 255, Q = t[r + 27] / 255, p = (t[r + 28] - 128) / 128, f = (t[r + 29] - 128) / 128, d = (t[r + 30] - 128) / 128, m = (t[r + 31] - 128) / 128;
    e(
      i,
      o,
      g,
      l,
      c,
      I,
      h,
      f,
      d,
      m,
      p,
      Q,
      B,
      C,
      E
    );
  }
}
const ds = {
  0: {
    bytesPerCenter: 12,
    bytesPerScale: 12,
    bytesPerRotation: 16,
    bytesPerColor: 4,
    bytesPerSphericalHarmonicsComponent: 4,
    scaleOffsetBytes: 12,
    rotationOffsetBytes: 24,
    colorOffsetBytes: 40,
    sphericalHarmonicsOffsetBytes: 44,
    scaleRange: 1
  },
  1: {
    bytesPerCenter: 6,
    bytesPerScale: 6,
    bytesPerRotation: 8,
    bytesPerColor: 4,
    bytesPerSphericalHarmonicsComponent: 2,
    scaleOffsetBytes: 6,
    rotationOffsetBytes: 12,
    colorOffsetBytes: 20,
    sphericalHarmonicsOffsetBytes: 24,
    scaleRange: 32767
  },
  2: {
    bytesPerCenter: 6,
    bytesPerScale: 6,
    bytesPerRotation: 8,
    bytesPerColor: 4,
    bytesPerSphericalHarmonicsComponent: 1,
    scaleOffsetBytes: 6,
    rotationOffsetBytes: 12,
    colorOffsetBytes: 20,
    sphericalHarmonicsOffsetBytes: 24,
    scaleRange: 32767
  }
}, Hu = {
  0: 0,
  1: 9,
  2: 24,
  3: 45
};
function qu(t, A, e, s) {
  var C;
  let r = 0;
  const a = new DataView(t.buffer, r, 4096);
  r += 4096;
  const o = a.getUint8(0), g = a.getUint8(1);
  if (o !== 0 || g < 1)
    throw new Error(
      `Unsupported .ksplat version: ${o}.${g}`
    );
  const l = a.getUint32(4, !0);
  a.getUint32(16, !0);
  const c = a.getUint16(20, !0);
  if (c < 0 || c > 2)
    throw new Error(`Invalid .ksplat compression level: ${c}`);
  const I = a.getFloat32(36, !0) || -1.5, h = a.getFloat32(40, !0) || 1.5;
  let B = 4096 + l * 1024;
  for (let E = 0; E < l; ++E) {
    let Q = function(DA, z) {
      if (c === 0)
        return Y.getFloat32(
          DA + P + z * 4,
          !0
        );
      if (c === 1)
        return mA(
          Y.getUint16(
            DA + P + z * 2,
            !0
          )
        );
      const PA = Y.getUint8(DA + P + z) / 255;
      return I + PA * (h - I);
    };
    const p = new DataView(t.buffer, r, 1024);
    r += 1024;
    const f = p.getUint32(0, !0), d = p.getUint32(4, !0), m = p.getUint32(8, !0), D = p.getUint32(12, !0), x = p.getFloat32(16, !0), y = p.getUint16(20, !0), w = (p.getUint32(24, !0) || ((C = ds[c]) == null ? void 0 : C.scaleRange)) ?? 1, k = p.getUint32(32, !0), M = k * m, S = p.getUint32(36, !0), U = S * 4, F = y * D + U, b = p.getUint16(40, !0), T = Hu[b], {
      bytesPerCenter: R,
      bytesPerScale: O,
      bytesPerRotation: _,
      bytesPerColor: eA,
      bytesPerSphericalHarmonicsComponent: q,
      scaleOffsetBytes: j,
      rotationOffsetBytes: L,
      colorOffsetBytes: X,
      sphericalHarmonicsOffsetBytes: P
    } = ds[c], W = R + O + _ + eA + T * q, G = W * d, pA = G + F, gA = [0, 3, 6, 1, 4, 7, 2, 5, 8], fA = [
      9,
      14,
      19,
      10,
      15,
      20,
      11,
      16,
      21,
      12,
      17,
      22,
      13,
      18,
      23
    ], dA = [
      24,
      31,
      38,
      25,
      32,
      39,
      26,
      33,
      40,
      27,
      34,
      41,
      28,
      35,
      42,
      29,
      36,
      43,
      30,
      37,
      44
    ], xA = b >= 1 ? new Float32Array(3 * 3) : void 0, hA = b >= 2 ? new Float32Array(5 * 3) : void 0, RA = b >= 3 ? new Float32Array(7 * 3) : void 0, SA = x / 2 / w, jA = B + U, XA = B + F, Y = new DataView(
      t.buffer,
      XA,
      G
    ), QA = new Float32Array(
      t.buffer,
      jA,
      D * 3
    ), VA = new Uint32Array(
      t.buffer,
      B,
      S
    );
    let Ut = k, Xt = M;
    for (let DA = 0; DA < f; ++DA) {
      const z = DA * W;
      let PA;
      if (DA < M)
        PA = Math.floor(DA / m);
      else {
        const WA = VA[Ut - k];
        DA >= Xt + WA && (Ut += 1, Xt += WA), PA = Ut;
      }
      const de = c === 0 ? Y.getFloat32(z + 0, !0) : (Y.getUint16(z + 0, !0) - w) * SA + QA[3 * PA + 0], ye = c === 0 ? Y.getFloat32(z + 4, !0) : (Y.getUint16(z + 2, !0) - w) * SA + QA[3 * PA + 1], me = c === 0 ? Y.getFloat32(z + 8, !0) : (Y.getUint16(z + 4, !0) - w) * SA + QA[3 * PA + 2], we = c === 0 ? Y.getFloat32(z + j + 0, !0) : mA(Y.getUint16(z + j + 0, !0)), xe = c === 0 ? Y.getFloat32(z + j + 4, !0) : mA(Y.getUint16(z + j + 2, !0)), ro = c === 0 ? Y.getFloat32(z + j + 8, !0) : mA(Y.getUint16(z + j + 4, !0)), ao = c === 0 ? Y.getFloat32(z + L + 0, !0) : mA(
        Y.getUint16(z + L + 0, !0)
      ), oo = c === 0 ? Y.getFloat32(z + L + 4, !0) : mA(
        Y.getUint16(z + L + 2, !0)
      ), co = c === 0 ? Y.getFloat32(z + L + 8, !0) : mA(
        Y.getUint16(z + L + 4, !0)
      ), go = c === 0 ? Y.getFloat32(z + L + 12, !0) : mA(
        Y.getUint16(z + L + 6, !0)
      ), lo = Y.getUint8(z + X + 0) / 255, Io = Y.getUint8(z + X + 1) / 255, uo = Y.getUint8(z + X + 2) / 255, ho = Y.getUint8(z + X + 3) / 255;
      if (e(
        DA,
        de,
        ye,
        me,
        we,
        xe,
        ro,
        oo,
        co,
        go,
        ao,
        ho,
        lo,
        Io,
        uo
      ), b >= 1 && xA) {
        for (const [WA, Gt] of gA.entries())
          xA[WA] = Q(z, Gt);
        if (hA)
          for (const [WA, Gt] of fA.entries())
            hA[WA] = Q(z, Gt);
        if (RA)
          for (const [WA, Gt] of dA.entries())
            RA[WA] = Q(z, Gt);
        s == null || s(DA, xA, hA, RA);
      }
    }
    B += pA;
  }
}
class Ku {
  constructor({ fileBytes: A }) {
    this.fileBytes = A instanceof ArrayBuffer ? new Uint8Array(A) : A, this.reader = new Zn({ fileBytes: this.fileBytes });
    const e = new DataView(this.reader.read(16).buffer);
    if (e.getUint32(0, !0) !== 1347635022)
      throw new Error("Invalid SPZ file");
    if (this.version = e.getUint32(4, !0), this.version < 1 || this.version > 2)
      throw new Error(`Unsupported SPZ version: ${this.version}`);
    this.numSplats = e.getUint32(8, !0), this.shDegree = e.getUint8(12), this.fractionalBits = e.getUint8(13), this.flags = e.getUint8(14), this.flagAntiAlias = (this.flags & 1) !== 0, this.reserved = e.getUint8(15), this.parsed = !1;
  }
  parseSplats(A, e, s, n, i, r) {
    if (this.parsed)
      throw new Error("SPZ file already parsed");
    if (this.parsed = !0, this.version === 1) {
      const a = this.reader.read(this.numSplats * 3 * 2), o = new Uint16Array(a.buffer);
      for (let g = 0; g < this.numSplats; g++) {
        const l = g * 3, c = mA(o[l]), I = mA(o[l + 1]), h = mA(o[l + 2]);
        A == null || A(g, c, I, h);
      }
    } else if (this.version === 2) {
      const a = 1 << this.fractionalBits, o = this.reader.read(this.numSplats * 3 * 3);
      for (let g = 0; g < this.numSplats; g++) {
        const l = g * 9, c = ((o[l + 2] << 24 | o[l + 1] << 16 | o[l] << 8) >> 8) / a, I = ((o[l + 5] << 24 | o[l + 4] << 16 | o[l + 3] << 8) >> 8) / a, h = ((o[l + 8] << 24 | o[l + 7] << 16 | o[l + 6] << 8) >> 8) / a;
        A == null || A(g, c, I, h);
      }
    } else
      throw new Error("Unreachable");
    {
      const a = this.reader.read(this.numSplats);
      for (let o = 0; o < this.numSplats; o++)
        e == null || e(o, a[o] / 255);
    }
    {
      const a = this.reader.read(this.numSplats * 3), o = Wa / 0.15;
      for (let g = 0; g < this.numSplats; g++) {
        const l = g * 3, c = (a[l] / 255 - 0.5) * o + 0.5, I = (a[l + 1] / 255 - 0.5) * o + 0.5, h = (a[l + 2] / 255 - 0.5) * o + 0.5;
        s == null || s(g, c, I, h);
      }
    }
    {
      const a = this.reader.read(this.numSplats * 3);
      for (let o = 0; o < this.numSplats; o++) {
        const g = o * 3, l = Math.exp(a[g] / 16 - 10), c = Math.exp(a[g + 1] / 16 - 10), I = Math.exp(a[g + 2] / 16 - 10);
        n == null || n(o, l, c, I);
      }
    }
    {
      const a = this.reader.read(this.numSplats * 3);
      for (let o = 0; o < this.numSplats; o++) {
        const g = o * 3, l = a[g] / 127.5 - 1, c = a[g + 1] / 127.5 - 1, I = a[g + 2] / 127.5 - 1, h = Math.sqrt(
          Math.max(0, 1 - l * l - c * c - I * I)
        );
        i == null || i(o, l, c, I, h);
      }
    }
    if (r && this.shDegree >= 1) {
      const a = new Float32Array(9), o = this.shDegree >= 2 ? new Float32Array(5 * 3) : void 0, g = this.shDegree >= 3 ? new Float32Array(7 * 3) : void 0, l = this.reader.read(
        this.numSplats * Xa[this.shDegree] * 3
      );
      let c = 0;
      for (let I = 0; I < this.numSplats; I++) {
        for (let h = 0; h < 9; ++h)
          a[h] = (l[c + h] - 128) / 128;
        if (c += 9, o) {
          for (let h = 0; h < 15; ++h)
            o[h] = (l[c + h] - 128) / 128;
          c += 15;
        }
        if (g) {
          for (let h = 0; h < 21; ++h)
            g[h] = (l[c + h] - 128) / 128;
          c += 21;
        }
        r == null || r(I, a, o, g);
      }
    }
  }
}
const Xa = { 1: 3, 2: 8, 3: 15 }, Wa = 0.28209479177387814, $u = 1347635022, Vu = 2, Pu = 1;
class et {
  constructor({
    numSplats: A,
    shDegree: e,
    fractionalBits: s = 12,
    flagAntiAlias: n = !0
  }) {
    this.clippedCount = 0;
    const i = 19 + (e >= 1 ? 9 : 0) + (e >= 2 ? 15 : 0) + (e >= 3 ? 21 : 0), r = 16 + A * i;
    this.buffer = new ArrayBuffer(r), this.view = new DataView(this.buffer), this.view.setUint32(0, $u, !0), this.view.setUint32(4, Vu, !0), this.view.setUint32(8, A, !0), this.view.setUint8(12, e), this.view.setUint8(13, s), this.view.setUint8(14, n ? Pu : 0), this.view.setUint8(15, 0), this.numSplats = A, this.shDegree = e, this.fractionalBits = s, this.fraction = 1 << s, this.flagAntiAlias = n;
  }
  setCenter(A, e, s, n) {
    const i = Math.round(e * this.fraction), r = Math.max(-8388607, Math.min(8388607, i)), a = Math.round(s * this.fraction), o = Math.max(-8388607, Math.min(8388607, a)), g = Math.round(n * this.fraction), l = Math.max(-8388607, Math.min(8388607, g));
    (i !== r || a !== o || g !== l) && (this.clippedCount += 1);
    const h = 16 + A * 9;
    this.view.setUint8(h, r & 255), this.view.setUint8(h + 1, r >> 8 & 255), this.view.setUint8(h + 2, r >> 16 & 255), this.view.setUint8(h + 3, o & 255), this.view.setUint8(h + 4, o >> 8 & 255), this.view.setUint8(h + 5, o >> 16 & 255), this.view.setUint8(h + 6, l & 255), this.view.setUint8(h + 7, l >> 8 & 255), this.view.setUint8(h + 8, l >> 16 & 255);
  }
  setAlpha(A, e) {
    const s = 16 + this.numSplats * 9 + A;
    this.view.setUint8(
      s,
      Math.max(0, Math.min(255, Math.round(e * 255)))
    );
  }
  static scaleRgb(A) {
    const e = ((A - 0.5) / (Wa / 0.15) + 0.5) * 255;
    return Math.max(0, Math.min(255, Math.round(e)));
  }
  setRgb(A, e, s, n) {
    const i = 16 + this.numSplats * 10 + A * 3;
    this.view.setUint8(i, et.scaleRgb(e)), this.view.setUint8(i + 1, et.scaleRgb(s)), this.view.setUint8(i + 2, et.scaleRgb(n));
  }
  setScale(A, e, s, n) {
    const i = 16 + this.numSplats * 13 + A * 3;
    this.view.setUint8(
      i,
      Math.max(0, Math.min(255, Math.round((Math.log(e) + 10) * 16)))
    ), this.view.setUint8(
      i + 1,
      Math.max(0, Math.min(255, Math.round((Math.log(s) + 10) * 16)))
    ), this.view.setUint8(
      i + 2,
      Math.max(0, Math.min(255, Math.round((Math.log(n) + 10) * 16)))
    );
  }
  setQuat(A, e, s, n, i) {
    const r = 16 + this.numSplats * 16 + A * 3, a = i < 0;
    this.view.setUint8(
      r,
      Math.max(
        0,
        Math.min(255, Math.round(((a ? -e : e) + 1) * 127.5))
      )
    ), this.view.setUint8(
      r + 1,
      Math.max(
        0,
        Math.min(255, Math.round(((a ? -s : s) + 1) * 127.5))
      )
    ), this.view.setUint8(
      r + 2,
      Math.max(
        0,
        Math.min(255, Math.round(((a ? -n : n) + 1) * 127.5))
      )
    );
  }
  static quantizeSh(A, e) {
    const s = Math.round(A * 128) + 128, n = 1 << 8 - e, i = Math.floor((s + n / 2) / n) * n;
    return Math.max(0, Math.min(255, i));
  }
  setSh(A, e, s, n) {
    const i = Xa[this.shDegree] || 0, r = 16 + this.numSplats * 19 + A * i * 3;
    for (let a = 0; a < 9; ++a)
      this.view.setUint8(r + a, et.quantizeSh(e[a], 5));
    if (s) {
      const a = r + 9;
      for (let o = 0; o < 15; ++o)
        this.view.setUint8(a + o, et.quantizeSh(s[o], 4));
      if (n) {
        const o = a + 15;
        for (let g = 0; g < 21; ++g)
          this.view.setUint8(o + g, et.quantizeSh(n[g], 4));
      }
    }
  }
  async finalize() {
    const A = new Uint8Array(this.buffer), s = new ReadableStream({
      async start(r) {
        r.enqueue(A), r.close();
      }
    }).pipeThrough(new CompressionStream("gzip")), i = await new Response(s).arrayBuffer();
    return console.log(
      "Compressed",
      A.length,
      "bytes to",
      i.byteLength,
      "bytes"
    ), new Uint8Array(i);
  }
}
async function Nh(t) {
  var l, c, I;
  const A = new bu(), {
    inputs: e,
    clipXyz: s,
    maxSh: n,
    fractionalBits: i = 12,
    opacityThreshold: r
  } = t;
  for (const h of e) {
    let B = function(y) {
      return y.multiplyScalar(f), y.applyQuaternion(d), y.add(m), y;
    }, C = function(y) {
      return y.multiplyScalar(f), y;
    }, E = function(y) {
      return y.premultiply(d), y;
    }, Q = function(y) {
      return !D || D.containsPoint(y);
    }, p = function(y) {
      return r !== void 0 ? y >= r : !0;
    };
    const f = ((l = h.transform) == null ? void 0 : l.scale) ?? 1, d = new u.Quaternion().fromArray(
      ((c = h.transform) == null ? void 0 : c.quaternion) ?? [0, 0, 0, 1]
    ), m = new u.Vector3().fromArray(
      ((I = h.transform) == null ? void 0 : I.translate) ?? [0, 0, 0]
    ), D = s ? new u.Box3(
      new u.Vector3().fromArray(s.min),
      new u.Vector3().fromArray(s.max)
    ) : void 0;
    let x = h.fileType;
    switch (x || (x = Va(h.fileBytes), !x && h.pathOrUrl && (x = Pa(h.pathOrUrl))), x) {
      case Jt.PLY: {
        const y = new Ie({ fileBytes: h.fileBytes });
        await y.parseHeader();
        let w = null;
        y.parseSplats(
          (k, M, S, U, F, b, T, R, O, _, eA, q, j, L, X) => {
            const P = B(new u.Vector3(M, S, U));
            if (Q(P) && p(q)) {
              w = A.pushSplat(), A.setCenter(w, P.x, P.y, P.z);
              const W = C(
                new u.Vector3(F, b, T)
              );
              A.setScale(w, W.x, W.y, W.z);
              const G = E(
                new u.Quaternion(R, O, _, eA)
              );
              A.setQuaternion(
                w,
                G.x,
                G.y,
                G.z,
                G.w
              ), A.setOpacity(w, q), A.setColor(w, j, L, X);
            } else
              w = null;
          },
          (k, M, S, U) => {
            M && w !== null && A.setSh1(w, M), S && w !== null && A.setSh2(w, S), U && w !== null && A.setSh3(w, U);
          }
        );
        break;
      }
      case Jt.SPZ: {
        const y = new Ku({ fileBytes: h.fileBytes }), w = new Int32Array(y.numSplats);
        w.fill(-1);
        const k = new Float32Array(y.numSplats * 3), M = new u.Vector3();
        y.parseSplats(
          (S, U, F, b) => {
            const T = B(new u.Vector3(U, F, b));
            k[S * 3] = T.x, k[S * 3 + 1] = T.y, k[S * 3 + 2] = T.z;
          },
          (S, U) => {
            M.fromArray(k, S * 3), Q(M) && p(U) && (w[S] = A.pushSplat(), A.setCenter(w[S], M.x, M.y, M.z), A.setOpacity(w[S], U));
          },
          (S, U, F, b) => {
            w[S] >= 0 && A.setColor(w[S], U, F, b);
          },
          (S, U, F, b) => {
            if (w[S] >= 0) {
              const T = C(
                new u.Vector3(U, F, b)
              );
              A.setScale(w[S], T.x, T.y, T.z);
            }
          },
          (S, U, F, b, T) => {
            if (w[S] >= 0) {
              const R = E(
                new u.Quaternion(U, F, b, T)
              );
              A.setQuaternion(
                w[S],
                R.x,
                R.y,
                R.z,
                R.w
              );
            }
          },
          (S, U, F, b) => {
            w[S] >= 0 && (A.setSh1(w[S], U), F && A.setSh2(w[S], F), b && A.setSh3(w[S], b));
          }
        );
        break;
      }
      case Jt.SPLAT:
        zu(
          h.fileBytes,
          (y) => {
          },
          (y, w, k, M, S, U, F, b, T, R, O, _, eA, q, j) => {
            const L = B(new u.Vector3(w, k, M));
            if (Q(L) && p(_)) {
              const X = A.pushSplat();
              A.setCenter(X, L.x, L.y, L.z);
              const P = C(
                new u.Vector3(S, U, F)
              );
              A.setScale(X, P.x, P.y, P.z);
              const W = E(
                new u.Quaternion(b, T, R, O)
              );
              A.setQuaternion(
                X,
                W.x,
                W.y,
                W.z,
                W.w
              ), A.setOpacity(X, _), A.setColor(X, eA, q, j);
            }
          }
        );
        break;
      case Jt.KSPLAT: {
        let y = null;
        qu(
          h.fileBytes,
          (w) => {
          },
          (w, k, M, S, U, F, b, T, R, O, _, eA, q, j, L) => {
            const X = B(new u.Vector3(k, M, S));
            if (Q(X) && p(eA)) {
              y = A.pushSplat(), A.setCenter(y, X.x, X.y, X.z);
              const P = C(
                new u.Vector3(U, F, b)
              );
              A.setScale(y, P.x, P.y, P.z);
              const W = E(
                new u.Quaternion(T, R, O, _)
              );
              A.setQuaternion(
                y,
                W.x,
                W.y,
                W.z,
                W.w
              ), A.setOpacity(y, eA), A.setColor(y, q, j, L);
            } else
              y = null;
          },
          (w, k, M, S) => {
            y !== null && (A.setSh1(y, k), M && A.setSh2(y, M), S && A.setSh3(y, S));
          }
        );
        break;
      }
      default:
        throw new Error(`transcodeSpz not implemented for ${x}`);
    }
  }
  const a = Math.min(
    n ?? 3,
    A.sh3 ? 3 : A.sh2 ? 2 : A.sh1 ? 1 : 0
  ), o = new et({
    numSplats: A.numSplats,
    shDegree: a,
    fractionalBits: i,
    flagAntiAlias: !0
  });
  for (let h = 0; h < A.numSplats; ++h) {
    const B = h * 3, C = h * 4;
    o.setCenter(
      h,
      A.centers[B],
      A.centers[B + 1],
      A.centers[B + 2]
    ), o.setScale(
      h,
      A.scales[B],
      A.scales[B + 1],
      A.scales[B + 2]
    ), o.setQuat(
      h,
      A.quaternions[C],
      A.quaternions[C + 1],
      A.quaternions[C + 2],
      A.quaternions[C + 3]
    ), o.setAlpha(h, A.opacities[h]), o.setRgb(
      h,
      A.colors[B],
      A.colors[B + 1],
      A.colors[B + 2]
    ), A.sh1 && a >= 1 && o.setSh(
      h,
      A.sh1.slice(h * 9, (h + 1) * 9),
      a >= 2 && A.sh2 ? A.sh2.slice(h * 15, (h + 1) * 15) : void 0,
      a >= 3 && A.sh3 ? A.sh3.slice(h * 21, (h + 1) * 21) : void 0
    );
  }
  return { fileBytes: await o.finalize(), clippedCount: o.clippedCount };
}
class kh {
  constructor(A) {
    this.mesh = A.mesh, this.numSplats = A.numSplats ?? this.mesh.numSplats;
    const { width: e, height: s, depth: n, maxSplats: i } = wA(this.numSplats);
    this.skinData = new Uint16Array(i * 4), this.skinTexture = new u.DataArrayTexture(
      this.skinData,
      e,
      s,
      n
    ), this.skinTexture.format = u.RGBAIntegerFormat, this.skinTexture.type = u.UnsignedShortType, this.skinTexture.internalFormat = "RGBA16UI", this.skinTexture.needsUpdate = !0, this.numBones = A.numBones ?? 256, this.boneData = new Float32Array(this.numBones * 16), this.boneTexture = new u.DataTexture(
      this.boneData,
      4,
      this.numBones,
      u.RGBAFormat,
      u.FloatType
    ), this.boneTexture.internalFormat = "RGBA32F", this.boneTexture.needsUpdate = !0, this.uniform = new N({
      key: "skinning",
      type: Ao,
      globals: () => [to],
      value: {
        numSplats: this.numSplats,
        numBones: this.numBones,
        skinTexture: this.skinTexture,
        boneTexture: this.boneTexture
      }
    });
  }
  // Apply the skeletal animation to a Gsplat in a dyno program.
  modify(A) {
    return Ou(A, this.uniform);
  }
  // Set the "rest" pose for a bone with position and quaternion orientation.
  setRestQuatPos(A, e, s) {
    const n = A * 16;
    this.boneData[n + 0] = e.x, this.boneData[n + 1] = e.y, this.boneData[n + 2] = e.z, this.boneData[n + 3] = e.w, this.boneData[n + 4] = s.x, this.boneData[n + 5] = s.y, this.boneData[n + 6] = s.z, this.boneData[n + 7] = 0, this.boneData[n + 8] = 0, this.boneData[n + 9] = 0, this.boneData[n + 10] = 0, this.boneData[n + 11] = 1, this.boneData[n + 12] = 0, this.boneData[n + 13] = 0, this.boneData[n + 14] = 0, this.boneData[n + 15] = 0;
  }
  // Set the "current" position and orientation of a bone.
  setBoneQuatPos(A, e, s) {
    const n = A * 16, i = new u.Quaternion(
      this.boneData[n + 0],
      this.boneData[n + 1],
      this.boneData[n + 2],
      this.boneData[n + 3]
    ), r = new u.Vector3(
      this.boneData[n + 4],
      this.boneData[n + 5],
      this.boneData[n + 6]
    ), a = i.clone().invert(), o = s.clone().sub(r);
    o.applyQuaternion(a), a.multiply(e);
    const g = new u.Quaternion(
      o.x,
      o.y,
      o.z,
      0
    ).multiply(i);
    this.boneData[n + 8] = a.x, this.boneData[n + 9] = a.y, this.boneData[n + 10] = a.z, this.boneData[n + 11] = a.w, this.boneData[n + 12] = 0.5 * g.x, this.boneData[n + 13] = 0.5 * g.y, this.boneData[n + 14] = 0.5 * g.z, this.boneData[n + 15] = 0.5 * g.w;
  }
  // Set up to 4 bone indices and weights for a Gsplat. For fewer than 4 bones,
  // you can set the remaining weights to 0 (and index=0).
  setSplatBones(A, e, s) {
    const n = A * 4;
    this.skinData[n + 0] = Math.min(255, Math.max(0, Math.round(s.x * 255))) + (e.x << 8), this.skinData[n + 1] = Math.min(255, Math.max(0, Math.round(s.y * 255))) + (e.y << 8), this.skinData[n + 2] = Math.min(255, Math.max(0, Math.round(s.z * 255))) + (e.z << 8), this.skinData[n + 3] = Math.min(255, Math.max(0, Math.round(s.w * 255))) + (e.w << 8);
  }
  // Call this to indicate that the bones have changed and the Gsplats need to be
  // re-generated with updated skinning.
  updateBones() {
    this.boneTexture.needsUpdate = !0, this.mesh.needsUpdate = !0;
  }
}
const Ao = { type: "GsplatSkinning" }, to = uA(`
  struct GsplatSkinning {
    int numSplats;
    int numBones;
    usampler2DArray skinTexture;
    sampler2D boneTexture;
  };
`), Zu = uA(`
  void applyGsplatSkinning(
    int numSplats, int numBones,
    usampler2DArray skinTexture, sampler2D boneTexture,
    int splatIndex, inout vec3 center, inout vec4 quaternion
  ) {
    if ((splatIndex < 0) || (splatIndex >= numSplats)) {
      return;
    }

    uvec4 skinData = texelFetch(skinTexture, splatTexCoord(splatIndex), 0);

    float weights[4];
    weights[0] = float(skinData.x & 0xffu) / 255.0;
    weights[1] = float(skinData.y & 0xffu) / 255.0;
    weights[2] = float(skinData.z & 0xffu) / 255.0;
    weights[3] = float(skinData.w & 0xffu) / 255.0;

    uint boneIndices[4];
    boneIndices[0] = (skinData.x >> 8u) & 0xffu;
    boneIndices[1] = (skinData.y >> 8u) & 0xffu;
    boneIndices[2] = (skinData.z >> 8u) & 0xffu;
    boneIndices[3] = (skinData.w >> 8u) & 0xffu;

    vec4 quat = vec4(0.0);
    vec4 dual = vec4(0.0);
    for (int i = 0; i < 4; i++) {
      if (weights[i] > 0.0) {
        int boneIndex = int(boneIndices[i]);
        vec4 boneQuat = vec4(0.0, 0.0, 0.0, 1.0);
        vec4 boneDual = vec4(0.0);
        if (boneIndex < numBones) {
          boneQuat = texelFetch(boneTexture, ivec2(2, boneIndex), 0);
          boneDual = texelFetch(boneTexture, ivec2(3, boneIndex), 0);
        }

        if ((i > 0) && (dot(quat, boneQuat) < 0.0)) {
          // Flip sign if next blend is pointing in the opposite direction
          boneQuat = -boneQuat;
          boneDual = -boneDual;
        }
        quat += weights[i] * boneQuat;
        dual += weights[i] * boneDual;
      }
    }

    // Normalize dual quaternion
    float norm = length(quat);
    quat /= norm;
    dual /= norm;
    vec3 translate = vec3(
      2.0 * (-dual.w * quat.x + dual.x * quat.w - dual.y * quat.z + dual.z * quat.y),
      2.0 * (-dual.w * quat.y + dual.x * quat.z + dual.y * quat.w - dual.z * quat.x),
      2.0 * (-dual.w * quat.z - dual.x * quat.y + dual.y * quat.x + dual.z * quat.w)
    );

    center = quatVec(quat, center) + translate;
    quaternion = quatQuat(quat, quaternion);
  }
`);
function Ou(t, A) {
  return new V({
    inTypes: { gsplat: AA, skinning: Ao },
    outTypes: { gsplat: AA },
    globals: () => [to, Zu],
    inputs: { gsplat: t, skinning: A },
    statements: ({ inputs: s, outputs: n }) => {
      const { skinning: i } = s, { gsplat: r } = n;
      return GA(`
        ${r} = ${s.gsplat};
        if (isGsplatActive(${r}.flags)) {
          applyGsplatSkinning(
            ${i}.numSplats, ${i}.numBones,
            ${i}.skinTexture, ${i}.boneTexture,
            ${r}.index, ${r}.center, ${r}.quaternion
          );
        }
      `);
    }
  }).outputs.gsplat;
}
function Th({
  // PackedSplats object to add splats to
  splats: t,
  // min and max box extents of the grid
  extents: A,
  // step size along each grid axis
  stepSize: e = 1,
  // spherical radius of each Gsplat
  pointRadius: s = 0.01,
  // relative size of the "shadow copy" of each Gsplat placed behind it
  pointShadowScale: n = 2,
  // Gsplat opacity
  opacity: i = 1,
  // Gsplat color (THREE.Color) or function to set color for position:
  // ((THREE.Color, THREE.Vector3) => void) (default: RGB-modulated grid)
  color: r
}) {
  const o = new u.Vector3(), g = new u.Vector3(), l = new u.Quaternion(0, 0, 0, 1);
  r == null && (r = (I, h) => I.set(
    0.55 + 0.45 * Math.cos(h.x * 1),
    0.55 + 0.45 * Math.cos(h.y * 1),
    0.55 + 0.45 * Math.cos(h.z * 1)
  ));
  const c = new u.Color();
  for (let I = A.min.z; I < A.max.z + 1e-6; I += e)
    for (let h = A.min.y; h < A.max.y + 1e-6; h += e)
      for (let B = A.min.x; B < A.max.x + 1e-6; B += e) {
        o.set(B, h, I);
        for (let C = 0; C < 2; ++C)
          g.setScalar(s * (C ? 1 : n)), C ? typeof r == "function" ? r(c, o) : c.copy(r) : c.setScalar(0), t.pushSplat(o, g, l, i, c);
      }
}
function Uh({
  // PackedSplats object to add splats to
  splats: t,
  // scale (Gsplat scale along axis)
  scale: A = 0.25,
  // radius of the axes (Gsplat scale orthogonal to axis)
  axisRadius: e = 75e-4,
  // relative size of the "shadow copy" of each Gsplat placed behind it
  axisShadowScale: s = 2,
  // origins of the axes (default single axis at origin)
  origins: n = [new u.Vector3()]
}) {
  const i = new u.Vector3(), r = new u.Vector3(), a = new u.Quaternion(0, 0, 0, 1), o = new u.Color(), g = 1;
  for (const l of n)
    for (let c = 0; c < 3; ++c) {
      i.set(
        l.x + (c === 0 ? A : 0),
        l.y + (c === 1 ? A : 0),
        l.z + (c === 2 ? A : 0)
      );
      for (let I = 0; I < 2; ++I)
        r.set(
          (c === 0 ? A : e) * (I ? 1 : s),
          (c === 1 ? A : e) * (I ? 1 : s),
          (c === 2 ? A : e) * (I ? 1 : s)
        ), o.setRGB(
          I === 0 ? 0 : c === 0 ? 1 : 0,
          I === 0 ? 0 : c === 1 ? 1 : 0,
          I === 0 ? 0 : c === 2 ? 1 : 0
        ), t.pushSplat(i, r, a, g, o);
    }
}
function Gh({
  // PackedSplats object to add splats to
  splats: t,
  // center of the sphere (default: origin)
  origin: A = new u.Vector3(),
  // radius of the sphere
  radius: e = 1,
  // maximum depth of recursion for subdividing the sphere
  // Warning: Gsplat count grows exponentially with depth
  maxDepth: s = 3,
  // filter function to apply to each point, for example to select
  // points in a certain direction or other function ((THREE.Vector3) => boolean)
  // (default: null)
  filter: n = null,
  // radius of each oriented Gsplat
  pointRadius: i = 0.02,
  // flatness of each oriented Gsplat
  pointThickness: r = 1e-3,
  // color of each Gsplat (THREE.Color) or function to set color for point:
  // ((THREE.Color, THREE.Vector3) => void) (default: white)
  color: a = new u.Color(1, 1, 1)
}) {
  const o = {};
  function g(C) {
    if (n && !n(C))
      return;
    const E = `${C.x},${C.y},${C.z}`;
    o[E] || (o[E] = C);
  }
  function l(C, E, Q, p) {
    if (g(E), g(Q), g(p), C >= s)
      return;
    const f = new u.Vector3().addVectors(E, Q).normalize(), d = new u.Vector3().addVectors(Q, p).normalize(), m = new u.Vector3().addVectors(p, E).normalize();
    l(C + 1, E, f, m), l(C + 1, f, Q, d), l(C + 1, m, d, p), l(C + 1, f, d, m);
  }
  for (const C of [-1, 1])
    for (const E of [-1, 1])
      for (const Q of [-1, 1]) {
        const p = new u.Vector3(C, 0, 0), f = new u.Vector3(0, E, 0), d = new u.Vector3(0, 0, Q);
        l(0, p, f, d);
      }
  const c = Object.values(o), I = new u.Vector3(i, i, r), h = new u.Quaternion(), B = typeof a == "function" ? new u.Color() : a;
  for (const C of c)
    h.setFromUnitVectors(new u.Vector3(0, 0, -1), C), typeof a == "function" && a(B, C), C.multiplyScalar(e), C.add(A), t.pushSplat(C, I, h, 1, B);
}
function Rh({
  // text string to display
  text: t,
  // browser font to render text with (default: "Arial")
  font: A,
  // font size in pixels/Gsplats (default: 32)
  fontSize: e,
  // SplatMesh.recolor tint assuming white Gsplats (default: white)
  color: s,
  // Individual Gsplat color (default: white)
  rgb: n,
  // Gsplat radius (default: 0.8 covers 1-unit spacing well)
  dotRadius: i,
  // text alignment: "left", "center", "right", "start", "end" (default: "start")
  textAlign: r,
  // line spacing multiplier, lines delimited by "\n" (default: 1.0)
  lineHeight: a,
  // Coordinate scale in object-space (default: 1.0)
  objectScale: o
}) {
  A = A ?? "Arial", e = e ?? 32, s = s ?? new u.Color(1, 1, 1), i = i ?? 0.8, r = r ?? "start", a = a ?? 1, o = o ?? 1;
  const g = t.split(`
`), l = document.createElement("canvas"), c = l.getContext("2d");
  if (!c)
    throw new Error("Failed to create canvas context");
  c.font = `${e}px ${A}`, c.textAlign = r;
  const I = c.measureText(""), h = I.fontBoundingBoxAscent + I.fontBoundingBoxDescent;
  let B = Number.POSITIVE_INFINITY, C = Number.NEGATIVE_INFINITY, E = Number.POSITIVE_INFINITY, Q = Number.NEGATIVE_INFINITY;
  for (let F = 0; F < g.length; ++F) {
    const b = c.measureText(g[F]), T = h * a * F;
    B = Math.min(B, -b.actualBoundingBoxLeft), C = Math.max(C, b.actualBoundingBoxRight), E = Math.min(E, T - b.actualBoundingBoxAscent), Q = Math.max(Q, T + b.actualBoundingBoxDescent);
  }
  const p = Math.floor(B), f = Math.floor(E), d = Math.ceil(C) - p, m = Math.ceil(Q) - f;
  l.width = d, l.height = m, c.font = `${e}px ${A}`, c.textAlign = r, c.textBaseline = "alphabetic", c.fillStyle = "#FFFFFF";
  for (let F = 0; F < g.length; ++F) {
    const b = h * a * F - f;
    c.fillText(g[F], -p, b);
  }
  const D = c.getImageData(0, 0, d, m), x = new Uint8Array(D.data.buffer), y = new KA(), w = new u.Vector3(), k = new u.Vector3().setScalar(i * o), M = new u.Quaternion(0, 0, 0, 1);
  n = n ?? new u.Color(1, 1, 1);
  let S = 0;
  for (let F = 0; F < m; ++F)
    for (let b = 0; b < d; ++b) {
      const T = x[S + 3];
      if (T > 0) {
        const R = T / 255;
        w.set(b - 0.5 * (d - 1), 0.5 * (m - 1) - F, 0), w.multiplyScalar(o), y.pushSplat(w, k, M, R, n);
      }
      S += 4;
    }
  const U = new OA({ packedSplats: y });
  return U.recolor = s, U;
}
function Yh({
  // URL of the image to convert to splats (example: `url: "./image.png"`)
  url: t,
  // Radius of each Gsplat, default covers 1-unit spacing well (default: 0.8)
  dotRadius: A,
  // Subsampling factor for the image. Higher values reduce resolution,
  // for example 2 will halve the width and height by averaging (default: 1)
  subXY: e,
  // Optional callback function to modify each Gsplat before it's added.
  // Return null to skip adding the Gsplat, or a number to set the opacity
  // and add the Gsplat with parameter values in the objects center, rgba etc. were
  // passed into the forEachSplat callback. Ending the callback in `return opacity;`
  // will retain the original opacity.
  // ((width: number, height: number, index: number, center: THREE.Vector3, scales: THREE.Vector3, quaternion: THREE.Quaternion, opacity: number, color: THREE.Color) => number | null)
  forEachSplat: s
}) {
  return A = A ?? 0.8, e = Math.max(1, Math.floor(e ?? 1)), new OA({
    constructSplats: async (n) => new Promise((i, r) => {
      const a = new Image();
      a.crossOrigin = "anonymous", a.onerror = r, a.onload = () => {
        const { width: o, height: g } = a, l = document.createElement("canvas");
        l.width = o, l.height = g;
        const c = l.getContext("2d");
        if (!c) {
          r(new Error("Failed to create canvas context"));
          return;
        }
        c.imageSmoothingEnabled = !0, c.imageSmoothingQuality = "high";
        const I = Math.round(o / e), h = Math.round(g / e);
        c.drawImage(a, 0, 0, I, h);
        try {
          const B = c.getImageData(0, 0, I, h), C = new Uint8Array(B.data.buffer), E = new u.Vector3(), Q = new u.Vector3().setScalar(A), p = new u.Quaternion(0, 0, 0, 1), f = new u.Color();
          let d = 0;
          for (let m = 0; m < h; ++m)
            for (let D = 0; D < I; ++D) {
              const x = d * 4, y = C[x + 3];
              if (y > 0) {
                let w = y / 255;
                f.set(
                  C[x + 0] / 255,
                  C[x + 1] / 255,
                  C[x + 2] / 255
                ), E.set(
                  D - 0.5 * (I - 1),
                  0.5 * (h - 1) - m,
                  0
                ), Q.setScalar(A), p.set(0, 0, 0, 1);
                let k = !0;
                if (s) {
                  const M = s(
                    I,
                    h,
                    d,
                    E,
                    Q,
                    p,
                    w,
                    f
                  );
                  w = M ?? w, k = M !== null;
                }
                k && n.pushSplat(E, Q, p, w, f);
              }
              d += 1;
            }
          i();
        } catch (B) {
          r(B);
        }
      }, a.src = t;
    })
  });
}
function ju({
  box: t,
  cells: A,
  dotScale: e,
  color: s,
  opacity: n
}) {
  A.x = Math.max(1, Math.round(A.x)), A.y = Math.max(1, Math.round(A.y)), A.z = Math.max(1, Math.round(A.z)), n = n ?? 1;
  const i = A.x * A.y * A.z, r = J("int", A.x), a = J("int", A.y);
  J("int", A.z);
  const o = LA(0), g = new Kt({
    numSplats: i,
    generator: MA(
      { index: "int" },
      { gsplat: AA },
      ({ index: c }) => {
        if (!c)
          throw new Error("index is undefined");
        const I = Je(c, r), h = ie(c, r), B = Je(h, a), C = ie(h, a), E = qA({
          vectorType: "ivec3",
          x: I,
          y: B,
          z: C
        }), Q = ji(o), p = qA({ vectorType: "ivec2", x: c, y: Q }), f = ta(p), d = J("vec3", t.min), m = J("vec3", t.max), D = Qt(m, d), x = ie(CA(Bt(E), f), J("vec3", A));
        let y, w, k;
        s ? (y = J("float", s.r), w = J("float", s.g), k = J("float", s.b)) : { r: y, g: w, b: k } = Et(x).outputs;
        const M = qA({
          vectorType: "vec4",
          r: y,
          g: w,
          b: k,
          a: J("float", n)
        }), S = CA(d, iA(D, x)), U = Bt(J("float", e)), F = J("vec4", new u.Quaternion(0, 0, 0, 1));
        let b = rt({
          flags: ae("uint", "GSPLAT_FLAG_ACTIVE"),
          index: c,
          center: S,
          scales: U,
          quaternion: F,
          rgba: M
        });
        return b = l.applyGsplat(b), { gsplat: b };
      },
      {
        globals: () => [vA]
      }
    ),
    update: ({ time: c }) => {
      o.value = c, l.update(g), g.updateVersion();
    }
  }), l = new xt();
  return g;
}
const Xu = {
  box: new u.Box3(
    new u.Vector3(-1, -1, -1),
    new u.Vector3(1, 1, 1)
  ),
  density: 100,
  fallDirection: new u.Vector3(-1, -3, 1).normalize(),
  fallVelocity: 0.02,
  wanderScale: 0.04,
  wanderVariance: 2,
  color1: new u.Color(1, 1, 1),
  color2: new u.Color(0.5, 0.5, 1),
  minScale: 1e-3,
  maxScale: 5e-3,
  anisoScale: new u.Vector3(1, 1, 1)
}, Wu = {
  box: new u.Box3(
    new u.Vector3(-2, -1, -2),
    new u.Vector3(2, 5, 2)
  ),
  density: 10,
  fallDirection: new u.Vector3(0, -1, 0),
  fallVelocity: 2,
  wanderScale: 0.1,
  wanderVariance: 1,
  color1: new u.Color(1, 1, 1),
  color2: new u.Color(0.25, 0.25, 0.5),
  minScale: 5e-3,
  maxScale: 0.01,
  anisoScale: new u.Vector3(0.1, 1, 0.1)
};
function Ah({
  // min and max box extents of the snowBox
  box: t,
  // minimum y-coordinate to clamp particle position, which can be used to
  // fake hitting a ground plane and lingering there for a bit
  minY: A,
  // number of Gsplats to generate (default: calculated from box and density)
  numSplats: e,
  // density of Gsplats per unit volume (default: 100)
  density: s,
  // The xyz anisotropic scale of the Gsplat, which can be used for example
  // to elongate rain particles (default: (1, 1, 1))
  anisoScale: n,
  // Minimum Gsplat particle scale (default: 0.001)
  minScale: i,
  // Maximum Gsplat particle scale (default: 0.005)
  maxScale: r,
  // The average direction of fall (default: (0, -1, 0))
  fallDirection: a,
  // The average speed of the fall (multiplied with fallDirection) (default: 0.02)
  fallVelocity: o,
  // The world scale of wandering overlay motion (default: 0.01)
  wanderScale: g,
  // Controls how uniformly the particles wander in sync, more variance mean
  // more randomness in the motion (default: 2)
  wanderVariance: l,
  // Color 1 of the two colors interpolated between (default: (1, 1, 1))
  color1: c,
  // Color 2 of the two colors interpolated between (default: (0.5, 0.5, 1))
  color2: I,
  // The base opacity of the Gsplats (default: 1)
  opacity: h,
  // Optional callback function to call each frame.
  onFrame: B
}) {
  t = t ?? new u.Box3(new u.Vector3(-1, -1, -1), new u.Vector3(1, 1, 1));
  const C = (t.max.x - t.min.x) * (t.max.y - t.min.y) * (t.max.z - t.min.z);
  s = s ?? 100, e = e ?? Math.max(1, Math.min(1e6, Math.round(C * s)));
  const E = LA(i ?? 1e-3), Q = LA(r ?? 5e-3), p = tt(
    ((n == null ? void 0 : n.clone()) ?? new u.Vector3(1, 1, 1)).normalize()
  ), f = tt(
    (a ?? new u.Vector3(0, -1, 0)).normalize()
  ), d = LA(o ?? 0.02), m = LA(g ?? 0.01), D = LA(l ?? 2), x = tt(c ?? new u.Color(1, 1, 1)), y = tt(I ?? new u.Color(0.5, 0.5, 1)), w = LA(h ?? 1), k = LA(0), M = tt(new u.Vector3(0, 0, 0)), S = tt(t.min), U = tt(t.max), F = LA(A ?? Number.NEGATIVE_INFINITY), b = Qt(U, S), T = new Kt({
    numSplats: e,
    generator: MA(
      { index: "int" },
      { gsplat: AA },
      ({ index: O }) => {
        if (!O)
          throw new Error("index not defined");
        const _ = Le(O), eA = Et(_).outputs.w;
        let q = Bt(_), j = re(iA(eA, J("float", 100)));
        j = ze(iA(ae("float", "PI"), j)), j = CA(E, iA(j, Qt(Q, E)));
        const L = iA(j, p), X = re(iA(eA, J("float", 10))), P = re(eA), W = Ai(x, y, P), G = iA(W, X), pA = Le(
          qA({
            vectorType: "ivec2",
            x: O,
            y: J("int", 6837)
          })
        );
        let gA = Bt(pA), fA = iA(Et(pA).outputs.w, D);
        fA = CA(k, fA), q = CA(q, M);
        const dA = Xn(
          q,
          J("vec3", new u.Vector3(1, 1, 1))
        );
        q = CA(S, iA(b, dA));
        const xA = J("vec4", new u.Quaternion(0, 0, 0, 1));
        gA = ze(CA(Bt(fA), gA)), gA = iA(gA, m);
        let hA = CA(q, gA), RA = Et(hA).outputs.y;
        RA = Wn(F, RA), hA = qA({ vector: hA, y: RA });
        let SA = rt({
          flags: ae("uint", "GSPLAT_FLAG_ACTIVE"),
          index: O,
          center: hA,
          scales: L,
          quaternion: xA,
          rgb: G,
          opacity: w
        });
        return SA = R.applyGsplat(SA), { gsplat: SA };
      },
      {
        globals: () => [vA]
      }
    ),
    update: ({ object: O, time: _, deltaTime: eA }) => {
      k.value = _, R.update(T);
      const q = f.value.clone().multiplyScalar(d.value * eA);
      M.value.add(q), O.visible = w.value > 0, B == null || B({ object: O, time: _, deltaTime: eA }), T.updateVersion();
    }
  }), R = new xt();
  return {
    snow: T,
    min: S,
    max: U,
    minY: F,
    color1: x,
    color2: y,
    opacity: w,
    fallVelocity: d,
    wanderVariance: D,
    wanderScale: m,
    fallDirection: f,
    minScale: E,
    maxScale: Q,
    anisoScale: p
  };
}
const Jh = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  DEFAULT_RAIN: Wu,
  DEFAULT_SNOW: Xu,
  snowBox: Ah,
  staticBox: ju
}, Symbol.toStringTag, { value: "Module" }));
function eo(t) {
  return MA({ gsplat: AA }, { gsplat: AA }, ({ gsplat: A }) => {
    if (!A)
      throw new Error("No gsplat input");
    let e = Ge(A);
    const s = t.applyGsplat(A), n = ut(s).outputs.center, i = Ge(s), r = br(n, i), a = Ni(r, J("float", 0));
    e = rs(a, is(e), e);
    const o = CA(
      iA(e, J("float", 0.5)),
      J("float", 0.5)
    );
    return A = rt({ gsplat: A, rgb: o }), { gsplat: A };
  });
}
function th(t) {
  t.enableWorldToView = !0, t.worldModifier = eo(t.context.worldToView), t.updateGenerator();
}
function so(t, A, e, s) {
  return MA({ gsplat: AA }, { gsplat: AA }, ({ gsplat: n }) => {
    if (!n)
      throw new Error("No gsplat input");
    let { center: i } = ut(n).outputs;
    i = t.apply(i);
    const { z: r } = Et(i).outputs;
    let a = ea(is(r), A, e);
    return a = rs(s, Qt(J("float", 1), a), a), n = rt({ gsplat: n, r: a, g: a, b: a }), { gsplat: n };
  });
}
function eh(t, A, e, s) {
  t.enableWorldToView = !0;
  const n = J("float", A), i = J("float", e), r = J("bool", s ?? !1);
  return t.worldModifier = so(
    t.context.worldToView,
    n,
    i,
    r
  ), t.updateGenerator(), {
    minDepth: n,
    maxDepth: i,
    reverse: r
  };
}
const _h = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  makeDepthColorModifier: so,
  makeNormalColorModifier: eo,
  setDepthColor: eh,
  setWorldNormalColor: th
}, Symbol.toStringTag, { value: "Module" })), Ht = class Ht {
  static createButton(A, e = {}) {
    const s = navigator.xr;
    if (!s)
      return null;
    const n = s, i = document.createElement("button");
    A.xr.enabled = !0, A.xr.setReferenceSpaceType("local");
    function r() {
      let c = null;
      async function I(C) {
        console.log("onSessionStarted"), C.addEventListener("end", h), await A.xr.setSession(C), i.textContent = "EXIT VR", c = C;
      }
      function h() {
        console.log("onSessionEnded"), c == null || c.removeEventListener("end", h), i.textContent = "ENTER VR", c = null;
      }
      i.style.display = "", i.style.cursor = "pointer", i.style.left = "calc(50% - 100px)", i.style.width = "200px", i.style.height = "100px", i.textContent = "ENTER VR";
      const B = {
        ...e,
        optionalFeatures: [
          // "local-floor",
          // "bounded-floor",
          // "layers",
          ...e.optionalFeatures || []
        ]
      };
      i.onmouseenter = () => {
        i.style.opacity = "1.0";
      }, i.onmouseleave = () => {
        i.style.opacity = "0.5";
      }, i.onclick = () => {
        c === null ? (console.log("requesting session"), n.requestSession("immersive-vr", B).then(
          I
        )) : (console.log("ending session"), c.end());
      };
    }
    function a() {
      i.style.display = "none", i.style.cursor = "auto", i.style.left = "calc(50% - 75px)", i.style.width = "150px", i.onmouseenter = null, i.onmouseleave = null, i.onclick = null;
    }
    function o() {
      a(), i.textContent = "VR NOT SUPPORTED";
    }
    function g(c) {
      a(), console.warn(
        "Exception when trying to call xr.isSessionSupported",
        c
      ), i.textContent = "VR NOT ALLOWED";
    }
    function l(c) {
      c.style.position = "absolute", c.style.bottom = "20px", c.style.padding = "12px 6px", c.style.border = "1px solid #fff", c.style.borderRadius = "4px", c.style.background = "rgba(0,0,0,0.1)", c.style.color = "#fff", c.style.font = "normal 13px sans-serif", c.style.textAlign = "center", c.style.opacity = "0.5", c.style.outline = "none", c.style.zIndex = "999";
    }
    return i.id = "VRButton", i.style.display = "none", l(i), n.isSessionSupported("immersive-vr").then((c) => {
      c ? r() : o(), c && Ht.xrSessionIsGranted && i.click();
    }).catch(g), i;
  }
  static registerSessionGrantedListener() {
    const A = navigator.xr;
    if (!A)
      return null;
    const e = A;
    /WebXRViewer\//i.test(navigator.userAgent) || e.addEventListener("sessiongranted", () => {
      Ht.xrSessionIsGranted = !0;
    });
  }
};
Ht.xrSessionIsGranted = !1;
let Ve = Ht;
Ve.registerSessionGrantedListener();
const sh = 0.5, nh = 0.5, ih = 0;
var cs = /* @__PURE__ */ ((t) => (t.w = "wrist", t.t0 = "thumb-metacarpal", t.t1 = "thumb-phalanx-proximal", t.t2 = "thumb-phalanx-distal", t.t3 = "thumb-tip", t.i0 = "index-finger-metacarpal", t.i1 = "index-finger-phalanx-proximal", t.i2 = "index-finger-phalanx-intermediate", t.i3 = "index-finger-phalanx-distal", t.i4 = "index-finger-tip", t.m0 = "middle-finger-metacarpal", t.m1 = "middle-finger-phalanx-proximal", t.m2 = "middle-finger-phalanx-intermediate", t.m3 = "middle-finger-phalanx-distal", t.m4 = "middle-finger-tip", t.r0 = "ring-finger-metacarpal", t.r1 = "ring-finger-phalanx-proximal", t.r2 = "ring-finger-phalanx-intermediate", t.r3 = "ring-finger-phalanx-distal", t.r4 = "ring-finger-tip", t.p0 = "pinky-finger-metacarpal", t.p1 = "pinky-finger-phalanx-proximal", t.p2 = "pinky-finger-phalanx-intermediate", t.p3 = "pinky-finger-phalanx-distal", t.p4 = "pinky-finger-tip", t))(cs || {});
const no = Object.keys(cs), Lh = no.length, zh = {
  w: 0,
  t0: 1,
  t1: 2,
  t2: 3,
  t3: 4,
  i0: 5,
  i1: 6,
  i2: 7,
  i3: 8,
  i4: 9,
  m0: 10,
  m1: 11,
  m2: 12,
  m3: 13,
  m4: 14,
  r0: 15,
  r1: 16,
  r2: 17,
  r3: 18,
  r4: 19,
  p0: 20,
  p1: 21,
  p2: 22,
  p3: 23,
  p4: 24
}, se = {
  w: 0.02,
  t0: 0.02,
  t1: 0.014,
  t2: 0.0115,
  t3: 85e-4,
  i0: 0.022,
  i1: 0.012,
  i2: 85e-4,
  i3: 75e-4,
  i4: 65e-4,
  m0: 0.021,
  m1: 0.012,
  m2: 8e-3,
  m3: 75e-4,
  m4: 65e-4,
  r0: 0.019,
  r1: 0.011,
  r2: 75e-4,
  r3: 7e-3,
  r4: 6e-3,
  p0: 0.012,
  p1: 0.01,
  p2: 7e-3,
  p3: 65e-4,
  p4: 55e-4
}, rh = [
  ["w", "t0", "t1", "t2", "t3"],
  ["w", "i0", "i1", "i2", "i3", "i4"],
  ["w", "m0", "m1", "m2", "m3", "m4"],
  ["w", "r0", "r1", "r2", "r3", "r4"],
  ["w", "p0", "p1", "p2", "p3", "p4"]
], ah = [
  [8, 10, 8, 6],
  [8, 19, 14, 8, 6],
  [8, 19, 14, 8, 6],
  [8, 19, 14, 8, 6],
  [8, 19, 14, 8, 6]
], Hh = ["t3", "i4", "m4", "r4", "p4"], qh = ["i4", "m4", "r4", "p4"];
var io = /* @__PURE__ */ ((t) => (t.left = "left", t.right = "right", t))(io || {});
const Pe = Object.keys(io);
class Kh {
  constructor() {
    this.hands = {}, this.last = {}, this.values = {}, this.tests = {}, this.lastTests = {}, this.updated = !1;
  }
  update({ xr: A, xrFrame: e }) {
    const s = A.getSession();
    if (!s)
      return;
    const n = A.getReferenceSpace();
    if (n && e.getJointPose) {
      this.last = this.hands, this.lastTests = this.tests, this.hands = {}, this.values = {}, this.tests = {};
      for (const i of s.inputSources) {
        if (!i.hand)
          continue;
        const r = i.handedness;
        this.hands[r] = {};
        for (const a of no) {
          const o = i.hand.get(cs[a]);
          if (o) {
            const g = e.getJointPose(o, n);
            if (g) {
              const { position: l, orientation: c } = g.transform;
              this.hands[r][a] = {
                position: new JA(l.x, l.y, l.z),
                quaternion: new ls(
                  c.x,
                  c.y,
                  c.z,
                  c.w
                ),
                radius: g.radius || 1e-3
              };
            }
          }
        }
      }
      for (const i of Pe)
        for (const { key: r, value: a } of [
          { key: `${i}AllTips`, value: this.allTipsTouching(i) },
          {
            key: `${i}IndexThumb`,
            value: this.touching(i, "i4", i, "t3")
          },
          {
            key: `${i}MiddleThumb`,
            value: this.touching(i, "m4", i, "t3")
          },
          {
            key: `${i}RingThumb`,
            value: this.touching(i, "r4", i, "t3")
          },
          {
            key: `${i}PinkyThumb`,
            value: this.touching(i, "p4", i, "t3")
          },
          { key: `${i}TriTips`, value: this.triTipsTouching(i) }
        ])
          this.values[r] = a, this.tests[r] = a === 1 ? !0 : a === 0 ? !1 : this.lastTests[r] ?? !1;
    }
  }
  makeGhostMesh() {
    const A = new JA(), e = new JA(0.01, 0.01, 0.01), s = new ls(0, 0, 0, 1), n = new Is(1, 1, 1), i = Math.PI * 3;
    new Is(1, 1, 1);
    let r = 1;
    const a = new OA({
      onFrame: () => {
        let o = 0;
        for (const g of Pe) {
          const l = this.hands[g];
          for (const [c, I] of rh.entries())
            for (let h = 1; h < I.length; ++h) {
              const B = ah[c][h - 1] * 2, C = h + 1 === I.length, E = l == null ? void 0 : l[I[h - 1]], Q = l == null ? void 0 : l[I[h]];
              for (let p = 0; p < B; ++p) {
                const f = (p + 0.5) / B;
                if (r = 0, E && Q) {
                  A.copy(E.position).lerp(Q.position, f), s.copy(E.quaternion).slerp(Q.quaternion, f);
                  const d = se[I[h - 1]], m = se[I[h]];
                  let D = (1 - f) * d + f * m;
                  C && f > 0.8 && (D *= Math.sqrt(1 - ((f - 0.8) / 0.2) ** 2)), e.set(0.65 * D, 0.5 * D, 3e-3), n.set(
                    0.55 + 0.45 * Math.sin(A.x * i),
                    0.55 + 0.45 * Math.sin(A.y * i),
                    0.55 + 0.45 * Math.sin(A.z * i)
                  ), g === "right" && n.set(1 - n.r, 1 - n.g, 1 - n.b), r = 0.75;
                }
                a.packedSplats.setSplat(
                  o,
                  A,
                  e,
                  s,
                  r,
                  n
                ), o += 1;
              }
            }
        }
        a.packedSplats.numSplats = o, a.packedSplats.needsUpdate = !0, a.numSplats = o, a.updateVersion();
      }
    });
    return a;
  }
  distance(A, e, s, n, i = !1) {
    const r = i ? this.last[A] : this.hands[A], a = i ? this.last[s] : this.hands[s], o = r == null ? void 0 : r[e], g = a == null ? void 0 : a[n];
    return !o || !g ? Number.POSITIVE_INFINITY : o.position.distanceTo(g.position);
  }
  separation(A, e, s, n, i = !1) {
    const r = this.distance(A, e, s, n, i);
    return r === Number.POSITIVE_INFINITY ? Number.POSITIVE_INFINITY : r - se[e] - se[n];
  }
  touching(A, e, s, n, i = !1) {
    const r = this.separation(A, e, s, n, i);
    return r === Number.POSITIVE_INFINITY ? Number.POSITIVE_INFINITY : 1 - Math.max(0, Math.min(1, r / 0.01 - ih));
  }
  allTipsTouching(A, e = !1) {
    return Math.min(
      this.touching(A, "t3", A, "i4", e),
      this.touching(A, "i4", A, "m4", e),
      this.touching(A, "m4", A, "r4", e),
      this.touching(A, "r4", A, "p4", e)
      // this.touching(hand, "p4", hand, "t3", last),
    );
  }
  triTipsTouching(A, e = !1) {
    return Math.min(
      this.touching(A, "t3", A, "i4", e),
      this.touching(A, "i4", A, "m4", e),
      this.touching(A, "m4", A, "t3", e)
    );
  }
}
class $h {
  constructor({
    xrHands: A,
    control: e,
    moveInertia: s,
    rotateInertia: n
  }) {
    this.lastGrip = {}, this.lastPivot = new JA(), this.rotateVelocity = 0, this.velocity = new JA(), this.xrHands = A, this.control = e, this.moveInertia = s ?? sh, this.rotateInertia = n ?? nh;
  }
  update(A) {
    var i, r, a, o, g;
    const e = {};
    for (const l of Pe) {
      const c = this.xrHands.hands[l];
      c && this.xrHands.tests[`${l}MiddleThumb`] && (e[l] = new JA().add(((i = c.t3) == null ? void 0 : i.position) ?? new JA()).add(((r = c.i4) == null ? void 0 : r.position) ?? new JA()).add(((a = c.m4) == null ? void 0 : a.position) ?? new JA()).add(((o = c.r4) == null ? void 0 : o.position) ?? new JA()).add(((g = c.p4) == null ? void 0 : g.position) ?? new JA()).multiplyScalar(1 / 5));
    }
    if (e.left && e.right && this.lastGrip.left && this.lastGrip.right) {
      const l = e.left.clone().add(e.right).multiplyScalar(0.5), c = this.lastGrip.left.clone().add(this.lastGrip.right).multiplyScalar(0.5);
      this.lastPivot = l;
      const I = l.clone().applyMatrix4(this.control.matrix);
      I.sub(c.clone().applyMatrix4(this.control.matrix)), I.multiplyScalar(1 / A), this.velocity.lerp(I, 1 - Math.exp(-20 * A));
      const h = Math.atan2(e.left.z - l.z, e.left.x - l.x), B = Math.atan2(
        this.lastGrip.left.z - c.z,
        this.lastGrip.left.x - c.x
      );
      let C = h - B;
      C > Math.PI ? C -= Math.PI * 2 : C < -Math.PI && (C += Math.PI * 2);
      const E = C / A, Q = Math.exp(-20 * A);
      this.rotateVelocity = this.rotateVelocity * Q + E * (1 - Q);
    } else if (this.rotateVelocity *= Math.exp(-A / this.rotateInertia), e.left && this.lastGrip.left) {
      const l = e.left.clone().applyMatrix4(this.control.matrix);
      l.sub(this.lastGrip.left.clone().applyMatrix4(this.control.matrix)), l.multiplyScalar(1 / A), this.velocity.lerp(l, 1 - Math.exp(-20 * A));
    } else if (e.right && this.lastGrip.right) {
      const l = e.right.clone().applyMatrix4(this.control.matrix);
      l.sub(
        this.lastGrip.right.clone().applyMatrix4(this.control.matrix)
      ), l.multiplyScalar(1 / A), this.velocity.lerp(l, 1 - Math.exp(-20 * A));
    } else
      this.velocity.multiplyScalar(Math.exp(-A / this.moveInertia));
    const s = this.lastPivot.clone().negate(), n = new Se().makeTranslation(s).premultiply(new Se().makeRotationY(this.rotateVelocity * A)).premultiply(new Se().makeTranslation(this.lastPivot));
    this.control.matrix.multiply(n), this.control.matrix.decompose(
      this.control.position,
      this.control.quaternion,
      this.control.scale
    ), this.control.updateMatrixWorld(!0), this.control.position.sub(this.velocity.clone().multiplyScalar(A)), this.lastGrip = e;
  }
}
const oh = 1, ch = 2, gh = 2e-3, lh = 6e-3, Ih = 15e-4, uh = 0.15, hh = 0.15, Ch = 0.1, Bh = 2, Eh = 1, Qh = 200, ph = 400, fh = 50, dh = {
  KeyW: new u.Vector3(0, 0, -1),
  KeyS: new u.Vector3(0, 0, 1),
  KeyA: new u.Vector3(-1, 0, 0),
  KeyD: new u.Vector3(1, 0, 0),
  KeyR: new u.Vector3(0, 1, 0),
  KeyF: new u.Vector3(0, -1, 0)
}, yh = {
  ArrowUp: new u.Vector3(0, 0, -1),
  ArrowDown: new u.Vector3(0, 0, 1),
  ArrowLeft: new u.Vector3(-1, 0, 0),
  ArrowRight: new u.Vector3(1, 0, 0),
  PageUp: new u.Vector3(0, 1, 0),
  PageDown: new u.Vector3(0, -1, 0)
}, mh = {
  KeyQ: new u.Vector3(0, 0, 1),
  KeyE: new u.Vector3(0, 0, -1)
}, wh = {
  Home: new u.Vector3(0, -1, 0),
  End: new u.Vector3(0, 1, 0),
  Insert: new u.Vector3(-1, 0, 0),
  Delete: new u.Vector3(1, 0, 0)
};
class Vh {
  constructor({ canvas: A }) {
    this.lastTime = 0, this.fpsMovement = new xh({}), this.pointerControls = new Sh({ canvas: A });
  }
  update(A) {
    const e = performance.now(), s = (e - (this.lastTime || e)) / 1e3;
    this.lastTime = e, this.fpsMovement.update(s, A), this.pointerControls.update(s, A);
  }
}
class xh {
  constructor({
    moveSpeed: A,
    rollSpeed: e,
    stickThreshold: s,
    rotateSpeed: n,
    keycodeMoveMapping: i,
    keycodeRotateMapping: r,
    gamepadMapping: a,
    capsMultiplier: o,
    shiftMultiplier: g,
    ctrlMultiplier: l,
    xr: c
  } = {}) {
    this.enable = !0, this.moveSpeed = A ?? oh, this.rollSpeed = e ?? ch, this.stickThreshold = s ?? Ch, this.rotateSpeed = n ?? Bh, this.keycodeMoveMapping = i ?? {
      ...dh,
      ...yh
    }, this.keycodeRotateMapping = r ?? {
      ...mh,
      ...wh
    }, this.gamepadMapping = a ?? {
      4: "rollLeft",
      5: "rollRight",
      6: "ctrl",
      7: "shift"
    }, this.capsMultiplier = o ?? 10, this.shiftMultiplier = g ?? 5, this.ctrlMultiplier = l ?? 1 / 5, this.xr = c, this.keydown = {}, this.keycode = {}, document.addEventListener("keydown", (I) => {
      this.keydown[I.key] = !0, this.keycode[I.code] = !0;
    }), document.addEventListener("keyup", (I) => {
      this.keydown[I.key] = !1, this.keycode[I.code] = !1;
    }), window.addEventListener("blur", () => {
      this.keydown = {}, this.keycode = {};
    });
  }
  // Call this method in your render loop with `control` set to the object to control
  // (`THREE.Camera` or a `THREE.Object3D` that contains it), with `deltaTime`
  // in seconds since the last update.
  update(A, e) {
    var l, c;
    if (!this.enable)
      return;
    const s = [new u.Vector2(), new u.Vector2()], n = navigator.getGamepads()[0];
    n && (s[0].set(n.axes[0], n.axes[1]), s[1].set(n.axes[2], n.axes[3]));
    const i = (n == null ? void 0 : n.buttons.map((I) => I.pressed)) || [], r = Array.from(((c = (l = this.xr) == null ? void 0 : l.getSession()) == null ? void 0 : c.inputSources) ?? []);
    for (const I of r) {
      const h = I.gamepad;
      if (h)
        switch (I.handedness) {
          case "none": {
            s[0].x += h.axes[0], s[0].y += h.axes[1], s[1].x += h.axes[2], s[1].y += h.axes[3];
            break;
          }
          case "left": {
            s[0].x += h.axes[2], s[0].y += h.axes[3];
            break;
          }
          case "right": {
            s[1].x += h.axes[2], s[1].y += h.axes[3];
            break;
          }
        }
    }
    for (const I of s)
      I.x = Math.abs(I.x) >= this.stickThreshold ? I.x : 0, I.y = Math.abs(I.y) >= this.stickThreshold ? I.y : 0;
    const a = new u.Vector3(
      s[1].x,
      s[1].y,
      0
    ).multiplyScalar(this.rotateSpeed);
    for (const [I, h] of Object.entries(this.keycodeRotateMapping))
      this.keycode[I] && a.add(h);
    for (const I in this.gamepadMapping)
      if (i[Number.parseInt(I)])
        switch (this.gamepadMapping[I]) {
          case "rollLeft":
            a.z += 1;
            break;
          case "rollRight":
            a.z -= 1;
            break;
        }
    if (a.multiply(
      new u.Vector3(this.rotateSpeed, this.rotateSpeed, this.rollSpeed)
    ), a.manhattanLength() > 0) {
      a.multiplyScalar(A);
      const I = new u.Euler().setFromQuaternion(
        e.quaternion,
        "YXZ"
      );
      I.y -= a.x, I.x = Math.max(
        -Math.PI / 2,
        Math.min(Math.PI / 2, I.x - a.y)
      ), I.z = Math.max(-Math.PI, Math.min(Math.PI, I.z + a.z)), e.quaternion.setFromEuler(I);
    }
    const o = new u.Vector3(s[0].x, 0, s[0].y);
    for (const [I, h] of Object.entries(this.keycodeMoveMapping))
      this.keycode[I] && o.add(h);
    let g = 1;
    this.keydown.CapsLock && (g *= this.capsMultiplier), (this.keycode.ShiftLeft || this.keycode.ShiftRight) && (g *= this.shiftMultiplier), (this.keycode.ControlLeft || this.keycode.ControlRight) && (g *= this.ctrlMultiplier);
    for (const I in this.gamepadMapping)
      if (i[Number.parseInt(I)])
        switch (this.gamepadMapping[I]) {
          case "shift":
            g *= this.shiftMultiplier;
            break;
          case "ctrl":
            g *= this.ctrlMultiplier;
            break;
        }
    o.applyQuaternion(e.quaternion), e.position.add(
      o.multiplyScalar(this.moveSpeed * g * A)
    );
  }
}
class Sh {
  constructor({
    // The HTML canvas element to attach pointer events to
    canvas: A,
    // Speed of rotation (default DEFAULT_ROTATE_SPEED)
    rotateSpeed: e,
    // Speed of sliding when dragging with right/middle mouse button or two fingers
    // (default DEFAULT_SLIDE_SPEED)
    slideSpeed: s,
    // Speed of movement when using mouse scroll wheel (default DEFAULT_SCROLL_SPEED)
    scrollSpeed: n,
    // Swap the direction of rotation and sliding (default: false)
    swapRotateSlide: i,
    // Reverse the direction of rotation (default: false)
    reverseRotate: r,
    // Reverse the direction of sliding (default: false)
    reverseSlide: a,
    // Reverse the direction of swipe gestures (default: false)
    reverseSwipe: o,
    // Reverse the direction of scroll wheel movement (default: false)
    reverseScroll: g,
    // Inertia factor for movement (default: DEFAULT_MOVE_INERTIA)
    moveInertia: l,
    // Inertia factor for rotation (default: DEFAULT_ROTATE_INERTIA)
    rotateInertia: c,
    // Pointer rolling scale factor (default: DEFAULT_POINTER_ROLL_SCALE)
    pointerRollScale: I,
    // Callback for double press events (default: () => {})
    doublePress: h
  }) {
    this.enable = !0, this.canvas = A, this.rotateSpeed = e ?? gh, this.slideSpeed = s ?? lh, this.scrollSpeed = n ?? Ih, this.swapRotateSlide = i ?? !1, this.reverseRotate = r ?? !1, this.reverseSlide = a ?? !1, this.reverseSwipe = o ?? !1, this.reverseScroll = g ?? !1, this.moveInertia = l ?? hh, this.rotateInertia = c ?? uh, this.pointerRollScale = I ?? Eh, this.doublePress = h ?? (() => {
    }), this.doublePressLimitMs = ph, this.doublePressDistance = fh, this.lastUp = null, this.rotating = null, this.sliding = null, this.dualPress = !1, this.scroll = new u.Vector3(), this.rotateVelocity = new u.Vector3(), this.moveVelocity = new u.Vector3(), A.addEventListener("pointerdown", (C) => {
      const E = this.getPointerPosition(C), Q = E.clone(), p = E.clone(), f = !this.swapRotateSlide && !this.rotating && (C.pointerType !== "mouse" || C.button === 0) || this.swapRotateSlide && this.sliding && !this.rotating && (C.pointerType !== "mouse" || C.button === 1), { pointerId: d, timeStamp: m } = C;
      if (f)
        this.rotating = { initial: Q, last: p, position: E, pointerId: d, timeStamp: m }, A.setPointerCapture(C.pointerId), this.dualPress = !1;
      else if (!this.sliding) {
        const D = C.pointerType === "mouse" ? C.button : void 0;
        this.sliding = {
          initial: Q,
          last: p,
          position: E,
          pointerId: d,
          button: D,
          timeStamp: m
        }, A.setPointerCapture(C.pointerId), this.dualPress = this.rotating != null && m - this.rotating.timeStamp < Qh;
      }
    });
    const B = (C) => {
      var p, f;
      ((p = this.rotating) == null ? void 0 : p.pointerId) === C.pointerId ? (this.rotating = null, A.releasePointerCapture(C.pointerId), this.dualPress && this.sliding && (A.releasePointerCapture(this.sliding.pointerId), this.sliding = null)) : ((f = this.sliding) == null ? void 0 : f.pointerId) === C.pointerId && (this.sliding = null, A.releasePointerCapture(C.pointerId), this.dualPress && this.rotating && (A.releasePointerCapture(this.rotating.pointerId), this.rotating = null));
      const E = this.getPointerPosition(C), Q = this.lastUp;
      if (this.lastUp = { position: E, time: C.timeStamp }, Q && Q.position.distanceTo(E) < this.doublePressDistance) {
        const m = C.timeStamp - Q.time;
        m < this.doublePressLimitMs && (this.lastUp = null, this.doublePress({ position: E, intervalMs: m }));
      }
    };
    document.addEventListener("pointerup", B), document.addEventListener("pointercancel", B), document.addEventListener("pointermove", (C) => {
      var E, Q;
      ((E = this.rotating) == null ? void 0 : E.pointerId) === C.pointerId ? this.rotating.position = this.getPointerPosition(C) : ((Q = this.sliding) == null ? void 0 : Q.pointerId) === C.pointerId && (this.sliding.position = this.getPointerPosition(C));
    }), A.addEventListener("contextmenu", (C) => {
      C.preventDefault();
    }), A.addEventListener("wheel", (C) => {
      this.scroll.add(
        new u.Vector3(C.deltaX, C.deltaY, C.deltaZ)
      ), C.preventDefault();
    });
  }
  getPointerPosition(A) {
    const e = this.canvas.getBoundingClientRect();
    return new u.Vector2(
      A.clientX - e.left,
      A.clientY - e.top
    );
  }
  update(A, e) {
    if (!this.enable)
      return;
    if (this.dualPress && this.rotating && this.sliding) {
      const n = [
        this.rotating.position.clone().sub(this.rotating.last),
        this.sliding.position.clone().sub(this.sliding.last)
      ], i = n[0].dot(n[1]);
      if (i >= 0.2) {
        const r = n[0].clone().add(n[1]), a = new u.Vector3(r.x, -r.y, 0);
        a.multiplyScalar(this.slideSpeed * (this.reverseSwipe ? 1 : -1)), a.applyQuaternion(e.quaternion), e.position.add(a), this.moveVelocity = a.clone().multiplyScalar(1 / A);
      } else if (i <= -0.2) {
        const r = this.sliding.last.clone().sub(this.rotating.last), a = r.length();
        r.multiplyScalar(1 / a).normalize();
        const o = new u.Vector2(-r.y, r.x), g = [n[0].dot(r), n[1].dot(r)], l = [n[0].dot(o), n[1].dot(o)], c = this.rotating.last.clone().add(this.sliding.last).multiplyScalar(0.5);
        let I = new u.Vector3();
        if (e instanceof u.Camera) {
          const p = new u.Vector2(
            c.x / this.canvas.clientWidth * 2 - 1,
            -(c.y / this.canvas.clientHeight) * 2 + 1
          ), f = new u.Raycaster();
          f.setFromCamera(p, e), I = f.ray.direction;
        }
        const h = g[1] - g[0], B = I.multiplyScalar(h * this.slideSpeed);
        e.position.add(B), this.moveVelocity = B.clone().multiplyScalar(1 / A);
        const C = [
          Math.atan(l[0] / (-0.5 * a)),
          Math.atan(l[1] / (0.5 * a))
        ], E = 0.5 * (C[0] + C[1]) * this.pointerRollScale, Q = new u.Euler().setFromQuaternion(
          e.quaternion,
          "YXZ"
        );
        Q.z = Math.max(
          -Math.PI,
          Math.min(Math.PI, Q.z + 0.5 * E)
        ), e.quaternion.setFromEuler(Q);
      }
      this.rotating.last.copy(this.rotating.position), this.sliding.last.copy(this.sliding.position);
    } else {
      const n = new u.Vector3();
      if (this.rotating && !this.dualPress) {
        const r = this.rotating.position.clone().sub(this.rotating.last);
        this.rotating.last.copy(this.rotating.position), n.set(r.x, r.y, 0), n.multiplyScalar(this.rotateSpeed * (this.reverseRotate ? -1 : 1)), this.rotateVelocity = n.clone().multiplyScalar(1 / A);
      } else
        this.rotateVelocity.multiplyScalar(
          Math.exp(-A / this.rotateInertia)
        ), n.addScaledVector(this.rotateVelocity, A);
      const i = new u.Euler().setFromQuaternion(
        e.quaternion,
        "YXZ"
      );
      if (i.y -= n.x, i.x = Math.max(
        -Math.PI / 2,
        Math.min(Math.PI / 2, i.x - n.y)
      ), i.z *= Math.exp(-0 * A), e.quaternion.setFromEuler(i), this.sliding && !this.dualPress) {
        const r = this.sliding.position.clone().sub(this.sliding.last);
        this.sliding.last.copy(this.sliding.position);
        const a = this.sliding.button !== 2 ? new u.Vector3(r.x, 0, r.y) : new u.Vector3(r.x, -r.y, 0);
        a.multiplyScalar(this.slideSpeed * (this.reverseSlide ? -1 : 1)), a.applyQuaternion(e.quaternion), e.position.add(a), this.moveVelocity = a.clone().multiplyScalar(1 / A);
      } else
        this.moveVelocity.multiplyScalar(
          Math.exp(-A / this.moveInertia)
        ), e.position.addScaledVector(this.moveVelocity, A);
    }
    const s = this.scroll.multiplyScalar(this.scrollSpeed);
    s.set(s.x, s.z, s.y), this.reverseScroll && s.multiplyScalar(-1), s.applyQuaternion(e.quaternion), e.position.add(s), this.scroll.set(0, 0, 0);
  }
}
export {
  qh as FINGER_TIPS,
  xh as FpsMovement,
  Pe as HANDS,
  io as Hand,
  $h as HandMovement,
  no as JOINT_IDS,
  zh as JOINT_INDEX,
  se as JOINT_RADIUS,
  rh as JOINT_SEGMENTS,
  ah as JOINT_SEGMENT_STEPS,
  Hh as JOINT_TIPS,
  cs as JointEnum,
  UA as LN_SCALE_MAX,
  TA as LN_SCALE_MIN,
  Lh as NUM_JOINTS,
  KA as PackedSplats,
  Ie as PlyReader,
  Sh as PointerControls,
  ge as Readback,
  Wc as Sint8ToFloat,
  Vh as SparkControls,
  Ce as SparkRenderer,
  he as SparkViewpoint,
  Ne as SplatAccumulator,
  le as SplatEdit,
  cu as SplatEditRgbaBlendMode,
  lu as SplatEditSdf,
  au as SplatEditSdfType,
  Iu as SplatEdits,
  Jt as SplatFileType,
  Kt as SplatGenerator,
  Du as SplatLoader,
  OA as SplatMesh,
  hu as SplatModifier,
  kh as SplatSkinning,
  xt as SplatTransformer,
  Ku as SpzReader,
  et as SpzWriter,
  Xc as Uint8ToFloat,
  Ve as VRButton,
  Kh as XrHands,
  Uh as constructAxes,
  Th as constructGrid,
  Gh as constructSpherePoints,
  Mh as defines,
  bh as dyno,
  pg as flipPixels,
  ne as floatToSint8,
  bA as floatToUint8,
  mA as fromHalf,
  Jh as generators,
  Va as getSplatFileType,
  Yh as imageSplats,
  Eg as isAndroid,
  Bg as isMobile,
  Qg as isOculus,
  Fh as isPcSogs,
  _h as modifiers,
  fg as pixelsToPngUrl,
  Re as setPackedSplat,
  Rh as textSplats,
  Ct as toHalf,
  Nh as transcodeSpz,
  Ye as unpackSplat,
  Za as unpackSplats,
  vh as utils
};
//# sourceMappingURL=spark.module.min.js.map
