{"version":3,"file":"spark.module.min.js","sources":["../node_modules/three/examples/jsm/postprocessing/Pass.js","../node_modules/fflate/esm/browser.js","../rust/spark-internal-rs/pkg/spark_internal_rs.js","../src/defines.ts","../src/dyno/types.ts","../src/dyno/value.ts","../src/dyno/base.ts","../src/dyno/splats.ts","../src/dyno/output.ts","../src/dyno/uniforms.ts","../src/utils.ts","../src/dyno/program.ts","../src/dyno/mathTypes.ts","../src/dyno/math.ts","../src/dyno/logic.ts","../src/dyno/convert.ts","../src/dyno/vecmat.ts","../src/dyno/util.ts","../src/dyno/transform.ts","../src/dyno/control.ts","../src/dyno/texture.ts","../src/dyno/trig.ts","../src/shaders/computeVec4.glsl","../src/Readback.ts","../src/RgbaArray.ts","../src/SplatEdit.ts","../src/SplatGenerator.ts","../src/SplatMesh.ts","../src/ply.ts","../src/splatWorker.ts","../src/SplatLoader.ts","../src/shaders/computeUvec4.glsl","../src/PackedSplats.ts","../src/SplatGeometry.ts","../src/SparkViewpoint.ts","../src/SplatAccumulator.ts","../src/shaders/splatDefines.glsl","../src/shaders/splatFragment.glsl","../src/shaders/splatVertex.glsl","../src/shaders.ts","../src/SparkRenderer.ts","../src/antisplat.ts","../src/ksplat.ts","../src/spz.ts","../src/SplatSkinning.ts","../src/splatConstructors.ts","../src/generators/static.ts","../src/generators/snow.ts","../src/modifiers/normalColor.ts","../src/modifiers/depthColor.ts","../src/vrButton.ts","../src/hands.ts","../src/controls.ts"],"sourcesContent":["import {\n\tBufferGeometry,\n\tFloat32BufferAttribute,\n\tOrthographicCamera,\n\tMesh\n} from 'three';\n\nclass Pass {\n\n\tconstructor() {\n\n\t\tthis.isPass = true;\n\n\t\t// if set to true, the pass is processed by the composer\n\t\tthis.enabled = true;\n\n\t\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\t\tthis.needsSwap = true;\n\n\t\t// if set to true, the pass clears its buffer before rendering\n\t\tthis.clear = false;\n\n\t\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\t\tthis.renderToScreen = false;\n\n\t}\n\n\tsetSize( /* width, height */ ) {}\n\n\trender( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n\tdispose() {}\n\n}\n\n// Helper for passes that need to fill the viewport with a single quad.\n\nconst _camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\n// https://github.com/mrdoob/three.js/pull/21358\n\nclass FullscreenTriangleGeometry extends BufferGeometry {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( [ - 1, 3, 0, - 1, - 1, 0, 3, - 1, 0 ], 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( [ 0, 2, 0, 0, 2, 0 ], 2 ) );\n\n\t}\n\n}\n\nconst _geometry = new FullscreenTriangleGeometry();\n\nclass FullScreenQuad {\n\n\tconstructor( material ) {\n\n\t\tthis._mesh = new Mesh( _geometry, material );\n\n\t}\n\n\tdispose() {\n\n\t\tthis._mesh.geometry.dispose();\n\n\t}\n\n\trender( renderer ) {\n\n\t\trenderer.render( this._mesh, _camera );\n\n\t}\n\n\tget material() {\n\n\t\treturn this._mesh.material;\n\n\t}\n\n\tset material( value ) {\n\n\t\tthis._mesh.material = value;\n\n\t}\n\n}\n\nexport { Pass, FullScreenQuad };\n","// DEFLATE is a complex format; to read this code, you should probably check the RFC first:\n// https://tools.ietf.org/html/rfc1951\n// You may also wish to take a look at the guide I made about this program:\n// https://gist.github.com/101arrowz/253f31eb5abc3d9275ab943003ffecad\n// Some of the following code is similar to that of UZIP.js:\n// https://github.com/photopea/UZIP.js\n// However, the vast majority of the codebase has diverged from UZIP.js to increase performance and reduce bundle size.\n// Sometimes 0 will appear where -1 would be more appropriate. This is because using a uint\n// is better for memory in most engines (I *think*).\nvar ch2 = {};\nvar wk = (function (c, id, msg, transfer, cb) {\n    var w = new Worker(ch2[id] || (ch2[id] = URL.createObjectURL(new Blob([\n        c + ';addEventListener(\"error\",function(e){e=e.error;postMessage({$e$:[e.message,e.code,e.stack]})})'\n    ], { type: 'text/javascript' }))));\n    w.onmessage = function (e) {\n        var d = e.data, ed = d.$e$;\n        if (ed) {\n            var err = new Error(ed[0]);\n            err['code'] = ed[1];\n            err.stack = ed[2];\n            cb(err, null);\n        }\n        else\n            cb(null, d);\n    };\n    w.postMessage(msg, transfer);\n    return w;\n});\n\n// aliases for shorter compressed code (most minifers don't do this)\nvar u8 = Uint8Array, u16 = Uint16Array, i32 = Int32Array;\n// fixed length extra bits\nvar fleb = new u8([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, /* unused */ 0, 0, /* impossible */ 0]);\n// fixed distance extra bits\nvar fdeb = new u8([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, /* unused */ 0, 0]);\n// code length index map\nvar clim = new u8([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);\n// get base, reverse index map from extra bits\nvar freb = function (eb, start) {\n    var b = new u16(31);\n    for (var i = 0; i < 31; ++i) {\n        b[i] = start += 1 << eb[i - 1];\n    }\n    // numbers here are at max 18 bits\n    var r = new i32(b[30]);\n    for (var i = 1; i < 30; ++i) {\n        for (var j = b[i]; j < b[i + 1]; ++j) {\n            r[j] = ((j - b[i]) << 5) | i;\n        }\n    }\n    return { b: b, r: r };\n};\nvar _a = freb(fleb, 2), fl = _a.b, revfl = _a.r;\n// we can ignore the fact that the other numbers are wrong; they never happen anyway\nfl[28] = 258, revfl[258] = 28;\nvar _b = freb(fdeb, 0), fd = _b.b, revfd = _b.r;\n// map of value to reverse (assuming 16 bits)\nvar rev = new u16(32768);\nfor (var i = 0; i < 32768; ++i) {\n    // reverse table algorithm from SO\n    var x = ((i & 0xAAAA) >> 1) | ((i & 0x5555) << 1);\n    x = ((x & 0xCCCC) >> 2) | ((x & 0x3333) << 2);\n    x = ((x & 0xF0F0) >> 4) | ((x & 0x0F0F) << 4);\n    rev[i] = (((x & 0xFF00) >> 8) | ((x & 0x00FF) << 8)) >> 1;\n}\n// create huffman tree from u8 \"map\": index -> code length for code index\n// mb (max bits) must be at most 15\n// TODO: optimize/split up?\nvar hMap = (function (cd, mb, r) {\n    var s = cd.length;\n    // index\n    var i = 0;\n    // u16 \"map\": index -> # of codes with bit length = index\n    var l = new u16(mb);\n    // length of cd must be 288 (total # of codes)\n    for (; i < s; ++i) {\n        if (cd[i])\n            ++l[cd[i] - 1];\n    }\n    // u16 \"map\": index -> minimum code for bit length = index\n    var le = new u16(mb);\n    for (i = 1; i < mb; ++i) {\n        le[i] = (le[i - 1] + l[i - 1]) << 1;\n    }\n    var co;\n    if (r) {\n        // u16 \"map\": index -> number of actual bits, symbol for code\n        co = new u16(1 << mb);\n        // bits to remove for reverser\n        var rvb = 15 - mb;\n        for (i = 0; i < s; ++i) {\n            // ignore 0 lengths\n            if (cd[i]) {\n                // num encoding both symbol and bits read\n                var sv = (i << 4) | cd[i];\n                // free bits\n                var r_1 = mb - cd[i];\n                // start value\n                var v = le[cd[i] - 1]++ << r_1;\n                // m is end value\n                for (var m = v | ((1 << r_1) - 1); v <= m; ++v) {\n                    // every 16 bit value starting with the code yields the same result\n                    co[rev[v] >> rvb] = sv;\n                }\n            }\n        }\n    }\n    else {\n        co = new u16(s);\n        for (i = 0; i < s; ++i) {\n            if (cd[i]) {\n                co[i] = rev[le[cd[i] - 1]++] >> (15 - cd[i]);\n            }\n        }\n    }\n    return co;\n});\n// fixed length tree\nvar flt = new u8(288);\nfor (var i = 0; i < 144; ++i)\n    flt[i] = 8;\nfor (var i = 144; i < 256; ++i)\n    flt[i] = 9;\nfor (var i = 256; i < 280; ++i)\n    flt[i] = 7;\nfor (var i = 280; i < 288; ++i)\n    flt[i] = 8;\n// fixed distance tree\nvar fdt = new u8(32);\nfor (var i = 0; i < 32; ++i)\n    fdt[i] = 5;\n// fixed length map\nvar flm = /*#__PURE__*/ hMap(flt, 9, 0), flrm = /*#__PURE__*/ hMap(flt, 9, 1);\n// fixed distance map\nvar fdm = /*#__PURE__*/ hMap(fdt, 5, 0), fdrm = /*#__PURE__*/ hMap(fdt, 5, 1);\n// find max of array\nvar max = function (a) {\n    var m = a[0];\n    for (var i = 1; i < a.length; ++i) {\n        if (a[i] > m)\n            m = a[i];\n    }\n    return m;\n};\n// read d, starting at bit p and mask with m\nvar bits = function (d, p, m) {\n    var o = (p / 8) | 0;\n    return ((d[o] | (d[o + 1] << 8)) >> (p & 7)) & m;\n};\n// read d, starting at bit p continuing for at least 16 bits\nvar bits16 = function (d, p) {\n    var o = (p / 8) | 0;\n    return ((d[o] | (d[o + 1] << 8) | (d[o + 2] << 16)) >> (p & 7));\n};\n// get end of byte\nvar shft = function (p) { return ((p + 7) / 8) | 0; };\n// typed array slice - allows garbage collector to free original reference,\n// while being more compatible than .slice\nvar slc = function (v, s, e) {\n    if (s == null || s < 0)\n        s = 0;\n    if (e == null || e > v.length)\n        e = v.length;\n    // can't use .constructor in case user-supplied\n    return new u8(v.subarray(s, e));\n};\n/**\n * Codes for errors generated within this library\n */\nexport var FlateErrorCode = {\n    UnexpectedEOF: 0,\n    InvalidBlockType: 1,\n    InvalidLengthLiteral: 2,\n    InvalidDistance: 3,\n    StreamFinished: 4,\n    NoStreamHandler: 5,\n    InvalidHeader: 6,\n    NoCallback: 7,\n    InvalidUTF8: 8,\n    ExtraFieldTooLong: 9,\n    InvalidDate: 10,\n    FilenameTooLong: 11,\n    StreamFinishing: 12,\n    InvalidZipData: 13,\n    UnknownCompressionMethod: 14\n};\n// error codes\nvar ec = [\n    'unexpected EOF',\n    'invalid block type',\n    'invalid length/literal',\n    'invalid distance',\n    'stream finished',\n    'no stream handler',\n    ,\n    'no callback',\n    'invalid UTF-8 data',\n    'extra field too long',\n    'date not in range 1980-2099',\n    'filename too long',\n    'stream finishing',\n    'invalid zip data'\n    // determined by unknown compression method\n];\n;\nvar err = function (ind, msg, nt) {\n    var e = new Error(msg || ec[ind]);\n    e.code = ind;\n    if (Error.captureStackTrace)\n        Error.captureStackTrace(e, err);\n    if (!nt)\n        throw e;\n    return e;\n};\n// expands raw DEFLATE data\nvar inflt = function (dat, st, buf, dict) {\n    // source length       dict length\n    var sl = dat.length, dl = dict ? dict.length : 0;\n    if (!sl || st.f && !st.l)\n        return buf || new u8(0);\n    var noBuf = !buf;\n    // have to estimate size\n    var resize = noBuf || st.i != 2;\n    // no state\n    var noSt = st.i;\n    // Assumes roughly 33% compression ratio average\n    if (noBuf)\n        buf = new u8(sl * 3);\n    // ensure buffer can fit at least l elements\n    var cbuf = function (l) {\n        var bl = buf.length;\n        // need to increase size to fit\n        if (l > bl) {\n            // Double or set to necessary, whichever is greater\n            var nbuf = new u8(Math.max(bl * 2, l));\n            nbuf.set(buf);\n            buf = nbuf;\n        }\n    };\n    //  last chunk         bitpos           bytes\n    var final = st.f || 0, pos = st.p || 0, bt = st.b || 0, lm = st.l, dm = st.d, lbt = st.m, dbt = st.n;\n    // total bits\n    var tbts = sl * 8;\n    do {\n        if (!lm) {\n            // BFINAL - this is only 1 when last chunk is next\n            final = bits(dat, pos, 1);\n            // type: 0 = no compression, 1 = fixed huffman, 2 = dynamic huffman\n            var type = bits(dat, pos + 1, 3);\n            pos += 3;\n            if (!type) {\n                // go to end of byte boundary\n                var s = shft(pos) + 4, l = dat[s - 4] | (dat[s - 3] << 8), t = s + l;\n                if (t > sl) {\n                    if (noSt)\n                        err(0);\n                    break;\n                }\n                // ensure size\n                if (resize)\n                    cbuf(bt + l);\n                // Copy over uncompressed data\n                buf.set(dat.subarray(s, t), bt);\n                // Get new bitpos, update byte count\n                st.b = bt += l, st.p = pos = t * 8, st.f = final;\n                continue;\n            }\n            else if (type == 1)\n                lm = flrm, dm = fdrm, lbt = 9, dbt = 5;\n            else if (type == 2) {\n                //  literal                            lengths\n                var hLit = bits(dat, pos, 31) + 257, hcLen = bits(dat, pos + 10, 15) + 4;\n                var tl = hLit + bits(dat, pos + 5, 31) + 1;\n                pos += 14;\n                // length+distance tree\n                var ldt = new u8(tl);\n                // code length tree\n                var clt = new u8(19);\n                for (var i = 0; i < hcLen; ++i) {\n                    // use index map to get real code\n                    clt[clim[i]] = bits(dat, pos + i * 3, 7);\n                }\n                pos += hcLen * 3;\n                // code lengths bits\n                var clb = max(clt), clbmsk = (1 << clb) - 1;\n                // code lengths map\n                var clm = hMap(clt, clb, 1);\n                for (var i = 0; i < tl;) {\n                    var r = clm[bits(dat, pos, clbmsk)];\n                    // bits read\n                    pos += r & 15;\n                    // symbol\n                    var s = r >> 4;\n                    // code length to copy\n                    if (s < 16) {\n                        ldt[i++] = s;\n                    }\n                    else {\n                        //  copy   count\n                        var c = 0, n = 0;\n                        if (s == 16)\n                            n = 3 + bits(dat, pos, 3), pos += 2, c = ldt[i - 1];\n                        else if (s == 17)\n                            n = 3 + bits(dat, pos, 7), pos += 3;\n                        else if (s == 18)\n                            n = 11 + bits(dat, pos, 127), pos += 7;\n                        while (n--)\n                            ldt[i++] = c;\n                    }\n                }\n                //    length tree                 distance tree\n                var lt = ldt.subarray(0, hLit), dt = ldt.subarray(hLit);\n                // max length bits\n                lbt = max(lt);\n                // max dist bits\n                dbt = max(dt);\n                lm = hMap(lt, lbt, 1);\n                dm = hMap(dt, dbt, 1);\n            }\n            else\n                err(1);\n            if (pos > tbts) {\n                if (noSt)\n                    err(0);\n                break;\n            }\n        }\n        // Make sure the buffer can hold this + the largest possible addition\n        // Maximum chunk size (practically, theoretically infinite) is 2^17\n        if (resize)\n            cbuf(bt + 131072);\n        var lms = (1 << lbt) - 1, dms = (1 << dbt) - 1;\n        var lpos = pos;\n        for (;; lpos = pos) {\n            // bits read, code\n            var c = lm[bits16(dat, pos) & lms], sym = c >> 4;\n            pos += c & 15;\n            if (pos > tbts) {\n                if (noSt)\n                    err(0);\n                break;\n            }\n            if (!c)\n                err(2);\n            if (sym < 256)\n                buf[bt++] = sym;\n            else if (sym == 256) {\n                lpos = pos, lm = null;\n                break;\n            }\n            else {\n                var add = sym - 254;\n                // no extra bits needed if less\n                if (sym > 264) {\n                    // index\n                    var i = sym - 257, b = fleb[i];\n                    add = bits(dat, pos, (1 << b) - 1) + fl[i];\n                    pos += b;\n                }\n                // dist\n                var d = dm[bits16(dat, pos) & dms], dsym = d >> 4;\n                if (!d)\n                    err(3);\n                pos += d & 15;\n                var dt = fd[dsym];\n                if (dsym > 3) {\n                    var b = fdeb[dsym];\n                    dt += bits16(dat, pos) & (1 << b) - 1, pos += b;\n                }\n                if (pos > tbts) {\n                    if (noSt)\n                        err(0);\n                    break;\n                }\n                if (resize)\n                    cbuf(bt + 131072);\n                var end = bt + add;\n                if (bt < dt) {\n                    var shift = dl - dt, dend = Math.min(dt, end);\n                    if (shift + bt < 0)\n                        err(3);\n                    for (; bt < dend; ++bt)\n                        buf[bt] = dict[shift + bt];\n                }\n                for (; bt < end; ++bt)\n                    buf[bt] = buf[bt - dt];\n            }\n        }\n        st.l = lm, st.p = lpos, st.b = bt, st.f = final;\n        if (lm)\n            final = 1, st.m = lbt, st.d = dm, st.n = dbt;\n    } while (!final);\n    // don't reallocate for streams or user buffers\n    return bt != buf.length && noBuf ? slc(buf, 0, bt) : buf.subarray(0, bt);\n};\n// starting at p, write the minimum number of bits that can hold v to d\nvar wbits = function (d, p, v) {\n    v <<= p & 7;\n    var o = (p / 8) | 0;\n    d[o] |= v;\n    d[o + 1] |= v >> 8;\n};\n// starting at p, write the minimum number of bits (>8) that can hold v to d\nvar wbits16 = function (d, p, v) {\n    v <<= p & 7;\n    var o = (p / 8) | 0;\n    d[o] |= v;\n    d[o + 1] |= v >> 8;\n    d[o + 2] |= v >> 16;\n};\n// creates code lengths from a frequency table\nvar hTree = function (d, mb) {\n    // Need extra info to make a tree\n    var t = [];\n    for (var i = 0; i < d.length; ++i) {\n        if (d[i])\n            t.push({ s: i, f: d[i] });\n    }\n    var s = t.length;\n    var t2 = t.slice();\n    if (!s)\n        return { t: et, l: 0 };\n    if (s == 1) {\n        var v = new u8(t[0].s + 1);\n        v[t[0].s] = 1;\n        return { t: v, l: 1 };\n    }\n    t.sort(function (a, b) { return a.f - b.f; });\n    // after i2 reaches last ind, will be stopped\n    // freq must be greater than largest possible number of symbols\n    t.push({ s: -1, f: 25001 });\n    var l = t[0], r = t[1], i0 = 0, i1 = 1, i2 = 2;\n    t[0] = { s: -1, f: l.f + r.f, l: l, r: r };\n    // efficient algorithm from UZIP.js\n    // i0 is lookbehind, i2 is lookahead - after processing two low-freq\n    // symbols that combined have high freq, will start processing i2 (high-freq,\n    // non-composite) symbols instead\n    // see https://reddit.com/r/photopea/comments/ikekht/uzipjs_questions/\n    while (i1 != s - 1) {\n        l = t[t[i0].f < t[i2].f ? i0++ : i2++];\n        r = t[i0 != i1 && t[i0].f < t[i2].f ? i0++ : i2++];\n        t[i1++] = { s: -1, f: l.f + r.f, l: l, r: r };\n    }\n    var maxSym = t2[0].s;\n    for (var i = 1; i < s; ++i) {\n        if (t2[i].s > maxSym)\n            maxSym = t2[i].s;\n    }\n    // code lengths\n    var tr = new u16(maxSym + 1);\n    // max bits in tree\n    var mbt = ln(t[i1 - 1], tr, 0);\n    if (mbt > mb) {\n        // more algorithms from UZIP.js\n        // TODO: find out how this code works (debt)\n        //  ind    debt\n        var i = 0, dt = 0;\n        //    left            cost\n        var lft = mbt - mb, cst = 1 << lft;\n        t2.sort(function (a, b) { return tr[b.s] - tr[a.s] || a.f - b.f; });\n        for (; i < s; ++i) {\n            var i2_1 = t2[i].s;\n            if (tr[i2_1] > mb) {\n                dt += cst - (1 << (mbt - tr[i2_1]));\n                tr[i2_1] = mb;\n            }\n            else\n                break;\n        }\n        dt >>= lft;\n        while (dt > 0) {\n            var i2_2 = t2[i].s;\n            if (tr[i2_2] < mb)\n                dt -= 1 << (mb - tr[i2_2]++ - 1);\n            else\n                ++i;\n        }\n        for (; i >= 0 && dt; --i) {\n            var i2_3 = t2[i].s;\n            if (tr[i2_3] == mb) {\n                --tr[i2_3];\n                ++dt;\n            }\n        }\n        mbt = mb;\n    }\n    return { t: new u8(tr), l: mbt };\n};\n// get the max length and assign length codes\nvar ln = function (n, l, d) {\n    return n.s == -1\n        ? Math.max(ln(n.l, l, d + 1), ln(n.r, l, d + 1))\n        : (l[n.s] = d);\n};\n// length codes generation\nvar lc = function (c) {\n    var s = c.length;\n    // Note that the semicolon was intentional\n    while (s && !c[--s])\n        ;\n    var cl = new u16(++s);\n    //  ind      num         streak\n    var cli = 0, cln = c[0], cls = 1;\n    var w = function (v) { cl[cli++] = v; };\n    for (var i = 1; i <= s; ++i) {\n        if (c[i] == cln && i != s)\n            ++cls;\n        else {\n            if (!cln && cls > 2) {\n                for (; cls > 138; cls -= 138)\n                    w(32754);\n                if (cls > 2) {\n                    w(cls > 10 ? ((cls - 11) << 5) | 28690 : ((cls - 3) << 5) | 12305);\n                    cls = 0;\n                }\n            }\n            else if (cls > 3) {\n                w(cln), --cls;\n                for (; cls > 6; cls -= 6)\n                    w(8304);\n                if (cls > 2)\n                    w(((cls - 3) << 5) | 8208), cls = 0;\n            }\n            while (cls--)\n                w(cln);\n            cls = 1;\n            cln = c[i];\n        }\n    }\n    return { c: cl.subarray(0, cli), n: s };\n};\n// calculate the length of output from tree, code lengths\nvar clen = function (cf, cl) {\n    var l = 0;\n    for (var i = 0; i < cl.length; ++i)\n        l += cf[i] * cl[i];\n    return l;\n};\n// writes a fixed block\n// returns the new bit pos\nvar wfblk = function (out, pos, dat) {\n    // no need to write 00 as type: TypedArray defaults to 0\n    var s = dat.length;\n    var o = shft(pos + 2);\n    out[o] = s & 255;\n    out[o + 1] = s >> 8;\n    out[o + 2] = out[o] ^ 255;\n    out[o + 3] = out[o + 1] ^ 255;\n    for (var i = 0; i < s; ++i)\n        out[o + i + 4] = dat[i];\n    return (o + 4 + s) * 8;\n};\n// writes a block\nvar wblk = function (dat, out, final, syms, lf, df, eb, li, bs, bl, p) {\n    wbits(out, p++, final);\n    ++lf[256];\n    var _a = hTree(lf, 15), dlt = _a.t, mlb = _a.l;\n    var _b = hTree(df, 15), ddt = _b.t, mdb = _b.l;\n    var _c = lc(dlt), lclt = _c.c, nlc = _c.n;\n    var _d = lc(ddt), lcdt = _d.c, ndc = _d.n;\n    var lcfreq = new u16(19);\n    for (var i = 0; i < lclt.length; ++i)\n        ++lcfreq[lclt[i] & 31];\n    for (var i = 0; i < lcdt.length; ++i)\n        ++lcfreq[lcdt[i] & 31];\n    var _e = hTree(lcfreq, 7), lct = _e.t, mlcb = _e.l;\n    var nlcc = 19;\n    for (; nlcc > 4 && !lct[clim[nlcc - 1]]; --nlcc)\n        ;\n    var flen = (bl + 5) << 3;\n    var ftlen = clen(lf, flt) + clen(df, fdt) + eb;\n    var dtlen = clen(lf, dlt) + clen(df, ddt) + eb + 14 + 3 * nlcc + clen(lcfreq, lct) + 2 * lcfreq[16] + 3 * lcfreq[17] + 7 * lcfreq[18];\n    if (bs >= 0 && flen <= ftlen && flen <= dtlen)\n        return wfblk(out, p, dat.subarray(bs, bs + bl));\n    var lm, ll, dm, dl;\n    wbits(out, p, 1 + (dtlen < ftlen)), p += 2;\n    if (dtlen < ftlen) {\n        lm = hMap(dlt, mlb, 0), ll = dlt, dm = hMap(ddt, mdb, 0), dl = ddt;\n        var llm = hMap(lct, mlcb, 0);\n        wbits(out, p, nlc - 257);\n        wbits(out, p + 5, ndc - 1);\n        wbits(out, p + 10, nlcc - 4);\n        p += 14;\n        for (var i = 0; i < nlcc; ++i)\n            wbits(out, p + 3 * i, lct[clim[i]]);\n        p += 3 * nlcc;\n        var lcts = [lclt, lcdt];\n        for (var it = 0; it < 2; ++it) {\n            var clct = lcts[it];\n            for (var i = 0; i < clct.length; ++i) {\n                var len = clct[i] & 31;\n                wbits(out, p, llm[len]), p += lct[len];\n                if (len > 15)\n                    wbits(out, p, (clct[i] >> 5) & 127), p += clct[i] >> 12;\n            }\n        }\n    }\n    else {\n        lm = flm, ll = flt, dm = fdm, dl = fdt;\n    }\n    for (var i = 0; i < li; ++i) {\n        var sym = syms[i];\n        if (sym > 255) {\n            var len = (sym >> 18) & 31;\n            wbits16(out, p, lm[len + 257]), p += ll[len + 257];\n            if (len > 7)\n                wbits(out, p, (sym >> 23) & 31), p += fleb[len];\n            var dst = sym & 31;\n            wbits16(out, p, dm[dst]), p += dl[dst];\n            if (dst > 3)\n                wbits16(out, p, (sym >> 5) & 8191), p += fdeb[dst];\n        }\n        else {\n            wbits16(out, p, lm[sym]), p += ll[sym];\n        }\n    }\n    wbits16(out, p, lm[256]);\n    return p + ll[256];\n};\n// deflate options (nice << 13) | chain\nvar deo = /*#__PURE__*/ new i32([65540, 131080, 131088, 131104, 262176, 1048704, 1048832, 2114560, 2117632]);\n// empty\nvar et = /*#__PURE__*/ new u8(0);\n// compresses data into a raw DEFLATE buffer\nvar dflt = function (dat, lvl, plvl, pre, post, st) {\n    var s = st.z || dat.length;\n    var o = new u8(pre + s + 5 * (1 + Math.ceil(s / 7000)) + post);\n    // writing to this writes to the output buffer\n    var w = o.subarray(pre, o.length - post);\n    var lst = st.l;\n    var pos = (st.r || 0) & 7;\n    if (lvl) {\n        if (pos)\n            w[0] = st.r >> 3;\n        var opt = deo[lvl - 1];\n        var n = opt >> 13, c = opt & 8191;\n        var msk_1 = (1 << plvl) - 1;\n        //    prev 2-byte val map    curr 2-byte val map\n        var prev = st.p || new u16(32768), head = st.h || new u16(msk_1 + 1);\n        var bs1_1 = Math.ceil(plvl / 3), bs2_1 = 2 * bs1_1;\n        var hsh = function (i) { return (dat[i] ^ (dat[i + 1] << bs1_1) ^ (dat[i + 2] << bs2_1)) & msk_1; };\n        // 24576 is an arbitrary number of maximum symbols per block\n        // 424 buffer for last block\n        var syms = new i32(25000);\n        // length/literal freq   distance freq\n        var lf = new u16(288), df = new u16(32);\n        //  l/lcnt  exbits  index          l/lind  waitdx          blkpos\n        var lc_1 = 0, eb = 0, i = st.i || 0, li = 0, wi = st.w || 0, bs = 0;\n        for (; i + 2 < s; ++i) {\n            // hash value\n            var hv = hsh(i);\n            // index mod 32768    previous index mod\n            var imod = i & 32767, pimod = head[hv];\n            prev[imod] = pimod;\n            head[hv] = imod;\n            // We always should modify head and prev, but only add symbols if\n            // this data is not yet processed (\"wait\" for wait index)\n            if (wi <= i) {\n                // bytes remaining\n                var rem = s - i;\n                if ((lc_1 > 7000 || li > 24576) && (rem > 423 || !lst)) {\n                    pos = wblk(dat, w, 0, syms, lf, df, eb, li, bs, i - bs, pos);\n                    li = lc_1 = eb = 0, bs = i;\n                    for (var j = 0; j < 286; ++j)\n                        lf[j] = 0;\n                    for (var j = 0; j < 30; ++j)\n                        df[j] = 0;\n                }\n                //  len    dist   chain\n                var l = 2, d = 0, ch_1 = c, dif = imod - pimod & 32767;\n                if (rem > 2 && hv == hsh(i - dif)) {\n                    var maxn = Math.min(n, rem) - 1;\n                    var maxd = Math.min(32767, i);\n                    // max possible length\n                    // not capped at dif because decompressors implement \"rolling\" index population\n                    var ml = Math.min(258, rem);\n                    while (dif <= maxd && --ch_1 && imod != pimod) {\n                        if (dat[i + l] == dat[i + l - dif]) {\n                            var nl = 0;\n                            for (; nl < ml && dat[i + nl] == dat[i + nl - dif]; ++nl)\n                                ;\n                            if (nl > l) {\n                                l = nl, d = dif;\n                                // break out early when we reach \"nice\" (we are satisfied enough)\n                                if (nl > maxn)\n                                    break;\n                                // now, find the rarest 2-byte sequence within this\n                                // length of literals and search for that instead.\n                                // Much faster than just using the start\n                                var mmd = Math.min(dif, nl - 2);\n                                var md = 0;\n                                for (var j = 0; j < mmd; ++j) {\n                                    var ti = i - dif + j & 32767;\n                                    var pti = prev[ti];\n                                    var cd = ti - pti & 32767;\n                                    if (cd > md)\n                                        md = cd, pimod = ti;\n                                }\n                            }\n                        }\n                        // check the previous match\n                        imod = pimod, pimod = prev[imod];\n                        dif += imod - pimod & 32767;\n                    }\n                }\n                // d will be nonzero only when a match was found\n                if (d) {\n                    // store both dist and len data in one int32\n                    // Make sure this is recognized as a len/dist with 28th bit (2^28)\n                    syms[li++] = 268435456 | (revfl[l] << 18) | revfd[d];\n                    var lin = revfl[l] & 31, din = revfd[d] & 31;\n                    eb += fleb[lin] + fdeb[din];\n                    ++lf[257 + lin];\n                    ++df[din];\n                    wi = i + l;\n                    ++lc_1;\n                }\n                else {\n                    syms[li++] = dat[i];\n                    ++lf[dat[i]];\n                }\n            }\n        }\n        for (i = Math.max(i, wi); i < s; ++i) {\n            syms[li++] = dat[i];\n            ++lf[dat[i]];\n        }\n        pos = wblk(dat, w, lst, syms, lf, df, eb, li, bs, i - bs, pos);\n        if (!lst) {\n            st.r = (pos & 7) | w[(pos / 8) | 0] << 3;\n            // shft(pos) now 1 less if pos & 7 != 0\n            pos -= 7;\n            st.h = head, st.p = prev, st.i = i, st.w = wi;\n        }\n    }\n    else {\n        for (var i = st.w || 0; i < s + lst; i += 65535) {\n            // end\n            var e = i + 65535;\n            if (e >= s) {\n                // write final block\n                w[(pos / 8) | 0] = lst;\n                e = s;\n            }\n            pos = wfblk(w, pos + 1, dat.subarray(i, e));\n        }\n        st.i = s;\n    }\n    return slc(o, 0, pre + shft(pos) + post);\n};\n// CRC32 table\nvar crct = /*#__PURE__*/ (function () {\n    var t = new Int32Array(256);\n    for (var i = 0; i < 256; ++i) {\n        var c = i, k = 9;\n        while (--k)\n            c = ((c & 1) && -306674912) ^ (c >>> 1);\n        t[i] = c;\n    }\n    return t;\n})();\n// CRC32\nvar crc = function () {\n    var c = -1;\n    return {\n        p: function (d) {\n            // closures have awful performance\n            var cr = c;\n            for (var i = 0; i < d.length; ++i)\n                cr = crct[(cr & 255) ^ d[i]] ^ (cr >>> 8);\n            c = cr;\n        },\n        d: function () { return ~c; }\n    };\n};\n// Adler32\nvar adler = function () {\n    var a = 1, b = 0;\n    return {\n        p: function (d) {\n            // closures have awful performance\n            var n = a, m = b;\n            var l = d.length | 0;\n            for (var i = 0; i != l;) {\n                var e = Math.min(i + 2655, l);\n                for (; i < e; ++i)\n                    m += n += d[i];\n                n = (n & 65535) + 15 * (n >> 16), m = (m & 65535) + 15 * (m >> 16);\n            }\n            a = n, b = m;\n        },\n        d: function () {\n            a %= 65521, b %= 65521;\n            return (a & 255) << 24 | (a & 0xFF00) << 8 | (b & 255) << 8 | (b >> 8);\n        }\n    };\n};\n;\n// deflate with opts\nvar dopt = function (dat, opt, pre, post, st) {\n    if (!st) {\n        st = { l: 1 };\n        if (opt.dictionary) {\n            var dict = opt.dictionary.subarray(-32768);\n            var newDat = new u8(dict.length + dat.length);\n            newDat.set(dict);\n            newDat.set(dat, dict.length);\n            dat = newDat;\n            st.w = dict.length;\n        }\n    }\n    return dflt(dat, opt.level == null ? 6 : opt.level, opt.mem == null ? (st.l ? Math.ceil(Math.max(8, Math.min(13, Math.log(dat.length))) * 1.5) : 20) : (12 + opt.mem), pre, post, st);\n};\n// Walmart object spread\nvar mrg = function (a, b) {\n    var o = {};\n    for (var k in a)\n        o[k] = a[k];\n    for (var k in b)\n        o[k] = b[k];\n    return o;\n};\n// worker clone\n// This is possibly the craziest part of the entire codebase, despite how simple it may seem.\n// The only parameter to this function is a closure that returns an array of variables outside of the function scope.\n// We're going to try to figure out the variable names used in the closure as strings because that is crucial for workerization.\n// We will return an object mapping of true variable name to value (basically, the current scope as a JS object).\n// The reason we can't just use the original variable names is minifiers mangling the toplevel scope.\n// This took me three weeks to figure out how to do.\nvar wcln = function (fn, fnStr, td) {\n    var dt = fn();\n    var st = fn.toString();\n    var ks = st.slice(st.indexOf('[') + 1, st.lastIndexOf(']')).replace(/\\s+/g, '').split(',');\n    for (var i = 0; i < dt.length; ++i) {\n        var v = dt[i], k = ks[i];\n        if (typeof v == 'function') {\n            fnStr += ';' + k + '=';\n            var st_1 = v.toString();\n            if (v.prototype) {\n                // for global objects\n                if (st_1.indexOf('[native code]') != -1) {\n                    var spInd = st_1.indexOf(' ', 8) + 1;\n                    fnStr += st_1.slice(spInd, st_1.indexOf('(', spInd));\n                }\n                else {\n                    fnStr += st_1;\n                    for (var t in v.prototype)\n                        fnStr += ';' + k + '.prototype.' + t + '=' + v.prototype[t].toString();\n                }\n            }\n            else\n                fnStr += st_1;\n        }\n        else\n            td[k] = v;\n    }\n    return fnStr;\n};\nvar ch = [];\n// clone bufs\nvar cbfs = function (v) {\n    var tl = [];\n    for (var k in v) {\n        if (v[k].buffer) {\n            tl.push((v[k] = new v[k].constructor(v[k])).buffer);\n        }\n    }\n    return tl;\n};\n// use a worker to execute code\nvar wrkr = function (fns, init, id, cb) {\n    if (!ch[id]) {\n        var fnStr = '', td_1 = {}, m = fns.length - 1;\n        for (var i = 0; i < m; ++i)\n            fnStr = wcln(fns[i], fnStr, td_1);\n        ch[id] = { c: wcln(fns[m], fnStr, td_1), e: td_1 };\n    }\n    var td = mrg({}, ch[id].e);\n    return wk(ch[id].c + ';onmessage=function(e){for(var k in e.data)self[k]=e.data[k];onmessage=' + init.toString() + '}', id, td, cbfs(td), cb);\n};\n// base async inflate fn\nvar bInflt = function () { return [u8, u16, i32, fleb, fdeb, clim, fl, fd, flrm, fdrm, rev, ec, hMap, max, bits, bits16, shft, slc, err, inflt, inflateSync, pbf, gopt]; };\nvar bDflt = function () { return [u8, u16, i32, fleb, fdeb, clim, revfl, revfd, flm, flt, fdm, fdt, rev, deo, et, hMap, wbits, wbits16, hTree, ln, lc, clen, wfblk, wblk, shft, slc, dflt, dopt, deflateSync, pbf]; };\n// gzip extra\nvar gze = function () { return [gzh, gzhl, wbytes, crc, crct]; };\n// gunzip extra\nvar guze = function () { return [gzs, gzl]; };\n// zlib extra\nvar zle = function () { return [zlh, wbytes, adler]; };\n// unzlib extra\nvar zule = function () { return [zls]; };\n// post buf\nvar pbf = function (msg) { return postMessage(msg, [msg.buffer]); };\n// get opts\nvar gopt = function (o) { return o && {\n    out: o.size && new u8(o.size),\n    dictionary: o.dictionary\n}; };\n// async helper\nvar cbify = function (dat, opts, fns, init, id, cb) {\n    var w = wrkr(fns, init, id, function (err, dat) {\n        w.terminate();\n        cb(err, dat);\n    });\n    w.postMessage([dat, opts], opts.consume ? [dat.buffer] : []);\n    return function () { w.terminate(); };\n};\n// auto stream\nvar astrm = function (strm) {\n    strm.ondata = function (dat, final) { return postMessage([dat, final], [dat.buffer]); };\n    return function (ev) {\n        if (ev.data.length) {\n            strm.push(ev.data[0], ev.data[1]);\n            postMessage([ev.data[0].length]);\n        }\n        else\n            strm.flush();\n    };\n};\n// async stream attach\nvar astrmify = function (fns, strm, opts, init, id, flush, ext) {\n    var t;\n    var w = wrkr(fns, init, id, function (err, dat) {\n        if (err)\n            w.terminate(), strm.ondata.call(strm, err);\n        else if (!Array.isArray(dat))\n            ext(dat);\n        else if (dat.length == 1) {\n            strm.queuedSize -= dat[0];\n            if (strm.ondrain)\n                strm.ondrain(dat[0]);\n        }\n        else {\n            if (dat[1])\n                w.terminate();\n            strm.ondata.call(strm, err, dat[0], dat[1]);\n        }\n    });\n    w.postMessage(opts);\n    strm.queuedSize = 0;\n    strm.push = function (d, f) {\n        if (!strm.ondata)\n            err(5);\n        if (t)\n            strm.ondata(err(4, 0, 1), null, !!f);\n        strm.queuedSize += d.length;\n        w.postMessage([d, t = f], [d.buffer]);\n    };\n    strm.terminate = function () { w.terminate(); };\n    if (flush) {\n        strm.flush = function () { w.postMessage([]); };\n    }\n};\n// read 2 bytes\nvar b2 = function (d, b) { return d[b] | (d[b + 1] << 8); };\n// read 4 bytes\nvar b4 = function (d, b) { return (d[b] | (d[b + 1] << 8) | (d[b + 2] << 16) | (d[b + 3] << 24)) >>> 0; };\nvar b8 = function (d, b) { return b4(d, b) + (b4(d, b + 4) * 4294967296); };\n// write bytes\nvar wbytes = function (d, b, v) {\n    for (; v; ++b)\n        d[b] = v, v >>>= 8;\n};\n// gzip header\nvar gzh = function (c, o) {\n    var fn = o.filename;\n    c[0] = 31, c[1] = 139, c[2] = 8, c[8] = o.level < 2 ? 4 : o.level == 9 ? 2 : 0, c[9] = 3; // assume Unix\n    if (o.mtime != 0)\n        wbytes(c, 4, Math.floor(new Date(o.mtime || Date.now()) / 1000));\n    if (fn) {\n        c[3] = 8;\n        for (var i = 0; i <= fn.length; ++i)\n            c[i + 10] = fn.charCodeAt(i);\n    }\n};\n// gzip footer: -8 to -4 = CRC, -4 to -0 is length\n// gzip start\nvar gzs = function (d) {\n    if (d[0] != 31 || d[1] != 139 || d[2] != 8)\n        err(6, 'invalid gzip data');\n    var flg = d[3];\n    var st = 10;\n    if (flg & 4)\n        st += (d[10] | d[11] << 8) + 2;\n    for (var zs = (flg >> 3 & 1) + (flg >> 4 & 1); zs > 0; zs -= !d[st++])\n        ;\n    return st + (flg & 2);\n};\n// gzip length\nvar gzl = function (d) {\n    var l = d.length;\n    return (d[l - 4] | d[l - 3] << 8 | d[l - 2] << 16 | d[l - 1] << 24) >>> 0;\n};\n// gzip header length\nvar gzhl = function (o) { return 10 + (o.filename ? o.filename.length + 1 : 0); };\n// zlib header\nvar zlh = function (c, o) {\n    var lv = o.level, fl = lv == 0 ? 0 : lv < 6 ? 1 : lv == 9 ? 3 : 2;\n    c[0] = 120, c[1] = (fl << 6) | (o.dictionary && 32);\n    c[1] |= 31 - ((c[0] << 8) | c[1]) % 31;\n    if (o.dictionary) {\n        var h = adler();\n        h.p(o.dictionary);\n        wbytes(c, 2, h.d());\n    }\n};\n// zlib start\nvar zls = function (d, dict) {\n    if ((d[0] & 15) != 8 || (d[0] >> 4) > 7 || ((d[0] << 8 | d[1]) % 31))\n        err(6, 'invalid zlib data');\n    if ((d[1] >> 5 & 1) == +!dict)\n        err(6, 'invalid zlib data: ' + (d[1] & 32 ? 'need' : 'unexpected') + ' dictionary');\n    return (d[1] >> 3 & 4) + 2;\n};\nfunction StrmOpt(opts, cb) {\n    if (typeof opts == 'function')\n        cb = opts, opts = {};\n    this.ondata = cb;\n    return opts;\n}\n/**\n * Streaming DEFLATE compression\n */\nvar Deflate = /*#__PURE__*/ (function () {\n    function Deflate(opts, cb) {\n        if (typeof opts == 'function')\n            cb = opts, opts = {};\n        this.ondata = cb;\n        this.o = opts || {};\n        this.s = { l: 0, i: 32768, w: 32768, z: 32768 };\n        // Buffer length must always be 0 mod 32768 for index calculations to be correct when modifying head and prev\n        // 98304 = 32768 (lookback) + 65536 (common chunk size)\n        this.b = new u8(98304);\n        if (this.o.dictionary) {\n            var dict = this.o.dictionary.subarray(-32768);\n            this.b.set(dict, 32768 - dict.length);\n            this.s.i = 32768 - dict.length;\n        }\n    }\n    Deflate.prototype.p = function (c, f) {\n        this.ondata(dopt(c, this.o, 0, 0, this.s), f);\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Deflate.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (this.s.l)\n            err(4);\n        var endLen = chunk.length + this.s.z;\n        if (endLen > this.b.length) {\n            if (endLen > 2 * this.b.length - 32768) {\n                var newBuf = new u8(endLen & -32768);\n                newBuf.set(this.b.subarray(0, this.s.z));\n                this.b = newBuf;\n            }\n            var split = this.b.length - this.s.z;\n            this.b.set(chunk.subarray(0, split), this.s.z);\n            this.s.z = this.b.length;\n            this.p(this.b, false);\n            this.b.set(this.b.subarray(-32768));\n            this.b.set(chunk.subarray(split), 32768);\n            this.s.z = chunk.length - split + 32768;\n            this.s.i = 32766, this.s.w = 32768;\n        }\n        else {\n            this.b.set(chunk, this.s.z);\n            this.s.z += chunk.length;\n        }\n        this.s.l = final & 1;\n        if (this.s.z > this.s.w + 8191 || final) {\n            this.p(this.b, final || false);\n            this.s.w = this.s.i, this.s.i -= 2;\n        }\n    };\n    /**\n     * Flushes buffered uncompressed data. Useful to immediately retrieve the\n     * deflated output for small inputs.\n     */\n    Deflate.prototype.flush = function () {\n        if (!this.ondata)\n            err(5);\n        if (this.s.l)\n            err(4);\n        this.p(this.b, false);\n        this.s.w = this.s.i, this.s.i -= 2;\n    };\n    return Deflate;\n}());\nexport { Deflate };\n/**\n * Asynchronous streaming DEFLATE compression\n */\nvar AsyncDeflate = /*#__PURE__*/ (function () {\n    function AsyncDeflate(opts, cb) {\n        astrmify([\n            bDflt,\n            function () { return [astrm, Deflate]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Deflate(ev.data);\n            onmessage = astrm(strm);\n        }, 6, 1);\n    }\n    return AsyncDeflate;\n}());\nexport { AsyncDeflate };\nexport function deflate(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n    ], function (ev) { return pbf(deflateSync(ev.data[0], ev.data[1])); }, 0, cb);\n}\n/**\n * Compresses data with DEFLATE without any wrapper\n * @param data The data to compress\n * @param opts The compression options\n * @returns The deflated version of the data\n */\nexport function deflateSync(data, opts) {\n    return dopt(data, opts || {}, 0, 0);\n}\n/**\n * Streaming DEFLATE decompression\n */\nvar Inflate = /*#__PURE__*/ (function () {\n    function Inflate(opts, cb) {\n        // no StrmOpt here to avoid adding to workerizer\n        if (typeof opts == 'function')\n            cb = opts, opts = {};\n        this.ondata = cb;\n        var dict = opts && opts.dictionary && opts.dictionary.subarray(-32768);\n        this.s = { i: 0, b: dict ? dict.length : 0 };\n        this.o = new u8(32768);\n        this.p = new u8(0);\n        if (dict)\n            this.o.set(dict);\n    }\n    Inflate.prototype.e = function (c) {\n        if (!this.ondata)\n            err(5);\n        if (this.d)\n            err(4);\n        if (!this.p.length)\n            this.p = c;\n        else if (c.length) {\n            var n = new u8(this.p.length + c.length);\n            n.set(this.p), n.set(c, this.p.length), this.p = n;\n        }\n    };\n    Inflate.prototype.c = function (final) {\n        this.s.i = +(this.d = final || false);\n        var bts = this.s.b;\n        var dt = inflt(this.p, this.s, this.o);\n        this.ondata(slc(dt, bts, this.s.b), this.d);\n        this.o = slc(dt, this.s.b - 32768), this.s.b = this.o.length;\n        this.p = slc(this.p, (this.s.p / 8) | 0), this.s.p &= 7;\n    };\n    /**\n     * Pushes a chunk to be inflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the final chunk\n     */\n    Inflate.prototype.push = function (chunk, final) {\n        this.e(chunk), this.c(final);\n    };\n    return Inflate;\n}());\nexport { Inflate };\n/**\n * Asynchronous streaming DEFLATE decompression\n */\nvar AsyncInflate = /*#__PURE__*/ (function () {\n    function AsyncInflate(opts, cb) {\n        astrmify([\n            bInflt,\n            function () { return [astrm, Inflate]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Inflate(ev.data);\n            onmessage = astrm(strm);\n        }, 7, 0);\n    }\n    return AsyncInflate;\n}());\nexport { AsyncInflate };\nexport function inflate(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt\n    ], function (ev) { return pbf(inflateSync(ev.data[0], gopt(ev.data[1]))); }, 1, cb);\n}\n/**\n * Expands DEFLATE data with no wrapper\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nexport function inflateSync(data, opts) {\n    return inflt(data, { i: 2 }, opts && opts.out, opts && opts.dictionary);\n}\n// before you yell at me for not just using extends, my reason is that TS inheritance is hard to workerize.\n/**\n * Streaming GZIP compression\n */\nvar Gzip = /*#__PURE__*/ (function () {\n    function Gzip(opts, cb) {\n        this.c = crc();\n        this.l = 0;\n        this.v = 1;\n        Deflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be GZIPped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Gzip.prototype.push = function (chunk, final) {\n        this.c.p(chunk);\n        this.l += chunk.length;\n        Deflate.prototype.push.call(this, chunk, final);\n    };\n    Gzip.prototype.p = function (c, f) {\n        var raw = dopt(c, this.o, this.v && gzhl(this.o), f && 8, this.s);\n        if (this.v)\n            gzh(raw, this.o), this.v = 0;\n        if (f)\n            wbytes(raw, raw.length - 8, this.c.d()), wbytes(raw, raw.length - 4, this.l);\n        this.ondata(raw, f);\n    };\n    /**\n     * Flushes buffered uncompressed data. Useful to immediately retrieve the\n     * GZIPped output for small inputs.\n     */\n    Gzip.prototype.flush = function () {\n        Deflate.prototype.flush.call(this);\n    };\n    return Gzip;\n}());\nexport { Gzip };\n/**\n * Asynchronous streaming GZIP compression\n */\nvar AsyncGzip = /*#__PURE__*/ (function () {\n    function AsyncGzip(opts, cb) {\n        astrmify([\n            bDflt,\n            gze,\n            function () { return [astrm, Deflate, Gzip]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Gzip(ev.data);\n            onmessage = astrm(strm);\n        }, 8, 1);\n    }\n    return AsyncGzip;\n}());\nexport { AsyncGzip };\nexport function gzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n        gze,\n        function () { return [gzipSync]; }\n    ], function (ev) { return pbf(gzipSync(ev.data[0], ev.data[1])); }, 2, cb);\n}\n/**\n * Compresses data with GZIP\n * @param data The data to compress\n * @param opts The compression options\n * @returns The gzipped version of the data\n */\nexport function gzipSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var c = crc(), l = data.length;\n    c.p(data);\n    var d = dopt(data, opts, gzhl(opts), 8), s = d.length;\n    return gzh(d, opts), wbytes(d, s - 8, c.d()), wbytes(d, s - 4, l), d;\n}\n/**\n * Streaming single or multi-member GZIP decompression\n */\nvar Gunzip = /*#__PURE__*/ (function () {\n    function Gunzip(opts, cb) {\n        this.v = 1;\n        this.r = 0;\n        Inflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be GUNZIPped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Gunzip.prototype.push = function (chunk, final) {\n        Inflate.prototype.e.call(this, chunk);\n        this.r += chunk.length;\n        if (this.v) {\n            var p = this.p.subarray(this.v - 1);\n            var s = p.length > 3 ? gzs(p) : 4;\n            if (s > p.length) {\n                if (!final)\n                    return;\n            }\n            else if (this.v > 1 && this.onmember) {\n                this.onmember(this.r - p.length);\n            }\n            this.p = p.subarray(s), this.v = 0;\n        }\n        // necessary to prevent TS from using the closure value\n        // This allows for workerization to function correctly\n        Inflate.prototype.c.call(this, final);\n        // process concatenated GZIP\n        if (this.s.f && !this.s.l && !final) {\n            this.v = shft(this.s.p) + 9;\n            this.s = { i: 0 };\n            this.o = new u8(0);\n            this.push(new u8(0), final);\n        }\n    };\n    return Gunzip;\n}());\nexport { Gunzip };\n/**\n * Asynchronous streaming single or multi-member GZIP decompression\n */\nvar AsyncGunzip = /*#__PURE__*/ (function () {\n    function AsyncGunzip(opts, cb) {\n        var _this = this;\n        astrmify([\n            bInflt,\n            guze,\n            function () { return [astrm, Inflate, Gunzip]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Gunzip(ev.data);\n            strm.onmember = function (offset) { return postMessage(offset); };\n            onmessage = astrm(strm);\n        }, 9, 0, function (offset) { return _this.onmember && _this.onmember(offset); });\n    }\n    return AsyncGunzip;\n}());\nexport { AsyncGunzip };\nexport function gunzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt,\n        guze,\n        function () { return [gunzipSync]; }\n    ], function (ev) { return pbf(gunzipSync(ev.data[0], ev.data[1])); }, 3, cb);\n}\n/**\n * Expands GZIP data\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nexport function gunzipSync(data, opts) {\n    var st = gzs(data);\n    if (st + 8 > data.length)\n        err(6, 'invalid gzip data');\n    return inflt(data.subarray(st, -8), { i: 2 }, opts && opts.out || new u8(gzl(data)), opts && opts.dictionary);\n}\n/**\n * Streaming Zlib compression\n */\nvar Zlib = /*#__PURE__*/ (function () {\n    function Zlib(opts, cb) {\n        this.c = adler();\n        this.v = 1;\n        Deflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be zlibbed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Zlib.prototype.push = function (chunk, final) {\n        this.c.p(chunk);\n        Deflate.prototype.push.call(this, chunk, final);\n    };\n    Zlib.prototype.p = function (c, f) {\n        var raw = dopt(c, this.o, this.v && (this.o.dictionary ? 6 : 2), f && 4, this.s);\n        if (this.v)\n            zlh(raw, this.o), this.v = 0;\n        if (f)\n            wbytes(raw, raw.length - 4, this.c.d());\n        this.ondata(raw, f);\n    };\n    /**\n     * Flushes buffered uncompressed data. Useful to immediately retrieve the\n     * zlibbed output for small inputs.\n     */\n    Zlib.prototype.flush = function () {\n        Deflate.prototype.flush.call(this);\n    };\n    return Zlib;\n}());\nexport { Zlib };\n/**\n * Asynchronous streaming Zlib compression\n */\nvar AsyncZlib = /*#__PURE__*/ (function () {\n    function AsyncZlib(opts, cb) {\n        astrmify([\n            bDflt,\n            zle,\n            function () { return [astrm, Deflate, Zlib]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Zlib(ev.data);\n            onmessage = astrm(strm);\n        }, 10, 1);\n    }\n    return AsyncZlib;\n}());\nexport { AsyncZlib };\nexport function zlib(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n        zle,\n        function () { return [zlibSync]; }\n    ], function (ev) { return pbf(zlibSync(ev.data[0], ev.data[1])); }, 4, cb);\n}\n/**\n * Compress data with Zlib\n * @param data The data to compress\n * @param opts The compression options\n * @returns The zlib-compressed version of the data\n */\nexport function zlibSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var a = adler();\n    a.p(data);\n    var d = dopt(data, opts, opts.dictionary ? 6 : 2, 4);\n    return zlh(d, opts), wbytes(d, d.length - 4, a.d()), d;\n}\n/**\n * Streaming Zlib decompression\n */\nvar Unzlib = /*#__PURE__*/ (function () {\n    function Unzlib(opts, cb) {\n        Inflate.call(this, opts, cb);\n        this.v = opts && opts.dictionary ? 2 : 1;\n    }\n    /**\n     * Pushes a chunk to be unzlibbed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Unzlib.prototype.push = function (chunk, final) {\n        Inflate.prototype.e.call(this, chunk);\n        if (this.v) {\n            if (this.p.length < 6 && !final)\n                return;\n            this.p = this.p.subarray(zls(this.p, this.v - 1)), this.v = 0;\n        }\n        if (final) {\n            if (this.p.length < 4)\n                err(6, 'invalid zlib data');\n            this.p = this.p.subarray(0, -4);\n        }\n        // necessary to prevent TS from using the closure value\n        // This allows for workerization to function correctly\n        Inflate.prototype.c.call(this, final);\n    };\n    return Unzlib;\n}());\nexport { Unzlib };\n/**\n * Asynchronous streaming Zlib decompression\n */\nvar AsyncUnzlib = /*#__PURE__*/ (function () {\n    function AsyncUnzlib(opts, cb) {\n        astrmify([\n            bInflt,\n            zule,\n            function () { return [astrm, Inflate, Unzlib]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Unzlib(ev.data);\n            onmessage = astrm(strm);\n        }, 11, 0);\n    }\n    return AsyncUnzlib;\n}());\nexport { AsyncUnzlib };\nexport function unzlib(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt,\n        zule,\n        function () { return [unzlibSync]; }\n    ], function (ev) { return pbf(unzlibSync(ev.data[0], gopt(ev.data[1]))); }, 5, cb);\n}\n/**\n * Expands Zlib data\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nexport function unzlibSync(data, opts) {\n    return inflt(data.subarray(zls(data, opts && opts.dictionary), -4), { i: 2 }, opts && opts.out, opts && opts.dictionary);\n}\n// Default algorithm for compression (used because having a known output size allows faster decompression)\nexport { gzip as compress, AsyncGzip as AsyncCompress };\nexport { gzipSync as compressSync, Gzip as Compress };\n/**\n * Streaming GZIP, Zlib, or raw DEFLATE decompression\n */\nvar Decompress = /*#__PURE__*/ (function () {\n    function Decompress(opts, cb) {\n        this.o = StrmOpt.call(this, opts, cb) || {};\n        this.G = Gunzip;\n        this.I = Inflate;\n        this.Z = Unzlib;\n    }\n    // init substream\n    // overriden by AsyncDecompress\n    Decompress.prototype.i = function () {\n        var _this = this;\n        this.s.ondata = function (dat, final) {\n            _this.ondata(dat, final);\n        };\n    };\n    /**\n     * Pushes a chunk to be decompressed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Decompress.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (!this.s) {\n            if (this.p && this.p.length) {\n                var n = new u8(this.p.length + chunk.length);\n                n.set(this.p), n.set(chunk, this.p.length);\n            }\n            else\n                this.p = chunk;\n            if (this.p.length > 2) {\n                this.s = (this.p[0] == 31 && this.p[1] == 139 && this.p[2] == 8)\n                    ? new this.G(this.o)\n                    : ((this.p[0] & 15) != 8 || (this.p[0] >> 4) > 7 || ((this.p[0] << 8 | this.p[1]) % 31))\n                        ? new this.I(this.o)\n                        : new this.Z(this.o);\n                this.i();\n                this.s.push(this.p, final);\n                this.p = null;\n            }\n        }\n        else\n            this.s.push(chunk, final);\n    };\n    return Decompress;\n}());\nexport { Decompress };\n/**\n * Asynchronous streaming GZIP, Zlib, or raw DEFLATE decompression\n */\nvar AsyncDecompress = /*#__PURE__*/ (function () {\n    function AsyncDecompress(opts, cb) {\n        Decompress.call(this, opts, cb);\n        this.queuedSize = 0;\n        this.G = AsyncGunzip;\n        this.I = AsyncInflate;\n        this.Z = AsyncUnzlib;\n    }\n    AsyncDecompress.prototype.i = function () {\n        var _this = this;\n        this.s.ondata = function (err, dat, final) {\n            _this.ondata(err, dat, final);\n        };\n        this.s.ondrain = function (size) {\n            _this.queuedSize -= size;\n            if (_this.ondrain)\n                _this.ondrain(size);\n        };\n    };\n    /**\n     * Pushes a chunk to be decompressed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    AsyncDecompress.prototype.push = function (chunk, final) {\n        this.queuedSize += chunk.length;\n        Decompress.prototype.push.call(this, chunk, final);\n    };\n    return AsyncDecompress;\n}());\nexport { AsyncDecompress };\nexport function decompress(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return (data[0] == 31 && data[1] == 139 && data[2] == 8)\n        ? gunzip(data, opts, cb)\n        : ((data[0] & 15) != 8 || (data[0] >> 4) > 7 || ((data[0] << 8 | data[1]) % 31))\n            ? inflate(data, opts, cb)\n            : unzlib(data, opts, cb);\n}\n/**\n * Expands compressed GZIP, Zlib, or raw DEFLATE data, automatically detecting the format\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nexport function decompressSync(data, opts) {\n    return (data[0] == 31 && data[1] == 139 && data[2] == 8)\n        ? gunzipSync(data, opts)\n        : ((data[0] & 15) != 8 || (data[0] >> 4) > 7 || ((data[0] << 8 | data[1]) % 31))\n            ? inflateSync(data, opts)\n            : unzlibSync(data, opts);\n}\n// flatten a directory structure\nvar fltn = function (d, p, t, o) {\n    for (var k in d) {\n        var val = d[k], n = p + k, op = o;\n        if (Array.isArray(val))\n            op = mrg(o, val[1]), val = val[0];\n        if (val instanceof u8)\n            t[n] = [val, op];\n        else {\n            t[n += '/'] = [new u8(0), op];\n            fltn(val, n, t, o);\n        }\n    }\n};\n// text encoder\nvar te = typeof TextEncoder != 'undefined' && /*#__PURE__*/ new TextEncoder();\n// text decoder\nvar td = typeof TextDecoder != 'undefined' && /*#__PURE__*/ new TextDecoder();\n// text decoder stream\nvar tds = 0;\ntry {\n    td.decode(et, { stream: true });\n    tds = 1;\n}\ncatch (e) { }\n// decode UTF8\nvar dutf8 = function (d) {\n    for (var r = '', i = 0;;) {\n        var c = d[i++];\n        var eb = (c > 127) + (c > 223) + (c > 239);\n        if (i + eb > d.length)\n            return { s: r, r: slc(d, i - 1) };\n        if (!eb)\n            r += String.fromCharCode(c);\n        else if (eb == 3) {\n            c = ((c & 15) << 18 | (d[i++] & 63) << 12 | (d[i++] & 63) << 6 | (d[i++] & 63)) - 65536,\n                r += String.fromCharCode(55296 | (c >> 10), 56320 | (c & 1023));\n        }\n        else if (eb & 1)\n            r += String.fromCharCode((c & 31) << 6 | (d[i++] & 63));\n        else\n            r += String.fromCharCode((c & 15) << 12 | (d[i++] & 63) << 6 | (d[i++] & 63));\n    }\n};\n/**\n * Streaming UTF-8 decoding\n */\nvar DecodeUTF8 = /*#__PURE__*/ (function () {\n    /**\n     * Creates a UTF-8 decoding stream\n     * @param cb The callback to call whenever data is decoded\n     */\n    function DecodeUTF8(cb) {\n        this.ondata = cb;\n        if (tds)\n            this.t = new TextDecoder();\n        else\n            this.p = et;\n    }\n    /**\n     * Pushes a chunk to be decoded from UTF-8 binary\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    DecodeUTF8.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        final = !!final;\n        if (this.t) {\n            this.ondata(this.t.decode(chunk, { stream: true }), final);\n            if (final) {\n                if (this.t.decode().length)\n                    err(8);\n                this.t = null;\n            }\n            return;\n        }\n        if (!this.p)\n            err(4);\n        var dat = new u8(this.p.length + chunk.length);\n        dat.set(this.p);\n        dat.set(chunk, this.p.length);\n        var _a = dutf8(dat), s = _a.s, r = _a.r;\n        if (final) {\n            if (r.length)\n                err(8);\n            this.p = null;\n        }\n        else\n            this.p = r;\n        this.ondata(s, final);\n    };\n    return DecodeUTF8;\n}());\nexport { DecodeUTF8 };\n/**\n * Streaming UTF-8 encoding\n */\nvar EncodeUTF8 = /*#__PURE__*/ (function () {\n    /**\n     * Creates a UTF-8 decoding stream\n     * @param cb The callback to call whenever data is encoded\n     */\n    function EncodeUTF8(cb) {\n        this.ondata = cb;\n    }\n    /**\n     * Pushes a chunk to be encoded to UTF-8\n     * @param chunk The string data to push\n     * @param final Whether this is the last chunk\n     */\n    EncodeUTF8.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (this.d)\n            err(4);\n        this.ondata(strToU8(chunk), this.d = final || false);\n    };\n    return EncodeUTF8;\n}());\nexport { EncodeUTF8 };\n/**\n * Converts a string into a Uint8Array for use with compression/decompression methods\n * @param str The string to encode\n * @param latin1 Whether or not to interpret the data as Latin-1. This should\n *               not need to be true unless decoding a binary string.\n * @returns The string encoded in UTF-8/Latin-1 binary\n */\nexport function strToU8(str, latin1) {\n    if (latin1) {\n        var ar_1 = new u8(str.length);\n        for (var i = 0; i < str.length; ++i)\n            ar_1[i] = str.charCodeAt(i);\n        return ar_1;\n    }\n    if (te)\n        return te.encode(str);\n    var l = str.length;\n    var ar = new u8(str.length + (str.length >> 1));\n    var ai = 0;\n    var w = function (v) { ar[ai++] = v; };\n    for (var i = 0; i < l; ++i) {\n        if (ai + 5 > ar.length) {\n            var n = new u8(ai + 8 + ((l - i) << 1));\n            n.set(ar);\n            ar = n;\n        }\n        var c = str.charCodeAt(i);\n        if (c < 128 || latin1)\n            w(c);\n        else if (c < 2048)\n            w(192 | (c >> 6)), w(128 | (c & 63));\n        else if (c > 55295 && c < 57344)\n            c = 65536 + (c & 1023 << 10) | (str.charCodeAt(++i) & 1023),\n                w(240 | (c >> 18)), w(128 | ((c >> 12) & 63)), w(128 | ((c >> 6) & 63)), w(128 | (c & 63));\n        else\n            w(224 | (c >> 12)), w(128 | ((c >> 6) & 63)), w(128 | (c & 63));\n    }\n    return slc(ar, 0, ai);\n}\n/**\n * Converts a Uint8Array to a string\n * @param dat The data to decode to string\n * @param latin1 Whether or not to interpret the data as Latin-1. This should\n *               not need to be true unless encoding to binary string.\n * @returns The original UTF-8/Latin-1 string\n */\nexport function strFromU8(dat, latin1) {\n    if (latin1) {\n        var r = '';\n        for (var i = 0; i < dat.length; i += 16384)\n            r += String.fromCharCode.apply(null, dat.subarray(i, i + 16384));\n        return r;\n    }\n    else if (td) {\n        return td.decode(dat);\n    }\n    else {\n        var _a = dutf8(dat), s = _a.s, r = _a.r;\n        if (r.length)\n            err(8);\n        return s;\n    }\n}\n;\n// deflate bit flag\nvar dbf = function (l) { return l == 1 ? 3 : l < 6 ? 2 : l == 9 ? 1 : 0; };\n// skip local zip header\nvar slzh = function (d, b) { return b + 30 + b2(d, b + 26) + b2(d, b + 28); };\n// read zip header\nvar zh = function (d, b, z) {\n    var fnl = b2(d, b + 28), fn = strFromU8(d.subarray(b + 46, b + 46 + fnl), !(b2(d, b + 8) & 2048)), es = b + 46 + fnl, bs = b4(d, b + 20);\n    var _a = z && bs == 4294967295 ? z64e(d, es) : [bs, b4(d, b + 24), b4(d, b + 42)], sc = _a[0], su = _a[1], off = _a[2];\n    return [b2(d, b + 10), sc, su, fn, es + b2(d, b + 30) + b2(d, b + 32), off];\n};\n// read zip64 extra field\nvar z64e = function (d, b) {\n    for (; b2(d, b) != 1; b += 4 + b2(d, b + 2))\n        ;\n    return [b8(d, b + 12), b8(d, b + 4), b8(d, b + 20)];\n};\n// extra field length\nvar exfl = function (ex) {\n    var le = 0;\n    if (ex) {\n        for (var k in ex) {\n            var l = ex[k].length;\n            if (l > 65535)\n                err(9);\n            le += l + 4;\n        }\n    }\n    return le;\n};\n// write zip header\nvar wzh = function (d, b, f, fn, u, c, ce, co) {\n    var fl = fn.length, ex = f.extra, col = co && co.length;\n    var exl = exfl(ex);\n    wbytes(d, b, ce != null ? 0x2014B50 : 0x4034B50), b += 4;\n    if (ce != null)\n        d[b++] = 20, d[b++] = f.os;\n    d[b] = 20, b += 2; // spec compliance? what's that?\n    d[b++] = (f.flag << 1) | (c < 0 && 8), d[b++] = u && 8;\n    d[b++] = f.compression & 255, d[b++] = f.compression >> 8;\n    var dt = new Date(f.mtime == null ? Date.now() : f.mtime), y = dt.getFullYear() - 1980;\n    if (y < 0 || y > 119)\n        err(10);\n    wbytes(d, b, (y << 25) | ((dt.getMonth() + 1) << 21) | (dt.getDate() << 16) | (dt.getHours() << 11) | (dt.getMinutes() << 5) | (dt.getSeconds() >> 1)), b += 4;\n    if (c != -1) {\n        wbytes(d, b, f.crc);\n        wbytes(d, b + 4, c < 0 ? -c - 2 : c);\n        wbytes(d, b + 8, f.size);\n    }\n    wbytes(d, b + 12, fl);\n    wbytes(d, b + 14, exl), b += 16;\n    if (ce != null) {\n        wbytes(d, b, col);\n        wbytes(d, b + 6, f.attrs);\n        wbytes(d, b + 10, ce), b += 14;\n    }\n    d.set(fn, b);\n    b += fl;\n    if (exl) {\n        for (var k in ex) {\n            var exf = ex[k], l = exf.length;\n            wbytes(d, b, +k);\n            wbytes(d, b + 2, l);\n            d.set(exf, b + 4), b += 4 + l;\n        }\n    }\n    if (col)\n        d.set(co, b), b += col;\n    return b;\n};\n// write zip footer (end of central directory)\nvar wzf = function (o, b, c, d, e) {\n    wbytes(o, b, 0x6054B50); // skip disk\n    wbytes(o, b + 8, c);\n    wbytes(o, b + 10, c);\n    wbytes(o, b + 12, d);\n    wbytes(o, b + 16, e);\n};\n/**\n * A pass-through stream to keep data uncompressed in a ZIP archive.\n */\nvar ZipPassThrough = /*#__PURE__*/ (function () {\n    /**\n     * Creates a pass-through stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     */\n    function ZipPassThrough(filename) {\n        this.filename = filename;\n        this.c = crc();\n        this.size = 0;\n        this.compression = 0;\n    }\n    /**\n     * Processes a chunk and pushes to the output stream. You can override this\n     * method in a subclass for custom behavior, but by default this passes\n     * the data through. You must call this.ondata(err, chunk, final) at some\n     * point in this method.\n     * @param chunk The chunk to process\n     * @param final Whether this is the last chunk\n     */\n    ZipPassThrough.prototype.process = function (chunk, final) {\n        this.ondata(null, chunk, final);\n    };\n    /**\n     * Pushes a chunk to be added. If you are subclassing this with a custom\n     * compression algorithm, note that you must push data from the source\n     * file only, pre-compression.\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    ZipPassThrough.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        this.c.p(chunk);\n        this.size += chunk.length;\n        if (final)\n            this.crc = this.c.d();\n        this.process(chunk, final || false);\n    };\n    return ZipPassThrough;\n}());\nexport { ZipPassThrough };\n// I don't extend because TypeScript extension adds 1kB of runtime bloat\n/**\n * Streaming DEFLATE compression for ZIP archives. Prefer using AsyncZipDeflate\n * for better performance\n */\nvar ZipDeflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     * @param opts The compression options\n     */\n    function ZipDeflate(filename, opts) {\n        var _this = this;\n        if (!opts)\n            opts = {};\n        ZipPassThrough.call(this, filename);\n        this.d = new Deflate(opts, function (dat, final) {\n            _this.ondata(null, dat, final);\n        });\n        this.compression = 8;\n        this.flag = dbf(opts.level);\n    }\n    ZipDeflate.prototype.process = function (chunk, final) {\n        try {\n            this.d.push(chunk, final);\n        }\n        catch (e) {\n            this.ondata(e, null, final);\n        }\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    ZipDeflate.prototype.push = function (chunk, final) {\n        ZipPassThrough.prototype.push.call(this, chunk, final);\n    };\n    return ZipDeflate;\n}());\nexport { ZipDeflate };\n/**\n * Asynchronous streaming DEFLATE compression for ZIP archives\n */\nvar AsyncZipDeflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates an asynchronous DEFLATE stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     * @param opts The compression options\n     */\n    function AsyncZipDeflate(filename, opts) {\n        var _this = this;\n        if (!opts)\n            opts = {};\n        ZipPassThrough.call(this, filename);\n        this.d = new AsyncDeflate(opts, function (err, dat, final) {\n            _this.ondata(err, dat, final);\n        });\n        this.compression = 8;\n        this.flag = dbf(opts.level);\n        this.terminate = this.d.terminate;\n    }\n    AsyncZipDeflate.prototype.process = function (chunk, final) {\n        this.d.push(chunk, final);\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    AsyncZipDeflate.prototype.push = function (chunk, final) {\n        ZipPassThrough.prototype.push.call(this, chunk, final);\n    };\n    return AsyncZipDeflate;\n}());\nexport { AsyncZipDeflate };\n// TODO: Better tree shaking\n/**\n * A zippable archive to which files can incrementally be added\n */\nvar Zip = /*#__PURE__*/ (function () {\n    /**\n     * Creates an empty ZIP archive to which files can be added\n     * @param cb The callback to call whenever data for the generated ZIP archive\n     *           is available\n     */\n    function Zip(cb) {\n        this.ondata = cb;\n        this.u = [];\n        this.d = 1;\n    }\n    /**\n     * Adds a file to the ZIP archive\n     * @param file The file stream to add\n     */\n    Zip.prototype.add = function (file) {\n        var _this = this;\n        if (!this.ondata)\n            err(5);\n        // finishing or finished\n        if (this.d & 2)\n            this.ondata(err(4 + (this.d & 1) * 8, 0, 1), null, false);\n        else {\n            var f = strToU8(file.filename), fl_1 = f.length;\n            var com = file.comment, o = com && strToU8(com);\n            var u = fl_1 != file.filename.length || (o && (com.length != o.length));\n            var hl_1 = fl_1 + exfl(file.extra) + 30;\n            if (fl_1 > 65535)\n                this.ondata(err(11, 0, 1), null, false);\n            var header = new u8(hl_1);\n            wzh(header, 0, file, f, u, -1);\n            var chks_1 = [header];\n            var pAll_1 = function () {\n                for (var _i = 0, chks_2 = chks_1; _i < chks_2.length; _i++) {\n                    var chk = chks_2[_i];\n                    _this.ondata(null, chk, false);\n                }\n                chks_1 = [];\n            };\n            var tr_1 = this.d;\n            this.d = 0;\n            var ind_1 = this.u.length;\n            var uf_1 = mrg(file, {\n                f: f,\n                u: u,\n                o: o,\n                t: function () {\n                    if (file.terminate)\n                        file.terminate();\n                },\n                r: function () {\n                    pAll_1();\n                    if (tr_1) {\n                        var nxt = _this.u[ind_1 + 1];\n                        if (nxt)\n                            nxt.r();\n                        else\n                            _this.d = 1;\n                    }\n                    tr_1 = 1;\n                }\n            });\n            var cl_1 = 0;\n            file.ondata = function (err, dat, final) {\n                if (err) {\n                    _this.ondata(err, dat, final);\n                    _this.terminate();\n                }\n                else {\n                    cl_1 += dat.length;\n                    chks_1.push(dat);\n                    if (final) {\n                        var dd = new u8(16);\n                        wbytes(dd, 0, 0x8074B50);\n                        wbytes(dd, 4, file.crc);\n                        wbytes(dd, 8, cl_1);\n                        wbytes(dd, 12, file.size);\n                        chks_1.push(dd);\n                        uf_1.c = cl_1, uf_1.b = hl_1 + cl_1 + 16, uf_1.crc = file.crc, uf_1.size = file.size;\n                        if (tr_1)\n                            uf_1.r();\n                        tr_1 = 1;\n                    }\n                    else if (tr_1)\n                        pAll_1();\n                }\n            };\n            this.u.push(uf_1);\n        }\n    };\n    /**\n     * Ends the process of adding files and prepares to emit the final chunks.\n     * This *must* be called after adding all desired files for the resulting\n     * ZIP file to work properly.\n     */\n    Zip.prototype.end = function () {\n        var _this = this;\n        if (this.d & 2) {\n            this.ondata(err(4 + (this.d & 1) * 8, 0, 1), null, true);\n            return;\n        }\n        if (this.d)\n            this.e();\n        else\n            this.u.push({\n                r: function () {\n                    if (!(_this.d & 1))\n                        return;\n                    _this.u.splice(-1, 1);\n                    _this.e();\n                },\n                t: function () { }\n            });\n        this.d = 3;\n    };\n    Zip.prototype.e = function () {\n        var bt = 0, l = 0, tl = 0;\n        for (var _i = 0, _a = this.u; _i < _a.length; _i++) {\n            var f = _a[_i];\n            tl += 46 + f.f.length + exfl(f.extra) + (f.o ? f.o.length : 0);\n        }\n        var out = new u8(tl + 22);\n        for (var _b = 0, _c = this.u; _b < _c.length; _b++) {\n            var f = _c[_b];\n            wzh(out, bt, f, f.f, f.u, -f.c - 2, l, f.o);\n            bt += 46 + f.f.length + exfl(f.extra) + (f.o ? f.o.length : 0), l += f.b;\n        }\n        wzf(out, bt, this.u.length, tl, l);\n        this.ondata(null, out, true);\n        this.d = 2;\n    };\n    /**\n     * A method to terminate any internal workers used by the stream. Subsequent\n     * calls to add() will fail.\n     */\n    Zip.prototype.terminate = function () {\n        for (var _i = 0, _a = this.u; _i < _a.length; _i++) {\n            var f = _a[_i];\n            f.t();\n        }\n        this.d = 2;\n    };\n    return Zip;\n}());\nexport { Zip };\nexport function zip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    var r = {};\n    fltn(data, '', r, opts);\n    var k = Object.keys(r);\n    var lft = k.length, o = 0, tot = 0;\n    var slft = lft, files = new Array(lft);\n    var term = [];\n    var tAll = function () {\n        for (var i = 0; i < term.length; ++i)\n            term[i]();\n    };\n    var cbd = function (a, b) {\n        mt(function () { cb(a, b); });\n    };\n    mt(function () { cbd = cb; });\n    var cbf = function () {\n        var out = new u8(tot + 22), oe = o, cdl = tot - o;\n        tot = 0;\n        for (var i = 0; i < slft; ++i) {\n            var f = files[i];\n            try {\n                var l = f.c.length;\n                wzh(out, tot, f, f.f, f.u, l);\n                var badd = 30 + f.f.length + exfl(f.extra);\n                var loc = tot + badd;\n                out.set(f.c, loc);\n                wzh(out, o, f, f.f, f.u, l, tot, f.m), o += 16 + badd + (f.m ? f.m.length : 0), tot = loc + l;\n            }\n            catch (e) {\n                return cbd(e, null);\n            }\n        }\n        wzf(out, o, files.length, cdl, oe);\n        cbd(null, out);\n    };\n    if (!lft)\n        cbf();\n    var _loop_1 = function (i) {\n        var fn = k[i];\n        var _a = r[fn], file = _a[0], p = _a[1];\n        var c = crc(), size = file.length;\n        c.p(file);\n        var f = strToU8(fn), s = f.length;\n        var com = p.comment, m = com && strToU8(com), ms = m && m.length;\n        var exl = exfl(p.extra);\n        var compression = p.level == 0 ? 0 : 8;\n        var cbl = function (e, d) {\n            if (e) {\n                tAll();\n                cbd(e, null);\n            }\n            else {\n                var l = d.length;\n                files[i] = mrg(p, {\n                    size: size,\n                    crc: c.d(),\n                    c: d,\n                    f: f,\n                    m: m,\n                    u: s != fn.length || (m && (com.length != ms)),\n                    compression: compression\n                });\n                o += 30 + s + exl + l;\n                tot += 76 + 2 * (s + exl) + (ms || 0) + l;\n                if (!--lft)\n                    cbf();\n            }\n        };\n        if (s > 65535)\n            cbl(err(11, 0, 1), null);\n        if (!compression)\n            cbl(null, file);\n        else if (size < 160000) {\n            try {\n                cbl(null, deflateSync(file, p));\n            }\n            catch (e) {\n                cbl(e, null);\n            }\n        }\n        else\n            term.push(deflate(file, p, cbl));\n    };\n    // Cannot use lft because it can decrease\n    for (var i = 0; i < slft; ++i) {\n        _loop_1(i);\n    }\n    return tAll;\n}\n/**\n * Synchronously creates a ZIP file. Prefer using `zip` for better performance\n * with more than one file.\n * @param data The directory structure for the ZIP archive\n * @param opts The main options, merged with per-file options\n * @returns The generated ZIP archive\n */\nexport function zipSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var r = {};\n    var files = [];\n    fltn(data, '', r, opts);\n    var o = 0;\n    var tot = 0;\n    for (var fn in r) {\n        var _a = r[fn], file = _a[0], p = _a[1];\n        var compression = p.level == 0 ? 0 : 8;\n        var f = strToU8(fn), s = f.length;\n        var com = p.comment, m = com && strToU8(com), ms = m && m.length;\n        var exl = exfl(p.extra);\n        if (s > 65535)\n            err(11);\n        var d = compression ? deflateSync(file, p) : file, l = d.length;\n        var c = crc();\n        c.p(file);\n        files.push(mrg(p, {\n            size: file.length,\n            crc: c.d(),\n            c: d,\n            f: f,\n            m: m,\n            u: s != fn.length || (m && (com.length != ms)),\n            o: o,\n            compression: compression\n        }));\n        o += 30 + s + exl + l;\n        tot += 76 + 2 * (s + exl) + (ms || 0) + l;\n    }\n    var out = new u8(tot + 22), oe = o, cdl = tot - o;\n    for (var i = 0; i < files.length; ++i) {\n        var f = files[i];\n        wzh(out, f.o, f, f.f, f.u, f.c.length);\n        var badd = 30 + f.f.length + exfl(f.extra);\n        out.set(f.c, f.o + badd);\n        wzh(out, o, f, f.f, f.u, f.c.length, f.o, f.m), o += 16 + badd + (f.m ? f.m.length : 0);\n    }\n    wzf(out, o, files.length, cdl, oe);\n    return out;\n}\n/**\n * Streaming pass-through decompression for ZIP archives\n */\nvar UnzipPassThrough = /*#__PURE__*/ (function () {\n    function UnzipPassThrough() {\n    }\n    UnzipPassThrough.prototype.push = function (data, final) {\n        this.ondata(null, data, final);\n    };\n    UnzipPassThrough.compression = 0;\n    return UnzipPassThrough;\n}());\nexport { UnzipPassThrough };\n/**\n * Streaming DEFLATE decompression for ZIP archives. Prefer AsyncZipInflate for\n * better performance.\n */\nvar UnzipInflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE decompression that can be used in ZIP archives\n     */\n    function UnzipInflate() {\n        var _this = this;\n        this.i = new Inflate(function (dat, final) {\n            _this.ondata(null, dat, final);\n        });\n    }\n    UnzipInflate.prototype.push = function (data, final) {\n        try {\n            this.i.push(data, final);\n        }\n        catch (e) {\n            this.ondata(e, null, final);\n        }\n    };\n    UnzipInflate.compression = 8;\n    return UnzipInflate;\n}());\nexport { UnzipInflate };\n/**\n * Asynchronous streaming DEFLATE decompression for ZIP archives\n */\nvar AsyncUnzipInflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE decompression that can be used in ZIP archives\n     */\n    function AsyncUnzipInflate(_, sz) {\n        var _this = this;\n        if (sz < 320000) {\n            this.i = new Inflate(function (dat, final) {\n                _this.ondata(null, dat, final);\n            });\n        }\n        else {\n            this.i = new AsyncInflate(function (err, dat, final) {\n                _this.ondata(err, dat, final);\n            });\n            this.terminate = this.i.terminate;\n        }\n    }\n    AsyncUnzipInflate.prototype.push = function (data, final) {\n        if (this.i.terminate)\n            data = slc(data, 0);\n        this.i.push(data, final);\n    };\n    AsyncUnzipInflate.compression = 8;\n    return AsyncUnzipInflate;\n}());\nexport { AsyncUnzipInflate };\n/**\n * A ZIP archive decompression stream that emits files as they are discovered\n */\nvar Unzip = /*#__PURE__*/ (function () {\n    /**\n     * Creates a ZIP decompression stream\n     * @param cb The callback to call whenever a file in the ZIP archive is found\n     */\n    function Unzip(cb) {\n        this.onfile = cb;\n        this.k = [];\n        this.o = {\n            0: UnzipPassThrough\n        };\n        this.p = et;\n    }\n    /**\n     * Pushes a chunk to be unzipped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Unzip.prototype.push = function (chunk, final) {\n        var _this = this;\n        if (!this.onfile)\n            err(5);\n        if (!this.p)\n            err(4);\n        if (this.c > 0) {\n            var len = Math.min(this.c, chunk.length);\n            var toAdd = chunk.subarray(0, len);\n            this.c -= len;\n            if (this.d)\n                this.d.push(toAdd, !this.c);\n            else\n                this.k[0].push(toAdd);\n            chunk = chunk.subarray(len);\n            if (chunk.length)\n                return this.push(chunk, final);\n        }\n        else {\n            var f = 0, i = 0, is = void 0, buf = void 0;\n            if (!this.p.length)\n                buf = chunk;\n            else if (!chunk.length)\n                buf = this.p;\n            else {\n                buf = new u8(this.p.length + chunk.length);\n                buf.set(this.p), buf.set(chunk, this.p.length);\n            }\n            var l = buf.length, oc = this.c, add = oc && this.d;\n            var _loop_2 = function () {\n                var _a;\n                var sig = b4(buf, i);\n                if (sig == 0x4034B50) {\n                    f = 1, is = i;\n                    this_1.d = null;\n                    this_1.c = 0;\n                    var bf = b2(buf, i + 6), cmp_1 = b2(buf, i + 8), u = bf & 2048, dd = bf & 8, fnl = b2(buf, i + 26), es = b2(buf, i + 28);\n                    if (l > i + 30 + fnl + es) {\n                        var chks_3 = [];\n                        this_1.k.unshift(chks_3);\n                        f = 2;\n                        var sc_1 = b4(buf, i + 18), su_1 = b4(buf, i + 22);\n                        var fn_1 = strFromU8(buf.subarray(i + 30, i += 30 + fnl), !u);\n                        if (sc_1 == 4294967295) {\n                            _a = dd ? [-2] : z64e(buf, i), sc_1 = _a[0], su_1 = _a[1];\n                        }\n                        else if (dd)\n                            sc_1 = -1;\n                        i += es;\n                        this_1.c = sc_1;\n                        var d_1;\n                        var file_1 = {\n                            name: fn_1,\n                            compression: cmp_1,\n                            start: function () {\n                                if (!file_1.ondata)\n                                    err(5);\n                                if (!sc_1)\n                                    file_1.ondata(null, et, true);\n                                else {\n                                    var ctr = _this.o[cmp_1];\n                                    if (!ctr)\n                                        file_1.ondata(err(14, 'unknown compression type ' + cmp_1, 1), null, false);\n                                    d_1 = sc_1 < 0 ? new ctr(fn_1) : new ctr(fn_1, sc_1, su_1);\n                                    d_1.ondata = function (err, dat, final) { file_1.ondata(err, dat, final); };\n                                    for (var _i = 0, chks_4 = chks_3; _i < chks_4.length; _i++) {\n                                        var dat = chks_4[_i];\n                                        d_1.push(dat, false);\n                                    }\n                                    if (_this.k[0] == chks_3 && _this.c)\n                                        _this.d = d_1;\n                                    else\n                                        d_1.push(et, true);\n                                }\n                            },\n                            terminate: function () {\n                                if (d_1 && d_1.terminate)\n                                    d_1.terminate();\n                            }\n                        };\n                        if (sc_1 >= 0)\n                            file_1.size = sc_1, file_1.originalSize = su_1;\n                        this_1.onfile(file_1);\n                    }\n                    return \"break\";\n                }\n                else if (oc) {\n                    if (sig == 0x8074B50) {\n                        is = i += 12 + (oc == -2 && 8), f = 3, this_1.c = 0;\n                        return \"break\";\n                    }\n                    else if (sig == 0x2014B50) {\n                        is = i -= 4, f = 3, this_1.c = 0;\n                        return \"break\";\n                    }\n                }\n            };\n            var this_1 = this;\n            for (; i < l - 4; ++i) {\n                var state_1 = _loop_2();\n                if (state_1 === \"break\")\n                    break;\n            }\n            this.p = et;\n            if (oc < 0) {\n                var dat = f ? buf.subarray(0, is - 12 - (oc == -2 && 8) - (b4(buf, is - 16) == 0x8074B50 && 4)) : buf.subarray(0, i);\n                if (add)\n                    add.push(dat, !!f);\n                else\n                    this.k[+(f == 2)].push(dat);\n            }\n            if (f & 2)\n                return this.push(buf.subarray(i), final);\n            this.p = buf.subarray(i);\n        }\n        if (final) {\n            if (this.c)\n                err(13);\n            this.p = null;\n        }\n    };\n    /**\n     * Registers a decoder with the stream, allowing for files compressed with\n     * the compression type provided to be expanded correctly\n     * @param decoder The decoder constructor\n     */\n    Unzip.prototype.register = function (decoder) {\n        this.o[decoder.compression] = decoder;\n    };\n    return Unzip;\n}());\nexport { Unzip };\nvar mt = typeof queueMicrotask == 'function' ? queueMicrotask : typeof setTimeout == 'function' ? setTimeout : function (fn) { fn(); };\nexport function unzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    var term = [];\n    var tAll = function () {\n        for (var i = 0; i < term.length; ++i)\n            term[i]();\n    };\n    var files = {};\n    var cbd = function (a, b) {\n        mt(function () { cb(a, b); });\n    };\n    mt(function () { cbd = cb; });\n    var e = data.length - 22;\n    for (; b4(data, e) != 0x6054B50; --e) {\n        if (!e || data.length - e > 65558) {\n            cbd(err(13, 0, 1), null);\n            return tAll;\n        }\n    }\n    ;\n    var lft = b2(data, e + 8);\n    if (lft) {\n        var c = lft;\n        var o = b4(data, e + 16);\n        var z = o == 4294967295 || c == 65535;\n        if (z) {\n            var ze = b4(data, e - 12);\n            z = b4(data, ze) == 0x6064B50;\n            if (z) {\n                c = lft = b4(data, ze + 32);\n                o = b4(data, ze + 48);\n            }\n        }\n        var fltr = opts && opts.filter;\n        var _loop_3 = function (i) {\n            var _a = zh(data, o, z), c_1 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);\n            o = no;\n            var cbl = function (e, d) {\n                if (e) {\n                    tAll();\n                    cbd(e, null);\n                }\n                else {\n                    if (d)\n                        files[fn] = d;\n                    if (!--lft)\n                        cbd(null, files);\n                }\n            };\n            if (!fltr || fltr({\n                name: fn,\n                size: sc,\n                originalSize: su,\n                compression: c_1\n            })) {\n                if (!c_1)\n                    cbl(null, slc(data, b, b + sc));\n                else if (c_1 == 8) {\n                    var infl = data.subarray(b, b + sc);\n                    // Synchronously decompress under 512KB, or barely-compressed data\n                    if (su < 524288 || sc > 0.8 * su) {\n                        try {\n                            cbl(null, inflateSync(infl, { out: new u8(su) }));\n                        }\n                        catch (e) {\n                            cbl(e, null);\n                        }\n                    }\n                    else\n                        term.push(inflate(infl, { size: su }, cbl));\n                }\n                else\n                    cbl(err(14, 'unknown compression type ' + c_1, 1), null);\n            }\n            else\n                cbl(null, null);\n        };\n        for (var i = 0; i < c; ++i) {\n            _loop_3(i);\n        }\n    }\n    else\n        cbd(null, {});\n    return tAll;\n}\n/**\n * Synchronously decompresses a ZIP archive. Prefer using `unzip` for better\n * performance with more than one file.\n * @param data The raw compressed ZIP file\n * @param opts The ZIP extraction options\n * @returns The decompressed files\n */\nexport function unzipSync(data, opts) {\n    var files = {};\n    var e = data.length - 22;\n    for (; b4(data, e) != 0x6054B50; --e) {\n        if (!e || data.length - e > 65558)\n            err(13);\n    }\n    ;\n    var c = b2(data, e + 8);\n    if (!c)\n        return {};\n    var o = b4(data, e + 16);\n    var z = o == 4294967295 || c == 65535;\n    if (z) {\n        var ze = b4(data, e - 12);\n        z = b4(data, ze) == 0x6064B50;\n        if (z) {\n            c = b4(data, ze + 32);\n            o = b4(data, ze + 48);\n        }\n    }\n    var fltr = opts && opts.filter;\n    for (var i = 0; i < c; ++i) {\n        var _a = zh(data, o, z), c_2 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);\n        o = no;\n        if (!fltr || fltr({\n            name: fn,\n            size: sc,\n            originalSize: su,\n            compression: c_2\n        })) {\n            if (!c_2)\n                files[fn] = slc(data, b, b + sc);\n            else if (c_2 == 8)\n                files[fn] = inflateSync(data.subarray(b, b + sc), { out: new u8(su) });\n            else\n                err(14, 'unknown compression type ' + c_2);\n        }\n    }\n    return files;\n}\n","let wasm;\n\nconst cachedTextDecoder = (typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-8', { ignoreBOM: true, fatal: true }) : { decode: () => { throw Error('TextDecoder not available') } } );\n\nif (typeof TextDecoder !== 'undefined') { cachedTextDecoder.decode(); };\n\nlet cachedUint8ArrayMemory0 = null;\n\nfunction getUint8ArrayMemory0() {\n    if (cachedUint8ArrayMemory0 === null || cachedUint8ArrayMemory0.byteLength === 0) {\n        cachedUint8ArrayMemory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8ArrayMemory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return cachedTextDecoder.decode(getUint8ArrayMemory0().subarray(ptr, ptr + len));\n}\n/**\n * @param {number} num_splats\n * @param {Uint16Array} readback\n * @param {Uint32Array} ordering\n * @returns {number}\n */\nexport function sort_splats(num_splats, readback, ordering) {\n    const ret = wasm.sort_splats(num_splats, readback, ordering);\n    return ret >>> 0;\n}\n\n/**\n * @param {number} num_splats\n * @param {Uint32Array} readback\n * @param {Uint32Array} ordering\n * @returns {number}\n */\nexport function sort32_splats(num_splats, readback, ordering) {\n    const ret = wasm.sort32_splats(num_splats, readback, ordering);\n    return ret >>> 0;\n}\n\n/**\n * @param {number} origin_x\n * @param {number} origin_y\n * @param {number} origin_z\n * @param {number} dir_x\n * @param {number} dir_y\n * @param {number} dir_z\n * @param {number} near\n * @param {number} far\n * @param {number} num_splats\n * @param {Uint32Array} packed_splats\n * @param {boolean} raycast_ellipsoid\n * @param {number} ln_scale_min\n * @param {number} ln_scale_max\n * @returns {Float32Array}\n */\nexport function raycast_splats(origin_x, origin_y, origin_z, dir_x, dir_y, dir_z, near, far, num_splats, packed_splats, raycast_ellipsoid, ln_scale_min, ln_scale_max) {\n    const ret = wasm.raycast_splats(origin_x, origin_y, origin_z, dir_x, dir_y, dir_z, near, far, num_splats, packed_splats, raycast_ellipsoid, ln_scale_min, ln_scale_max);\n    return ret;\n}\n\nasync function __wbg_load(module, imports) {\n    if (typeof Response === 'function' && module instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n\n            } catch (e) {\n                if (module.headers.get('Content-Type') != 'application/wasm') {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve Wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n\n    } else {\n        const instance = await WebAssembly.instantiate(module, imports);\n\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n\n        } else {\n            return instance;\n        }\n    }\n}\n\nfunction __wbg_get_imports() {\n    const imports = {};\n    imports.wbg = {};\n    imports.wbg.__wbg_buffer_609cc3eee51ed158 = function(arg0) {\n        const ret = arg0.buffer;\n        return ret;\n    };\n    imports.wbg.__wbg_length_3b4f022188ae8db6 = function(arg0) {\n        const ret = arg0.length;\n        return ret;\n    };\n    imports.wbg.__wbg_length_6ca527665d89694d = function(arg0) {\n        const ret = arg0.length;\n        return ret;\n    };\n    imports.wbg.__wbg_length_8cfd2c6409af88ad = function(arg0) {\n        const ret = arg0.length;\n        return ret;\n    };\n    imports.wbg.__wbg_new_9fee97a409b32b68 = function(arg0) {\n        const ret = new Uint16Array(arg0);\n        return ret;\n    };\n    imports.wbg.__wbg_new_e3b321dcfef89fc7 = function(arg0) {\n        const ret = new Uint32Array(arg0);\n        return ret;\n    };\n    imports.wbg.__wbg_newwithbyteoffsetandlength_e6b7e69acd4c7354 = function(arg0, arg1, arg2) {\n        const ret = new Float32Array(arg0, arg1 >>> 0, arg2 >>> 0);\n        return ret;\n    };\n    imports.wbg.__wbg_newwithbyteoffsetandlength_f1dead44d1fc7212 = function(arg0, arg1, arg2) {\n        const ret = new Uint32Array(arg0, arg1 >>> 0, arg2 >>> 0);\n        return ret;\n    };\n    imports.wbg.__wbg_newwithlength_5a5efe313cfd59f1 = function(arg0) {\n        const ret = new Float32Array(arg0 >>> 0);\n        return ret;\n    };\n    imports.wbg.__wbg_set_10bad9bee0e9c58b = function(arg0, arg1, arg2) {\n        arg0.set(arg1, arg2 >>> 0);\n    };\n    imports.wbg.__wbg_set_d23661d19148b229 = function(arg0, arg1, arg2) {\n        arg0.set(arg1, arg2 >>> 0);\n    };\n    imports.wbg.__wbg_set_f4f1f0daa30696fc = function(arg0, arg1, arg2) {\n        arg0.set(arg1, arg2 >>> 0);\n    };\n    imports.wbg.__wbg_subarray_3aaeec89bb2544f0 = function(arg0, arg1, arg2) {\n        const ret = arg0.subarray(arg1 >>> 0, arg2 >>> 0);\n        return ret;\n    };\n    imports.wbg.__wbg_subarray_769e1e0f81bb259b = function(arg0, arg1, arg2) {\n        const ret = arg0.subarray(arg1 >>> 0, arg2 >>> 0);\n        return ret;\n    };\n    imports.wbg.__wbindgen_init_externref_table = function() {\n        const table = wasm.__wbindgen_export_0;\n        const offset = table.grow(4);\n        table.set(0, undefined);\n        table.set(offset + 0, undefined);\n        table.set(offset + 1, null);\n        table.set(offset + 2, true);\n        table.set(offset + 3, false);\n        ;\n    };\n    imports.wbg.__wbindgen_memory = function() {\n        const ret = wasm.memory;\n        return ret;\n    };\n    imports.wbg.__wbindgen_throw = function(arg0, arg1) {\n        throw new Error(getStringFromWasm0(arg0, arg1));\n    };\n\n    return imports;\n}\n\nfunction __wbg_init_memory(imports, memory) {\n\n}\n\nfunction __wbg_finalize_init(instance, module) {\n    wasm = instance.exports;\n    __wbg_init.__wbindgen_wasm_module = module;\n    cachedUint8ArrayMemory0 = null;\n\n\n    wasm.__wbindgen_start();\n    return wasm;\n}\n\nfunction initSync(module) {\n    if (wasm !== undefined) return wasm;\n\n\n    if (typeof module !== 'undefined') {\n        if (Object.getPrototypeOf(module) === Object.prototype) {\n            ({module} = module)\n        } else {\n            console.warn('using deprecated parameters for `initSync()`; pass a single object instead')\n        }\n    }\n\n    const imports = __wbg_get_imports();\n\n    __wbg_init_memory(imports);\n\n    if (!(module instanceof WebAssembly.Module)) {\n        module = new WebAssembly.Module(module);\n    }\n\n    const instance = new WebAssembly.Instance(module, imports);\n\n    return __wbg_finalize_init(instance, module);\n}\n\nasync function __wbg_init(module_or_path) {\n    if (wasm !== undefined) return wasm;\n\n\n    if (typeof module_or_path !== 'undefined') {\n        if (Object.getPrototypeOf(module_or_path) === Object.prototype) {\n            ({module_or_path} = module_or_path)\n        } else {\n            console.warn('using deprecated parameters for the initialization function; pass a single object instead')\n        }\n    }\n\n    if (typeof module_or_path === 'undefined') {\n        module_or_path = new URL('spark_internal_rs_bg.wasm', import.meta.url);\n    }\n    const imports = __wbg_get_imports();\n\n    if (typeof module_or_path === 'string' || (typeof Request === 'function' && module_or_path instanceof Request) || (typeof URL === 'function' && module_or_path instanceof URL)) {\n        module_or_path = fetch(module_or_path);\n    }\n\n    __wbg_init_memory(imports);\n\n    const { instance, module } = await __wbg_load(await module_or_path, imports);\n\n    return __wbg_finalize_init(instance, module);\n}\n\nexport { initSync };\nexport default __wbg_init;\n","// LN_SCALE_MIN..LN_SCALE_MAX define the internal scale range of for Gsplats,\n// covering approx 0.0001..8000 in range with discrete steps 7% apart.\n// The value \"0\" is reserved for truly flat scales, indicating a 2DGS.\n// If these values are changed, the corresponding values in splatDefines.glsl\n// must also be updated to match.\n\nexport const LN_SCALE_MIN = -12.0;\nexport const LN_SCALE_MAX = 9.0;\nexport const SCALE_MIN = Math.exp(LN_SCALE_MIN);\nexport const SCALE_MAX = Math.exp(LN_SCALE_MAX);\n\nexport const LN_SCALE_ZERO = -30.0;\nexport const SCALE_ZERO = Math.exp(LN_SCALE_ZERO);\n\n// Gsplats are stored in textures that are 2^11 x 2^11 x up to 2^11\n// Most WebGL2 implementations support 2D textures up to 2^12 x 2^12 (max 16M Gsplats)\n// 2D array textures and 3D textures up to 2^11 x 2^11 x 2^11 (max 8G Gsplats),\n// so we use 2D array textures for our representation for higher limits.\n\nexport const SPLAT_TEX_WIDTH_BITS = 11;\nexport const SPLAT_TEX_HEIGHT_BITS = 11;\nexport const SPLAT_TEX_DEPTH_BITS = 11;\nexport const SPLAT_TEX_LAYER_BITS =\n  SPLAT_TEX_WIDTH_BITS + SPLAT_TEX_HEIGHT_BITS;\n\nexport const SPLAT_TEX_WIDTH = 1 << SPLAT_TEX_WIDTH_BITS; // 2048\nexport const SPLAT_TEX_HEIGHT = 1 << SPLAT_TEX_HEIGHT_BITS; // 2048\nexport const SPLAT_TEX_DEPTH = 1 << SPLAT_TEX_DEPTH_BITS; // 2048\nexport const SPLAT_TEX_MIN_HEIGHT = 1;\n\nexport const SPLAT_TEX_WIDTH_MASK = SPLAT_TEX_WIDTH - 1;\nexport const SPLAT_TEX_HEIGHT_MASK = SPLAT_TEX_HEIGHT - 1;\nexport const SPLAT_TEX_DEPTH_MASK = SPLAT_TEX_DEPTH - 1;\n\n// Enable/disable Gsplat sorting via Rust WASM code. In testing the sorting\n// time between pure JS and WASM are minimal and don't make a big difference.\n\nexport const WASM_SPLAT_SORT = true;\n","import type * as THREE from \"three\";\n\nexport type BoolTypes = \"bool\" | \"bvec2\" | \"bvec3\" | \"bvec4\";\nexport type IntTypes = \"int\" | \"ivec2\" | \"ivec3\" | \"ivec4\";\nexport type UintTypes = \"uint\" | \"uvec2\" | \"uvec3\" | \"uvec4\";\nexport type AllIntTypes = IntTypes | UintTypes;\nexport type FloatTypes = \"float\" | \"vec2\" | \"vec3\" | \"vec4\";\nexport type ScalarTypes = \"uint\" | \"int\" | \"float\";\nexport type Vector2Types = \"vec2\" | \"ivec2\" | \"uvec2\";\nexport type Vector3Types = \"vec3\" | \"ivec3\" | \"uvec3\";\nexport type Vector4Types = \"vec4\" | \"ivec4\" | \"uvec4\";\nexport type VectorTypes = Vector2Types | Vector3Types | Vector4Types;\nexport type MatFloatTypes =\n  | \"mat2\"\n  | \"mat2x2\"\n  | \"mat2x3\"\n  | \"mat2x4\"\n  | \"mat3\"\n  | \"mat3x2\"\n  | \"mat3x3\"\n  | \"mat3x4\"\n  | \"mat4\"\n  | \"mat4x2\"\n  | \"mat4x3\"\n  | \"mat4x4\";\nexport type SquareMatTypes =\n  | \"mat2\"\n  | \"mat3\"\n  | \"mat4\"\n  | \"mat2x2\"\n  | \"mat3x3\"\n  | \"mat4x4\";\nexport type AllFloatTypes = FloatTypes | MatFloatTypes;\nexport type SignedTypes = IntTypes | FloatTypes;\nexport type AllSignedTypes = SignedTypes | MatFloatTypes;\nexport type ValueTypes = FloatTypes | IntTypes | UintTypes;\nexport type AllValueTypes = AllFloatTypes | IntTypes | UintTypes;\nexport type SimpleTypes = BoolTypes | AllValueTypes;\n\nexport type VectorElementType<A extends VectorTypes> = A extends FloatTypes\n  ? \"float\"\n  : A extends IntTypes\n    ? \"int\"\n    : A extends UintTypes\n      ? \"uint\"\n      : never;\n\nexport type SameSizeVec<T extends ValueTypes> = T extends ScalarTypes\n  ? \"float\"\n  : T extends \"vec2\" | \"ivec2\" | \"uvec2\"\n    ? \"vec2\"\n    : T extends \"vec3\" | \"ivec3\" | \"uvec3\"\n      ? \"vec3\"\n      : T extends \"vec4\" | \"ivec4\" | \"uvec4\"\n        ? \"vec4\"\n        : never;\n\nexport type SameSizeUvec<T extends ValueTypes> = T extends ScalarTypes\n  ? \"uint\"\n  : T extends \"vec2\" | \"ivec2\" | \"uvec2\"\n    ? \"uvec2\"\n    : T extends \"vec3\" | \"ivec3\" | \"uvec3\"\n      ? \"uvec3\"\n      : T extends \"vec4\" | \"ivec4\" | \"uvec4\"\n        ? \"uvec4\"\n        : never;\n\nexport type SameSizeIvec<T extends ValueTypes> = T extends ScalarTypes\n  ? \"int\"\n  : T extends \"vec2\" | \"ivec2\" | \"uvec2\"\n    ? \"ivec2\"\n    : T extends \"vec3\" | \"ivec3\" | \"uvec3\"\n      ? \"ivec3\"\n      : T extends \"vec4\" | \"ivec4\" | \"uvec4\"\n        ? \"ivec4\"\n        : never;\n\nexport type SamplerTypes =\n  | \"sampler2D\"\n  | \"sampler2DArray\"\n  | \"sampler3D\"\n  | \"samplerCube\";\nexport type UsamplerTypes =\n  | \"usampler2D\"\n  | \"usampler2DArray\"\n  | \"usampler3D\"\n  | \"usamplerCube\";\nexport type IsamplerTypes =\n  | \"isampler2D\"\n  | \"isampler2DArray\"\n  | \"isampler3D\"\n  | \"isamplerCube\";\nexport type NormalSamplerTypes = SamplerTypes | UsamplerTypes | IsamplerTypes;\nexport type SamplerShadowTypes =\n  | \"sampler2DShadow\"\n  | \"sampler2DArrayShadow\"\n  | \"samplerCubeShadow\";\nexport type AllSamplerTypes = NormalSamplerTypes | SamplerShadowTypes;\nexport type Sampler2DTypes =\n  | \"sampler2D\"\n  | \"usampler2D\"\n  | \"isampler2D\"\n  | \"sampler2DShadow\";\nexport type Sampler2DArrayTypes =\n  | \"sampler2DArray\"\n  | \"usampler2DArray\"\n  | \"isampler2DArray\"\n  | \"sampler2DArrayShadow\";\nexport type Sampler3DTypes = \"sampler3D\" | \"usampler3D\" | \"isampler3D\";\nexport type SamplerCubeTypes =\n  | \"samplerCube\"\n  | \"usamplerCube\"\n  | \"isamplerCube\"\n  | \"samplerCubeShadow\";\n\nexport function isBoolType(type: DynoType): boolean {\n  return (\n    type === \"bool\" || type === \"bvec2\" || type === \"bvec3\" || type === \"bvec4\"\n  );\n}\n\nexport function isScalarType(type: DynoType): boolean {\n  return type === \"int\" || type === \"uint\" || type === \"float\";\n}\n\nexport function isIntType(type: DynoType): boolean {\n  return (\n    type === \"int\" || type === \"ivec2\" || type === \"ivec3\" || type === \"ivec4\"\n  );\n}\n\nexport function isUintType(type: DynoType): boolean {\n  return (\n    type === \"uint\" || type === \"uvec2\" || type === \"uvec3\" || type === \"uvec4\"\n  );\n}\n\nexport function isFloatType(type: DynoType): boolean {\n  return (\n    type === \"float\" || type === \"vec2\" || type === \"vec3\" || type === \"vec4\"\n  );\n}\n\nexport function isMatFloatType(type: DynoType): boolean {\n  return (\n    type === \"mat2\" ||\n    type === \"mat2x2\" ||\n    type === \"mat2x3\" ||\n    type === \"mat2x4\" ||\n    type === \"mat3\" ||\n    type === \"mat3x2\" ||\n    type === \"mat3x3\" ||\n    type === \"mat3x4\" ||\n    type === \"mat4\" ||\n    type === \"mat4x2\" ||\n    type === \"mat4x3\" ||\n    type === \"mat4x4\"\n  );\n}\n\nexport function isAllFloatType(type: DynoType): boolean {\n  return isFloatType(type) || isMatFloatType(type);\n}\n\nexport function isVector2Type(type: DynoType): boolean {\n  return type === \"vec2\" || type === \"ivec2\" || type === \"uvec2\";\n}\n\nexport function isVector3Type(type: DynoType): boolean {\n  return type === \"vec3\" || type === \"ivec3\" || type === \"uvec3\";\n}\n\nexport function isVector4Type(type: DynoType): boolean {\n  return type === \"vec4\" || type === \"ivec4\" || type === \"uvec4\";\n}\n\nexport function isVectorType(type: DynoType): boolean {\n  return isVector2Type(type) || isVector3Type(type) || isVector4Type(type);\n}\n\nexport function isMat2(type: DynoType): boolean {\n  return type === \"mat2\" || type === \"mat2x2\";\n}\nexport function isMat3(type: DynoType): boolean {\n  return type === \"mat3\" || type === \"mat3x3\";\n}\nexport function isMat4(type: DynoType): boolean {\n  return type === \"mat4\" || type === \"mat4x4\";\n}\n\nexport function vectorElementType<A extends VectorTypes>(\n  type: A,\n): VectorElementType<A> {\n  switch (type) {\n    case \"vec2\":\n      return \"float\" as VectorElementType<A>;\n    case \"vec3\":\n      return \"float\" as VectorElementType<A>;\n    case \"vec4\":\n      return \"float\" as VectorElementType<A>;\n    case \"ivec2\":\n      return \"int\" as VectorElementType<A>;\n    case \"ivec3\":\n      return \"int\" as VectorElementType<A>;\n    case \"ivec4\":\n      return \"int\" as VectorElementType<A>;\n    case \"uvec2\":\n      return \"uint\" as VectorElementType<A>;\n    case \"uvec3\":\n      return \"uint\" as VectorElementType<A>;\n    case \"uvec4\":\n      return \"uint\" as VectorElementType<A>;\n    default:\n      throw new Error(`Invalid vector type: ${type}`);\n  }\n}\n\nexport function vectorDim<A extends VectorTypes>(type: A): number {\n  switch (type) {\n    case \"vec2\":\n    case \"ivec2\":\n    case \"uvec2\":\n      return 2;\n    case \"vec3\":\n    case \"ivec3\":\n    case \"uvec3\":\n      return 3;\n    case \"vec4\":\n    case \"ivec4\":\n    case \"uvec4\":\n      return 4;\n    default:\n      throw new Error(`Invalid vector type: ${type}`);\n  }\n}\n\nexport function sameSizeVec<T extends ValueTypes>(type: T): SameSizeVec<T> {\n  if (isScalarType(type)) {\n    return \"float\" as SameSizeVec<T>;\n  }\n  if (isVector2Type(type)) {\n    return \"vec2\" as SameSizeVec<T>;\n  }\n  if (isVector3Type(type)) {\n    return \"vec3\" as SameSizeVec<T>;\n  }\n  if (isVector4Type(type)) {\n    return \"vec4\" as SameSizeVec<T>;\n  }\n  throw new Error(`Invalid vector type: ${type}`);\n}\n\nexport function sameSizeUvec<T extends ValueTypes>(type: T): SameSizeUvec<T> {\n  if (isScalarType(type)) {\n    return \"uint\" as SameSizeUvec<T>;\n  }\n  if (isVector2Type(type)) {\n    return \"uvec2\" as SameSizeUvec<T>;\n  }\n  if (isVector3Type(type)) {\n    return \"uvec3\" as SameSizeUvec<T>;\n  }\n  if (isVector4Type(type)) {\n    return \"uvec4\" as SameSizeUvec<T>;\n  }\n  throw new Error(`Invalid vector type: ${type}`);\n}\n\nexport function sameSizeIvec<T extends ValueTypes>(type: T): SameSizeIvec<T> {\n  if (isScalarType(type)) {\n    return \"int\" as SameSizeIvec<T>;\n  }\n  if (isVector2Type(type)) {\n    return \"ivec2\" as SameSizeIvec<T>;\n  }\n  if (isVector3Type(type)) {\n    return \"ivec3\" as SameSizeIvec<T>;\n  }\n  if (isVector4Type(type)) {\n    return \"ivec4\" as SameSizeIvec<T>;\n  }\n  throw new Error(`Invalid vector type: ${type}`);\n}\n\nexport type BaseType = SimpleTypes | AllSamplerTypes;\nexport type UserType = { type: string };\nexport type DynoType = BaseType | UserType;\n\nexport type DynoJsType<T extends DynoType> = T extends \"bool\"\n  ? boolean\n  : T extends \"uint\"\n    ? number\n    : T extends \"int\"\n      ? number\n      : T extends \"float\"\n        ? number\n        : T extends \"bvec2\"\n          ? [boolean, boolean]\n          : T extends \"uvec2\"\n            ? THREE.Vector2 | [number, number] | Uint32Array\n            : T extends \"ivec2\"\n              ? THREE.Vector2 | [number, number] | Int32Array\n              : T extends \"vec2\"\n                ? THREE.Vector2 | [number, number] | Float32Array\n                : T extends \"bvec3\"\n                  ? [boolean, boolean, boolean]\n                  : T extends \"uvec3\"\n                    ? THREE.Vector3 | [number, number, number] | Uint32Array\n                    : T extends \"ivec3\"\n                      ? THREE.Vector3 | [number, number, number] | Int32Array\n                      : T extends \"vec3\"\n                        ?\n                            | THREE.Vector3\n                            | THREE.Color\n                            | [number, number, number]\n                            | Float32Array\n                        : T extends \"bvec4\"\n                          ? [boolean, boolean, boolean, boolean]\n                          : T extends \"uvec4\"\n                            ?\n                                | THREE.Vector4\n                                | [number, number, number, number]\n                                | Uint32Array\n                            : T extends \"ivec4\"\n                              ?\n                                  | THREE.Vector4\n                                  | [number, number, number, number]\n                                  | Int32Array\n                              : T extends \"vec4\"\n                                ?\n                                    | THREE.Vector4\n                                    | THREE.Quaternion\n                                    | [number, number, number, number]\n                                    | Float32Array\n                                : T extends \"mat2\"\n                                  ? THREE.Matrix2 | Float32Array\n                                  : T extends \"mat2x2\"\n                                    ? THREE.Matrix2 | Float32Array\n                                    : T extends \"mat2x3\"\n                                      ? Float32Array\n                                      : T extends \"mat2x4\"\n                                        ? Float32Array\n                                        : T extends \"mat3\"\n                                          ? THREE.Matrix3 | Float32Array\n                                          : T extends \"mat3x2\"\n                                            ? Float32Array\n                                            : T extends \"mat3x3\"\n                                              ? THREE.Matrix3 | Float32Array\n                                              : T extends \"mat3x4\"\n                                                ? Float32Array\n                                                : T extends \"mat4\"\n                                                  ? THREE.Matrix4 | Float32Array\n                                                  : T extends \"mat4x2\"\n                                                    ? Float32Array\n                                                    : T extends \"mat4x3\"\n                                                      ? Float32Array\n                                                      : T extends \"mat4x4\"\n                                                        ?\n                                                            | THREE.Matrix4\n                                                            | Float32Array\n                                                        : T extends \"usampler2D\"\n                                                          ? THREE.Texture\n                                                          : T extends \"isampler2D\"\n                                                            ? THREE.Texture\n                                                            : T extends \"sampler2D\"\n                                                              ? THREE.Texture\n                                                              : T extends \"sampler2DShadow\"\n                                                                ? THREE.Texture\n                                                                : T extends \"usampler2DArray\"\n                                                                  ? THREE.DataArrayTexture\n                                                                  : T extends \"isampler2DArray\"\n                                                                    ? THREE.DataArrayTexture\n                                                                    : T extends \"sampler2DArray\"\n                                                                      ? THREE.DataArrayTexture\n                                                                      : T extends \"sampler2DArrayShadow\"\n                                                                        ? THREE.Texture\n                                                                        : T extends \"usampler3D\"\n                                                                          ? THREE.DataArrayTexture\n                                                                          : T extends \"isampler3D\"\n                                                                            ? THREE.DataArrayTexture\n                                                                            : T extends \"sampler3D\"\n                                                                              ? THREE.DataArrayTexture\n                                                                              : T extends \"usamplerCube\"\n                                                                                ? THREE.DataArrayTexture\n                                                                                : T extends \"isamplerCube\"\n                                                                                  ? THREE.DataArrayTexture\n                                                                                  : T extends \"samplerCube\"\n                                                                                    ? THREE.DataArrayTexture\n                                                                                    : T extends \"samplerCubeShadow\"\n                                                                                      ? THREE.Texture\n                                                                                      : unknown;\n\nexport function typeLiteral(type: DynoType): string {\n  if (typeof type === \"string\") {\n    return type;\n  }\n  if (typeof type === \"object\" && type.type) {\n    return type.type;\n  }\n  throw new Error(`Invalid DynoType: ${String(type)}`);\n}\n\nexport function numberAsInt(value: number): string {\n  return Math.trunc(value).toString();\n}\n\nexport function numberAsUint(value: number): string {\n  const v = Math.max(0, Math.trunc(value));\n  return `${v.toString()}u`;\n}\n\nexport function numberAsFloat(value: number): string {\n  return value === Number.POSITIVE_INFINITY\n    ? \"INFINITY\"\n    : value === Number.NEGATIVE_INFINITY\n      ? \"-INFINITY\"\n      : Number.isInteger(value)\n        ? value.toFixed(1)\n        : value.toString();\n}\n","import * as THREE from \"three\";\n\nimport type { Dyno, IOTypes } from \"./base\";\nimport {\n  type DynoJsType,\n  type DynoType,\n  type SimpleTypes,\n  isAllFloatType,\n  isBoolType,\n  isIntType,\n  isUintType,\n  numberAsFloat,\n  numberAsInt,\n  numberAsUint,\n} from \"./types\";\n\nexport type DynoVal<T extends DynoType> = DynoValue<T> | HasDynoOut<T>;\n\nexport function valType<T extends DynoType>(val: DynoVal<T>): T {\n  if (val instanceof DynoValue) {\n    return val.type;\n  }\n  const value = val.dynoOut();\n  return value.type;\n}\n\nexport interface HasDynoOut<T extends DynoType> {\n  dynoOut(): DynoValue<T>;\n}\n\nexport class DynoValue<T extends DynoType> {\n  type: T;\n  // This field prevents TypeScript structural matching on objects with a \"type\" field\n  private __isDynoValue = true;\n\n  constructor(type: T) {\n    this.type = type;\n  }\n}\n\nexport class DynoOutput<\n  T extends DynoType,\n  InTypes extends IOTypes,\n  OutTypes extends IOTypes,\n> extends DynoValue<T> {\n  dyno: Dyno<InTypes, OutTypes>;\n  key: string;\n\n  constructor(dyno: Dyno<InTypes, OutTypes>, key: string) {\n    super(dyno.outTypes[key] as T);\n    this.dyno = dyno;\n    this.key = key;\n  }\n}\n\nexport class DynoLiteral<T extends DynoType> extends DynoValue<T> {\n  literal: string;\n\n  constructor(type: T, literal: string) {\n    super(type);\n    this.literal = literal;\n  }\n\n  getLiteral(): string {\n    return this.literal;\n  }\n}\n\nexport function dynoLiteral<T extends DynoType>(\n  type: T,\n  literal: string,\n): DynoLiteral<T> {\n  return new DynoLiteral(type, literal);\n}\n\nexport class DynoConst<T extends DynoType> extends DynoLiteral<T> {\n  value: DynoJsType<T>;\n\n  constructor(type: T, value: DynoJsType<T>) {\n    super(type, \"\");\n    this.value = value;\n  }\n\n  getLiteral(): string {\n    const { type, value } = this;\n    switch (type) {\n      case \"bool\":\n        return value ? \"true\" : \"false\";\n      case \"uint\":\n        return numberAsUint(value as number);\n      case \"int\":\n        return numberAsInt(value as number);\n      case \"float\":\n        return numberAsFloat(value as number);\n      case \"bvec2\": {\n        const v = value as [boolean, boolean];\n        return `bvec2(${v[0]}, ${v[1]})`;\n      }\n      case \"uvec2\": {\n        if (value instanceof THREE.Vector2) {\n          return `uvec2(${numberAsUint(value.x)}, ${numberAsUint(value.y)})`;\n        }\n        const v = value as [number, number] | Uint32Array;\n        return `uvec2(${numberAsUint(v[0])}, ${numberAsUint(v[1])})`;\n      }\n      case \"ivec2\": {\n        if (value instanceof THREE.Vector2) {\n          return `ivec2(${numberAsInt(value.x)}, ${numberAsInt(value.y)})`;\n        }\n        const v = value as [number, number] | Int32Array;\n        return `ivec2(${numberAsInt(v[0])}, ${numberAsInt(v[1])})`;\n      }\n      case \"vec2\": {\n        if (value instanceof THREE.Vector2) {\n          return `vec2(${numberAsFloat(value.x)}, ${numberAsFloat(value.y)})`;\n        }\n        const v = value as [number, number] | Float32Array;\n        return `vec2(${numberAsFloat(v[0])}, ${numberAsFloat(v[1])})`;\n      }\n      case \"bvec3\": {\n        const v = value as [boolean, boolean, boolean];\n        return `bvec3(${v[0]}, ${v[1]}, ${v[2]})`;\n      }\n      case \"uvec3\": {\n        if (value instanceof THREE.Vector3) {\n          return `uvec3(${numberAsUint(value.x)}, ${numberAsUint(value.y)}, ${numberAsUint(value.z)})`;\n        }\n        const v = value as [number, number, number] | Uint32Array;\n        return `uvec3(${numberAsUint(v[0])}, ${numberAsUint(v[1])}, ${numberAsUint(v[2])})`;\n      }\n      case \"ivec3\": {\n        if (value instanceof THREE.Vector3) {\n          return `ivec3(${numberAsInt(value.x)}, ${numberAsInt(value.y)}, ${numberAsInt(value.z)})`;\n        }\n        const v = value as [number, number, number] | Int32Array;\n        return `ivec3(${numberAsInt(v[0])}, ${numberAsInt(v[1])}, ${numberAsInt(v[2])})`;\n      }\n      case \"vec3\": {\n        if (value instanceof THREE.Vector3) {\n          return `vec3(${numberAsFloat(value.x)}, ${numberAsFloat(value.y)}, ${numberAsFloat(value.z)})`;\n        }\n        const v = value as [number, number, number] | Float32Array;\n        return `vec3(${numberAsFloat(v[0])}, ${numberAsFloat(v[1])}, ${numberAsFloat(v[2])})`;\n      }\n      case \"bvec4\": {\n        const v = value as [boolean, boolean, boolean, boolean];\n        return `bvec4(${v[0]}, ${v[1]}, ${v[2]}, ${v[3]})`;\n      }\n      case \"uvec4\": {\n        if (value instanceof THREE.Vector4) {\n          return `uvec4(${numberAsUint(value.x)}, ${numberAsUint(value.y)}, ${numberAsUint(value.z)}, ${numberAsUint(value.w)})`;\n        }\n        const v = value as [number, number, number, number] | Uint32Array;\n        return `uvec4(${numberAsUint(v[0])}, ${numberAsUint(v[1])}, ${numberAsUint(v[2])}, ${numberAsUint(v[3])})`;\n      }\n      case \"ivec4\": {\n        if (value instanceof THREE.Vector4) {\n          return `ivec4(${numberAsInt(value.x)}, ${numberAsInt(value.y)}, ${numberAsInt(value.z)}, ${numberAsInt(value.w)})`;\n        }\n        const v = value as [number, number, number, number] | Int32Array;\n        return `ivec4(${numberAsInt(v[0])}, ${numberAsInt(v[1])}, ${numberAsInt(v[2])}, ${numberAsInt(v[3])})`;\n      }\n      case \"vec4\": {\n        if (value instanceof THREE.Vector4) {\n          return `vec4(${numberAsFloat(value.x)}, ${numberAsFloat(value.y)}, ${numberAsFloat(value.z)}, ${numberAsFloat(value.w)})`;\n        }\n        if (value instanceof THREE.Quaternion) {\n          return `vec4(${numberAsFloat(value.x)}, ${numberAsFloat(value.y)}, ${numberAsFloat(value.z)}, ${numberAsFloat(value.w)})`;\n        }\n        const v = value as [number, number, number, number] | Float32Array;\n        return `vec4(${numberAsFloat(v[0])}, ${numberAsFloat(v[1])}, ${numberAsFloat(v[2])}, ${numberAsFloat(v[3])})`;\n      }\n      case \"mat2\":\n      case \"mat2x2\": {\n        const m = value as DynoJsType<\"mat2\">;\n        const e =\n          m instanceof THREE.Matrix2 ? m.elements : (value as Float32Array);\n        const arg = new Array(4).fill(0).map((_, i) => numberAsFloat(e[i]));\n        return `${type as string}(${arg.join(\", \")})`;\n      }\n      case \"mat2x3\": {\n        const e = value as DynoJsType<\"mat2x3\">;\n        const arg = new Array(6).fill(0).map((_, i) => numberAsFloat(e[i]));\n        return `${type as string}(${arg.join(\", \")})`;\n      }\n      case \"mat2x4\": {\n        const e = value as DynoJsType<\"mat2x4\">;\n        const arg = new Array(8).fill(0).map((_, i) => numberAsFloat(e[i]));\n        return `${type as string}(${arg.join(\", \")})`;\n      }\n      case \"mat3\":\n      case \"mat3x3\": {\n        const m = value as DynoJsType<\"mat3\">;\n        const e =\n          m instanceof THREE.Matrix3 ? m.elements : (value as Float32Array);\n        const arg = new Array(9).fill(0).map((_, i) => numberAsFloat(e[i]));\n        return `${type as string}(${arg.join(\", \")})`;\n      }\n      case \"mat3x2\": {\n        const e = value as DynoJsType<\"mat3x2\">;\n        const arg = new Array(6).fill(0).map((_, i) => numberAsFloat(e[i]));\n        return `${type as string}(${arg.join(\", \")})`;\n      }\n      case \"mat3x4\": {\n        const e = value as DynoJsType<\"mat3x4\">;\n        const arg = new Array(12).fill(0).map((_, i) => numberAsFloat(e[i]));\n        return `${type as string}(${arg.join(\", \")})`;\n      }\n      case \"mat4\":\n      case \"mat4x4\": {\n        const m = value as DynoJsType<\"mat4\">;\n        const e =\n          m instanceof THREE.Matrix4 ? m.elements : (value as Float32Array);\n        const arg = new Array(16).fill(0).map((_, i) => numberAsFloat(e[i]));\n        return `${type as string}(${arg.join(\", \")})`;\n      }\n      case \"mat4x2\": {\n        const e = value as DynoJsType<\"mat4x2\">;\n        const arg = new Array(8).fill(0).map((_, i) => numberAsFloat(e[i]));\n        return `${type as string}(${arg.join(\", \")})`;\n      }\n      case \"mat4x3\": {\n        const e = value as DynoJsType<\"mat4x3\">;\n        const arg = new Array(12).fill(0).map((_, i) => numberAsFloat(e[i]));\n        return `${type as string}(${arg.join(\", \")})`;\n      }\n      default:\n        throw new Error(`Type not implemented: ${String(type)}`);\n    }\n  }\n}\n\nexport function dynoConst<T extends DynoType>(\n  type: T,\n  value: DynoJsType<T>,\n): DynoConst<T> {\n  return new DynoConst(type, value);\n}\n\nexport function literalZero(type: SimpleTypes): string {\n  const typeString = String(type);\n  if (isBoolType(type)) {\n    return `${typeString}(false)`;\n  }\n  if (isAllFloatType(type)) {\n    return `${typeString}(0.0)`;\n  }\n  if (isIntType(type)) {\n    return `${typeString}(0)`;\n  }\n  if (isUintType(type)) {\n    return `${typeString}(0u)`;\n  }\n  throw new Error(`Type not implemented: ${typeString}`);\n}\n\nexport function literalOne(type: SimpleTypes): string {\n  const typeString = String(type);\n  if (isBoolType(type)) {\n    return `${typeString}(true)`;\n  }\n  if (isAllFloatType(type)) {\n    return `${typeString}(1.0)`;\n  }\n  if (isIntType(type)) {\n    return `${typeString}(1)`;\n  }\n  if (isUintType(type)) {\n    return `${typeString}(1u)`;\n  }\n  throw new Error(`Type not implemented: ${typeString}`);\n}\n\nexport function literalNegOne(type: SimpleTypes): string {\n  const typeString = String(type);\n  if (isBoolType(type)) {\n    return `${typeString}(true)`;\n  }\n  if (isAllFloatType(type)) {\n    return `${typeString}(-1.0)`;\n  }\n  if (isIntType(type)) {\n    return `${typeString}(-1)`;\n  }\n  if (isUintType(type)) {\n    return `${typeString}(0xFFFFFFFFu)`;\n  }\n  throw new Error(`Type not implemented: ${typeString}`);\n}\n","import type { IUniform } from \"three\";\nimport type { DynoType } from \"./types\";\nimport {\n  DynoLiteral,\n  DynoOutput,\n  type DynoVal,\n  DynoValue,\n  type HasDynoOut,\n  valType,\n} from \"./value\";\n\nconst DEFAULT_INDENT = \"    \";\n\nexport class Compilation {\n  globals: Set<string> = new Set();\n  statements: string[] = [];\n  uniforms: Record<string, IUniform> = {};\n  declares: Set<string> = new Set();\n  updaters: (() => void)[] = [];\n  sequence = 0;\n  indent: string = DEFAULT_INDENT;\n\n  constructor({ indent }: { indent?: string } = {}) {\n    this.indent = indent ?? DEFAULT_INDENT;\n  }\n\n  nextSequence() {\n    return this.sequence++;\n  }\n}\n\nexport type IOTypes = Record<string, DynoType>;\ntype GenerateContext<InTypes extends IOTypes, OutTypes extends IOTypes> = {\n  inputs: { [K in keyof InTypes]?: string };\n  outputs: { [K in keyof OutTypes]?: string };\n  compile: Compilation;\n};\n\nexport class Dyno<InTypes extends IOTypes, OutTypes extends IOTypes> {\n  inTypes: InTypes;\n  outTypes: OutTypes;\n\n  inputs: { [K in keyof InTypes]?: DynoVal<InTypes[K]> };\n  update?: () => void;\n  globals?: ({\n    inputs,\n    outputs,\n    compile,\n  }: GenerateContext<InTypes, OutTypes>) => string[];\n  statements?: ({\n    inputs,\n    outputs,\n    compile,\n  }: GenerateContext<InTypes, OutTypes>) => string[];\n  generate: ({\n    inputs,\n    outputs,\n    compile,\n  }: GenerateContext<InTypes, OutTypes>) => {\n    globals?: string[];\n    statements?: string[];\n    uniforms?: Record<string, IUniform>;\n  };\n\n  constructor({\n    inTypes,\n    outTypes,\n    inputs,\n    update,\n    globals,\n    statements,\n    generate,\n  }: {\n    inTypes?: InTypes;\n    outTypes?: OutTypes;\n    inputs?: { [K in keyof InTypes]?: DynoVal<InTypes[K]> };\n    update?: () => void;\n    globals?: ({\n      inputs,\n      outputs,\n      compile,\n    }: GenerateContext<InTypes, OutTypes>) => string[];\n    statements?: ({\n      inputs,\n      outputs,\n      compile,\n    }: GenerateContext<InTypes, OutTypes>) => string[];\n    generate?: ({\n      inputs,\n      outputs,\n      compile,\n    }: GenerateContext<InTypes, OutTypes>) => {\n      globals?: string[];\n      statements?: string[];\n      uniforms?: Record<string, IUniform>;\n    };\n  }) {\n    this.inTypes = inTypes ?? ({} as InTypes);\n    this.outTypes = outTypes ?? ({} as OutTypes);\n    this.inputs = inputs ?? {};\n    this.update = update;\n\n    this.globals = globals;\n    this.statements = statements;\n    this.generate =\n      generate ??\n      (({ inputs, outputs, compile }) => {\n        return {\n          globals: this.globals?.({ inputs, outputs, compile }),\n          statements: this.statements?.({ inputs, outputs, compile }),\n        };\n      });\n  }\n\n  get outputs(): { [K in keyof OutTypes]: DynoVal<OutTypes[K]> } {\n    const outputs = {} as { [K in keyof OutTypes]: DynoVal<OutTypes[K]> };\n    for (const key in this.outTypes) {\n      outputs[key] = new DynoOutput(this, key);\n    }\n    return outputs;\n  }\n\n  apply(inputs: { [K in keyof InTypes]?: DynoVal<InTypes[K]> }): {\n    [K in keyof OutTypes]: DynoVal<OutTypes[K]>;\n  } {\n    Object.assign(this.inputs, inputs);\n    return this.outputs;\n  }\n\n  compile({\n    inputs,\n    outputs,\n    compile,\n  }: {\n    inputs: { [K in keyof InTypes]?: string };\n    outputs: { [K in keyof OutTypes]?: string };\n    compile: Compilation;\n  }): string[] {\n    const result = [\n      `// ${this.constructor.name}(${Object.values(inputs).join(\", \")}) => (${Object.values(outputs).join(\", \")})`,\n    ];\n\n    const declares: (keyof OutTypes)[] = [];\n    for (const key in outputs) {\n      const name = outputs[key];\n      if (name && !compile.declares.has(name)) {\n        compile.declares.add(name);\n        declares.push(key);\n      }\n    }\n\n    const { globals, statements, uniforms } = this.generate({\n      inputs,\n      outputs,\n      compile,\n    });\n    for (const global of globals ?? []) {\n      compile.globals.add(global);\n    }\n    for (const key in uniforms) {\n      compile.uniforms[key] = uniforms[key];\n    }\n    if (this.update) {\n      compile.updaters.push(this.update);\n    }\n\n    for (const key of declares) {\n      const name = outputs[key];\n      if (name) {\n        if (!compile.uniforms[name]) {\n          result.push(`${dynoDeclare(name, this.outTypes[key])};`);\n        }\n      }\n    }\n\n    if (statements?.length) {\n      result.push(\"{\");\n      result.push(...statements.map((line) => compile.indent + line));\n      result.push(\"}\");\n    }\n    return result;\n  }\n}\n\nexport type DynoBlockType<InTypes extends IOTypes, OutTypes extends IOTypes> = (\n  inputs: { [K in keyof InTypes]?: DynoVal<InTypes[K]> },\n  outputs: { [K in keyof OutTypes]?: DynoVal<OutTypes[K]> },\n  { roots }: { roots: Dyno<InTypes, OutTypes>[] },\n) => { [K in keyof OutTypes]?: DynoVal<OutTypes[K]> } | undefined;\n\nexport class DynoBlock<\n  InTypes extends IOTypes,\n  OutTypes extends IOTypes,\n> extends Dyno<InTypes, OutTypes> {\n  construct: DynoBlockType<InTypes, OutTypes>;\n\n  constructor({\n    inTypes,\n    outTypes,\n    inputs,\n    update,\n    globals,\n    construct,\n  }: {\n    inTypes?: InTypes;\n    outTypes?: OutTypes;\n    inputs?: { [K in keyof InTypes]?: DynoVal<InTypes[K]> };\n    update?: () => void;\n    globals?: ({\n      inputs,\n      outputs,\n      compile,\n    }: GenerateContext<InTypes, OutTypes>) => string[];\n    construct: DynoBlockType<InTypes, OutTypes>;\n  }) {\n    super({\n      inTypes,\n      outTypes,\n      inputs,\n      update,\n      globals,\n      generate: (args) => this.generateBlock(args),\n    });\n    this.construct = construct;\n  }\n\n  generateBlock({\n    inputs,\n    outputs,\n    compile,\n  }: {\n    inputs: { [K in keyof InTypes]?: string };\n    outputs: { [K in keyof OutTypes]?: string };\n    compile: Compilation;\n  }) {\n    const blockInputs: { [K in keyof InTypes]?: DynoVal<InTypes[K]> } = {};\n    const blockOutputs: { [K in keyof OutTypes]?: DynoVal<OutTypes[K]> } = {};\n\n    for (const key in inputs) {\n      if (inputs[key] != null) {\n        blockInputs[key] = new DynoLiteral(this.inTypes[key], inputs[key]);\n      }\n    }\n    for (const key in outputs) {\n      if (outputs[key] != null) {\n        blockOutputs[key] = new DynoValue(this.outTypes[key]);\n      }\n    }\n\n    const options = { roots: [] };\n    const returned = this.construct(blockInputs, blockOutputs, options);\n\n    for (const global of this.globals?.({ inputs, outputs, compile }) ?? []) {\n      compile.globals.add(global);\n    }\n\n    const ordering: Dyno<IOTypes, IOTypes>[] = [];\n    const nodeOuts = new Map<\n      Dyno<IOTypes, IOTypes>,\n      { sequence: number; outNames: Map<string, string>; newOuts: Set<string> }\n    >();\n\n    function visit(\n      node: Dyno<IOTypes, IOTypes>,\n      outKey?: string,\n      outName?: string,\n    ) {\n      let outs = nodeOuts.get(node);\n      if (!outs) {\n        // First time visiting this node\n        outs = {\n          sequence: compile.nextSequence(),\n          outNames: new Map(),\n          newOuts: new Set(),\n        };\n        nodeOuts.set(node, outs);\n\n        for (const key in node.inputs) {\n          let input = node.inputs[key];\n          while (input) {\n            if (input instanceof DynoValue) {\n              if (input instanceof DynoOutput) {\n                visit(input.dyno, input.key);\n              }\n              break;\n            }\n            // Must be as HasDynoOut<T>\n            input = input.dynoOut();\n          }\n        }\n        ordering.push(node);\n      }\n      if (outKey) {\n        if (!outName) {\n          outs.newOuts.add(outKey);\n        }\n        outs.outNames.set(outKey, outName ?? `${outKey}_${outs.sequence}`);\n      }\n    }\n\n    for (const root of options.roots) {\n      visit(root);\n    }\n\n    for (const key in blockOutputs) {\n      let value = returned?.[key] ?? blockOutputs[key];\n      while (value) {\n        if (value instanceof DynoValue) {\n          if (value instanceof DynoOutput) {\n            visit(value.dyno, value.key, outputs[key]);\n          }\n          break;\n        }\n        // Must be as HasDynoOut<T>\n        value = value.dynoOut();\n      }\n      blockOutputs[key] = value;\n    }\n\n    const steps = [];\n\n    for (const dyno of ordering) {\n      // compile.statements.push(`// ${dyno.constructor.name}(${Object.values(inputs).join(\", \")}) => (${Object.values(outputs).join(\", \")})`);\n\n      const inputs: Record<string, string> = {};\n      const outputs: Record<string, string> = {};\n\n      for (const key in dyno.inputs) {\n        let value = dyno.inputs[key];\n        while (value) {\n          if (value instanceof DynoValue) {\n            if (value instanceof DynoLiteral) {\n              inputs[key] = value.getLiteral();\n            } else if (value instanceof DynoOutput) {\n              const source = nodeOuts.get(value.dyno)?.outNames.get(value.key);\n              if (!source) {\n                throw new Error(\n                  `Source not found for ${value.dyno.constructor.name}.${value.key}`,\n                );\n              }\n              inputs[key] = source;\n            }\n            break;\n          }\n          // Must be as HasDynOut<T>\n          value = value.dynoOut();\n        }\n      }\n\n      const outs = nodeOuts.get(dyno) ?? { outNames: new Map() };\n      for (const [key, name] of outs.outNames.entries()) {\n        outputs[key] = name;\n      }\n\n      const newSteps = dyno.compile({ inputs, outputs, compile });\n      steps.push(newSteps);\n    }\n\n    const literalOutputs = [];\n    for (const key in outputs) {\n      if (blockOutputs[key] instanceof DynoLiteral) {\n        literalOutputs.push(\n          `${outputs[key]} = ${blockOutputs[key].getLiteral()};`,\n        );\n      }\n    }\n    if (literalOutputs.length > 0) {\n      steps.push(literalOutputs);\n    }\n\n    const statements = steps.flatMap((step, index) => {\n      // Add a blank line between steps\n      return index === 0 ? step : [\"\", ...step];\n    });\n    return { statements };\n  }\n}\n\nexport function dynoBlock<\n  InTypes extends Record<string, DynoType>,\n  OutTypes extends Record<string, DynoType>,\n>(\n  inTypes: InTypes,\n  outTypes: OutTypes,\n  construct: DynoBlockType<InTypes, OutTypes>,\n  { update, globals }: { update?: () => void; globals?: () => string[] } = {},\n) {\n  return new DynoBlock({ inTypes, outTypes, construct, update, globals });\n}\n\nexport function dyno<\n  InTypes extends Record<string, DynoType>,\n  OutTypes extends Record<string, DynoType>,\n>({\n  inTypes,\n  outTypes,\n  inputs,\n  update,\n  globals,\n  statements,\n  generate,\n}: {\n  inTypes: InTypes;\n  outTypes: OutTypes;\n  inputs?: { [K in keyof InTypes]?: DynoVal<InTypes[K]> };\n  update?: () => void;\n  globals?: ({\n    inputs,\n    outputs,\n    compile,\n  }: GenerateContext<InTypes, OutTypes>) => string[];\n  statements?: ({\n    inputs,\n    outputs,\n    compile,\n  }: GenerateContext<InTypes, OutTypes>) => string[];\n  generate?: ({\n    inputs,\n    outputs,\n    compile,\n  }: GenerateContext<InTypes, OutTypes>) => {\n    globals?: string[];\n    statements?: string[];\n    uniforms?: Record<string, IUniform>;\n  };\n}) {\n  return new Dyno({\n    inTypes,\n    outTypes,\n    inputs,\n    update,\n    globals,\n    statements,\n    generate,\n  });\n}\n\nexport function dynoDeclare(name: string, type: DynoType, count?: number) {\n  const typeStr = typeof type === \"string\" ? type : type.type;\n  if (!typeStr) {\n    throw new Error(`Invalid DynoType: ${String(type)}`);\n  }\n  return `${typeStr} ${name}${count != null ? `[${count}]` : \"\"}`;\n}\n\nexport function unindentLines(s: string): string[] {\n  let seenNonEmpty = false;\n  const lines = s\n    .split(\"\\n\")\n    .map((line) => {\n      const trimmedLine = line.trimEnd();\n      if (seenNonEmpty) {\n        return trimmedLine;\n      }\n      if (trimmedLine.length > 0) {\n        seenNonEmpty = true;\n        return trimmedLine;\n      }\n      return null;\n    })\n    .filter((line) => line != null);\n  while (lines.length > 0 && lines[lines.length - 1].length === 0) {\n    lines.pop();\n  }\n  if (lines.length === 0) {\n    return [];\n  }\n\n  const indent = lines[0].match(/^\\s*/)?.[0];\n  if (!indent) {\n    return lines; // No indent, return as is\n  }\n  // Remove indent from the beginning of each line\n  const regex = new RegExp(`^${indent}`);\n  return lines.map((line) => line.replace(regex, \"\"));\n}\n\nexport function unindent(s: string): string {\n  return unindentLines(s).join(\"\\n\");\n}\n\nexport class UnaryOp<\n    A extends DynoType,\n    OutType extends DynoType,\n    OutKey extends string,\n  >\n  extends Dyno<{ a: A }, { [key in OutKey]: OutType }>\n  implements HasDynoOut<OutType>\n{\n  constructor({\n    a,\n    outKey,\n    outTypeFunc,\n  }: { a: DynoVal<A>; outKey: OutKey; outTypeFunc: (aType: A) => OutType }) {\n    const inTypes = { a: valType(a) };\n    const outType = outTypeFunc(valType(a));\n    const outTypes = { [outKey]: outType } as { [key in OutKey]: OutType };\n    super({ inTypes, outTypes, inputs: { a } });\n    this.outKey = outKey;\n  }\n\n  outKey: OutKey;\n  dynoOut(): DynoValue<OutType> {\n    return new DynoOutput(this, this.outKey);\n  }\n}\n\nexport class BinaryOp<\n    A extends DynoType,\n    B extends DynoType,\n    OutType extends DynoType,\n    OutKey extends string,\n  >\n  extends Dyno<{ a: A; b: B }, { [key in OutKey]: OutType }>\n  implements HasDynoOut<OutType>\n{\n  constructor({\n    a,\n    b,\n    outKey,\n    outTypeFunc,\n  }: {\n    a: DynoVal<A>;\n    b: DynoVal<B>;\n    outKey: OutKey;\n    outTypeFunc: (aType: A, bType: B) => OutType;\n  }) {\n    const inTypes = { a: valType(a), b: valType(b) };\n    const outType = outTypeFunc(valType(a), valType(b));\n    const outTypes = { [outKey]: outType } as { [key in OutKey]: OutType };\n    super({ inTypes, outTypes, inputs: { a, b } });\n    this.outKey = outKey;\n  }\n\n  outKey: OutKey;\n  dynoOut(): DynoValue<OutType> {\n    return new DynoOutput(this, this.outKey);\n  }\n}\n\nexport class TrinaryOp<\n    A extends DynoType,\n    B extends DynoType,\n    C extends DynoType,\n    OutType extends DynoType,\n    OutKey extends string,\n  >\n  extends Dyno<{ a: A; b: B; c: C }, { [key in OutKey]: OutType }>\n  implements HasDynoOut<OutType>\n{\n  constructor({\n    a,\n    b,\n    c,\n    outKey,\n    outTypeFunc,\n  }: {\n    a: DynoVal<A>;\n    b: DynoVal<B>;\n    c: DynoVal<C>;\n    outKey: OutKey;\n    outTypeFunc: (aType: A, bType: B, cType: C) => OutType;\n  }) {\n    const inTypes = { a: valType(a), b: valType(b), c: valType(c) };\n    const outType = outTypeFunc(valType(a), valType(b), valType(c));\n    const outTypes = { [outKey]: outType } as { [key in OutKey]: OutType };\n    super({ inTypes, outTypes, inputs: { a, b, c } });\n    this.outKey = outKey;\n  }\n\n  outKey: OutKey;\n  dynoOut(): DynoValue<OutType> {\n    return new DynoOutput(this, this.outKey);\n  }\n}\n","import { Dyno, UnaryOp, unindent, unindentLines } from \"./base\";\nimport {\n  DynoOutput,\n  type DynoVal,\n  type DynoValue,\n  type HasDynoOut,\n} from \"./value\";\n\nexport const Gsplat = { type: \"Gsplat\" } as { type: \"Gsplat\" };\nexport const TPackedSplats = { type: \"PackedSplats\" } as {\n  type: \"PackedSplats\";\n};\n\nexport const numPackedSplats = (\n  packedSplats: DynoVal<typeof TPackedSplats>,\n): DynoVal<\"int\"> => new NumPackedSplats({ packedSplats });\nexport const readPackedSplat = (\n  packedSplats: DynoVal<typeof TPackedSplats>,\n  index: DynoVal<\"int\">,\n): DynoVal<typeof Gsplat> => new ReadPackedSplat({ packedSplats, index });\nexport const readPackedSplatRange = (\n  packedSplats: DynoVal<typeof TPackedSplats>,\n  index: DynoVal<\"int\">,\n  base: DynoVal<\"int\">,\n  count: DynoVal<\"int\">,\n): DynoVal<typeof Gsplat> =>\n  new ReadPackedSplatRange({ packedSplats, index, base, count });\nexport const splitGsplat = (gsplat: DynoVal<typeof Gsplat>) =>\n  new SplitGsplat({ gsplat });\nexport const combineGsplat = ({\n  gsplat,\n  flags,\n  index,\n  center,\n  scales,\n  quaternion,\n  rgba,\n  rgb,\n  opacity,\n  x,\n  y,\n  z,\n  r,\n  g,\n  b,\n}: {\n  gsplat?: DynoVal<typeof Gsplat>;\n  flags?: DynoVal<\"uint\">;\n  index?: DynoVal<\"int\">;\n  center?: DynoVal<\"vec3\">;\n  scales?: DynoVal<\"vec3\">;\n  quaternion?: DynoVal<\"vec4\">;\n  rgba?: DynoVal<\"vec4\">;\n  rgb?: DynoVal<\"vec3\">;\n  opacity?: DynoVal<\"float\">;\n  x?: DynoVal<\"float\">;\n  y?: DynoVal<\"float\">;\n  z?: DynoVal<\"float\">;\n  r?: DynoVal<\"float\">;\n  g?: DynoVal<\"float\">;\n  b?: DynoVal<\"float\">;\n}): DynoVal<typeof Gsplat> => {\n  return new CombineGsplat({\n    gsplat,\n    flags,\n    index,\n    center,\n    scales,\n    quaternion,\n    rgba,\n    rgb,\n    opacity,\n    x,\n    y,\n    z,\n    r,\n    g,\n    b,\n  });\n};\nexport const gsplatNormal = (gsplat: DynoVal<typeof Gsplat>): DynoVal<\"vec3\"> =>\n  new GsplatNormal({ gsplat });\n\nexport const transformGsplat = (\n  gsplat: DynoVal<typeof Gsplat>,\n  {\n    scale,\n    rotate,\n    translate,\n    recolor,\n  }: {\n    scale?: DynoVal<\"float\">;\n    rotate?: DynoVal<\"vec4\">;\n    translate?: DynoVal<\"vec3\">;\n    recolor?: DynoVal<\"vec4\">;\n  },\n): DynoVal<typeof Gsplat> => {\n  return new TransformGsplat({ gsplat, scale, rotate, translate, recolor });\n};\n\nexport const defineGsplat = unindent(`\n  struct Gsplat {\n    vec3 center;\n    uint flags;\n    vec3 scales;\n    int index;\n    vec4 quaternion;\n    vec4 rgba;\n  };\n  const uint GSPLAT_FLAG_ACTIVE = 1u << 0u;\n\n  bool isGsplatActive(uint flags) {\n    return (flags & GSPLAT_FLAG_ACTIVE) != 0u;\n  }\n`);\n\nexport const definePackedSplats = unindent(`\n  struct PackedSplats {\n    usampler2DArray texture;\n    int numSplats;\n    vec4 rgbMinMaxLnScaleMinMax;\n  };\n`);\n\nexport class NumPackedSplats extends UnaryOp<\n  typeof TPackedSplats,\n  \"int\",\n  \"numSplats\"\n> {\n  constructor({\n    packedSplats,\n  }: { packedSplats: DynoVal<typeof TPackedSplats> }) {\n    super({ a: packedSplats, outKey: \"numSplats\", outTypeFunc: () => \"int\" });\n    this.statements = ({ inputs, outputs }) => [\n      `${outputs.numSplats} = ${inputs.a}.numSplats;`,\n    ];\n  }\n}\n\nconst defineReadPackedSplat = unindent(`\n  bool readPackedSplat(usampler2DArray texture, int numSplats, vec4 rgbMinMaxLnScaleMinMax, int index, out Gsplat gsplat) {\n    if ((index >= 0) && (index < numSplats)) {\n      uvec4 packed = texelFetch(texture, splatTexCoord(index), 0);\n      unpackSplatEncoding(packed, gsplat.center, gsplat.scales, gsplat.quaternion, gsplat.rgba, rgbMinMaxLnScaleMinMax);\n      return true;\n    } else {\n      return false;\n    }\n  }\n`);\n\nexport class ReadPackedSplat\n  extends Dyno<\n    { packedSplats: typeof TPackedSplats; index: \"int\" },\n    { gsplat: typeof Gsplat }\n  >\n  implements HasDynoOut<typeof Gsplat>\n{\n  constructor({\n    packedSplats,\n    index,\n  }: { packedSplats?: DynoVal<typeof TPackedSplats>; index?: DynoVal<\"int\"> }) {\n    super({\n      inTypes: { packedSplats: TPackedSplats, index: \"int\" },\n      outTypes: { gsplat: Gsplat },\n      inputs: { packedSplats, index },\n      globals: () => [defineGsplat, definePackedSplats, defineReadPackedSplat],\n      statements: ({ inputs, outputs }) => {\n        const { gsplat } = outputs;\n        if (!gsplat) {\n          return [];\n        }\n        const { packedSplats, index } = inputs;\n        let statements: string[];\n        if (packedSplats && index) {\n          statements = unindentLines(`\n            if (readPackedSplat(${packedSplats}.texture, ${packedSplats}.numSplats, ${packedSplats}.rgbMinMaxLnScaleMinMax, ${index}, ${gsplat})) {\n              bool zeroSize = all(equal(${gsplat}.scales, vec3(0.0, 0.0, 0.0)));\n              ${gsplat}.flags = zeroSize ? 0u : GSPLAT_FLAG_ACTIVE;\n            } else {\n              ${gsplat}.flags = 0u;\n            }\n          `);\n        } else {\n          statements = [`${gsplat}.flags = 0u;`];\n        }\n        statements.push(`${gsplat}.index = ${index ?? \"0\"};`);\n        return statements;\n      },\n    });\n  }\n\n  dynoOut(): DynoValue<typeof Gsplat> {\n    return new DynoOutput(this, \"gsplat\");\n  }\n}\n\nexport class ReadPackedSplatRange\n  extends Dyno<\n    {\n      packedSplats: typeof TPackedSplats;\n      index: \"int\";\n      base: \"int\";\n      count: \"int\";\n    },\n    { gsplat: typeof Gsplat }\n  >\n  implements HasDynoOut<typeof Gsplat>\n{\n  constructor({\n    packedSplats,\n    index,\n    base,\n    count,\n  }: {\n    packedSplats?: DynoVal<typeof TPackedSplats>;\n    index?: DynoVal<\"int\">;\n    base?: DynoVal<\"int\">;\n    count?: DynoVal<\"int\">;\n  }) {\n    super({\n      inTypes: {\n        packedSplats: TPackedSplats,\n        index: \"int\",\n        base: \"int\",\n        count: \"int\",\n      },\n      outTypes: { gsplat: Gsplat },\n      inputs: { packedSplats, index, base, count },\n      globals: () => [defineGsplat, definePackedSplats, defineReadPackedSplat],\n      statements: ({ inputs, outputs }) => {\n        const { gsplat } = outputs;\n        if (!gsplat) {\n          return [];\n        }\n        const { packedSplats, index, base, count } = inputs;\n        let statements: string[];\n        if (packedSplats && index && base && count) {\n          statements = unindentLines(`\n            ${gsplat}.flags = 0u;\n            if ((${index} >= ${base}) && (${index} < (${base} + ${count}))) {\n              if (readPackedSplat(${packedSplats}.texture, ${packedSplats}.numSplats, ${packedSplats}.rgbMinMaxLnScaleMinMax, ${index}, ${gsplat})) {\n                bool zeroSize = all(equal(${gsplat}.scales, vec3(0.0, 0.0, 0.0)));\n                ${gsplat}.flags = zeroSize ? 0u : GSPLAT_FLAG_ACTIVE;\n              }\n            }\n          `);\n        } else {\n          statements = [`${gsplat}.flags = 0u;`];\n        }\n        statements.push(`${gsplat}.index = ${index ?? \"0\"};`);\n        return statements;\n      },\n    });\n  }\n\n  dynoOut(): DynoValue<typeof Gsplat> {\n    return new DynoOutput(this, \"gsplat\");\n  }\n}\n\nexport class SplitGsplat extends Dyno<\n  { gsplat: typeof Gsplat },\n  {\n    flags: \"uint\";\n    active: \"bool\";\n    index: \"int\";\n    center: \"vec3\";\n    scales: \"vec3\";\n    quaternion: \"vec4\";\n    rgba: \"vec4\";\n    rgb: \"vec3\";\n    opacity: \"float\";\n    x: \"float\";\n    y: \"float\";\n    z: \"float\";\n    r: \"float\";\n    g: \"float\";\n    b: \"float\";\n  }\n> {\n  constructor({ gsplat }: { gsplat?: DynoVal<typeof Gsplat> }) {\n    super({\n      inTypes: { gsplat: Gsplat },\n      outTypes: {\n        flags: \"uint\",\n        active: \"bool\",\n        index: \"int\",\n        center: \"vec3\",\n        scales: \"vec3\",\n        quaternion: \"vec4\",\n        rgba: \"vec4\",\n        rgb: \"vec3\",\n        opacity: \"float\",\n        x: \"float\",\n        y: \"float\",\n        z: \"float\",\n        r: \"float\",\n        g: \"float\",\n        b: \"float\",\n      },\n      inputs: { gsplat },\n      globals: () => [defineGsplat],\n      statements: ({ inputs, outputs }) => {\n        const { gsplat } = inputs;\n        const {\n          flags,\n          active,\n          index,\n          center,\n          scales,\n          quaternion,\n          rgba,\n          rgb,\n          opacity,\n          x,\n          y,\n          z,\n          r,\n          g,\n          b,\n        } = outputs;\n        return [\n          !flags ? null : `${flags} = ${gsplat ? `${gsplat}.flags` : \"0u\"};`,\n          !active\n            ? null\n            : `${active} = isGsplatActive(${gsplat ? `${gsplat}.flags` : \"0u\"});`,\n          !index ? null : `${index} = ${gsplat ? `${gsplat}.index` : \"0\"};`,\n          !center\n            ? null\n            : `${center} = ${gsplat ? `${gsplat}.center` : \"vec3(0.0, 0.0, 0.0)\"};`,\n          !scales\n            ? null\n            : `${scales} = ${gsplat ? `${gsplat}.scales` : \"vec3(0.0, 0.0, 0.0)\"};`,\n          !quaternion\n            ? null\n            : `${quaternion} = ${gsplat ? `${gsplat}.quaternion` : \"vec4(0.0, 0.0, 0.0, 1.0)\"};`,\n          !rgba\n            ? null\n            : `${rgba} = ${gsplat ? `${gsplat}.rgba` : \"vec4(0.0, 0.0, 0.0, 0.0)\"};`,\n          !rgb\n            ? null\n            : `${rgb} = ${gsplat ? `${gsplat}.rgba.rgb` : \"vec3(0.0, 0.0, 0.0)\"};`,\n          !opacity\n            ? null\n            : `${opacity} = ${gsplat ? `${gsplat}.rgba.a` : \"0.0\"};`,\n          !x ? null : `${x} = ${gsplat ? `${gsplat}.center.x` : \"0.0\"};`,\n          !y ? null : `${y} = ${gsplat ? `${gsplat}.center.y` : \"0.0\"};`,\n          !z ? null : `${z} = ${gsplat ? `${gsplat}.center.z` : \"0.0\"};`,\n          !r ? null : `${r} = ${gsplat ? `${gsplat}.rgba.r` : \"0.0\"};`,\n          !g ? null : `${g} = ${gsplat ? `${gsplat}.rgba.g` : \"0.0\"};`,\n          !b ? null : `${b} = ${gsplat ? `${gsplat}.rgba.b` : \"0.0\"};`,\n        ].filter(Boolean) as string[];\n      },\n    });\n  }\n}\n\nexport class CombineGsplat\n  extends Dyno<\n    {\n      gsplat: typeof Gsplat;\n      flags: \"uint\";\n      index: \"int\";\n      center: \"vec3\";\n      scales: \"vec3\";\n      quaternion: \"vec4\";\n      rgba: \"vec4\";\n      rgb: \"vec3\";\n      opacity: \"float\";\n      x: \"float\";\n      y: \"float\";\n      z: \"float\";\n      r: \"float\";\n      g: \"float\";\n      b: \"float\";\n    },\n    { gsplat: typeof Gsplat }\n  >\n  implements HasDynoOut<typeof Gsplat>\n{\n  constructor({\n    gsplat,\n    flags,\n    index,\n    center,\n    scales,\n    quaternion,\n    rgba,\n    rgb,\n    opacity,\n    x,\n    y,\n    z,\n    r,\n    g,\n    b,\n  }: {\n    gsplat?: DynoVal<typeof Gsplat>;\n    flags?: DynoVal<\"uint\">;\n    index?: DynoVal<\"int\">;\n    center?: DynoVal<\"vec3\">;\n    scales?: DynoVal<\"vec3\">;\n    quaternion?: DynoVal<\"vec4\">;\n    rgba?: DynoVal<\"vec4\">;\n    rgb?: DynoVal<\"vec3\">;\n    opacity?: DynoVal<\"float\">;\n    x?: DynoVal<\"float\">;\n    y?: DynoVal<\"float\">;\n    z?: DynoVal<\"float\">;\n    r?: DynoVal<\"float\">;\n    g?: DynoVal<\"float\">;\n    b?: DynoVal<\"float\">;\n  }) {\n    super({\n      inTypes: {\n        gsplat: Gsplat,\n        flags: \"uint\",\n        index: \"int\",\n        center: \"vec3\",\n        scales: \"vec3\",\n        quaternion: \"vec4\",\n        rgba: \"vec4\",\n        rgb: \"vec3\",\n        opacity: \"float\",\n        x: \"float\",\n        y: \"float\",\n        z: \"float\",\n        r: \"float\",\n        g: \"float\",\n        b: \"float\",\n      },\n      outTypes: { gsplat: Gsplat },\n      inputs: {\n        gsplat,\n        flags,\n        index,\n        center,\n        scales,\n        quaternion,\n        rgba,\n        rgb,\n        opacity,\n        x,\n        y,\n        z,\n        r,\n        g,\n        b,\n      },\n      globals: () => [defineGsplat],\n      statements: ({ inputs, outputs }) => {\n        const { gsplat: outGsplat } = outputs;\n        if (!outGsplat) {\n          return [];\n        }\n        const {\n          gsplat,\n          flags,\n          index,\n          center,\n          scales,\n          quaternion,\n          rgba,\n          rgb,\n          opacity,\n          x,\n          y,\n          z,\n          r,\n          g,\n          b,\n        } = inputs;\n        return [\n          `${outGsplat}.flags = ${flags ?? (gsplat ? `${gsplat}.flags` : \"0u\")};`,\n          `${outGsplat}.index = ${index ?? (gsplat ? `${gsplat}.index` : \"0\")};`,\n          `${outGsplat}.center = ${center ?? (gsplat ? `${gsplat}.center` : \"vec3(0.0, 0.0, 0.0)\")};`,\n          `${outGsplat}.scales = ${scales ?? (gsplat ? `${gsplat}.scales` : \"vec3(0.0, 0.0, 0.0)\")};`,\n          `${outGsplat}.quaternion = ${quaternion ?? (gsplat ? `${gsplat}.quaternion` : \"vec4(0.0, 0.0, 0.0, 1.0)\")};`,\n          `${outGsplat}.rgba = ${rgba ?? (gsplat ? `${gsplat}.rgba` : \"vec4(0.0, 0.0, 0.0, 0.0)\")};`,\n          !rgb ? null : `${outGsplat}.rgba.rgb = ${rgb};`,\n          !opacity ? null : `${outGsplat}.rgba.a = ${opacity};`,\n          !x ? null : `${outGsplat}.center.x = ${x};`,\n          !y ? null : `${outGsplat}.center.y = ${y};`,\n          !z ? null : `${outGsplat}.center.z = ${z};`,\n          !r ? null : `${outGsplat}.rgba.r = ${r};`,\n          !g ? null : `${outGsplat}.rgba.g = ${g};`,\n          !b ? null : `${outGsplat}.rgba.b = ${b};`,\n        ].filter(Boolean) as string[];\n      },\n    });\n  }\n\n  dynoOut(): DynoValue<typeof Gsplat> {\n    return new DynoOutput(this, \"gsplat\");\n  }\n}\n\nexport const defineGsplatNormal = unindent(`\n  vec3 gsplatNormal(vec3 scales, vec4 quaternion) {\n    float minScale = min(scales.x, min(scales.y, scales.z));\n    vec3 normal;\n    if (scales.z == minScale) {\n      normal = vec3(0.0, 0.0, 1.0);\n    } else if (scales.y == minScale) {\n      normal = vec3(0.0, 1.0, 0.0);\n    } else {\n      normal = vec3(1.0, 0.0, 0.0);\n    }\n    return quatVec(quaternion, normal);\n  }\n`);\n\nexport class GsplatNormal extends UnaryOp<typeof Gsplat, \"vec3\", \"normal\"> {\n  constructor({ gsplat }: { gsplat: DynoVal<typeof Gsplat> }) {\n    super({ a: gsplat, outKey: \"normal\", outTypeFunc: () => \"vec3\" });\n    this.globals = () => [defineGsplat, defineGsplatNormal];\n    this.statements = ({ inputs, outputs }) => [\n      `${outputs.normal} = gsplatNormal(${inputs.a}.scales, ${inputs.a}.quaternion);`,\n    ];\n  }\n}\n\nexport class TransformGsplat\n  extends Dyno<\n    {\n      gsplat: typeof Gsplat;\n      scale: \"float\";\n      rotate: \"vec4\";\n      translate: \"vec3\";\n      recolor: \"vec4\";\n    },\n    { gsplat: typeof Gsplat }\n  >\n  implements HasDynoOut<typeof Gsplat>\n{\n  constructor({\n    gsplat,\n    scale,\n    rotate,\n    translate,\n    recolor,\n  }: {\n    gsplat?: DynoVal<typeof Gsplat>;\n    scale?: DynoVal<\"float\">;\n    rotate?: DynoVal<\"vec4\">;\n    translate?: DynoVal<\"vec3\">;\n    recolor?: DynoVal<\"vec4\">;\n  }) {\n    super({\n      inTypes: {\n        gsplat: Gsplat,\n        scale: \"float\",\n        rotate: \"vec4\",\n        translate: \"vec3\",\n        recolor: \"vec4\",\n      },\n      outTypes: { gsplat: Gsplat },\n      inputs: { gsplat, scale, rotate, translate, recolor },\n      globals: () => [defineGsplat],\n      statements: ({ inputs, outputs, compile }) => {\n        const { gsplat } = outputs;\n        if (!gsplat || !inputs.gsplat) {\n          return [];\n        }\n        const { scale, rotate, translate, recolor } = inputs;\n        const indent = compile.indent;\n        const statements = [\n          `${gsplat} = ${inputs.gsplat};`,\n          `if (isGsplatActive(${gsplat}.flags)) {`,\n\n          scale ? `${indent}${gsplat}.center *= ${scale};` : null,\n          rotate\n            ? `${indent}${gsplat}.center = quatVec(${rotate}, ${gsplat}.center);`\n            : null,\n          translate ? `${indent}${gsplat}.center += ${translate};` : null,\n\n          scale ? `${indent}${gsplat}.scales *= ${scale};` : null,\n\n          rotate\n            ? `${indent}${gsplat}.quaternion = quatQuat(${rotate}, ${gsplat}.quaternion);`\n            : null,\n          recolor ? `${indent}${gsplat}.rgba *= ${recolor};` : null,\n          \"}\",\n        ].filter(Boolean) as string[];\n        return statements;\n      },\n    });\n  }\n\n  dynoOut(): DynoValue<typeof Gsplat> {\n    return new DynoOutput(this, \"gsplat\");\n  }\n}\n","import * as THREE from \"three\";\nimport { Dyno, unindentLines } from \"./base\";\nimport { Gsplat, defineGsplat } from \"./splats\";\nimport {\n  DynoOutput,\n  type DynoVal,\n  type DynoValue,\n  type HasDynoOut,\n} from \"./value\";\n\nexport const outputPackedSplat = (\n  gsplat: DynoVal<typeof Gsplat>,\n  rgbMinMaxLnScaleMinMax: DynoVal<\"vec4\">,\n) => new OutputPackedSplat({ gsplat, rgbMinMaxLnScaleMinMax });\nexport const outputRgba8 = (rgba8: DynoVal<\"vec4\">) =>\n  new OutputRgba8({ rgba8 });\n\nexport class OutputPackedSplat\n  extends Dyno<\n    { gsplat: typeof Gsplat; rgbMinMaxLnScaleMinMax: \"vec4\" },\n    { output: \"uvec4\" }\n  >\n  implements HasDynoOut<\"uvec4\">\n{\n  constructor({\n    gsplat,\n    rgbMinMaxLnScaleMinMax,\n  }: {\n    gsplat?: DynoVal<typeof Gsplat>;\n    rgbMinMaxLnScaleMinMax?: DynoVal<\"vec4\">;\n  }) {\n    super({\n      inTypes: { gsplat: Gsplat, rgbMinMaxLnScaleMinMax: \"vec4\" },\n      inputs: { gsplat, rgbMinMaxLnScaleMinMax },\n      globals: () => [defineGsplat],\n      statements: ({ inputs, outputs }) => {\n        const { output } = outputs;\n        if (!output) {\n          return [];\n        }\n        const { gsplat, rgbMinMaxLnScaleMinMax } = inputs;\n        if (gsplat) {\n          return unindentLines(`\n            if (isGsplatActive(${gsplat}.flags)) {\n              ${output} = packSplatEncoding(${gsplat}.center, ${gsplat}.scales, ${gsplat}.quaternion, ${gsplat}.rgba, ${rgbMinMaxLnScaleMinMax});\n            } else {\n              ${output} = uvec4(0u, 0u, 0u, 0u);\n            }\n          `);\n        }\n        return [`${output} = uvec4(0u, 0u, 0u, 0u);`];\n      },\n    });\n  }\n\n  dynoOut(): DynoValue<\"uvec4\"> {\n    return new DynoOutput(this, \"output\");\n  }\n}\n\nexport class OutputRgba8\n  extends Dyno<{ rgba8: \"vec4\" }, { rgba8: \"vec4\" }>\n  implements HasDynoOut<\"vec4\">\n{\n  constructor({ rgba8 }: { rgba8?: DynoVal<\"vec4\"> }) {\n    super({\n      inTypes: { rgba8: \"vec4\" },\n      inputs: { rgba8 },\n      statements: ({ inputs, outputs }) => [\n        `target = ${inputs.rgba8 ?? \"vec4(0.0, 0.0, 0.0, 0.0)\"};`,\n      ],\n    });\n  }\n\n  dynoOut(): DynoValue<\"vec4\"> {\n    return new DynoOutput(this, \"rgba8\");\n  }\n}\n","import type { IUniform } from \"three\";\nimport { Dyno, dynoDeclare } from \"./base\";\nimport type { DynoJsType, DynoType } from \"./types\";\nimport { DynoOutput, type DynoValue, type HasDynoOut } from \"./value\";\n\nexport const uniform = <V extends DynoJsType<DynoType>>(\n  key: string,\n  type: DynoType,\n  value: V,\n) => new DynoUniform({ key, type, value });\nexport const dynoBool = (value = false, key?: string) =>\n  new DynoBool({ key, value });\nexport const dynoUint = (value = 0, key?: string) =>\n  new DynoUint({ key, value });\nexport const dynoInt = (value = 0, key?: string) => new DynoInt({ key, value });\nexport const dynoFloat = (value = 0.0, key?: string) =>\n  new DynoFloat({ key, value });\n\nexport const dynoBvec2 = <V extends DynoJsType<\"bvec2\">>(\n  value: V,\n  key?: string,\n) => new DynoBvec2({ key, value });\nexport const dynoUvec2 = <V extends DynoJsType<\"uvec2\">>(\n  value: V,\n  key?: string,\n) => new DynoUvec2({ key, value });\nexport const dynoIvec2 = <V extends DynoJsType<\"ivec2\">>(\n  value: V,\n  key?: string,\n) => new DynoIvec2({ key, value });\nexport const dynoVec2 = <V extends DynoJsType<\"vec2\">>(\n  value: V,\n  key?: string,\n) => new DynoVec2({ key, value });\n\nexport const dynoBvec3 = <V extends DynoJsType<\"bvec3\">>(\n  value: V,\n  key?: string,\n) => new DynoBvec3({ key, value });\nexport const dynoUvec3 = <V extends DynoJsType<\"uvec3\">>(\n  value: V,\n  key?: string,\n) => new DynoUvec3({ key, value });\nexport const dynoIvec3 = <V extends DynoJsType<\"ivec3\">>(\n  value: V,\n  key?: string,\n) => new DynoIvec3({ key, value });\nexport const dynoVec3 = <V extends DynoJsType<\"vec3\">>(\n  value: V,\n  key?: string,\n) => new DynoVec3({ key, value });\n\nexport const dynoBvec4 = <V extends DynoJsType<\"bvec4\">>(\n  value: V,\n  key?: string,\n) => new DynoBvec4({ key, value });\nexport const dynoUvec4 = <V extends DynoJsType<\"uvec4\">>(\n  value: V,\n  key?: string,\n) => new DynoUvec4({ key, value });\nexport const dynoIvec4 = <V extends DynoJsType<\"ivec4\">>(\n  value: V,\n  key?: string,\n) => new DynoIvec4({ key, value });\nexport const dynoVec4 = <V extends DynoJsType<\"vec4\">>(\n  value: V,\n  key?: string,\n) => new DynoVec4({ key, value });\n\nexport const dynoMat2 = <V extends DynoJsType<\"mat2\">>(\n  value: V,\n  key?: string,\n) => new DynoMat2({ key, value });\nexport const dynoMat2x2 = <V extends DynoJsType<\"mat2x2\">>(\n  value: V,\n  key?: string,\n) => new DynoMat2x2({ key, value });\nexport const dynoMat2x3 = <V extends DynoJsType<\"mat2x3\">>(\n  value: V,\n  key?: string,\n) => new DynoMat2x3({ key, value });\nexport const dynoMat2x4 = <V extends DynoJsType<\"mat2x4\">>(\n  value: V,\n  key?: string,\n) => new DynoMat2x4({ key, value });\n\nexport const dynoMat3 = <V extends DynoJsType<\"mat3\">>(\n  value: V,\n  key?: string,\n) => new DynoMat3({ key, value });\nexport const dynoMat3x2 = <V extends DynoJsType<\"mat3x2\">>(\n  value: V,\n  key?: string,\n) => new DynoMat3x2({ key, value });\nexport const dynoMat3x3 = <V extends DynoJsType<\"mat3x3\">>(\n  value: V,\n  key?: string,\n) => new DynoMat3x3({ key, value });\nexport const dynoMat3x4 = <V extends DynoJsType<\"mat3x4\">>(\n  value: V,\n  key?: string,\n) => new DynoMat3x4({ key, value });\n\nexport const dynoMat4 = <V extends DynoJsType<\"mat4\">>(\n  value: V,\n  key?: string,\n) => new DynoMat4({ key, value });\nexport const dynoMat4x2 = <V extends DynoJsType<\"mat4x2\">>(\n  value: V,\n  key?: string,\n) => new DynoMat4x2({ key, value });\nexport const dynoMat4x3 = <V extends DynoJsType<\"mat4x3\">>(\n  value: V,\n  key?: string,\n) => new DynoMat4x3({ key, value });\nexport const dynoMat4x4 = <V extends DynoJsType<\"mat4x4\">>(\n  value: V,\n  key?: string,\n) => new DynoMat4x4({ key, value });\n\nexport const dynoUsampler2D = <V extends DynoJsType<\"usampler2D\">>(\n  value: V,\n  key?: string,\n) => new DynoUsampler2D({ key, value });\nexport const dynoIsampler2D = <V extends DynoJsType<\"isampler2D\">>(\n  value: V,\n  key?: string,\n) => new DynoIsampler2D({ key, value });\nexport const dynoSampler2D = <V extends DynoJsType<\"sampler2D\">>(\n  value: V,\n  key?: string,\n) => new DynoSampler2D({ key, value });\n\nexport const dynoUsampler2DArray = <V extends DynoJsType<\"usampler2DArray\">>(\n  value: V,\n  key?: string,\n) => new DynoUsampler2DArray({ key, value });\nexport const dynoIsampler2DArray = <V extends DynoJsType<\"isampler2DArray\">>(\n  key: string,\n  value: V,\n) => new DynoIsampler2DArray({ key, value });\nexport const dynoSampler2DArray = <V extends DynoJsType<\"sampler2DArray\">>(\n  value: V,\n  key?: string,\n) => new DynoSampler2DArray({ key, value });\n\nexport const dynoUsampler3D = <V extends DynoJsType<\"usampler3D\">>(\n  value: V,\n  key?: string,\n) => new DynoUsampler3D({ key, value });\nexport const dynoIsampler3D = <V extends DynoJsType<\"isampler3D\">>(\n  value: V,\n  key?: string,\n) => new DynoIsampler3D({ key, value });\nexport const dynoSampler3D = <V extends DynoJsType<\"sampler3D\">>(\n  value: V,\n  key?: string,\n) => new DynoSampler3D({ key, value });\n\nexport const dynoUsamplerCube = <V extends DynoJsType<\"usamplerCube\">>(\n  value: V,\n  key?: string,\n) => new DynoUsamplerCube({ key, value });\nexport const dynoIsamplerCube = <V extends DynoJsType<\"isamplerCube\">>(\n  value: V,\n  key?: string,\n) => new DynoIsamplerCube({ key, value });\nexport const dynoSamplerCube = <V extends DynoJsType<\"samplerCube\">>(\n  value: V,\n  key?: string,\n) => new DynoSamplerCube({ key, value });\n\nexport const dynoSampler2DShadow = <V extends DynoJsType<\"sampler2DShadow\">>(\n  value: V,\n  key?: string,\n) => new DynoSampler2DShadow({ key, value });\nexport const dynoSampler2DArrayShadow = <\n  V extends DynoJsType<\"sampler2DArrayShadow\">,\n>(\n  value: V,\n  key?: string,\n) => new DynoSampler2DArrayShadow({ key, value });\nexport const dynoSamplerCubeShadow = <\n  V extends DynoJsType<\"samplerCubeShadow\">,\n>(\n  value: V,\n  key?: string,\n) => new DynoSamplerCubeShadow({ key, value });\n\nexport class DynoUniform<\n    T extends DynoType,\n    K extends string = \"value\",\n    V extends DynoJsType<T> = DynoJsType<T>,\n  >\n  extends Dyno<Record<string, never>, { [key in K]: T }>\n  implements HasDynoOut<T>\n{\n  public type: T;\n  public count?: number;\n  public outKey: K;\n  public value: V;\n  public uniform: { value: V; type?: string };\n\n  constructor({\n    key,\n    type,\n    count,\n    value,\n    update,\n    globals,\n  }: {\n    key?: K;\n    type: T;\n    count?: number;\n    value: V;\n    update?: (value: V) => V | undefined;\n    globals?: ({\n      inputs,\n      outputs,\n    }: { inputs: unknown; outputs: { [key in K]?: string } }) => string[];\n  }) {\n    key = (key ?? \"value\") as K;\n    super({\n      outTypes: { [key]: type } as { [key in K]: T },\n      update: () => {\n        if (update) {\n          const value = update(this.value);\n          if (value !== undefined) {\n            this.value = value;\n          }\n        }\n        this.uniform.value = this.value;\n      },\n      generate: ({ inputs, outputs }) => {\n        const allGlobals = globals?.({ inputs, outputs }) ?? [];\n        const uniforms: Record<string, IUniform> = {};\n        const name = outputs[key];\n        if (name) {\n          allGlobals.push(`uniform ${dynoDeclare(name, type, count)};`);\n          uniforms[name] = this.uniform;\n        }\n        return { globals: allGlobals, uniforms };\n      },\n    });\n    this.type = type;\n    this.count = count;\n    this.value = value;\n    this.uniform = { value };\n    this.outKey = key;\n  }\n\n  dynoOut(): DynoValue<T> {\n    return new DynoOutput(this, this.outKey);\n  }\n}\n\nexport class DynoBool<K extends string> extends DynoUniform<\n  \"bool\",\n  K,\n  boolean\n> {\n  constructor({\n    key,\n    value,\n    update,\n  }: {\n    key?: K;\n    value: boolean;\n    update?: (value: boolean) => boolean | undefined;\n  }) {\n    super({ key, type: \"bool\", value, update });\n  }\n}\n\nexport class DynoUint<K extends string> extends DynoUniform<\"uint\", K, number> {\n  constructor({\n    key,\n    value,\n    update,\n  }: {\n    key?: K;\n    value: number;\n    update?: (value: number) => number | undefined;\n  }) {\n    super({ key, type: \"uint\", value, update });\n  }\n}\n\nexport class DynoInt<K extends string> extends DynoUniform<\"int\", K, number> {\n  constructor({\n    key,\n    value,\n    update,\n  }: {\n    key?: K;\n    value: number;\n    update?: (value: number) => number | undefined;\n  }) {\n    super({ key, type: \"int\", value, update });\n  }\n}\n\nexport class DynoFloat<K extends string = \"value\"> extends DynoUniform<\n  \"float\",\n  K,\n  number\n> {\n  constructor({\n    key,\n    value,\n    update,\n  }: {\n    key?: K;\n    value: number;\n    update?: (value: number) => number | undefined;\n  }) {\n    super({ key, type: \"float\", value, update });\n  }\n}\n\nexport class DynoBvec2<\n  K extends string,\n  V extends DynoJsType<\"bvec2\">,\n> extends DynoUniform<\"bvec2\", K, V> {\n  constructor({\n    key,\n    value,\n    update,\n  }: { key?: K; value: V; update?: (value: V) => V | undefined }) {\n    super({ key, type: \"bvec2\", value, update });\n  }\n}\n\nexport class DynoUvec2<\n  K extends string,\n  V extends DynoJsType<\"uvec2\">,\n> extends DynoUniform<\"uvec2\", K, V> {\n  constructor({\n    key,\n    value,\n    update,\n  }: { key?: K; value: V; update?: (value: V) => V | undefined }) {\n    super({ key, type: \"uvec2\", value, update });\n  }\n}\n\nexport class DynoIvec2<\n  K extends string,\n  V extends DynoJsType<\"ivec2\">,\n> extends DynoUniform<\"ivec2\", K, V> {\n  constructor({\n    key,\n    value,\n    update,\n  }: { key?: K; value: V; update?: (value: V) => V | undefined }) {\n    super({ key, type: \"ivec2\", value, update });\n  }\n}\n\nexport class DynoVec2<\n  K extends string,\n  V extends DynoJsType<\"vec2\">,\n> extends DynoUniform<\"vec2\", K, V> {\n  constructor({\n    key,\n    value,\n    update,\n  }: { key?: K; value: V; update?: (value: V) => V | undefined }) {\n    super({ key, type: \"vec2\", value, update });\n  }\n}\n\nexport class DynoBvec3<\n  K extends string,\n  V extends DynoJsType<\"bvec3\">,\n> extends DynoUniform<\"bvec3\", K, V> {\n  constructor({\n    key,\n    value,\n    update,\n  }: { key?: K; value: V; update?: (value: V) => V | undefined }) {\n    super({ key, type: \"bvec3\", value, update });\n  }\n}\n\nexport class DynoUvec3<\n  V extends DynoJsType<\"uvec3\">,\n  K extends string = \"value\",\n> extends DynoUniform<\"uvec3\", K, V> {\n  constructor({\n    key,\n    value,\n    update,\n  }: { key?: K; value: V; update?: (value: V) => V | undefined }) {\n    super({ key, type: \"uvec3\", value, update });\n  }\n}\n\nexport class DynoIvec3<\n  V extends DynoJsType<\"ivec3\">,\n  K extends string = \"value\",\n> extends DynoUniform<\"ivec3\", K, V> {\n  constructor({\n    key,\n    value,\n    update,\n  }: { key?: K; value: V; update?: (value: V) => V | undefined }) {\n    super({ key, type: \"ivec3\", value, update });\n  }\n}\n\nexport class DynoVec3<\n  V extends DynoJsType<\"vec3\">,\n  K extends string = \"value\",\n> extends DynoUniform<\"vec3\", K, V> {\n  constructor({\n    key,\n    value,\n    update,\n  }: { key?: K; value: V; update?: (value: V) => V | undefined }) {\n    super({ key, type: \"vec3\", value, update });\n  }\n}\n\nexport class DynoBvec4<\n  K extends string,\n  V extends DynoJsType<\"bvec4\">,\n> extends DynoUniform<\"bvec4\", K, V> {\n  constructor({\n    key,\n    value,\n    update,\n  }: { key?: K; value: V; update?: (value: V) => V | undefined }) {\n    super({ key, type: \"bvec4\", value, update });\n  }\n}\n\nexport class DynoUvec4<\n  K extends string,\n  V extends DynoJsType<\"uvec4\">,\n> extends DynoUniform<\"uvec4\", K, V> {\n  constructor({\n    key,\n    value,\n    update,\n  }: { key?: K; value: V; update?: (value: V) => V | undefined }) {\n    super({ key, type: \"uvec4\", value, update });\n  }\n}\n\nexport class DynoIvec4<\n  K extends string,\n  V extends DynoJsType<\"ivec4\">,\n> extends DynoUniform<\"ivec4\", K, V> {\n  constructor({\n    key,\n    value,\n    update,\n  }: { key?: K; value: V; update?: (value: V) => V | undefined }) {\n    super({ key, type: \"ivec4\", value, update });\n  }\n}\n\nexport class DynoVec4<\n  V extends DynoJsType<\"vec4\">,\n  K extends string = \"value\",\n> extends DynoUniform<\"vec4\", K, V> {\n  constructor({\n    key,\n    value,\n    update,\n  }: { key?: K; value: V; update?: (value: V) => V | undefined }) {\n    super({ key, type: \"vec4\", value, update });\n  }\n}\n\nexport class DynoMat2<\n  K extends string,\n  V extends DynoJsType<\"mat2\">,\n> extends DynoUniform<\"mat2\", K, V> {\n  constructor({\n    key,\n    value,\n    update,\n  }: { key?: K; value: V; update?: (value: V) => V | undefined }) {\n    super({ key, type: \"mat2\", value, update });\n  }\n}\n\nexport class DynoMat2x2<\n  K extends string,\n  V extends DynoJsType<\"mat2x2\">,\n> extends DynoUniform<\"mat2x2\", K, V> {\n  constructor({\n    key,\n    value,\n    update,\n  }: { key?: K; value: V; update?: (value: V) => V | undefined }) {\n    super({ key, type: \"mat2x2\", value, update });\n  }\n}\n\nexport class DynoMat2x3<\n  K extends string,\n  V extends DynoJsType<\"mat2x3\">,\n> extends DynoUniform<\"mat2x3\", K, V> {\n  constructor({\n    key,\n    value,\n    update,\n  }: { key?: K; value: V; update?: (value: V) => V | undefined }) {\n    super({ key, type: \"mat2x3\", value, update });\n  }\n}\n\nexport class DynoMat2x4<\n  K extends string,\n  V extends DynoJsType<\"mat2x4\">,\n> extends DynoUniform<\"mat2x4\", K, V> {\n  constructor({\n    key,\n    value,\n    update,\n  }: { key?: K; value: V; update?: (value: V) => V | undefined }) {\n    super({ key, type: \"mat2x4\", value, update });\n  }\n}\n\nexport class DynoMat3<\n  K extends string,\n  V extends DynoJsType<\"mat3\">,\n> extends DynoUniform<\"mat3\", K, V> {\n  constructor({\n    key,\n    value,\n    update,\n  }: { key?: K; value: V; update?: (value: V) => V | undefined }) {\n    super({ key, type: \"mat3\", value, update });\n  }\n}\n\nexport class DynoMat3x2<\n  K extends string,\n  V extends DynoJsType<\"mat3x2\">,\n> extends DynoUniform<\"mat3x2\", K, V> {\n  constructor({\n    key,\n    value,\n    update,\n  }: { key?: K; value: V; update?: (value: V) => V | undefined }) {\n    super({ key, type: \"mat3x2\", value, update });\n  }\n}\n\nexport class DynoMat3x3<\n  K extends string,\n  V extends DynoJsType<\"mat3x3\">,\n> extends DynoUniform<\"mat3x3\", K, V> {\n  constructor({\n    key,\n    value,\n    update,\n  }: { key?: K; value: V; update?: (value: V) => V | undefined }) {\n    super({ key, type: \"mat3x3\", value, update });\n  }\n}\n\nexport class DynoMat3x4<\n  K extends string,\n  V extends DynoJsType<\"mat3x4\">,\n> extends DynoUniform<\"mat3x4\", K, V> {\n  constructor({\n    key,\n    value,\n    update,\n  }: { key?: K; value: V; update?: (value: V) => V | undefined }) {\n    super({ key, type: \"mat3x4\", value, update });\n  }\n}\n\nexport class DynoMat4<\n  K extends string,\n  V extends DynoJsType<\"mat4\">,\n> extends DynoUniform<\"mat4\", K, V> {\n  constructor({\n    key,\n    value,\n    update,\n  }: { key?: K; value: V; update?: (value: V) => V | undefined }) {\n    super({ key, type: \"mat4\", value, update });\n  }\n}\n\nexport class DynoMat4x2<\n  K extends string,\n  V extends DynoJsType<\"mat4x2\">,\n> extends DynoUniform<\"mat4x2\", K, V> {\n  constructor({\n    key,\n    value,\n    update,\n  }: { key?: K; value: V; update?: (value: V) => V | undefined }) {\n    super({ key, type: \"mat4x2\", value, update });\n  }\n}\n\nexport class DynoMat4x3<\n  K extends string,\n  V extends DynoJsType<\"mat4x3\">,\n> extends DynoUniform<\"mat4x3\", K, V> {\n  constructor({\n    key,\n    value,\n    update,\n  }: { key?: K; value: V; update?: (value: V) => V | undefined }) {\n    super({ key, type: \"mat4x3\", value, update });\n  }\n}\n\nexport class DynoMat4x4<\n  K extends string,\n  V extends DynoJsType<\"mat4x4\">,\n> extends DynoUniform<\"mat4x4\", K, V> {\n  constructor({\n    key,\n    value,\n    update,\n  }: { key?: K; value: V; update?: (value: V) => V | undefined }) {\n    super({ key, type: \"mat4x4\", value, update });\n  }\n}\n\nexport class DynoUsampler2D<\n  K extends string,\n  V extends DynoJsType<\"usampler2D\">,\n> extends DynoUniform<\"usampler2D\", K, V> {\n  constructor({\n    key,\n    value,\n    update,\n  }: { key?: K; value: V; update?: (value: V) => V | undefined }) {\n    super({ key, type: \"usampler2D\", value, update });\n  }\n}\n\nexport class DynoIsampler2D<\n  K extends string,\n  V extends DynoJsType<\"isampler2D\">,\n> extends DynoUniform<\"isampler2D\", K, V> {\n  constructor({\n    key,\n    value,\n    update,\n  }: { key?: K; value: V; update?: (value: V) => V | undefined }) {\n    super({ key, type: \"isampler2D\", value, update });\n  }\n}\n\nexport class DynoSampler2D<\n  K extends string,\n  V extends DynoJsType<\"sampler2D\">,\n> extends DynoUniform<\"sampler2D\", K, V> {\n  constructor({\n    key,\n    value,\n    update,\n  }: { key?: K; value: V; update?: (value: V) => V | undefined }) {\n    super({ key, type: \"sampler2D\", value, update });\n  }\n}\n\nexport class DynoUsampler2DArray<\n  K extends string,\n  V extends DynoJsType<\"usampler2DArray\">,\n> extends DynoUniform<\"usampler2DArray\", K, V> {\n  constructor({\n    key,\n    value,\n    update,\n  }: { key?: K; value: V; update?: (value: V) => V | undefined }) {\n    super({ key, type: \"usampler2DArray\", value, update });\n  }\n}\n\nexport class DynoIsampler2DArray<\n  K extends string,\n  V extends DynoJsType<\"isampler2DArray\">,\n> extends DynoUniform<\"isampler2DArray\", K, V> {\n  constructor({\n    key,\n    value,\n    update,\n  }: { key?: K; value: V; update?: (value: V) => V | undefined }) {\n    super({ key, type: \"isampler2DArray\", value, update });\n  }\n}\n\nexport class DynoSampler2DArray<\n  K extends string,\n  V extends DynoJsType<\"sampler2DArray\">,\n> extends DynoUniform<\"sampler2DArray\", K, V> {\n  constructor({\n    key,\n    value,\n    update,\n  }: { key?: K; value: V; update?: (value: V) => V | undefined }) {\n    super({ key, type: \"sampler2DArray\", value, update });\n  }\n}\n\nexport class DynoUsampler3D<\n  K extends string,\n  V extends DynoJsType<\"usampler3D\">,\n> extends DynoUniform<\"usampler3D\", K, V> {\n  constructor({\n    key,\n    value,\n    update,\n  }: { key?: K; value: V; update?: (value: V) => V | undefined }) {\n    super({ key, type: \"usampler3D\", value, update });\n  }\n}\n\nexport class DynoIsampler3D<\n  K extends string,\n  V extends DynoJsType<\"isampler3D\">,\n> extends DynoUniform<\"isampler3D\", K, V> {\n  constructor({\n    key,\n    value,\n    update,\n  }: { key?: K; value: V; update?: (value: V) => V | undefined }) {\n    super({ key, type: \"isampler3D\", value, update });\n  }\n}\n\nexport class DynoSampler3D<\n  K extends string,\n  V extends DynoJsType<\"sampler3D\">,\n> extends DynoUniform<\"sampler3D\", K, V> {\n  constructor({\n    key,\n    value,\n    update,\n  }: { key?: K; value: V; update?: (value: V) => V | undefined }) {\n    super({ key, type: \"sampler3D\", value, update });\n  }\n}\n\nexport class DynoUsamplerCube<\n  K extends string,\n  V extends DynoJsType<\"usamplerCube\">,\n> extends DynoUniform<\"usamplerCube\", K, V> {\n  constructor({\n    key,\n    value,\n    update,\n  }: { key?: K; value: V; update?: (value: V) => V | undefined }) {\n    super({ key, type: \"usamplerCube\", value, update });\n  }\n}\n\nexport class DynoIsamplerCube<\n  K extends string,\n  V extends DynoJsType<\"isamplerCube\">,\n> extends DynoUniform<\"isamplerCube\", K, V> {\n  constructor({\n    key,\n    value,\n    update,\n  }: { key?: K; value: V; update?: (value: V) => V | undefined }) {\n    super({ key, type: \"isamplerCube\", value, update });\n  }\n}\n\nexport class DynoSamplerCube<\n  K extends string,\n  V extends DynoJsType<\"samplerCube\">,\n> extends DynoUniform<\"samplerCube\", K, V> {\n  constructor({\n    key,\n    value,\n    update,\n  }: { key?: K; value: V; update?: (value: V) => V | undefined }) {\n    super({ key, type: \"samplerCube\", value, update });\n  }\n}\n\nexport class DynoSampler2DShadow<\n  K extends string,\n  V extends DynoJsType<\"sampler2DShadow\">,\n> extends DynoUniform<\"sampler2DShadow\", K, V> {\n  constructor({\n    key,\n    value,\n    update,\n  }: { key?: K; value: V; update?: (value: V) => V | undefined }) {\n    super({ key, type: \"sampler2DShadow\", value, update });\n  }\n}\n\nexport class DynoSampler2DArrayShadow<\n  K extends string,\n  V extends DynoJsType<\"sampler2DArrayShadow\">,\n> extends DynoUniform<\"sampler2DArrayShadow\", K, V> {\n  constructor({\n    key,\n    value,\n    update,\n  }: { key?: K; value: V; update?: (value: V) => V | undefined }) {\n    super({ key, type: \"sampler2DArrayShadow\", value, update });\n  }\n}\n\nexport class DynoSamplerCubeShadow<\n  K extends string,\n  V extends DynoJsType<\"samplerCubeShadow\">,\n> extends DynoUniform<\"samplerCubeShadow\", K, V> {\n  constructor({\n    key,\n    value,\n    update,\n  }: { key?: K; value: V; update?: (value: V) => V | undefined }) {\n    super({ key, type: \"samplerCubeShadow\", value, update });\n  }\n}\n","import { Gunzip } from \"fflate\";\nimport * as THREE from \"three\";\n\n// Miscellaneous utility functions for Spark\n\nimport {\n  LN_SCALE_MAX,\n  LN_SCALE_MIN,\n  SCALE_ZERO,\n  SPLAT_TEX_HEIGHT,\n  SPLAT_TEX_MIN_HEIGHT,\n  SPLAT_TEX_WIDTH,\n} from \"./defines.js\";\nimport { unindent } from \"./dyno/base.js\";\n\nconst f32buffer = new Float32Array(1);\nconst u32buffer = new Uint32Array(f32buffer.buffer);\n\n// Reinterpret the bits of a float32 as a uint32\nexport function floatBitsToUint(f: number): number {\n  f32buffer[0] = f;\n  return u32buffer[0];\n}\n\n// Reinterpret the bits of a uint32 as a float32\nexport function uintBitsToFloat(u: number): number {\n  u32buffer[0] = u;\n  return f32buffer[0];\n}\n\n// Encode a number as a float16, stored as a uint16 number.\nexport function toHalf(f: number): number {\n  // Store the value into the shared Float32 array.\n  f32buffer[0] = f;\n  const bits = u32buffer[0];\n\n  // Extract sign (1 bit), exponent (8 bits), and fraction (23 bits)\n  const sign = (bits >> 31) & 0x1;\n  const exp = (bits >> 23) & 0xff;\n  const frac = bits & 0x7fffff;\n  const halfSign = sign << 15;\n\n  // Handle special cases: NaN and Infinity\n  if (exp === 0xff) {\n    // NaN: set all exponent bits to 1 and some nonzero fraction bits.\n    if (frac !== 0) {\n      return halfSign | 0x7fff;\n    }\n    // Infinity\n    return halfSign | 0x7c00;\n  }\n\n  // Adjust the exponent from float32 bias (127) to float16 bias (15)\n  const newExp = exp - 127 + 15;\n\n  // Handle overflow: too large to represent in half precision.\n  if (newExp >= 0x1f) {\n    return halfSign | 0x7c00; // Infinity\n  }\n  if (newExp <= 0) {\n    // Handle subnormals and underflow.\n    if (newExp < -10) {\n      // Too small: underflows to zero.\n      return halfSign;\n    }\n    // Convert to subnormal: add the implicit leading 1 to the fraction,\n    // then shift to align with the half-precision's 10 fraction bits.\n    const subFrac = (frac | 0x800000) >> (1 - newExp + 13);\n    return halfSign | subFrac;\n  }\n\n  // Normalized half-precision number: shift fraction to fit into 10 bits.\n  const halfFrac = frac >> 13;\n  return halfSign | (newExp << 10) | halfFrac;\n}\n\n// Convert a float16 stored as a uint16 number back to a float32.\nexport function fromHalf(h: number): number {\n  // Extract the sign (1 bit), exponent (5 bits), and fraction (10 bits)\n  const sign = (h >> 15) & 0x1;\n  const exp = (h >> 10) & 0x1f;\n  const frac = h & 0x3ff;\n\n  let f32bits: number;\n\n  if (exp === 0) {\n    if (frac === 0) {\n      // Zero (positive or negative)\n      f32bits = sign << 31;\n    } else {\n      // Subnormal half-precision number.\n      // Normalize the subnormal number:\n      let mant = frac;\n      let e = -14; // For half, the exponent for subnormals is fixed at -14.\n      // Shift left until the implicit leading 1 is in place.\n      while ((mant & 0x400) === 0) {\n        // 0x400 === 1 << 10\n        mant <<= 1;\n        e--;\n      }\n      // Remove the leading 1 (which is now implicit)\n      mant &= 0x3ff;\n      // Convert the half exponent (e) to the 32-bit float exponent:\n      const newExp = e + 127; // 32-bit float bias is 127.\n      const newFrac = mant << 13; // Align to 23-bit fraction (23 - 10 = 13)\n      f32bits = (sign << 31) | (newExp << 23) | newFrac;\n    }\n  } else if (exp === 0x1f) {\n    // Handle special cases for Infinity and NaN.\n    if (frac === 0) {\n      // Infinity\n      f32bits = (sign << 31) | 0x7f800000;\n    } else {\n      // NaN (we choose a quiet NaN)\n      f32bits = (sign << 31) | 0x7fc00000;\n    }\n  } else {\n    // Normalized half-precision number.\n    // Adjust exponent from half (bias 15) to float32 (bias 127)\n    const newExp = exp - 15 + 127;\n    const newFrac = frac << 13;\n    f32bits = (sign << 31) | (newExp << 23) | newFrac;\n  }\n\n  // Write the 32-bit bit pattern to the shared buffer,\n  // then read it as a float32 to return a JavaScript number.\n  u32buffer[0] = f32bits;\n  return f32buffer[0];\n}\n\n// Convert a number 0..1 to a 0..255 uint\nexport function floatToUint8(v: number): number {\n  // Converts from 0..1 float to 0..255 uint8\n  return Math.max(0, Math.min(255, Math.round(v * 255)));\n}\n\n// Convert a number -1..1 to a -127..127 int\nexport function floatToSint8(v: number): number {\n  // Converts from -1..1 float to -127..127 int8\n  return Math.max(-127, Math.min(127, Math.round(v * 127)));\n}\n\n// Convert a 0..255 uint to a 0..1 float\nexport function Uint8ToFloat(v: number): number {\n  // Converts from 0..255 uint8 to 0..1 float\n  return v / 255;\n}\n\n// Convert a -127..127 int to a -1..1 float\nexport function Sint8ToFloat(v: number): number {\n  // Converts from -127..127 int8 to -1..1 float\n  return v / 127;\n}\n\n// A simple utility class for caching a fixed number of items\nexport class DataCache {\n  // Maximum number of items to cache\n  maxItems: number;\n\n  // Function to fetch data for a key\n  asyncFetch: (key: string) => Promise<unknown>;\n\n  // Array of cached items\n  items: { key: string; data: unknown }[];\n\n  // Create a DataCache with a given function that fetches data not in the cache.\n  constructor({\n    asyncFetch,\n    maxItems = 5,\n  }: { asyncFetch: (key: string) => Promise<unknown>; maxItems?: number }) {\n    this.asyncFetch = asyncFetch;\n    this.maxItems = maxItems;\n    this.items = [];\n  }\n\n  // Fetch data for the key, returning cached data if available.\n  async getFetch(key: string): Promise<unknown> {\n    // Fetches data for a key and caches it, returns cached data if available.\n    const index = this.items.findIndex((item) => item.key === key);\n    if (index >= 0) {\n      // Data exists in our cache, move it to the end of the array\n      const item = this.items.splice(index, 1)[0];\n      this.items.push(item);\n      // Return the cached data\n      return item.data;\n    }\n\n    // Fetch the data from the asyncFetch function\n    const data = await this.asyncFetch(key);\n    // Add the data to the cache\n    this.items.push({ key, data });\n    // If the cache is too large, remove the oldest accessed item\n    while (this.items.length > this.maxItems) {\n      this.items.shift();\n    }\n    // Return the fetched data\n    return data;\n  }\n}\n\n// Like Array.map but for objects\nexport function mapObject(\n  obj: Record<string, unknown>,\n  fn: (value: unknown, key: string) => unknown,\n): Record<string, unknown> {\n  // Maps over an object, applying a function to each value and key\n  const entries = Object.entries(obj).map(([key, value]) => [\n    key,\n    fn(value, key),\n  ]);\n  // Returns a new object with the mapped values\n  return Object.fromEntries(entries);\n}\n\n// Like Array.map().filter() but for objects.\n// The callback fn() should return undefined to filter out the key.\nexport function mapFilterObject(\n  obj: Record<string, unknown>,\n  fn: (value: unknown, key: string) => unknown,\n): Record<string, unknown> {\n  // Maps over an object, applying a function to each value and key\n  // If no return (or return undefined), the key is not included in the result\n  const entries = Object.entries(obj)\n    .map(([key, value]) => [key, fn(value, key)])\n    .filter(([_, value]) => value !== undefined);\n  // Returns a new object with the filtered values\n  return Object.fromEntries(entries);\n}\n\n// Recursively finds all ArrayBuffers in an object and returns them as an array\n// to use as transferable objects to send between workers.\nexport function getArrayBuffers(ctx: unknown): Transferable[] {\n  const buffers: ArrayBuffer[] = [];\n  const seen = new Set();\n\n  function traverse(obj: unknown) {\n    if (obj && typeof obj === \"object\" && !seen.has(obj)) {\n      seen.add(obj);\n\n      if (obj instanceof ArrayBuffer) {\n        buffers.push(obj);\n      } else if (ArrayBuffer.isView(obj)) {\n        // Handles TypedArrays and DataView\n        buffers.push(obj.buffer);\n      } else if (Array.isArray(obj)) {\n        obj.forEach(traverse);\n      } else {\n        Object.values(obj).forEach(traverse);\n      }\n    }\n  }\n\n  traverse(ctx);\n  return buffers;\n}\n\n// Create an array of the given size and initialize element with initFunction()\nexport function newArray<T>(\n  n: number,\n  initFunction: (index: number) => T,\n): T[] {\n  // Creates a new array and calls a constructor function for each element with index\n  return new Array(n).fill(null).map((_, i) => initFunction(i));\n}\n\n// A free list that has a pool of items of type T, with callbacks\n// for constructing, disposing, and checking if an item is valid for the given args.\nexport class FreeList<T, Args> {\n  items: T[];\n  allocate: (args: Args) => T;\n  dispose?: (item: T) => void;\n  valid: (item: T, args: Args) => boolean;\n\n  constructor({\n    // Allocate a new item with the given args\n    allocate,\n    // Dispose of an item (optional, if GC is enough)\n    dispose,\n    // Check if an existing item in the list is valid for the given args,\n    // allowing you to store heterogeneous items in the list.\n    valid,\n  }: {\n    allocate: (args: Args) => T;\n    dispose?: (item: T) => void;\n    valid: (item: T, args: Args) => boolean;\n  }) {\n    this.items = [];\n    this.allocate = allocate;\n    this.dispose = dispose;\n    this.valid = valid;\n  }\n\n  // Allocate a new item from the free list, first checking if a existing item\n  // on the freelist is valid for the given args.\n  alloc(args: Args): T {\n    while (true) {\n      const item = this.items.pop();\n      if (!item) {\n        // No items in the free list, allocate a new one\n        break;\n      }\n      if (this.valid(item, args)) {\n        // Found a valid item, return it\n        // console.log(`FreeList.alloc(${JSON.stringify(args)}): found valid item. Reusing...`);\n        return item;\n      }\n      // Item isn't valid for our args, dispose of it and try again\n      if (this.dispose) {\n        // console.log(`FreeList.alloc(${JSON.stringify(args)}): disposing invalid item.`);\n        this.dispose(item);\n      }\n    }\n    // console.log(`FreeList.alloc(${JSON.stringify(args)}): allocating new item`);\n    return this.allocate(args);\n  }\n\n  free(item: T) {\n    // Return item to the free list\n    this.items.push(item);\n  }\n\n  disposeAll() {\n    // Disposes of all items in the free list\n    let item: T | undefined;\n    item = this.items.pop();\n    while (item) {\n      if (this.dispose) {\n        this.dispose(item);\n      }\n      item = this.items.pop();\n    }\n  }\n}\n\n// Encode a PackedSplat as 4 consecutive Uint32 elements in the packedSplats array.\n// The center coordinates x,y,z are encoded as float16, the scales x,y,z as a\n// logarithmic uint8, rotation as three uint8s representing rotation axis and angle,\n// and RGBA as 4xuint8.\nexport function setPackedSplat(\n  packedSplats: Uint32Array,\n  index: number,\n  x: number,\n  y: number,\n  z: number,\n  scaleX: number,\n  scaleY: number,\n  scaleZ: number,\n  quatX: number,\n  quatY: number,\n  quatZ: number,\n  quatW: number,\n  opacity: number,\n  r: number,\n  g: number,\n  b: number,\n  encoding?: {\n    rgbMin?: number;\n    rgbMax?: number;\n    lnScaleMin?: number;\n    lnScaleMax?: number;\n  },\n) {\n  const rgbMin = encoding?.rgbMin ?? 0.0;\n  const rgbMax = encoding?.rgbMax ?? 1.0;\n  const rgbRange = rgbMax - rgbMin;\n  const uR = floatToUint8((r - rgbMin) / rgbRange);\n  const uG = floatToUint8((g - rgbMin) / rgbRange);\n  const uB = floatToUint8((b - rgbMin) / rgbRange);\n  const uA = floatToUint8(opacity);\n\n  // Alternate internal encodings commented out below.\n  const uQuat = encodeQuatOctXy88R8(\n    new THREE.Quaternion(quatX, quatY, quatZ, quatW),\n  );\n  // const uQuat = encodeQuatXyz888(new THREE.Quaternion(quatX, quatY, quatZ, quatW));\n  // const uQuat = encodeQuatEulerXyz888(new THREE.Quaternion(quatX, quatY, quatZ, quatW));\n  const uQuatX = uQuat & 0xff;\n  const uQuatY = (uQuat >>> 8) & 0xff;\n  const uQuatZ = (uQuat >>> 16) & 0xff;\n\n  // Allow scales below LN_SCALE_MIN to be encoded as 0, which signifies a 2DGS\n  const lnScaleMin = encoding?.lnScaleMin ?? LN_SCALE_MIN;\n  const lnScaleMax = encoding?.lnScaleMax ?? LN_SCALE_MAX;\n  const lnScaleScale = 254.0 / (lnScaleMax - lnScaleMin);\n  const uScaleX =\n    scaleX < SCALE_ZERO\n      ? 0\n      : Math.min(\n          255,\n          Math.max(\n            1,\n            Math.round((Math.log(scaleX) - lnScaleMin) * lnScaleScale) + 1,\n          ),\n        );\n  const uScaleY =\n    scaleY < SCALE_ZERO\n      ? 0\n      : Math.min(\n          255,\n          Math.max(\n            1,\n            Math.round((Math.log(scaleY) - lnScaleMin) * lnScaleScale) + 1,\n          ),\n        );\n  const uScaleZ =\n    scaleZ < SCALE_ZERO\n      ? 0\n      : Math.min(\n          255,\n          Math.max(\n            1,\n            Math.round((Math.log(scaleZ) - lnScaleMin) * lnScaleScale) + 1,\n          ),\n        );\n\n  const uCenterX = toHalf(x);\n  const uCenterY = toHalf(y);\n  const uCenterZ = toHalf(z);\n\n  // Encode the splat as 4 consecutive Uint32 elements\n  const i4 = index * 4;\n  packedSplats[i4] = uR | (uG << 8) | (uB << 16) | (uA << 24);\n  packedSplats[i4 + 1] = uCenterX | (uCenterY << 16);\n  packedSplats[i4 + 2] = uCenterZ | (uQuatX << 16) | (uQuatY << 24);\n  packedSplats[i4 + 3] =\n    uScaleX | (uScaleY << 8) | (uScaleZ << 16) | (uQuatZ << 24);\n}\n\n// Encode the center coordinates x,y,z in the packedSplats Uint32Array,\n// leaving all other fields as is.\nexport function setPackedSplatCenter(\n  packedSplats: Uint32Array,\n  index: number,\n  x: number,\n  y: number,\n  z: number,\n) {\n  const uCenterX = toHalf(x);\n  const uCenterY = toHalf(y);\n  const uCenterZ = toHalf(z);\n\n  const i4 = index * 4;\n  packedSplats[i4 + 1] = uCenterX | (uCenterY << 16);\n  packedSplats[i4 + 2] = uCenterZ | (packedSplats[i4 + 2] & 0xffff0000);\n}\n\n// Encode the scales x,y,z in the packedSplats Uint32Array, leaving all other fields as is.\nexport function setPackedSplatScales(\n  packedSplats: Uint32Array,\n  index: number,\n  scaleX: number,\n  scaleY: number,\n  scaleZ: number,\n  encoding?: {\n    lnScaleMin?: number;\n    lnScaleMax?: number;\n  },\n) {\n  // Allow scales below LN_SCALE_MIN to be encoded as 0, which signifies a 2DGS\n  const lnScaleMin = encoding?.lnScaleMin ?? LN_SCALE_MIN;\n  const lnScaleMax = encoding?.lnScaleMax ?? LN_SCALE_MAX;\n  const lnScaleScale = 254.0 / (lnScaleMax - lnScaleMin);\n  const uScaleX =\n    scaleX < SCALE_ZERO\n      ? 0\n      : Math.min(\n          255,\n          Math.max(\n            1,\n            Math.round((Math.log(scaleX) - lnScaleMin) * lnScaleScale) + 1,\n          ),\n        );\n  const uScaleY =\n    scaleY < SCALE_ZERO\n      ? 0\n      : Math.min(\n          255,\n          Math.max(\n            1,\n            Math.round((Math.log(scaleY) - lnScaleMin) * lnScaleScale) + 1,\n          ),\n        );\n  const uScaleZ =\n    scaleZ < SCALE_ZERO\n      ? 0\n      : Math.min(\n          255,\n          Math.max(\n            1,\n            Math.round((Math.log(scaleZ) - lnScaleMin) * lnScaleScale) + 1,\n          ),\n        );\n\n  const i4 = index * 4;\n  packedSplats[i4 + 3] =\n    uScaleX |\n    (uScaleY << 8) |\n    (uScaleZ << 16) |\n    (packedSplats[i4 + 3] & 0xff000000);\n}\n\n// Encode the rotation quatX, quatY, quatZ, quatW in the packedSplats Uint32Array,\n// leaving all other fields as is.\nexport function setPackedSplatQuat(\n  packedSplats: Uint32Array,\n  index: number,\n  quatX: number,\n  quatY: number,\n  quatZ: number,\n  quatW: number,\n) {\n  const uQuat = encodeQuatOctXy88R8(\n    new THREE.Quaternion(quatX, quatY, quatZ, quatW),\n  );\n  // const uQuat = encodeQuatXyz888(new THREE.Quaternion(quatX, quatY, quatZ, quatW));\n  // const uQuat = encodeQuatEulerXyz888(new THREE.Quaternion(quatX, quatY, quatZ, quatW));\n  const uQuatX = uQuat & 0xff;\n  const uQuatY = (uQuat >>> 8) & 0xff;\n  const uQuatZ = (uQuat >>> 16) & 0xff;\n\n  const i4 = index * 4;\n  packedSplats[i4 + 2] =\n    (packedSplats[i4 + 2] & 0x0000ffff) | (uQuatX << 16) | (uQuatY << 24);\n  packedSplats[i4 + 3] = (packedSplats[i4 + 3] & 0x00ffffff) | (uQuatZ << 24);\n}\n\n// Encode the RGBA color in the packedSplats Uint32Array, leaving other fields alone.\nexport function setPackedSplatRgba(\n  packedSplats: Uint32Array,\n  index: number,\n  r: number,\n  g: number,\n  b: number,\n  a: number,\n  encoding?: {\n    rgbMin?: number;\n    rgbMax?: number;\n  },\n) {\n  const rgbMin = encoding?.rgbMin ?? 0.0;\n  const rgbMax = encoding?.rgbMax ?? 1.0;\n  const rgbRange = rgbMax - rgbMin;\n  const uR = floatToUint8((r - rgbMin) / rgbRange);\n  const uG = floatToUint8((g - rgbMin) / rgbRange);\n  const uB = floatToUint8((b - rgbMin) / rgbRange);\n  const uA = floatToUint8(a);\n  const i4 = index * 4;\n  packedSplats[i4] = uR | (uG << 8) | (uB << 16) | (uA << 24);\n}\n\n// Encode the RGB color in the packedSplats Uint32Array, leaving other fields alone.\nexport function setPackedSplatRgb(\n  packedSplats: Uint32Array,\n  index: number,\n  r: number,\n  g: number,\n  b: number,\n  encoding?: {\n    rgbMin?: number;\n    rgbMax?: number;\n  },\n) {\n  const rgbMin = encoding?.rgbMin ?? 0.0;\n  const rgbMax = encoding?.rgbMax ?? 1.0;\n  const rgbRange = rgbMax - rgbMin;\n  const uR = floatToUint8((r - rgbMin) / rgbRange);\n  const uG = floatToUint8((g - rgbMin) / rgbRange);\n  const uB = floatToUint8((b - rgbMin) / rgbRange);\n\n  const i4 = index * 4;\n  packedSplats[i4] =\n    uR | (uG << 8) | (uB << 16) | (packedSplats[i4] & 0xff000000);\n}\n\n// Encode the opacity in the packedSplats Uint32Array, leaving other fields alone.\nexport function setPackedSplatOpacity(\n  packedSplats: Uint32Array,\n  index: number,\n  opacity: number,\n) {\n  const uA = floatToUint8(opacity);\n\n  const i4 = index * 4;\n  packedSplats[i4] = (packedSplats[i4] & 0x00ffffff) | (uA << 24);\n}\n\nconst packedCenter = new THREE.Vector3();\nconst packedScales = new THREE.Vector3();\nconst packedQuaternion = new THREE.Quaternion();\nconst packedColor = new THREE.Color();\nconst packedFields = {\n  center: packedCenter,\n  scales: packedScales,\n  quaternion: packedQuaternion,\n  color: packedColor,\n  opacity: 0.0,\n};\n\n// Unpack all components of a PackedSplat from the packedSplats Uint32Array into\n// THREE.js vector objects. The returned objects will be reused each call.\nexport function unpackSplat(\n  packedSplats: Uint32Array,\n  index: number,\n  encoding?: {\n    rgbMin?: number;\n    rgbMax?: number;\n    lnScaleMin?: number;\n    lnScaleMax?: number;\n  },\n): {\n  center: THREE.Vector3;\n  scales: THREE.Vector3;\n  quaternion: THREE.Quaternion;\n  color: THREE.Color;\n  opacity: number;\n} {\n  // Returns a static object which is reused each time\n  const result = packedFields;\n\n  const i4 = index * 4;\n  const word0 = packedSplats[i4];\n  const word1 = packedSplats[i4 + 1];\n  const word2 = packedSplats[i4 + 2];\n  const word3 = packedSplats[i4 + 3];\n\n  const rgbMin = encoding?.rgbMin ?? 0.0;\n  const rgbMax = encoding?.rgbMax ?? 1.0;\n  const rgbRange = rgbMax - rgbMin;\n  result.color.set(\n    rgbMin + ((word0 & 0xff) / 255) * rgbRange,\n    rgbMin + (((word0 >>> 8) & 0xff) / 255) * rgbRange,\n    rgbMin + (((word0 >>> 16) & 0xff) / 255) * rgbRange,\n  );\n  result.opacity = ((word0 >>> 24) & 0xff) / 255;\n  result.center.set(\n    fromHalf(word1 & 0xffff),\n    fromHalf((word1 >>> 16) & 0xffff),\n    fromHalf(word2 & 0xffff),\n  );\n\n  const lnScaleMin = encoding?.lnScaleMin ?? LN_SCALE_MIN;\n  const lnScaleMax = encoding?.lnScaleMax ?? LN_SCALE_MAX;\n  const lnScaleScale = (lnScaleMax - lnScaleMin) / 254.0;\n  const uScalesX = word3 & 0xff;\n  result.scales.x =\n    uScalesX === 0 ? 0.0 : Math.exp(lnScaleMin + (uScalesX - 1) * lnScaleScale);\n  const uScalesY = (word3 >>> 8) & 0xff;\n  result.scales.y =\n    uScalesY === 0 ? 0.0 : Math.exp(lnScaleMin + (uScalesY - 1) * lnScaleScale);\n  const uScalesZ = (word3 >>> 16) & 0xff;\n  result.scales.z =\n    uScalesZ === 0 ? 0.0 : Math.exp(lnScaleMin + (uScalesZ - 1) * lnScaleScale);\n\n  const uQuat = ((word2 >>> 16) & 0xffff) | ((word3 >>> 8) & 0xff0000);\n  decodeQuatOctXy88R8(uQuat, result.quaternion);\n  // decodeQuatXyz888(uQuat, result.quaternion);\n  // decodeQuatEulerXyz888(uQuat, result.quaternion);\n\n  return result;\n}\n\n// Compute a texture array size that is large enough to fit numSplats. The most\n// common 2D texture size in WebGL2 is 4096x4096 which only allows for 16M splats,\n// so Spark stores Gsplat data in a 2D texture array, which most platforms support\n// up to 2048x2048x2048 = 8G splats. Allocations that fit within a single 2D texture\n// array layer will be rounded up to fill an entire texture row. Once a texture\n// array layer is filled, the allocation will be rounded up to fill an entire layer.\n// This is done so the entire set of splats can be covered by min/max coords across\n// each dimension.\nexport function getTextureSize(numSplats: number): {\n  width: number;\n  height: number;\n  depth: number;\n  maxSplats: number;\n} {\n  // Compute a texture array size that is large enough to fit numSplats.\n  // The width is always 2048, the height sized to fit the splats but no larger than 2048.\n  // The depth is the number of layers needed to fit the splats.\n  // maxSplats is computed as the new total available splats that can be stored.\n  const width = SPLAT_TEX_WIDTH;\n  const height = Math.max(\n    SPLAT_TEX_MIN_HEIGHT,\n    Math.min(SPLAT_TEX_HEIGHT, Math.ceil(numSplats / width)),\n  );\n  const depth = Math.ceil(numSplats / (width * height));\n  const maxSplats = width * height * depth;\n  return { width, height, depth, maxSplats };\n}\n\nexport function computeMaxSplats(numSplats: number): number {\n  // Compute the size of a Gsplat array texture (2048x2048xD) that can fit\n  // numSplats splats, and return the total number of splats that can be stored\n  // in such a texture.\n  const width = SPLAT_TEX_WIDTH;\n  const height = Math.max(\n    SPLAT_TEX_MIN_HEIGHT,\n    Math.min(SPLAT_TEX_HEIGHT, Math.ceil(numSplats / width)),\n  );\n  const depth = Math.ceil(numSplats / (width * height));\n  return width * height * depth;\n}\n\n// Heuristic function to determine if we are running on a mobile device.\nexport function isMobile(): boolean {\n  if (navigator.maxTouchPoints > 0) {\n    // Touch-enabled device, assume it's mobile\n    return true;\n  }\n  return /Mobi|Android|iPhone|iPad|iPod|Opera Mini|IEMobile/.test(\n    navigator.userAgent,\n  );\n}\n\n// Heuristic function to determine if we are running on an Android device.\n// (does not include Oculus Quest)\nexport function isAndroid(): boolean {\n  return /Android/.test(navigator.userAgent);\n}\n\n// Heuristic function to determine if we are running on an Oculus Quest device.\nexport function isOculus(): boolean {\n  return /Oculus/.test(navigator.userAgent);\n}\n\n// Take an array of RGBA8 encoded pixels and flip them vertically in-place.\n// This is useful for converting between top-left and bottom-left coordinate systems\n// in standard 2D images vs WebGL2.\nexport function flipPixels(\n  pixels: Uint8Array,\n  width: number,\n  height: number,\n): Uint8Array {\n  // Flips pixels vertically in-place, returns original array.\n  const tempLine = new Uint8Array(width * 4);\n\n  // Only need to process half the height since we're swapping\n  for (let y = 0; y < height / 2; y++) {\n    const topOffset = y * width * 4;\n    const bottomOffset = (height - 1 - y) * width * 4;\n\n    // Save top line to temp buffer\n    tempLine.set(pixels.subarray(topOffset, topOffset + width * 4));\n    // Move bottom line to top\n    pixels.set(\n      pixels.subarray(bottomOffset, bottomOffset + width * 4),\n      topOffset,\n    );\n    // Move saved top line to bottom\n    pixels.set(tempLine, bottomOffset);\n  }\n  return pixels;\n}\n\n// Utility to take an array of RGBA8 encoded pixels and convert them to a\n// PNG-encoded image data URL that can be downloaded to the client.\nexport function pixelsToPngUrl(\n  pixels: Uint8Array,\n  width: number,\n  height: number,\n): string {\n  const canvas = document.createElement(\"canvas\");\n  canvas.width = width;\n  canvas.height = height;\n  const ctx = canvas.getContext(\"2d\");\n  if (!ctx) {\n    throw new Error(\"Can't get 2d context\");\n  }\n  const imageData = ctx.createImageData(width, height);\n  imageData.data.set(pixels);\n  ctx.putImageData(imageData, 0, 0);\n  return canvas.toDataURL(\"image/png\");\n}\n\n// Manually clone a THREE.Clock object.\nexport function cloneClock(clock: THREE.Clock): THREE.Clock {\n  const newClock = new THREE.Clock(clock.autoStart);\n  newClock.startTime = clock.startTime;\n  newClock.oldTime = clock.oldTime;\n  newClock.elapsedTime = clock.elapsedTime;\n  newClock.running = clock.running;\n  return newClock;\n}\n\n// Utility to filter out an undefined values from an object.\nexport function omitUndefined<T extends object>(obj: T): Partial<T> {\n  return Object.fromEntries(\n    Object.entries(obj).filter(([_, value]) => value !== undefined),\n  ) as Partial<T>;\n}\n\n// \"Identity\" vertex shader that just passes through the position.\nexport const IDENT_VERTEX_SHADER = unindent(`\n  precision highp float;\n\n  in vec3 position;\n\n  void main() {\n    gl_Position = vec4(position.xy, 0.0, 1.0);\n  }\n`);\n\n// Returns the average position of an array of THREE.Vector3.\nexport function averagePositions(positions: THREE.Vector3[]): THREE.Vector3 {\n  const sum = new THREE.Vector3();\n  for (const position of positions) {\n    sum.add(position);\n  }\n  return sum.divideScalar(positions.length);\n}\n\n// Returns an \"average\" of an array of THREE.Quaternion objects.\n// Note that this is not a spherical lerp between quaternions but\n// rather an arithmetic mean that is normalized to unit length.\nexport function averageQuaternions(\n  quaternions: THREE.Quaternion[],\n): THREE.Quaternion {\n  if (quaternions.length === 0) {\n    return new THREE.Quaternion();\n  }\n  const sum = quaternions[0].clone();\n  for (let i = 1; i < quaternions.length; i++) {\n    if (quaternions[i].dot(quaternions[0]) < 0.0) {\n      sum.x -= quaternions[i].x;\n      sum.y -= quaternions[i].y;\n      sum.z -= quaternions[i].z;\n      sum.w -= quaternions[i].w;\n    } else {\n      sum.x += quaternions[i].x;\n      sum.y += quaternions[i].y;\n      sum.z += quaternions[i].z;\n      sum.w += quaternions[i].w;\n    }\n  }\n  return sum.normalize();\n}\n\n// Compare two coordinates given by matrix1 and matrix2, returning the distance\n// between their origins and the \"coincidence\" of their orientations, defined\n// as the dot product of their \"-z\" axes.\nexport function coinciDist(matrix1: THREE.Matrix4, matrix2: THREE.Matrix4) {\n  const origin1 = new THREE.Vector3(0, 0, 0).applyMatrix4(matrix1);\n  const origin2 = new THREE.Vector3(0, 0, 0).applyMatrix4(matrix2);\n  const direction1 = new THREE.Vector3(0, 0, -1)\n    .applyMatrix4(matrix1)\n    .sub(origin1)\n    .normalize();\n  const direction2 = new THREE.Vector3(0, 0, -1)\n    .applyMatrix4(matrix2)\n    .sub(origin2)\n    .normalize();\n\n  const distance = origin1.distanceTo(origin2);\n  const coincidence = direction1.dot(direction2);\n  return { distance, coincidence };\n}\n\n// Utility function that returns whether two coordinate system origins\n// given by matrix1 and matrix2 are within a certain maxDistance of each other.\nexport function withinDist({\n  matrix1,\n  matrix2,\n  maxDistance,\n}: {\n  matrix1: THREE.Matrix4;\n  matrix2: THREE.Matrix4;\n  maxDistance: number;\n}): boolean {\n  const origin1 = new THREE.Vector3(0, 0, 0).applyMatrix4(matrix1);\n  const origin2 = new THREE.Vector3(0, 0, 0).applyMatrix4(matrix2);\n  return origin1.distanceTo(origin2) <= maxDistance;\n}\n\n// Utility function that returns whether two coordinate systems are \"close\"\n// to each other, defined by a maxDistance and a minCoincidence.\nexport function withinCoinciDist({\n  matrix1,\n  matrix2,\n  maxDistance,\n  minCoincidence,\n}: {\n  matrix1: THREE.Matrix4;\n  matrix2: THREE.Matrix4;\n  maxDistance: number;\n  minCoincidence?: number;\n}): boolean {\n  const { distance, coincidence } = coinciDist(matrix1, matrix2);\n  return (\n    distance <= maxDistance &&\n    (minCoincidence == null || coincidence >= minCoincidence)\n  );\n}\n\n// Compare two coordinate systems given by matrix1 and matrix2, returning the\n// distance between their origins and the \"coorientation\" of their orientations,\n// define as the dot product of their quaternion transforms (flipping their\n// orientation to be on the same hemisphere if necessary).\nexport function coorientDist(matrix1: THREE.Matrix4, matrix2: THREE.Matrix4) {\n  const [origin1, rotate1] = [new THREE.Vector3(), new THREE.Quaternion()];\n  const [origin2, rotate2] = [new THREE.Vector3(), new THREE.Quaternion()];\n  matrix1.decompose(origin1, rotate1, new THREE.Vector3());\n  matrix2.decompose(origin2, rotate2, new THREE.Vector3());\n\n  const distance = origin1.distanceTo(origin2);\n  const coorient = Math.abs(rotate1.dot(rotate2));\n  return { distance, coorient };\n}\n\n// Utility function that returns whether two coordinate systems are \"close\"\n// to each other, defined a maxDistance and a minCoorient.\nexport function withinCoorientDist({\n  matrix1,\n  matrix2,\n  maxDistance,\n  minCoorient,\n}: {\n  matrix1: THREE.Matrix4;\n  matrix2: THREE.Matrix4;\n  maxDistance: number;\n  minCoorient?: number;\n}): boolean {\n  const { distance, coorient } = coorientDist(matrix1, matrix2);\n  return (\n    distance <= maxDistance && (minCoorient == null || coorient >= minCoorient)\n  );\n}\n\n// Like Math.sign but with a custom epsilon value.\nexport function epsilonSign(value: number, epsilon = 0.001): number {\n  if (Math.abs(value) < epsilon) {\n    return 0;\n  }\n  return Math.sign(value);\n}\n\n// Encode a THREE.Quaternion into a 24-bit integer, converting the xyz coordinates\n// to signed 8-bit integers (w can be derived from xyz), and flipping the sign\n// of the quaternion if necessary to make this possible (q == -q for quaternions).\nexport function encodeQuatXyz888(q: THREE.Quaternion): number {\n  const negQuat = q.w < 0.0;\n  const iQuatX = floatToSint8(negQuat ? -q.x : q.x);\n  const iQuatY = floatToSint8(negQuat ? -q.y : q.y);\n  const iQuatZ = floatToSint8(negQuat ? -q.z : q.z);\n  const uQuatX = iQuatX & 0xff;\n  const uQuatY = iQuatY & 0xff;\n  const uQuatZ = iQuatZ & 0xff;\n  return uQuatX | (uQuatY << 8) | (uQuatZ << 16);\n}\n\n// Decode a 24-bit integer of the quaternion's xyz coordinates into a THREE.Quaternion.\nexport function decodeQuatXyz888(\n  encoded: number,\n  out: THREE.Quaternion,\n): THREE.Quaternion {\n  const iQuatX = (encoded << 24) >> 24;\n  const iQuatY = (encoded << 16) >> 24;\n  const iQuatZ = (encoded << 8) >> 24;\n  out.set(iQuatX / 127.0, iQuatY / 127.0, iQuatZ / 127.0, 0.0);\n  const dotSelf = out.x * out.x + out.y * out.y + out.z * out.z;\n  out.w = Math.sqrt(Math.max(0.0, 1.0 - dotSelf));\n  return out;\n}\n\n/**\n * Encodes a THREE.Quaternion into a 24‐bit integer.\n *\n * Bit layout (LSB → MSB):\n *   - Bits  0–7:  quantized U (8 bits)\n *   - Bits  8–15: quantized V (8 bits)\n *   - Bits 16–23: quantized angle θ (8 bits) from [0,π]\n *\n * This version uses folded octahedral mapping (all inline).\n */\nexport function encodeQuatOctXy88R8(q: THREE.Quaternion): number {\n  // Force the minimal representation (q.w >= 0)\n  const qnorm = q.clone().normalize();\n  if (qnorm.w < 0) {\n    qnorm.set(-qnorm.x, -qnorm.y, -qnorm.z, -qnorm.w);\n  }\n  // Compute the rotation angle θ in [0, π]\n  const theta = 2 * Math.acos(qnorm.w);\n  // Recover the rotation axis (default to (1,0,0) for near-zero rotation)\n  const xyz_norm = Math.sqrt(\n    qnorm.x * qnorm.x + qnorm.y * qnorm.y + qnorm.z * qnorm.z,\n  );\n  const axis =\n    xyz_norm < 1e-6\n      ? new THREE.Vector3(1, 0, 0)\n      : new THREE.Vector3(qnorm.x, qnorm.y, qnorm.z).divideScalar(xyz_norm);\n  // const foldAxis = (axis.z < 0);\n\n  // --- Folded Octahedral Mapping (inline) ---\n  // Compute p = (axis.x, axis.y) / (|axis.x|+|axis.y|+|axis.z|)\n  const sum = Math.abs(axis.x) + Math.abs(axis.y) + Math.abs(axis.z);\n  let p_x = axis.x / sum;\n  let p_y = axis.y / sum;\n  // Fold the lower hemisphere.\n  if (axis.z < 0) {\n    const tmp = p_x;\n    p_x = (1 - Math.abs(p_y)) * (p_x >= 0 ? 1 : -1);\n    p_y = (1 - Math.abs(tmp)) * (p_y >= 0 ? 1 : -1);\n  }\n  // Remap from [-1,1] to [0,1]\n  const u_f = p_x * 0.5 + 0.5;\n  const v_f = p_y * 0.5 + 0.5;\n  // Quantize to 7 bits (0..127)\n  const quantU = Math.round(u_f * 255);\n  const quantV = Math.round(v_f * 255);\n  // --- Angle Quantization: Quantize θ ∈ [0,π] to 10 bits (0..1023) ---\n  const angleInt = Math.round(theta * (255 / Math.PI));\n\n  // Pack into 24 bits: bits [0–7]: quantU, [8–15]: quantV, [16–23]: angleInt.\n  return (angleInt << 16) | (quantV << 8) | quantU;\n}\n\n/**\n * Decodes a 24‐bit encoded quaternion (packed in a number) back to a THREE.Quaternion.\n *\n * Assumes the same bit layout as in encodeQuatOctXy88R8.\n */\nexport function decodeQuatOctXy88R8(\n  encoded: number,\n  out: THREE.Quaternion,\n): THREE.Quaternion {\n  // Extract 8‐bit quantU and quantV, and 8‐bit angleInt.\n  const quantU = encoded & 0xff; // bits 0–7\n  const quantV = (encoded >>> 8) & 0xff; // bits 8–15\n  const angleInt = (encoded >>> 16) & 0xff; // bits 16–23\n\n  // Recover u and v in [0,1] then map to [-1,1]\n  const u_f = quantU / 255;\n  const v_f = quantV / 255;\n  let f_x = (u_f - 0.5) * 2;\n  let f_y = (v_f - 0.5) * 2;\n  // Inverse folded mapping: recover z from the constraint |p_x|+|p_y|+z = 1.\n  const f_z = 1 - (Math.abs(f_x) + Math.abs(f_y));\n  const t = Math.max(-f_z, 0);\n  f_x += f_x >= 0 ? -t : t;\n  f_y += f_y >= 0 ? -t : t;\n  const axis = new THREE.Vector3(f_x, f_y, f_z).normalize();\n\n  // Decode the angle: θ ∈ [0,π]\n  const theta = (angleInt / 255) * Math.PI;\n  const halfTheta = theta * 0.5;\n  const s = Math.sin(halfTheta);\n  const w = Math.cos(halfTheta);\n  // Reconstruct the quaternion from axis-angle: (axis * sin(θ/2), cos(θ/2))\n  out.set(axis.x * s, axis.y * s, axis.z * s, w);\n  return out;\n}\n\n/**\n * Encodes a THREE.Quaternion into a 24‑bit unsigned integer\n * by converting it to Euler angles (roll, pitch, yaw).\n * The Euler angles are assumed to be in radians in the range [-π, π].\n * Each angle is normalized to [0,1] and quantized to 8 bits.\n * Bit layout (LSB→MSB):\n *   - Bits 0–7:   roll (quantized)\n *   - Bits 8–15:  pitch (quantized)\n *   - Bits 16–23: yaw (quantized)\n */\nexport function encodeQuatEulerXyz888(q: THREE.Quaternion): number {\n  // Normalize quaternion to ensure a proper rotation.\n  const qNorm = q.clone().normalize();\n\n  // Tait–Bryan angles (roll, pitch, yaw)\n  const sinr_cosp = 2.0 * (qNorm.w * qNorm.x + qNorm.y * qNorm.z);\n  const cosr_cosp = 1.0 - 2.0 * (qNorm.x * qNorm.x + qNorm.y * qNorm.y);\n  const roll = Math.atan2(sinr_cosp, cosr_cosp);\n\n  const sinp = 2.0 * (qNorm.w * qNorm.y - qNorm.z * qNorm.x);\n  const pitch =\n    Math.abs(sinp) >= 1.0 ? Math.sign(sinp) * (Math.PI / 2) : Math.asin(sinp);\n\n  const siny_cosp = 2.0 * (qNorm.w * qNorm.z + qNorm.x * qNorm.y);\n  const cosy_cosp = 1.0 - 2.0 * (qNorm.y * qNorm.y + qNorm.z * qNorm.z);\n  const yaw = Math.atan2(siny_cosp, cosy_cosp);\n\n  // Map each angle from [-π, π] to [0, 1]\n  const normRoll = (roll + Math.PI) / (2 * Math.PI);\n  const normPitch = (pitch + Math.PI) / (2 * Math.PI);\n  const normYaw = (yaw + Math.PI) / (2 * Math.PI);\n\n  // Quantize to 8 bits (0 to 255)\n  const rollQ = Math.round(normRoll * 255);\n  const pitchQ = Math.round(normPitch * 255);\n  const yawQ = Math.round(normYaw * 255);\n\n  // Pack into a 24-bit unsigned integer:\n  //   Bits 0–7:   rollQ, Bits 8–15: pitchQ, Bits 16–23: yawQ.\n  return (yawQ << 16) | (pitchQ << 8) | rollQ;\n}\n\n/**\n * Decodes a 24‑bit unsigned integer into a THREE.Quaternion\n * by unpacking three 8‑bit values (roll, pitch, yaw) in the range [0,255]\n * and then converting them back to Euler angles in [-π, π] and to a quaternion.\n */\nexport function decodeQuatEulerXyz888(\n  encoded: number,\n  out: THREE.Quaternion,\n): THREE.Quaternion {\n  // Unpack 8‑bit values.\n  const rollQ = encoded & 0xff;\n  const pitchQ = (encoded >>> 8) & 0xff;\n  const yawQ = (encoded >>> 16) & 0xff;\n\n  // Convert quantized values back to normalized [0,1] values.\n  const normRoll = rollQ / 255;\n  const normPitch = pitchQ / 255;\n  const normYaw = yawQ / 255;\n\n  // Map from [0,1] to [-π, π]\n  const roll = normRoll * (2 * Math.PI) - Math.PI;\n  const pitch = normPitch * (2 * Math.PI) - Math.PI;\n  const yaw = normYaw * (2 * Math.PI) - Math.PI;\n\n  // Convert Euler angles to quaternion (Tait–Bryan: roll, pitch, yaw).\n  const cr = Math.cos(roll * 0.5);\n  const sr = Math.sin(roll * 0.5);\n  const cp = Math.cos(pitch * 0.5);\n  const sp = Math.sin(pitch * 0.5);\n  const cy = Math.cos(yaw * 0.5);\n  const sy = Math.sin(yaw * 0.5);\n\n  out.w = cr * cp * cy + sr * sp * sy;\n  out.x = sr * cp * cy - cr * sp * sy;\n  out.y = cr * sp * cy + sr * cp * sy;\n  out.z = cr * cp * sy - sr * sp * cy;\n  out.normalize();\n  return out;\n}\n\n// Pack four signed 8-bit values into a single uint32.\nfunction packSint8Bytes(\n  b0: number,\n  b1: number,\n  b2: number,\n  b3: number,\n): number {\n  const clampedB0 = Math.max(-127, Math.min(127, b0 * 127));\n  const clampedB1 = Math.max(-127, Math.min(127, b1 * 127));\n  const clampedB2 = Math.max(-127, Math.min(127, b2 * 127));\n  const clampedB3 = Math.max(-127, Math.min(127, b3 * 127));\n  return (\n    (clampedB0 & 0xff) |\n    ((clampedB1 & 0xff) << 8) |\n    ((clampedB2 & 0xff) << 16) |\n    ((clampedB3 & 0xff) << 24)\n  );\n}\n\n// Encode an array of 9 signed RGB SH1 coefficients (clamped to [-1,1]) into\n// a pair of uint32 values, where each coefficient is stored as a sint7\nexport function encodeSh1Rgb(\n  sh1Array: Uint32Array,\n  index: number,\n  sh1Rgb: Float32Array,\n  encoding?: {\n    sh1Min?: number;\n    sh1Max?: number;\n  },\n) {\n  const sh1Min = encoding?.sh1Min ?? -1;\n  const sh1Max = encoding?.sh1Max ?? 1;\n  const sh1Mid = 0.5 * (sh1Min + sh1Max);\n  const sh1Scale = 63 / (sh1Max - sh1Min);\n\n  // Pack sint7 values into 2 x uint32\n  const base = index * 2;\n  for (let i = 0; i < 9; ++i) {\n    const s = (sh1Rgb[i] - sh1Mid) * sh1Scale;\n    const value = Math.round(Math.max(-63, Math.min(63, s))) & 0x7f;\n    const bitStart = i * 7;\n    const bitEnd = bitStart + 7;\n\n    const wordStart = Math.floor(bitStart / 32);\n    const bitOffset = bitStart - wordStart * 32;\n    const firstWord = (value << bitOffset) & 0xffffffff;\n    sh1Array[base + wordStart] |= firstWord;\n\n    if (bitEnd > wordStart * 32 + 32) {\n      const secondWord = (value >>> (32 - bitOffset)) & 0xffffffff;\n      sh1Array[base + wordStart + 1] |= secondWord;\n    }\n  }\n}\n\n// Encode an array of 15 signed RGB SH2 coefficients (clamped to [-1,1]) into\n// an array of 4 uint32 values, where each coefficient is stored as a sint8.\nexport function encodeSh2Rgb(\n  sh2Array: Uint32Array,\n  index: number,\n  sh2Rgb: Float32Array,\n  encoding?: {\n    sh2Min?: number;\n    sh2Max?: number;\n  },\n) {\n  const sh2Min = encoding?.sh2Min ?? -1;\n  const sh2Max = encoding?.sh2Max ?? 1;\n  const sh2Mid = 0.5 * (sh2Min + sh2Max);\n  const sh2Scale = 0.5 / (sh2Max - sh2Min);\n\n  // Pack sint8 values into 4 x uint32\n  sh2Array[index * 4 + 0] = packSint8Bytes(\n    (sh2Rgb[0] - sh2Mid) * sh2Scale,\n    (sh2Rgb[1] - sh2Mid) * sh2Scale,\n    (sh2Rgb[2] - sh2Mid) * sh2Scale,\n    (sh2Rgb[3] - sh2Mid) * sh2Scale,\n  );\n  sh2Array[index * 4 + 1] = packSint8Bytes(\n    (sh2Rgb[4] - sh2Mid) * sh2Scale,\n    (sh2Rgb[5] - sh2Mid) * sh2Scale,\n    (sh2Rgb[6] - sh2Mid) * sh2Scale,\n    (sh2Rgb[7] - sh2Mid) * sh2Scale,\n  );\n  sh2Array[index * 4 + 2] = packSint8Bytes(\n    (sh2Rgb[8] - sh2Mid) * sh2Scale,\n    (sh2Rgb[9] - sh2Mid) * sh2Scale,\n    (sh2Rgb[10] - sh2Mid) * sh2Scale,\n    (sh2Rgb[11] - sh2Mid) * sh2Scale,\n  );\n  sh2Array[index * 4 + 3] = packSint8Bytes(\n    (sh2Rgb[12] - sh2Mid) * sh2Scale,\n    (sh2Rgb[13] - sh2Mid) * sh2Scale,\n    (sh2Rgb[14] - sh2Mid) * sh2Scale,\n    0,\n  );\n}\n\n// Encode an array of 21 signed RGB SH3 coefficients (clamped to [-1,1]) into\n// an array of 4 uint32 values, where each coefficient is stored as a sint6.\nexport function encodeSh3Rgb(\n  sh3Array: Uint32Array,\n  index: number,\n  sh3Rgb: Float32Array,\n  encoding?: {\n    sh3Min?: number;\n    sh3Max?: number;\n  },\n) {\n  const sh3Min = encoding?.sh3Min ?? -1;\n  const sh3Max = encoding?.sh3Max ?? 1;\n  const sh3Mid = 0.5 * (sh3Min + sh3Max);\n  const sh3Scale = 31 / (sh3Max - sh3Min);\n\n  // Pack sint6 values into 4 x uint32\n  const base = index * 4;\n  for (let i = 0; i < 21; ++i) {\n    const s = (sh3Rgb[i] - sh3Mid) * sh3Scale;\n    const value = Math.round(Math.max(-31, Math.min(31, s))) & 0x3f;\n    const bitStart = i * 6;\n    const bitEnd = bitStart + 6;\n\n    const wordStart = Math.floor(bitStart / 32);\n    const bitOffset = bitStart - wordStart * 32;\n    const firstWord = (value << bitOffset) & 0xffffffff;\n    sh3Array[base + wordStart] |= firstWord;\n\n    if (bitEnd > wordStart * 32 + 32) {\n      const secondWord = (value >>> (32 - bitOffset)) & 0xffffffff;\n      sh3Array[base + wordStart + 1] |= secondWord;\n    }\n  }\n}\n\n// Partially decompress a gzip-encoded Uint8Array, returning a Uint8Array of\n// the specified numBytes from the start of the file.\nexport function decompressPartialGzip(\n  fileBytes: Uint8Array,\n  numBytes: number,\n): Uint8Array {\n  const chunks: Uint8Array[] = [];\n  let totalBytes = 0;\n  let result: Uint8Array | null = null;\n\n  const gunzip = new Gunzip((data, final) => {\n    chunks.push(data);\n    totalBytes += data.length;\n    if (final || totalBytes >= numBytes) {\n      const allBytes = new Uint8Array(totalBytes);\n      let offset = 0;\n      for (const chunk of chunks) {\n        allBytes.set(chunk, offset);\n        offset += chunk.length;\n      }\n      result = allBytes.slice(0, numBytes);\n    }\n  });\n\n  const CHUNK_SIZE = 1024;\n  let offset = 0;\n  while (result == null && offset < fileBytes.length) {\n    const chunk = fileBytes.slice(offset, offset + CHUNK_SIZE);\n    gunzip.push(chunk, false);\n    offset += CHUNK_SIZE;\n  }\n\n  if (result == null) {\n    gunzip.push(new Uint8Array(), true);\n    if (result == null) {\n      throw new Error(\"Failed to decompress partial gzip\");\n    }\n  }\n  return result;\n}\n\nexport class GunzipReader {\n  fileBytes: Uint8Array;\n  chunkBytes: number;\n\n  offset: number;\n  chunks: Uint8Array[];\n  totalBytes: number;\n  gunzip: Gunzip;\n\n  constructor({\n    fileBytes,\n    chunkBytes = 64 * 1024,\n  }: { fileBytes: Uint8Array; chunkBytes?: number }) {\n    this.fileBytes = fileBytes;\n    this.chunkBytes = chunkBytes;\n    this.offset = 0;\n    this.chunks = [];\n    this.totalBytes = 0;\n\n    this.gunzip = new Gunzip((chunk, _final) => {\n      this.chunks.push(chunk);\n      this.totalBytes += chunk.length;\n    });\n  }\n\n  read(numBytes: number): Uint8Array {\n    while (this.totalBytes < numBytes && this.offset < this.fileBytes.length) {\n      const end = Math.min(\n        this.offset + this.chunkBytes,\n        this.fileBytes.length,\n      );\n      this.gunzip.push(this.fileBytes.subarray(this.offset, end), false);\n      this.offset = end;\n    }\n\n    if (this.totalBytes < numBytes && this.offset >= this.fileBytes.length) {\n      this.gunzip.push(new Uint8Array(0), true);\n    }\n\n    if (this.totalBytes < numBytes) {\n      throw new Error(\n        `Unexpected EOF: needed ${numBytes}, got ${this.totalBytes}`,\n      );\n    }\n\n    const allBytes = new Uint8Array(this.totalBytes);\n    let outOffset = 0;\n    for (const chunk of this.chunks) {\n      allBytes.set(chunk, outOffset);\n      outOffset += chunk.length;\n    }\n\n    const result = allBytes.subarray(0, numBytes);\n    this.chunks = [allBytes.subarray(numBytes)];\n    this.totalBytes -= numBytes;\n    return result;\n  }\n}\n","import * as THREE from \"three\";\n\nimport { IDENT_VERTEX_SHADER } from \"../utils\";\nimport { Compilation, type Dyno, type IOTypes } from \"./base\";\n\nexport class DynoProgram {\n  graph: Dyno<IOTypes, IOTypes>;\n  template: DynoProgramTemplate;\n  inputs: Record<string, string>;\n  outputs: Record<string, string>;\n  shader: string;\n  uniforms: Record<string, THREE.IUniform>;\n  updaters: (() => void)[];\n\n  constructor({\n    graph,\n    inputs,\n    outputs,\n    template,\n  }: {\n    graph: Dyno<IOTypes, IOTypes>;\n    inputs?: Record<string, string>;\n    outputs?: Record<string, string>;\n    template: DynoProgramTemplate;\n  }) {\n    this.graph = graph;\n    this.template = template;\n    this.inputs = inputs ?? {};\n    this.outputs = outputs ?? {};\n\n    const compile = new Compilation({ indent: this.template.indent });\n    for (const key in this.outputs) {\n      if (this.outputs[key]) {\n        compile.declares.add(this.outputs[key]);\n      }\n    }\n    const statements = graph.compile({\n      inputs: this.inputs,\n      outputs: this.outputs,\n      compile,\n    });\n\n    this.shader = template.generate({ globals: compile.globals, statements });\n    this.uniforms = compile.uniforms;\n    this.updaters = compile.updaters;\n    // console.log(\"*** COMPILED SHADER\", this.shader);\n    // console.log(\"*** UNIFORMS\", this.uniforms);\n  }\n\n  prepareMaterial(): THREE.RawShaderMaterial {\n    return getMaterial(this);\n  }\n\n  update() {\n    for (const updater of this.updaters) {\n      updater();\n    }\n  }\n}\n\nexport class DynoProgramTemplate {\n  before: string;\n  between: string;\n  after: string;\n  indent: string;\n\n  constructor(template: string) {\n    const globals = template.match(/^([ \\t]*)\\{\\{\\s*GLOBALS\\s*\\}\\}/m);\n    const statements = template.match(/^([ \\t]*)\\{\\{\\s*STATEMENTS\\s*\\}\\}/m);\n    if (!globals || !statements) {\n      throw new Error(\n        \"Template must contain {{ GLOBALS }} and {{ STATEMENTS }}\",\n      );\n    }\n\n    this.before = template.substring(0, globals.index);\n    this.between = template.substring(\n      (globals.index as number) + globals[0].length,\n      statements.index,\n    );\n    this.after = template.substring(\n      (statements.index as number) + statements[0].length,\n    );\n    this.indent = statements[1];\n  }\n\n  generate({\n    globals,\n    statements,\n  }: { globals: Set<string>; statements: string[] }): string {\n    return (\n      this.before +\n      Array.from(globals).join(\"\\n\\n\") +\n      this.between +\n      statements.map((s) => this.indent + s).join(\"\\n\") +\n      this.after\n    );\n  }\n}\n\nconst programMaterial = new Map<DynoProgram, THREE.RawShaderMaterial>();\n\nfunction getMaterial(program: DynoProgram): THREE.RawShaderMaterial {\n  let material = programMaterial.get(program);\n  if (material) {\n    return material;\n  }\n\n  material = new THREE.RawShaderMaterial({\n    glslVersion: THREE.GLSL3,\n    vertexShader: IDENT_VERTEX_SHADER,\n    fragmentShader: program.shader,\n    uniforms: program.uniforms,\n  });\n  programMaterial.set(program, material);\n  return material;\n}\n","import {\n  type AllFloatTypes,\n  type AllIntTypes,\n  type AllSignedTypes,\n  type AllValueTypes,\n  type BaseType,\n  type BoolTypes,\n  type FloatTypes,\n  type IntTypes,\n  type SignedTypes,\n  type UintTypes,\n  type ValueTypes,\n  isAllFloatType,\n  isFloatType,\n  isIntType,\n  isMat2,\n  isMat3,\n  isMat4,\n  isUintType,\n} from \"./types\";\n\nexport type AddOutput<\n  A extends AllValueTypes,\n  B extends AllValueTypes,\n> = BaseType &\n  (A extends B\n    ? A\n    : A extends \"int\"\n      ? B extends IntTypes\n        ? B\n        : never\n      : B extends \"int\"\n        ? A extends IntTypes\n          ? A\n          : never\n        : A extends \"uint\"\n          ? B extends UintTypes\n            ? B\n            : never\n          : B extends \"uint\"\n            ? A extends UintTypes\n              ? A\n              : never\n            : A extends \"float\"\n              ? B extends AllFloatTypes\n                ? B\n                : never\n              : B extends \"float\"\n                ? A extends AllFloatTypes\n                  ? A\n                  : never\n                : never);\n\nexport type SubOutput<\n  A extends AllValueTypes,\n  B extends AllValueTypes,\n> = AddOutput<A, B>;\n\nexport type MulOutput<\n  A extends AllValueTypes,\n  B extends AllValueTypes,\n> = BaseType &\n  (A extends \"int\"\n    ? B extends IntTypes\n      ? B\n      : never\n    : B extends \"int\"\n      ? A extends IntTypes\n        ? A\n        : never\n      : A extends \"uint\"\n        ? B extends UintTypes\n          ? B\n          : never\n        : B extends \"uint\"\n          ? A extends UintTypes\n            ? A\n            : never\n          : A extends \"float\"\n            ? B extends AllFloatTypes\n              ? B\n              : never\n            : B extends \"float\"\n              ? A extends AllFloatTypes\n                ? A\n                : never\n              : A extends IntTypes\n                ? B extends A\n                  ? A\n                  : never\n                : B extends IntTypes\n                  ? A extends B\n                    ? A\n                    : never\n                  : A extends UintTypes\n                    ? B extends A\n                      ? A\n                      : never\n                    : B extends UintTypes\n                      ? A extends B\n                        ? A\n                        : never\n                      : // Vector * Matrix/Vector\n                        A extends \"vec2\"\n                        ? B extends \"vec2\" | \"mat2\" | \"mat2x2\"\n                          ? \"vec2\"\n                          : B extends \"mat3x2\"\n                            ? \"vec3\"\n                            : B extends \"mat4x2\"\n                              ? \"vec4\"\n                              : never\n                        : A extends \"vec3\"\n                          ? B extends \"mat2x3\"\n                            ? \"vec2\"\n                            : B extends \"vec3\" | \"mat3\" | \"mat3x3\"\n                              ? \"vec3\"\n                              : B extends \"mat4x3\"\n                                ? \"vec4\"\n                                : never\n                          : A extends \"vec4\"\n                            ? B extends \"mat2x4\"\n                              ? \"vec2\"\n                              : B extends \"mat3x4\"\n                                ? \"vec3\"\n                                : B extends \"vec4\" | \"mat4\" | \"mat4x4\"\n                                  ? \"vec4\"\n                                  : never\n                            : // Matrix * Vector\n                              B extends \"vec2\"\n                              ? A extends \"mat2\" | \"mat2x2\"\n                                ? \"vec2\"\n                                : A extends \"mat2x3\"\n                                  ? \"vec3\"\n                                  : A extends \"mat2x4\"\n                                    ? \"vec4\"\n                                    : never\n                              : B extends \"vec3\"\n                                ? A extends \"mat3x2\"\n                                  ? \"vec2\"\n                                  : A extends \"mat3\" | \"mat3x3\"\n                                    ? \"vec3\"\n                                    : A extends \"mat3x4\"\n                                      ? \"vec4\"\n                                      : never\n                                : B extends \"vec4\"\n                                  ? A extends \"mat4x2\"\n                                    ? \"vec2\"\n                                    : A extends \"mat4x3\"\n                                      ? \"vec3\"\n                                      : A extends \"mat4\" | \"mat4x4\"\n                                        ? \"vec4\"\n                                        : never\n                                  : // Matrix * Matrix: mat{Acols}x{Arows} * mat{Bcols}x{Brows} => mat{Bcols}x{Arows}\n                                    A extends \"mat2\" | \"mat2x2\" // Acols = 2 => Brows = 2\n                                    ? B extends \"mat2\" | \"mat2x2\"\n                                      ? \"mat2\"\n                                      : B extends \"mat3x2\"\n                                        ? \"mat3x2\"\n                                        : B extends \"mat4x2\"\n                                          ? \"mat4x2\"\n                                          : never\n                                    : A extends \"mat2x3\" // Acols = 2 => Brows = 2\n                                      ? B extends \"mat2\" | \"mat2x2\"\n                                        ? \"mat2x3\"\n                                        : B extends \"mat3x2\"\n                                          ? \"mat3\"\n                                          : B extends \"mat4x2\"\n                                            ? \"mat4x3\"\n                                            : never\n                                      : A extends \"mat2x4\" // Acols = 2 => Brows = 2\n                                        ? B extends \"mat2\" | \"mat2x2\"\n                                          ? \"mat2x4\"\n                                          : B extends \"mat3x2\"\n                                            ? \"mat3x4\"\n                                            : B extends \"mat4x2\"\n                                              ? \"mat4\"\n                                              : never\n                                        : A extends \"mat3x2\" // Acols = 3 => Brows = 3\n                                          ? B extends \"mat2x3\"\n                                            ? \"mat2\"\n                                            : B extends \"mat3\" | \"mat3x3\"\n                                              ? \"mat3x2\"\n                                              : B extends \"mat4x3\"\n                                                ? \"mat4x2\"\n                                                : never\n                                          : A extends \"mat3\" | \"mat3x3\" // Acols = 3 => Brows = 3\n                                            ? B extends \"mat2x3\"\n                                              ? \"mat2x3\"\n                                              : B extends \"mat3\" | \"mat3x3\"\n                                                ? \"mat3\"\n                                                : B extends \"mat4x3\"\n                                                  ? \"mat4x3\"\n                                                  : never\n                                            : A extends \"mat3x4\" // Acols = 3 => Brows = 3\n                                              ? B extends \"mat2x3\"\n                                                ? \"mat2x4\"\n                                                : B extends \"mat3\" | \"mat3x3\"\n                                                  ? \"mat3x4\"\n                                                  : B extends \"mat4x3\"\n                                                    ? \"mat4\"\n                                                    : never\n                                              : A extends \"mat4x2\" // Acols = 4 => Brows = 4\n                                                ? B extends \"mat2x4\"\n                                                  ? \"mat2\"\n                                                  : B extends \"mat3x4\"\n                                                    ? \"mat3x2\"\n                                                    : B extends\n                                                          | \"mat4\"\n                                                          | \"mat4x4\"\n                                                      ? \"mat4x2\"\n                                                      : never\n                                                : A extends \"mat4x3\" // Acols = 4 => Brows = 4\n                                                  ? B extends \"mat2x4\"\n                                                    ? \"mat2x3\"\n                                                    : B extends \"mat3x4\"\n                                                      ? \"mat3\"\n                                                      : B extends\n                                                            | \"mat4\"\n                                                            | \"mat4x4\"\n                                                        ? \"mat4x3\"\n                                                        : never\n                                                  : A extends \"mat4\" | \"mat4x4\" // Acols = 4 => Brows = 4\n                                                    ? B extends \"mat2x4\"\n                                                      ? \"mat2x4\"\n                                                      : B extends \"mat3x4\"\n                                                        ? \"mat3x4\"\n                                                        : B extends\n                                                              | \"mat4\"\n                                                              | \"mat4x4\"\n                                                          ? \"mat4\"\n                                                          : never\n                                                    : never);\n\nexport type DivOutput<\n  A extends AllValueTypes,\n  B extends AllValueTypes,\n> = AddOutput<A, B>;\n\nexport type IModOutput<\n  A extends AllIntTypes,\n  B extends AllIntTypes,\n> = BaseType &\n  (A extends B\n    ? A\n    : A extends \"int\"\n      ? B extends IntTypes\n        ? B\n        : never\n      : B extends \"int\"\n        ? A extends IntTypes\n          ? A\n          : never\n        : A extends \"uint\"\n          ? B extends UintTypes\n            ? B\n            : never\n          : B extends \"uint\"\n            ? A extends UintTypes\n              ? A\n              : never\n            : never);\n\nexport type ModOutput<A extends FloatTypes, B extends FloatTypes> = BaseType &\n  (A extends B ? A : B extends \"float\" ? A : never);\n\nexport type PowOutput<A extends FloatTypes, B extends FloatTypes> = BaseType &\n  (A extends B ? A : never);\n\nexport type MinOutput<A extends ValueTypes, B extends ValueTypes> = BaseType &\n  (A extends B\n    ? A\n    : B extends \"float\"\n      ? A extends FloatTypes\n        ? A\n        : never\n      : B extends \"int\"\n        ? A extends IntTypes\n          ? A\n          : never\n        : B extends \"uint\"\n          ? A extends UintTypes\n            ? A\n            : never\n          : never);\nexport type MaxOutput<A extends ValueTypes, B extends ValueTypes> = MinOutput<\n  A,\n  B\n>;\nexport type ClampOutput<A extends ValueTypes, B extends ValueTypes> = BaseType &\n  (B extends \"float\"\n    ? A extends FloatTypes\n      ? A\n      : never\n    : B extends \"int\"\n      ? A extends IntTypes\n        ? A\n        : never\n      : B extends \"uint\"\n        ? A extends UintTypes\n          ? A\n          : never\n        : never);\nexport type MixOutput<\n  A extends FloatTypes,\n  T extends FloatTypes | BoolTypes,\n> = BaseType &\n  (T extends A\n    ? A\n    : T extends \"float\"\n      ? A\n      : T extends \"bool\"\n        ? A extends \"float\"\n          ? A\n          : never\n        : T extends \"bvec2\"\n          ? A extends \"vec2\"\n            ? A\n            : never\n          : T extends \"bvec3\"\n            ? A extends \"vec3\"\n              ? A\n              : never\n            : T extends \"bvec4\"\n              ? A extends \"vec4\"\n                ? A\n                : never\n              : never);\nexport type StepOutput<A extends FloatTypes, B extends FloatTypes> = BaseType &\n  (A extends B ? B : A extends \"float\" ? B : never);\nexport type SmoothstepOutput<\n  A extends FloatTypes,\n  B extends FloatTypes,\n  C extends FloatTypes,\n> = BaseType &\n  (A extends B ? (A extends C ? C : A extends \"float\" ? C : never) : never);\n\nexport type IsNanOutput<A extends FloatTypes> = BaseType &\n  (A extends \"float\"\n    ? \"bool\"\n    : A extends \"vec2\"\n      ? \"bvec2\"\n      : A extends \"vec3\"\n        ? \"bvec3\"\n        : A extends \"vec4\"\n          ? \"bvec4\"\n          : never);\nexport type IsInfOutput<A extends FloatTypes> = IsNanOutput<A>;\n\n// // Run-time type helper functions\n\nexport function addOutputType<A extends AllValueTypes, B extends AllValueTypes>(\n  a: A,\n  b: B,\n  operation = \"add\",\n): AddOutput<A, B> {\n  const error = () => {\n    throw new Error(`Invalid ${operation} types: ${a}, ${b}`);\n  };\n  // @ts-ignore\n  if (a === b) return a as AddOutput<A, B>;\n  if (a === \"int\") {\n    if (isIntType(b)) return b as AddOutput<A, B>;\n    error();\n  }\n  if (b === \"int\") {\n    if (isIntType(a)) return a as AddOutput<A, B>;\n    error();\n  }\n  if (a === \"uint\") {\n    if (isUintType(b)) return b as AddOutput<A, B>;\n    error();\n  }\n  if (b === \"uint\") {\n    if (isUintType(a)) return a as AddOutput<A, B>;\n    error();\n  }\n  if (a === \"float\") {\n    if (isAllFloatType(b)) return b as AddOutput<A, B>;\n    error();\n  }\n  if (b === \"float\") {\n    if (isAllFloatType(a)) return a as AddOutput<A, B>;\n    error();\n  }\n  throw new Error(`Invalid ${operation} types: ${a}, ${b}`);\n}\n\nexport function subOutputType<A extends AllValueTypes, B extends AllValueTypes>(\n  a: A,\n  b: B,\n): SubOutput<A, B> {\n  return addOutputType(a, b, \"sub\");\n}\n\nexport function mulOutputType<A extends AllValueTypes, B extends AllValueTypes>(\n  a: A,\n  b: B,\n): MulOutput<A, B> {\n  const error = () => {\n    throw new Error(`Invalid mul types: ${a}, ${b}`);\n  };\n  const result = (value: unknown) => value as MulOutput<A, B>;\n  if (a === \"int\") {\n    if (isIntType(b)) return result(b);\n    error();\n  }\n  if (b === \"int\") {\n    if (isIntType(a)) return result(a);\n    error();\n  }\n  if (a === \"uint\") {\n    if (isUintType(b)) return result(b);\n    error();\n  }\n  if (b === \"uint\") {\n    if (isUintType(a)) return result(a);\n    error();\n  }\n  if (a === \"float\") {\n    if (isAllFloatType(b)) return result(b);\n    error();\n  }\n  if (b === \"float\") {\n    if (isAllFloatType(a)) return result(a);\n    error();\n  }\n  if (isIntType(a) || isUintType(a) || isIntType(b) || isUintType(b)) {\n    // @ts-ignore\n    if (a === b) return result(a);\n    error();\n  }\n  // Vector * Matrix/Vector\n  if (a === \"vec2\") {\n    if (b === \"vec2\" || isMat2(b)) return result(\"vec2\");\n    if (b === \"mat3x2\") return result(\"vec3\");\n    if (b === \"mat4x2\") return result(\"vec4\");\n    error();\n  }\n  if (a === \"vec3\") {\n    if (b === \"mat2x3\") return result(\"vec2\");\n    if (b === \"vec3\" || isMat3(b)) return result(\"vec3\");\n    if (b === \"mat4x3\") return result(\"vec4\");\n    error();\n  }\n  if (a === \"vec4\") {\n    if (b === \"mat2x4\") return result(\"vec2\");\n    if (b === \"mat3x4\") return result(\"vec3\");\n    if (b === \"vec4\" || isMat4(b)) return result(\"vec4\");\n    error();\n  }\n  // Matrix * Vector\n  if (b === \"vec2\") {\n    if (isMat2(a)) return result(\"vec2\");\n    if (a === \"mat2x3\") return result(\"vec3\");\n    if (a === \"mat2x4\") return result(\"vec4\");\n    error();\n  }\n  if (b === \"vec3\") {\n    if (a === \"mat3x2\") return result(\"vec2\");\n    if (isMat3(a)) return result(\"vec3\");\n    if (a === \"mat3x4\") return result(\"vec4\");\n    error();\n  }\n  if (b === \"vec4\") {\n    if (a === \"mat4x2\") return result(\"vec2\");\n    if (a === \"mat4x3\") return result(\"vec3\");\n    if (isMat4(a)) return result(\"vec4\");\n    error();\n  }\n  // Matrix * Matrix: mat{Acols}x{Arows} * mat{Bcols}x{Brows} => mat{Bcols}x{Arows}\n  if (isMat2(a)) {\n    if (isMat2(b)) return result(\"mat2\");\n    if (b === \"mat3x2\") return result(\"mat3x2\");\n    if (b === \"mat4x2\") return result(\"mat4x2\");\n    error();\n  }\n  if (a === \"mat2x3\") {\n    if (isMat2(b)) return result(\"mat2x3\");\n    if (b === \"mat3x2\") return result(\"mat3\");\n    if (b === \"mat4x2\") return result(\"mat4x3\");\n    error();\n  }\n  if (a === \"mat2x4\") {\n    if (isMat2(b)) return result(\"mat2x4\");\n    if (b === \"mat3x2\") return result(\"mat3x4\");\n    if (b === \"mat4x2\") return result(\"mat4\");\n    error();\n  }\n  if (a === \"mat3x2\") {\n    if (b === \"mat2x3\") return result(\"mat2\");\n    if (isMat3(b)) return result(\"mat3x2\");\n    if (b === \"mat4x3\") return result(\"mat4x2\");\n    error();\n  }\n  if (isMat3(a)) {\n    if (b === \"mat2x3\") return result(\"mat2x3\");\n    if (isMat3(b)) return result(\"mat3\");\n    if (b === \"mat4x3\") return result(\"mat4x3\");\n    error();\n  }\n  if (a === \"mat3x4\") {\n    if (b === \"mat2x3\") return result(\"mat2x4\");\n    if (isMat3(b)) return result(\"mat3x4\");\n    if (b === \"mat4x3\") return result(\"mat4\");\n    error();\n  }\n  if (a === \"mat4x2\") {\n    if (b === \"mat2x4\") return result(\"mat2\");\n    if (b === \"mat3x4\") return result(\"mat3x2\");\n    if (isMat4(b)) return result(\"mat4x2\");\n    error();\n  }\n  if (a === \"mat4x3\") {\n    if (b === \"mat2x4\") return result(\"mat2x3\");\n    if (b === \"mat3x4\") return result(\"mat3\");\n    if (isMat4(b)) return result(\"mat4x3\");\n    error();\n  }\n  if (isMat4(a)) {\n    if (b === \"mat2x4\") return result(\"mat2x4\");\n    if (b === \"mat3x4\") return result(\"mat3x4\");\n    if (isMat4(b)) return result(\"mat4\");\n    error();\n  }\n  throw new Error(`Invalid mul types: ${a}, ${b}`);\n}\n\nexport function divOutputType<A extends AllValueTypes, B extends AllValueTypes>(\n  a: A,\n  b: B,\n): DivOutput<A, B> {\n  return addOutputType(a, b, \"div\");\n}\n\nexport function imodOutputType<A extends AllIntTypes, B extends AllIntTypes>(\n  a: A,\n  b: B,\n): IModOutput<A, B> {\n  // @ts-ignore\n  if (a === b) return a as IModOutput<A, B>;\n  if (a === \"int\") {\n    if (isIntType(b)) return b as IModOutput<A, B>;\n  } else if (b === \"int\") {\n    if (isIntType(a)) return a as IModOutput<A, B>;\n  } else if (a === \"uint\") {\n    if (isUintType(b)) return b as IModOutput<A, B>;\n  } else if (b === \"uint\") {\n    if (isUintType(a)) return a as IModOutput<A, B>;\n  }\n  throw new Error(`Invalid imod types: ${a}, ${b}`);\n}\n\nexport function modOutputType<A extends FloatTypes, B extends FloatTypes>(\n  a: A,\n  b: B,\n): ModOutput<A, B> {\n  // @ts-ignore\n  if (a === b || b === \"float\") return a as ModOutput<A, B>;\n  throw new Error(`Invalid mod types: ${a}, ${b}`);\n}\n\nexport function modfOutputType<A extends FloatTypes>(a: A): A {\n  return a;\n}\n\nexport function negOutputType<A extends AllSignedTypes>(a: A): A {\n  return a;\n}\n\nexport function absOutputType<A extends SignedTypes>(a: A): A {\n  return a;\n}\n\nexport function signOutputType<A extends SignedTypes>(a: A): A {\n  return a;\n}\n\nexport function floorOutputType<A extends FloatTypes>(a: A): A {\n  return a;\n}\n\nexport function ceilOutputType<A extends FloatTypes>(a: A): A {\n  return a;\n}\n\nexport function truncOutputType<A extends FloatTypes>(a: A): A {\n  return a;\n}\n\nexport function roundOutputType<A extends FloatTypes>(a: A): A {\n  return a;\n}\n\nexport function fractOutputType<A extends FloatTypes>(a: A): A {\n  return a;\n}\n\nexport function powOutputType<A extends FloatTypes>(a: A): A {\n  return a;\n}\n\nexport function expOutputType<A extends FloatTypes>(a: A): A {\n  return a;\n}\n\nexport function exp2OutputType<A extends FloatTypes>(a: A): A {\n  return a;\n}\n\nexport function logOutputType<A extends FloatTypes>(a: A): A {\n  return a;\n}\n\nexport function log2OutputType<A extends FloatTypes>(a: A): A {\n  return a;\n}\n\nexport function sqrOutputType<A extends ValueTypes>(a: A): A {\n  return a;\n}\n\nexport function sqrtOutputType<A extends FloatTypes>(a: A): A {\n  return a;\n}\n\nexport function inversesqrtOutputType<A extends FloatTypes>(a: A): A {\n  return a;\n}\n\nexport function minOutputType<A extends ValueTypes, B extends ValueTypes>(\n  a: A,\n  b: B,\n  operation = \"min\",\n): MinOutput<A, B> {\n  // @ts-ignore\n  if (a === b) return a as MinOutput<A, B>;\n  if (b === \"float\") {\n    if (isFloatType(a)) return a as MinOutput<A, B>;\n  } else if (b === \"int\") {\n    if (isIntType(a)) return a as MinOutput<A, B>;\n  } else if (b === \"uint\") {\n    if (isUintType(a)) return a as MinOutput<A, B>;\n  }\n  throw new Error(`Invalid ${operation} types: ${a}, ${b}`);\n}\n\nexport function maxOutputType<A extends ValueTypes, B extends ValueTypes>(\n  a: A,\n  b: B,\n): MaxOutput<A, B> {\n  return minOutputType(a, b, \"max\");\n}\n\nexport function clampOutputType<A extends ValueTypes, B extends ValueTypes>(\n  a: A,\n  b: B,\n  _c: B,\n): ClampOutput<A, B> {\n  if (b === \"float\") {\n    if (isFloatType(a)) return a as ClampOutput<A, B>;\n  } else if (b === \"int\") {\n    if (isIntType(a)) return a as ClampOutput<A, B>;\n  } else if (b === \"uint\") {\n    if (isUintType(a)) return a as ClampOutput<A, B>;\n  }\n  throw new Error(`Invalid clamp types: ${a}, ${b}`);\n}\n\nexport function mixOutputType<\n  A extends FloatTypes,\n  C extends FloatTypes | BoolTypes,\n>(a: A, b: A, c: C): MixOutput<A, C> {\n  // @ts-ignore\n  if (c === a) return a as MixOutput<A, C>;\n  if (c === \"float\") return a as MixOutput<A, C>;\n  if (c === \"bool\" && a === \"float\") return a as MixOutput<A, C>;\n  if (c === \"bvec2\" && a === \"vec2\") return a as MixOutput<A, C>;\n  if (c === \"bvec3\" && a === \"vec3\") return a as MixOutput<A, C>;\n  if (c === \"bvec4\" && a === \"vec4\") return a as MixOutput<A, C>;\n  throw new Error(`Invalid mix types: ${a}, ${b}, ${c}`);\n}\n\nexport function stepOutputType<A extends FloatTypes, B extends FloatTypes>(\n  a: A,\n  b: B,\n): StepOutput<A, B> {\n  // @ts-ignore\n  if (a === b || b === \"float\") return b as StepOutput<A, B>;\n  throw new Error(`Invalid step types: ${a}, ${b}`);\n}\n\nexport function smoothstepOutputType<\n  A extends FloatTypes,\n  B extends FloatTypes,\n  C extends FloatTypes,\n>(a: A, b: B, c: C): SmoothstepOutput<A, B, C> {\n  // @ts-ignore\n  if (a === b) {\n    if (a === c || a === \"float\") return c as SmoothstepOutput<A, B, C>;\n  }\n  throw new Error(`Invalid smoothstep types: ${a}, ${b}, ${c}`);\n}\n\nexport function isNanOutputType<A extends FloatTypes>(\n  a: A,\n  operation = \"isNan\",\n): IsNanOutput<A> {\n  if (a === \"float\") return \"bool\" as IsNanOutput<A>;\n  if (a === \"vec2\") return \"bvec2\" as IsNanOutput<A>;\n  if (a === \"vec3\") return \"bvec3\" as IsNanOutput<A>;\n  if (a === \"vec4\") return \"bvec4\" as IsNanOutput<A>;\n  throw new Error(`Invalid ${operation} types: ${a}`);\n}\n\nexport function isInfOutputType<A extends FloatTypes>(a: A): IsInfOutput<A> {\n  return isNanOutputType(a, \"isInf\");\n}\n","import { BinaryOp, Dyno, TrinaryOp, UnaryOp } from \"./base\";\nimport {\n  type AddOutput,\n  type ClampOutput,\n  type DivOutput,\n  type IModOutput,\n  type IsInfOutput,\n  type IsNanOutput,\n  type MaxOutput,\n  type MinOutput,\n  type MixOutput,\n  type ModOutput,\n  type MulOutput,\n  type SmoothstepOutput,\n  type StepOutput,\n  type SubOutput,\n  absOutputType,\n  addOutputType,\n  ceilOutputType,\n  clampOutputType,\n  divOutputType,\n  exp2OutputType,\n  expOutputType,\n  floorOutputType,\n  fractOutputType,\n  imodOutputType,\n  inversesqrtOutputType,\n  isInfOutputType,\n  isNanOutputType,\n  log2OutputType,\n  logOutputType,\n  maxOutputType,\n  minOutputType,\n  mixOutputType,\n  modOutputType,\n  modfOutputType,\n  mulOutputType,\n  negOutputType,\n  powOutputType,\n  roundOutputType,\n  signOutputType,\n  smoothstepOutputType,\n  sqrOutputType,\n  sqrtOutputType,\n  stepOutputType,\n  subOutputType,\n  truncOutputType,\n} from \"./mathTypes\";\nimport type {\n  AllIntTypes,\n  AllSignedTypes,\n  AllValueTypes,\n  BoolTypes,\n  FloatTypes,\n  SignedTypes,\n  ValueTypes,\n} from \"./types\";\nimport { type DynoVal, valType } from \"./value\";\n\nexport const add = <A extends AllValueTypes, B extends AllValueTypes>(\n  a: DynoVal<A>,\n  b: DynoVal<B>,\n): DynoVal<AddOutput<A, B>> => new Add({ a, b });\nexport const sub = <A extends AllValueTypes, B extends AllValueTypes>(\n  a: DynoVal<A>,\n  b: DynoVal<B>,\n): DynoVal<SubOutput<A, B>> => new Sub({ a, b });\nexport const mul = <A extends AllValueTypes, B extends AllValueTypes>(\n  a: DynoVal<A>,\n  b: DynoVal<B>,\n): DynoVal<MulOutput<A, B>> => new Mul({ a, b });\nexport const div = <A extends AllValueTypes, B extends AllValueTypes>(\n  a: DynoVal<A>,\n  b: DynoVal<B>,\n): DynoVal<DivOutput<A, B>> => new Div({ a, b });\nexport const imod = <A extends AllIntTypes, B extends AllIntTypes>(\n  a: DynoVal<A>,\n  b: DynoVal<B>,\n): DynoVal<IModOutput<A, B>> => new IMod({ a, b });\nexport const mod = <A extends FloatTypes, B extends FloatTypes>(\n  a: DynoVal<A>,\n  b: DynoVal<B>,\n): DynoVal<ModOutput<A, B>> => new Mod({ a, b });\nexport const modf = <A extends FloatTypes>(a: DynoVal<A>) =>\n  new Modf({ a }).outputs;\n\nexport const neg = <A extends AllSignedTypes>(a: DynoVal<A>): DynoVal<A> =>\n  new Neg({ a });\nexport const abs = <A extends SignedTypes>(a: DynoVal<A>): DynoVal<A> =>\n  new Abs({ a });\nexport const sign = <A extends SignedTypes>(a: DynoVal<A>): DynoVal<A> =>\n  new Sign({ a });\nexport const floor = <A extends FloatTypes>(a: DynoVal<A>): DynoVal<A> =>\n  new Floor({ a });\nexport const ceil = <A extends FloatTypes>(a: DynoVal<A>): DynoVal<A> =>\n  new Ceil({ a });\nexport const trunc = <A extends FloatTypes>(a: DynoVal<A>): DynoVal<A> =>\n  new Trunc({ a });\nexport const round = <A extends FloatTypes>(a: DynoVal<A>): DynoVal<A> =>\n  new Round({ a });\nexport const fract = <A extends FloatTypes>(a: DynoVal<A>): DynoVal<A> =>\n  new Fract({ a });\n\nexport const pow = <A extends FloatTypes>(\n  a: DynoVal<A>,\n  b: DynoVal<A>,\n): DynoVal<A> => new Pow({ a, b });\nexport const exp = <A extends FloatTypes>(a: DynoVal<A>): DynoVal<A> =>\n  new Exp({ a });\nexport const exp2 = <A extends FloatTypes>(a: DynoVal<A>): DynoVal<A> =>\n  new Exp2({ a });\nexport const log = <A extends FloatTypes>(a: DynoVal<A>): DynoVal<A> =>\n  new Log({ a });\nexport const log2 = <A extends FloatTypes>(a: DynoVal<A>): DynoVal<A> =>\n  new Log2({ a });\nexport const sqr = <A extends ValueTypes>(a: DynoVal<A>): DynoVal<A> =>\n  new Sqr({ a });\nexport const sqrt = <A extends FloatTypes>(a: DynoVal<A>): DynoVal<A> =>\n  new Sqrt({ a });\nexport const inversesqrt = <A extends FloatTypes>(a: DynoVal<A>): DynoVal<A> =>\n  new InverseSqrt({ a });\n\nexport const min = <A extends ValueTypes, B extends ValueTypes>(\n  a: DynoVal<A>,\n  b: DynoVal<B>,\n): DynoVal<MinOutput<A, B>> => new Min({ a, b });\nexport const max = <A extends ValueTypes, B extends ValueTypes>(\n  a: DynoVal<A>,\n  b: DynoVal<B>,\n): DynoVal<MaxOutput<A, B>> => new Max({ a, b });\nexport const clamp = <A extends ValueTypes, MinMax extends ValueTypes>(\n  a: DynoVal<A>,\n  min: DynoVal<MinMax>,\n  max: DynoVal<MinMax>,\n): DynoVal<ClampOutput<A, MinMax>> => new Clamp({ a, min, max });\nexport const mix = <A extends FloatTypes, T extends FloatTypes | BoolTypes>(\n  a: DynoVal<A>,\n  b: DynoVal<A>,\n  t: DynoVal<T>,\n): DynoVal<MixOutput<A, T>> => new Mix({ a, b, t });\nexport const step = <A extends FloatTypes, B extends FloatTypes>(\n  edge: DynoVal<A>,\n  x: DynoVal<B>,\n): DynoVal<StepOutput<A, B>> => new Step({ edge, x });\nexport const smoothstep = <X extends FloatTypes, Edge extends X | \"float\">(\n  edge0: DynoVal<Edge>,\n  edge1: DynoVal<Edge>,\n  x: DynoVal<X>,\n): DynoVal<SmoothstepOutput<Edge, Edge, X>> =>\n  new Smoothstep({ edge0, edge1, x });\n\nexport const isNan = <A extends FloatTypes>(\n  a: DynoVal<A>,\n): DynoVal<IsNanOutput<A>> => new IsNan({ a });\nexport const isInf = <A extends FloatTypes>(\n  a: DynoVal<A>,\n): DynoVal<IsInfOutput<A>> => new IsInf({ a });\n\nexport class Add<\n  A extends AllValueTypes,\n  B extends AllValueTypes,\n> extends BinaryOp<A, B, AddOutput<A, B>, \"sum\"> {\n  constructor({ a, b }: { a: DynoVal<A>; b: DynoVal<B> }) {\n    super({ a, b, outKey: \"sum\", outTypeFunc: addOutputType<A, B> });\n    this.statements = ({ inputs, outputs }) => {\n      return [`${outputs.sum} = ${inputs.a} + ${inputs.b};`];\n    };\n  }\n}\n\nexport class Sub<\n  A extends AllValueTypes,\n  B extends AllValueTypes,\n> extends BinaryOp<A, B, SubOutput<A, B>, \"difference\"> {\n  constructor({ a, b }: { a: DynoVal<A>; b: DynoVal<B> }) {\n    super({ a, b, outKey: \"difference\", outTypeFunc: subOutputType<A, B> });\n    this.statements = ({ inputs, outputs }) => {\n      return [`${outputs.difference} = ${inputs.a} - ${inputs.b};`];\n    };\n  }\n}\n\nexport class Mul<\n  A extends AllValueTypes,\n  B extends AllValueTypes,\n> extends BinaryOp<A, B, MulOutput<A, B>, \"product\"> {\n  constructor({ a, b }: { a: DynoVal<A>; b: DynoVal<B> }) {\n    super({ a, b, outKey: \"product\", outTypeFunc: mulOutputType<A, B> });\n    this.statements = ({ inputs, outputs }) => {\n      return [`${outputs.product} = ${inputs.a} * ${inputs.b};`];\n    };\n  }\n}\n\nexport class Div<\n  A extends AllValueTypes,\n  B extends AllValueTypes,\n> extends BinaryOp<A, B, DivOutput<A, B>, \"quotient\"> {\n  constructor({ a, b }: { a: DynoVal<A>; b: DynoVal<B> }) {\n    super({ a, b, outKey: \"quotient\", outTypeFunc: divOutputType<A, B> });\n    this.statements = ({ inputs, outputs }) => {\n      return [`${outputs.quotient} = ${inputs.a} / ${inputs.b};`];\n    };\n  }\n}\n\nexport class IMod<\n  A extends AllIntTypes,\n  B extends AllIntTypes,\n> extends BinaryOp<A, B, IModOutput<A, B>, \"remainder\"> {\n  constructor({ a, b }: { a: DynoVal<A>; b: DynoVal<B> }) {\n    super({ a, b, outKey: \"remainder\", outTypeFunc: imodOutputType<A, B> });\n    this.statements = ({ inputs, outputs }) => {\n      return [`${outputs.remainder} = ${inputs.a} % ${inputs.b};`];\n    };\n  }\n}\n\nexport class Mod<A extends FloatTypes, B extends FloatTypes> extends BinaryOp<\n  A,\n  B,\n  ModOutput<A, B>,\n  \"remainder\"\n> {\n  constructor({ a, b }: { a: DynoVal<A>; b: DynoVal<B> }) {\n    super({ a, b, outKey: \"remainder\", outTypeFunc: modOutputType<A, B> });\n    this.statements = ({ inputs, outputs }) => {\n      return [`${outputs.remainder} = mod(${inputs.a}, ${inputs.b});`];\n    };\n  }\n}\n\nexport class Modf<A extends FloatTypes> extends Dyno<\n  { a: A },\n  { fract: A; integer: A }\n> {\n  constructor({ a }: { a: DynoVal<A> }) {\n    const inTypes = { a: valType(a) };\n    const outType = modfOutputType<A>(inTypes.a);\n    const outTypes = {\n      fract: outType,\n      integer: outType,\n    };\n    super({ inTypes, outTypes, inputs: { a } });\n    this.statements = ({ inputs, outputs }) => {\n      return [`${outputs.fract} = modf(${inputs.a}, ${outputs.integer});`];\n    };\n  }\n}\n\nexport class Neg<A extends AllSignedTypes> extends UnaryOp<A, A, \"neg\"> {\n  constructor({ a }: { a: DynoVal<A> }) {\n    super({ a, outKey: \"neg\", outTypeFunc: negOutputType<A> });\n    this.statements = ({ inputs, outputs }) => {\n      return [`${outputs.neg} = -${inputs.a};`];\n    };\n  }\n}\n\nexport class Abs<A extends SignedTypes> extends UnaryOp<A, A, \"abs\"> {\n  constructor({ a }: { a: DynoVal<A> }) {\n    super({ a, outKey: \"abs\", outTypeFunc: absOutputType<A> });\n    this.statements = ({ inputs, outputs }) => {\n      return [`${outputs.abs} = abs(${inputs.a});`];\n    };\n  }\n}\n\nexport class Sign<A extends SignedTypes> extends UnaryOp<A, A, \"sign\"> {\n  constructor({ a }: { a: DynoVal<A> }) {\n    super({ a, outKey: \"sign\", outTypeFunc: signOutputType<A> });\n    this.statements = ({ inputs, outputs }) => {\n      return [`${outputs.sign} = sign(${inputs.a});`];\n    };\n  }\n}\n\nexport class Floor<A extends FloatTypes> extends UnaryOp<A, A, \"floor\"> {\n  constructor({ a }: { a: DynoVal<A> }) {\n    super({ a, outKey: \"floor\", outTypeFunc: floorOutputType<A> });\n    this.statements = ({ inputs, outputs }) => {\n      return [`${outputs.floor} = floor(${inputs.a});`];\n    };\n  }\n}\n\nexport class Ceil<A extends FloatTypes> extends UnaryOp<A, A, \"ceil\"> {\n  constructor({ a }: { a: DynoVal<A> }) {\n    super({ a, outKey: \"ceil\", outTypeFunc: ceilOutputType<A> });\n    this.statements = ({ inputs, outputs }) => {\n      return [`${outputs.ceil} = ceil(${inputs.a});`];\n    };\n  }\n}\n\nexport class Trunc<A extends FloatTypes> extends UnaryOp<A, A, \"trunc\"> {\n  constructor({ a }: { a: DynoVal<A> }) {\n    super({ a, outKey: \"trunc\", outTypeFunc: truncOutputType<A> });\n    this.statements = ({ inputs, outputs }) => {\n      return [`${outputs.trunc} = trunc(${inputs.a});`];\n    };\n  }\n}\n\nexport class Round<A extends FloatTypes> extends UnaryOp<A, A, \"round\"> {\n  constructor({ a }: { a: DynoVal<A> }) {\n    super({ a, outKey: \"round\", outTypeFunc: roundOutputType<A> });\n    this.statements = ({ inputs, outputs }) => {\n      return [`${outputs.round} = round(${inputs.a});`];\n    };\n  }\n}\n\nexport class Fract<A extends FloatTypes> extends UnaryOp<A, A, \"fract\"> {\n  constructor({ a }: { a: DynoVal<A> }) {\n    super({ a, outKey: \"fract\", outTypeFunc: fractOutputType<A> });\n    this.statements = ({ inputs, outputs }) => {\n      return [`${outputs.fract} = fract(${inputs.a});`];\n    };\n  }\n}\n\nexport class Pow<A extends FloatTypes> extends BinaryOp<A, A, A, \"power\"> {\n  constructor({ a, b }: { a: DynoVal<A>; b: DynoVal<A> }) {\n    super({ a, b, outKey: \"power\", outTypeFunc: powOutputType<A> });\n    this.statements = ({ inputs, outputs }) => {\n      return [`${outputs.power} = pow(${inputs.a}, ${inputs.b});`];\n    };\n  }\n}\n\nexport class Exp<A extends FloatTypes> extends UnaryOp<A, A, \"exp\"> {\n  constructor({ a }: { a: DynoVal<A> }) {\n    super({ a, outKey: \"exp\", outTypeFunc: expOutputType<A> });\n    this.statements = ({ inputs, outputs }) => {\n      return [`${outputs.exp} = exp(${inputs.a});`];\n    };\n  }\n}\n\nexport class Exp2<A extends FloatTypes> extends UnaryOp<A, A, \"exp2\"> {\n  constructor({ a }: { a: DynoVal<A> }) {\n    super({ a, outKey: \"exp2\", outTypeFunc: exp2OutputType<A> });\n    this.statements = ({ inputs, outputs }) => {\n      return [`${outputs.exp2} = exp2(${inputs.a});`];\n    };\n  }\n}\n\nexport class Log<A extends FloatTypes> extends UnaryOp<A, A, \"log\"> {\n  constructor({ a }: { a: DynoVal<A> }) {\n    super({ a, outKey: \"log\", outTypeFunc: logOutputType<A> });\n    this.statements = ({ inputs, outputs }) => {\n      return [`${outputs.log} = log(${inputs.a});`];\n    };\n  }\n}\n\nexport class Log2<A extends FloatTypes> extends UnaryOp<A, A, \"log2\"> {\n  constructor({ a }: { a: DynoVal<A> }) {\n    super({ a, outKey: \"log2\", outTypeFunc: log2OutputType<A> });\n    this.statements = ({ inputs, outputs }) => {\n      return [`${outputs.log2} = log2(${inputs.a});`];\n    };\n  }\n}\n\nexport class Sqr<A extends ValueTypes> extends UnaryOp<A, A, \"sqr\"> {\n  constructor({ a }: { a: DynoVal<A> }) {\n    super({ a, outKey: \"sqr\", outTypeFunc: sqrOutputType<A> });\n    this.statements = ({ inputs, outputs }) => {\n      return [`${outputs.sqr} = ${inputs.a} * ${inputs.a};`];\n    };\n  }\n}\n\nexport class Sqrt<A extends FloatTypes> extends UnaryOp<A, A, \"sqrt\"> {\n  constructor({ a }: { a: DynoVal<A> }) {\n    super({ a, outKey: \"sqrt\", outTypeFunc: sqrtOutputType<A> });\n    this.statements = ({ inputs, outputs }) => {\n      return [`${outputs.sqrt} = sqrt(${inputs.a});`];\n    };\n  }\n}\n\nexport class InverseSqrt<A extends FloatTypes> extends UnaryOp<\n  A,\n  A,\n  \"inversesqrt\"\n> {\n  constructor({ a }: { a: DynoVal<A> }) {\n    super({ a, outKey: \"inversesqrt\", outTypeFunc: inversesqrtOutputType<A> });\n    this.statements = ({ inputs, outputs }) => {\n      return [`${outputs.inversesqrt} = inversesqrt(${inputs.a});`];\n    };\n  }\n}\n\nexport class Min<A extends ValueTypes, B extends ValueTypes> extends BinaryOp<\n  A,\n  B,\n  MinOutput<A, B>,\n  \"min\"\n> {\n  constructor({ a, b }: { a: DynoVal<A>; b: DynoVal<B> }) {\n    super({ a, b, outKey: \"min\", outTypeFunc: minOutputType<A, B> });\n    this.statements = ({ inputs, outputs }) => {\n      return [`${outputs.min} = min(${inputs.a}, ${inputs.b});`];\n    };\n  }\n}\n\nexport class Max<A extends ValueTypes, B extends ValueTypes> extends BinaryOp<\n  A,\n  B,\n  MaxOutput<A, B>,\n  \"max\"\n> {\n  constructor({ a, b }: { a: DynoVal<A>; b: DynoVal<B> }) {\n    super({ a, b, outKey: \"max\", outTypeFunc: maxOutputType<A, B> });\n    this.statements = ({ inputs, outputs }) => {\n      return [`${outputs.max} = max(${inputs.a}, ${inputs.b});`];\n    };\n  }\n}\n\nexport class Clamp<\n  A extends ValueTypes,\n  MinMax extends ValueTypes,\n> extends TrinaryOp<A, MinMax, MinMax, ClampOutput<A, MinMax>, \"clamp\"> {\n  constructor({\n    a,\n    min,\n    max,\n  }: { a: DynoVal<A>; min: DynoVal<MinMax>; max: DynoVal<MinMax> }) {\n    super({\n      a,\n      b: min,\n      c: max,\n      outKey: \"clamp\",\n      outTypeFunc: clampOutputType<A, MinMax>,\n    });\n    this.statements = ({ inputs, outputs }) => {\n      const { a, b: min, c: max } = inputs;\n      return [`${outputs.clamp} = clamp(${a}, ${min}, ${max});`];\n    };\n  }\n}\n\nexport class Mix<\n  A extends FloatTypes,\n  T extends FloatTypes | BoolTypes,\n> extends TrinaryOp<A, A, T, MixOutput<A, T>, \"mix\"> {\n  constructor({ a, b, t }: { a: DynoVal<A>; b: DynoVal<A>; t: DynoVal<T> }) {\n    super({ a, b, c: t, outKey: \"mix\", outTypeFunc: mixOutputType<A, T> });\n    this.statements = ({ inputs, outputs }) => {\n      const { a, b, c: t } = inputs;\n      return [`${outputs.mix} = mix(${a}, ${b}, ${t});`];\n    };\n  }\n}\n\nexport class Step<\n  Edge extends FloatTypes,\n  X extends FloatTypes,\n> extends BinaryOp<Edge, X, StepOutput<Edge, X>, \"step\"> {\n  constructor({ edge, x }: { edge: DynoVal<Edge>; x: DynoVal<X> }) {\n    super({\n      a: edge,\n      b: x,\n      outKey: \"step\",\n      outTypeFunc: stepOutputType<Edge, X>,\n    });\n    this.statements = ({ inputs, outputs }) => {\n      const { a: edge, b: x } = inputs;\n      return [`${outputs.step} = step(${edge}, ${x});`];\n    };\n  }\n}\n\nexport class Smoothstep<\n  X extends FloatTypes,\n  Edge extends X | \"float\",\n> extends TrinaryOp<\n  Edge,\n  Edge,\n  X,\n  SmoothstepOutput<Edge, Edge, X>,\n  \"smoothstep\"\n> {\n  constructor({\n    edge0,\n    edge1,\n    x,\n  }: { edge0: DynoVal<Edge>; edge1: DynoVal<Edge>; x: DynoVal<X> }) {\n    super({\n      a: edge0,\n      b: edge1,\n      c: x,\n      outKey: \"smoothstep\",\n      outTypeFunc: smoothstepOutputType<Edge, Edge, X>,\n    });\n    this.statements = ({ inputs, outputs }) => {\n      const { a: edge0, b: edge1, c: x } = inputs;\n      return [`${outputs.smoothstep} = smoothstep(${edge0}, ${edge1}, ${x});`];\n    };\n  }\n}\n\nexport class IsNan<A extends FloatTypes> extends UnaryOp<\n  A,\n  IsNanOutput<A>,\n  \"isNan\"\n> {\n  constructor({ a }: { a: DynoVal<A> }) {\n    super({ a, outKey: \"isNan\", outTypeFunc: isNanOutputType<A> });\n    this.statements = ({ inputs, outputs }) => {\n      return [`${outputs.isNan} = isNan(${inputs.a});`];\n    };\n  }\n}\n\nexport class IsInf<A extends FloatTypes> extends UnaryOp<\n  A,\n  IsInfOutput<A>,\n  \"isInf\"\n> {\n  constructor({ a }: { a: DynoVal<A> }) {\n    super({ a, outKey: \"isInf\", outTypeFunc: isInfOutputType<A> });\n    this.statements = ({ inputs, outputs }) => {\n      return [`${outputs.isInf} = isInf(${inputs.a});`];\n    };\n  }\n}\n","import { BinaryOp, TrinaryOp, UnaryOp } from \"./base\";\nimport {\n  type AllIntTypes,\n  type BoolTypes,\n  type IntTypes,\n  type ScalarTypes,\n  type SimpleTypes,\n  type UintTypes,\n  type ValueTypes,\n  isBoolType,\n  isIntType,\n  isScalarType,\n  isUintType,\n  isVector2Type,\n  isVector3Type,\n} from \"./types\";\nimport { type DynoVal, valType } from \"./value\";\n\nexport const and = <T extends \"bool\" | AllIntTypes>(\n  a: DynoVal<T>,\n  b: DynoVal<T>,\n): DynoVal<T> => new And({ a, b });\nexport const or = <T extends \"bool\" | AllIntTypes>(\n  a: DynoVal<T>,\n  b: DynoVal<T>,\n): DynoVal<T> => new Or({ a, b });\nexport const xor = <T extends \"bool\" | AllIntTypes>(\n  a: DynoVal<T>,\n  b: DynoVal<T>,\n): DynoVal<T> => new Xor({ a, b });\nexport const not = <T extends BoolTypes | AllIntTypes>(\n  a: DynoVal<T>,\n): DynoVal<T> => new Not({ a });\n\nexport const lessThan = <T extends ValueTypes>(\n  a: DynoVal<T>,\n  b: DynoVal<T>,\n): DynoVal<CompareOutput<T>> => new LessThan({ a, b });\nexport const lessThanEqual = <T extends ValueTypes>(\n  a: DynoVal<T>,\n  b: DynoVal<T>,\n): DynoVal<CompareOutput<T>> => new LessThanEqual({ a, b });\nexport const greaterThan = <T extends ValueTypes>(\n  a: DynoVal<T>,\n  b: DynoVal<T>,\n): DynoVal<CompareOutput<T>> => new GreaterThan({ a, b });\nexport const greaterThanEqual = <T extends ValueTypes>(\n  a: DynoVal<T>,\n  b: DynoVal<T>,\n): DynoVal<CompareOutput<T>> => new GreaterThanEqual({ a, b });\nexport const equal = <T extends ValueTypes | BoolTypes>(\n  a: DynoVal<T>,\n  b: DynoVal<T>,\n): DynoVal<EqualOutput<T>> => new Equal({ a, b });\nexport const notEqual = <T extends ValueTypes | BoolTypes>(\n  a: DynoVal<T>,\n  b: DynoVal<T>,\n): DynoVal<NotEqualOutput<T>> => new NotEqual({ a, b });\n\nexport const any = <T extends \"bvec2\" | \"bvec3\" | \"bvec4\">(\n  a: DynoVal<T>,\n): DynoVal<\"bool\"> => new Any({ a });\nexport const all = <T extends \"bvec2\" | \"bvec3\" | \"bvec4\">(\n  a: DynoVal<T>,\n): DynoVal<\"bool\"> => new All({ a });\nexport const select = <T extends SimpleTypes>(\n  cond: DynoVal<\"bool\">,\n  t: DynoVal<T>,\n  f: DynoVal<T>,\n): DynoVal<T> => new Select({ cond, t, f });\n\nexport const compXor = <T extends BoolTypes | AllIntTypes>(\n  a: DynoVal<T>,\n): DynoVal<CompXorOutput<T>> => new CompXor({ a });\n\nexport class And<T extends \"bool\" | AllIntTypes> extends BinaryOp<\n  T,\n  T,\n  T,\n  \"and\"\n> {\n  constructor({ a, b }: { a: DynoVal<T>; b: DynoVal<T> }) {\n    super({ a, b, outTypeFunc: (aType: T, bType: T) => aType, outKey: \"and\" });\n    this.statements = ({ inputs, outputs }) => {\n      if (this.outTypes.and === \"bool\") {\n        return [`${outputs.and} = ${inputs.a} && ${inputs.b};`];\n      }\n      return [`${outputs.and} = ${inputs.a} & ${inputs.b};`];\n    };\n  }\n}\n\nexport class Or<T extends \"bool\" | AllIntTypes> extends BinaryOp<\n  T,\n  T,\n  T,\n  \"or\"\n> {\n  constructor({ a, b }: { a: DynoVal<T>; b: DynoVal<T> }) {\n    super({ a, b, outTypeFunc: (aType: T, bType: T) => aType, outKey: \"or\" });\n    this.statements = ({ inputs, outputs }) => {\n      if (this.outTypes.or === \"bool\") {\n        return [`${outputs.or} = ${inputs.a} || ${inputs.b};`];\n      }\n      return [`${outputs.or} = ${inputs.a} | ${inputs.b};`];\n    };\n  }\n}\n\nexport class Xor<T extends \"bool\" | AllIntTypes> extends BinaryOp<\n  T,\n  T,\n  T,\n  \"xor\"\n> {\n  constructor({ a, b }: { a: DynoVal<T>; b: DynoVal<T> }) {\n    super({ a, b, outTypeFunc: (aType: T, bType: T) => aType, outKey: \"xor\" });\n    this.statements = ({ inputs, outputs }) => {\n      if (this.outTypes.xor === \"bool\") {\n        return [`${outputs.xor} = ${inputs.a} ^^ ${inputs.b};`];\n      }\n      return [`${outputs.xor} = ${inputs.a} ^ ${inputs.b};`];\n    };\n  }\n}\n\nexport class Not<T extends BoolTypes | AllIntTypes> extends UnaryOp<\n  T,\n  T,\n  \"not\"\n> {\n  constructor({ a }: { a: DynoVal<T> }) {\n    super({ a, outTypeFunc: (aType: T) => aType, outKey: \"not\" });\n    this.statements = ({ inputs, outputs }) => {\n      if (this.outTypes.not === \"bool\") {\n        return [`${outputs.not} = !${inputs.a};`];\n      }\n      return [`${outputs.not} = not(${inputs.a});`];\n    };\n  }\n}\n\nexport class LessThan<T extends ValueTypes> extends BinaryOp<\n  T,\n  T,\n  CompareOutput<T>,\n  \"lessThan\"\n> {\n  constructor({ a, b }: { a: DynoVal<T>; b: DynoVal<T> }) {\n    super({\n      a,\n      b,\n      outTypeFunc: (aType: T, bType: T) => compareOutputType(aType, \"lessThan\"),\n      outKey: \"lessThan\",\n    });\n    this.statements = ({ inputs, outputs }) => {\n      if (this.outTypes.lessThan === \"bool\") {\n        return [`${outputs.lessThan} = ${inputs.a} < ${inputs.b};`];\n      }\n      return [`${outputs.lessThan} = lessThan(${inputs.a}, ${inputs.b});`];\n    };\n  }\n}\n\nexport class LessThanEqual<T extends ValueTypes> extends BinaryOp<\n  T,\n  T,\n  CompareOutput<T>,\n  \"lessThanEqual\"\n> {\n  constructor({ a, b }: { a: DynoVal<T>; b: DynoVal<T> }) {\n    super({\n      a,\n      b,\n      outTypeFunc: (aType: T, bType: T) =>\n        compareOutputType(aType, \"lessThanEqual\"),\n      outKey: \"lessThanEqual\",\n    });\n    this.statements = ({ inputs, outputs }) => {\n      if (this.outTypes.lessThanEqual === \"bool\") {\n        return [`${outputs.lessThanEqual} = ${inputs.a} <= ${inputs.b};`];\n      }\n      return [\n        `${outputs.lessThanEqual} = lessThanEqual(${inputs.a}, ${inputs.b});`,\n      ];\n    };\n  }\n}\n\nexport class GreaterThan<T extends ValueTypes> extends BinaryOp<\n  T,\n  T,\n  CompareOutput<T>,\n  \"greaterThan\"\n> {\n  constructor({ a, b }: { a: DynoVal<T>; b: DynoVal<T> }) {\n    super({\n      a,\n      b,\n      outTypeFunc: (aType: T, bType: T) =>\n        compareOutputType(aType, \"greaterThan\"),\n      outKey: \"greaterThan\",\n    });\n    this.statements = ({ inputs, outputs }) => {\n      if (this.outTypes.greaterThan === \"bool\") {\n        return [`${outputs.greaterThan} = ${inputs.a} > ${inputs.b};`];\n      }\n      return [\n        `${outputs.greaterThan} = greaterThan(${inputs.a}, ${inputs.b});`,\n      ];\n    };\n  }\n}\n\nexport class GreaterThanEqual<T extends ValueTypes> extends BinaryOp<\n  T,\n  T,\n  CompareOutput<T>,\n  \"greaterThanEqual\"\n> {\n  constructor({ a, b }: { a: DynoVal<T>; b: DynoVal<T> }) {\n    super({\n      a,\n      b,\n      outTypeFunc: (aType: T, bType: T) =>\n        compareOutputType(aType, \"greaterThanEqual\"),\n      outKey: \"greaterThanEqual\",\n    });\n    this.statements = ({ inputs, outputs }) => {\n      if (this.outTypes.greaterThanEqual === \"bool\") {\n        return [`${outputs.greaterThanEqual} = ${inputs.a} >= ${inputs.b};`];\n      }\n      return [\n        `${outputs.greaterThanEqual} = greaterThanEqual(${inputs.a}, ${inputs.b});`,\n      ];\n    };\n  }\n}\n\nexport class Equal<T extends ValueTypes | BoolTypes> extends BinaryOp<\n  T,\n  T,\n  EqualOutput<T>,\n  \"equal\"\n> {\n  constructor({ a, b }: { a: DynoVal<T>; b: DynoVal<T> }) {\n    super({ a, b, outTypeFunc: equalOutputType<T>, outKey: \"equal\" });\n    this.statements = ({ inputs, outputs }) => {\n      if (this.outTypes.equal === \"bool\") {\n        return [`${outputs.equal} = ${inputs.a} == ${inputs.b};`];\n      }\n      return [`${outputs.equal} = equal(${inputs.a}, ${inputs.b});`];\n    };\n  }\n}\n\nexport class NotEqual<T extends ValueTypes | BoolTypes> extends BinaryOp<\n  T,\n  T,\n  NotEqualOutput<T>,\n  \"notEqual\"\n> {\n  constructor({ a, b }: { a: DynoVal<T>; b: DynoVal<T> }) {\n    super({ a, b, outTypeFunc: notEqualOutputType<T>, outKey: \"notEqual\" });\n    this.statements = ({ inputs, outputs }) => {\n      if (this.outTypes.notEqual === \"bool\") {\n        return [`${outputs.notEqual} = ${inputs.a} != ${inputs.b};`];\n      }\n      return [`${outputs.notEqual} = notEqual(${inputs.a}, ${inputs.b});`];\n    };\n  }\n}\n\nexport class Any<T extends BoolTypes> extends UnaryOp<T, \"bool\", \"any\"> {\n  constructor({ a }: { a: DynoVal<T> }) {\n    super({ a, outTypeFunc: (aType: T) => \"bool\", outKey: \"any\" });\n    this.statements = ({ inputs, outputs }) => {\n      return [`${outputs.any} = any(${inputs.a});`];\n    };\n  }\n}\n\nexport class All<T extends BoolTypes> extends UnaryOp<T, \"bool\", \"all\"> {\n  constructor({ a }: { a: DynoVal<T> }) {\n    super({ a, outTypeFunc: (aType: T) => \"bool\", outKey: \"all\" });\n    this.statements = ({ inputs, outputs }) => {\n      return [`${outputs.all} = all(${inputs.a});`];\n    };\n  }\n}\n\nexport class Select<T extends SimpleTypes> extends TrinaryOp<\n  \"bool\",\n  T,\n  T,\n  T,\n  \"select\"\n> {\n  constructor({\n    cond,\n    t,\n    f,\n  }: { cond: DynoVal<\"bool\">; t: DynoVal<T>; f: DynoVal<T> }) {\n    super({\n      a: cond,\n      b: t,\n      c: f,\n      outKey: \"select\",\n      outTypeFunc: (aType: \"bool\", bType: T, cType: T) => bType,\n    });\n    this.statements = ({ inputs, outputs }) => {\n      const { a: cond, b: t, c: f } = inputs;\n      return [`${outputs.select} = (${cond}) ? (${t}) : (${f});`];\n    };\n  }\n}\n\ntype CompareOutput<T extends ValueTypes> = T extends ScalarTypes\n  ? \"bool\"\n  : T extends \"ivec2\" | \"uvec2\" | \"vec2\"\n    ? \"bvec2\"\n    : T extends \"ivec3\" | \"uvec3\" | \"vec3\"\n      ? \"bvec3\"\n      : T extends \"ivec4\" | \"uvec4\" | \"vec4\"\n        ? \"bvec4\"\n        : never;\n\nfunction compareOutputType<T extends ValueTypes>(\n  type: T,\n  operator: string,\n): CompareOutput<T> {\n  if (isScalarType(type)) {\n    return \"bool\" as CompareOutput<T>;\n  }\n  if (type === \"ivec2\" || type === \"uvec2\" || type === \"vec2\") {\n    return \"bvec2\" as CompareOutput<T>;\n  }\n  if (type === \"ivec3\" || type === \"uvec3\" || type === \"vec3\") {\n    return \"bvec3\" as CompareOutput<T>;\n  }\n  if (type === \"ivec4\" || type === \"uvec4\" || type === \"vec4\") {\n    return \"bvec4\" as CompareOutput<T>;\n  }\n  throw new Error(`Invalid ${operator} type: ${type}`);\n}\n\ntype EqualOutput<A extends ValueTypes | BoolTypes> = A extends ScalarTypes\n  ? \"bool\"\n  : A extends BoolTypes\n    ? A\n    : A extends \"ivec2\" | \"uvec2\" | \"vec2\"\n      ? \"bvec2\"\n      : A extends \"ivec3\" | \"uvec3\" | \"vec3\"\n        ? \"bvec3\"\n        : A extends \"ivec4\" | \"uvec4\" | \"vec4\"\n          ? \"bvec4\"\n          : never;\n\nfunction equalOutputType<A extends ValueTypes | BoolTypes>(\n  type: A,\n  operator = \"equal\",\n): EqualOutput<A> {\n  if (isScalarType(type)) {\n    return \"bool\" as EqualOutput<A>;\n  }\n  if (isBoolType(type)) {\n    return type as EqualOutput<A>;\n  }\n  if (type === \"ivec2\" || type === \"uvec2\" || type === \"vec2\") {\n    return \"bvec2\" as EqualOutput<A>;\n  }\n  if (type === \"ivec3\" || type === \"uvec3\" || type === \"vec3\") {\n    return \"bvec3\" as EqualOutput<A>;\n  }\n  if (type === \"ivec4\" || type === \"uvec4\" || type === \"vec4\") {\n    return \"bvec4\" as EqualOutput<A>;\n  }\n  throw new Error(`Invalid ${operator} type: ${type}`);\n}\n\ntype NotEqualOutput<A extends ValueTypes | BoolTypes> = EqualOutput<A>;\n\nfunction notEqualOutputType<A extends ValueTypes | BoolTypes>(\n  type: A,\n): NotEqualOutput<A> {\n  return equalOutputType(type, \"notEqual\");\n}\n\ntype CompXorOutput<A extends BoolTypes | AllIntTypes> = A extends BoolTypes\n  ? \"bool\"\n  : A extends IntTypes\n    ? \"int\"\n    : A extends UintTypes\n      ? \"uint\"\n      : never;\n\nfunction compXorOutputType<A extends BoolTypes | AllIntTypes>(\n  type: A,\n): CompXorOutput<A> {\n  if (isBoolType(type)) {\n    return \"bool\" as CompXorOutput<A>;\n  }\n  if (isIntType(type)) {\n    return \"int\" as CompXorOutput<A>;\n  }\n  if (isUintType(type)) {\n    return \"uint\" as CompXorOutput<A>;\n  }\n  throw new Error(`Invalid compXor type: ${type}`);\n}\n\nexport class CompXor<T extends BoolTypes | AllIntTypes> extends UnaryOp<\n  T,\n  CompXorOutput<T>,\n  \"compXor\"\n> {\n  constructor({ a }: { a: DynoVal<T> }) {\n    const outType = compXorOutputType(valType(a));\n    super({ a, outTypeFunc: (aType: T) => outType, outKey: \"compXor\" });\n    this.statements = ({ inputs, outputs }) => {\n      if (isScalarType(this.outTypes.compXor)) {\n        return [`${outputs.compXor} = ${inputs.a};`];\n      }\n      const components = isVector2Type(outType)\n        ? [\"x\", \"y\"]\n        : isVector3Type(outType)\n          ? [\"x\", \"y\", \"z\"]\n          : [\"x\", \"y\", \"z\", \"w\"];\n      const operands = components.map((c) => `${inputs.a}.${c}`);\n      const operator = isBoolType(outType) ? \"^^\" : \"^\";\n      return [`${outputs.compXor} = ${operands.join(` ${operator} `)};`];\n    };\n  }\n}\n","import { UnaryOp } from \"./base\";\nimport { type SimpleTypes, typeLiteral } from \"./types\";\nimport type { DynoVal } from \"./value\";\n\nexport const bool = <T extends \"bool\" | \"int\" | \"uint\" | \"float\">(\n  value: DynoVal<T>,\n): DynoVal<\"bool\"> => new Bool({ value });\nexport const int = <T extends \"bool\" | \"int\" | \"uint\" | \"float\">(\n  value: DynoVal<T>,\n): DynoVal<\"int\"> => new Int({ value });\nexport const uint = <T extends \"bool\" | \"int\" | \"uint\" | \"float\">(\n  value: DynoVal<T>,\n): DynoVal<\"uint\"> => new Uint({ value });\nexport const float = <T extends \"bool\" | \"int\" | \"uint\" | \"float\">(\n  value: DynoVal<T>,\n): DynoVal<\"float\"> => new Float({ value });\n\nexport const bvec2 = <T extends \"bool\" | \"bvec2\" | \"ivec2\" | \"uvec2\" | \"vec2\">(\n  value: DynoVal<T>,\n): DynoVal<\"bvec2\"> => new BVec2({ value });\nexport const bvec3 = <T extends \"bool\" | \"bvec3\" | \"ivec3\" | \"uvec3\" | \"vec3\">(\n  value: DynoVal<T>,\n): DynoVal<\"bvec3\"> => new BVec3({ value });\nexport const bvec4 = <T extends \"bool\" | \"bvec4\" | \"ivec4\" | \"uvec4\" | \"vec4\">(\n  value: DynoVal<T>,\n): DynoVal<\"bvec4\"> => new BVec4({ value });\n\nexport const ivec2 = <T extends \"int\" | \"bvec2\" | \"ivec2\" | \"uvec2\" | \"vec2\">(\n  value: DynoVal<T>,\n): DynoVal<\"ivec2\"> => new IVec2({ value });\nexport const ivec3 = <T extends \"int\" | \"bvec3\" | \"ivec3\" | \"uvec3\" | \"vec3\">(\n  value: DynoVal<T>,\n): DynoVal<\"ivec3\"> => new IVec3({ value });\nexport const ivec4 = <T extends \"int\" | \"bvec4\" | \"ivec4\" | \"uvec4\" | \"vec4\">(\n  value: DynoVal<T>,\n): DynoVal<\"ivec4\"> => new IVec4({ value });\n\nexport const uvec2 = <T extends \"uint\" | \"bvec2\" | \"ivec2\" | \"uvec2\" | \"vec2\">(\n  value: DynoVal<T>,\n): DynoVal<\"uvec2\"> => new UVec2({ value });\nexport const uvec3 = <T extends \"uint\" | \"bvec3\" | \"ivec3\" | \"uvec3\" | \"vec3\">(\n  value: DynoVal<T>,\n): DynoVal<\"uvec3\"> => new UVec3({ value });\nexport const uvec4 = <T extends \"uint\" | \"bvec4\" | \"ivec4\" | \"uvec4\" | \"vec4\">(\n  value: DynoVal<T>,\n): DynoVal<\"uvec4\"> => new UVec4({ value });\n\nexport const vec2 = <\n  T extends \"float\" | \"bvec2\" | \"ivec2\" | \"uvec2\" | \"vec2\" | \"vec3\" | \"vec4\",\n>(\n  value: DynoVal<T>,\n): DynoVal<\"vec2\"> => new Vec2({ value });\nexport const vec3 = <\n  T extends \"float\" | \"bvec3\" | \"ivec3\" | \"uvec3\" | \"vec3\" | \"vec4\",\n>(\n  value: DynoVal<T>,\n): DynoVal<\"vec3\"> => new Vec3({ value });\nexport const vec4 = <T extends \"float\" | \"bvec4\" | \"ivec4\" | \"uvec4\" | \"vec4\">(\n  value: DynoVal<T>,\n): DynoVal<\"vec4\"> => new Vec4({ value });\n\nexport const mat2 = <T extends \"float\" | \"mat2\" | \"mat3\" | \"mat4\">(\n  value: DynoVal<T>,\n): DynoVal<\"mat2\"> => new Mat2({ value });\nexport const mat3 = <T extends \"float\" | \"mat2\" | \"mat3\" | \"mat4\">(\n  value: DynoVal<T>,\n): DynoVal<\"mat3\"> => new Mat3({ value });\nexport const mat4 = <T extends \"float\" | \"mat2\" | \"mat3\" | \"mat4\">(\n  value: DynoVal<T>,\n): DynoVal<\"mat4\"> => new Mat4({ value });\n\nexport const floatBitsToInt = (value: DynoVal<\"float\">): DynoVal<\"int\"> =>\n  new FloatBitsToInt({ value });\nexport const floatBitsToUint = (value: DynoVal<\"float\">): DynoVal<\"uint\"> =>\n  new FloatBitsToUint({ value });\nexport const intBitsToFloat = (value: DynoVal<\"int\">): DynoVal<\"float\"> =>\n  new IntBitsToFloat({ value });\nexport const uintBitsToFloat = (value: DynoVal<\"uint\">): DynoVal<\"float\"> =>\n  new UintBitsToFloat({ value });\n\nexport const packSnorm2x16 = (value: DynoVal<\"vec2\">): DynoVal<\"uint\"> =>\n  new PackSnorm2x16({ value });\nexport const unpackSnorm2x16 = (value: DynoVal<\"uint\">): DynoVal<\"vec2\"> =>\n  new UnpackSnorm2x16({ value });\nexport const packUnorm2x16 = (value: DynoVal<\"vec2\">): DynoVal<\"uint\"> =>\n  new PackUnorm2x16({ value });\nexport const unpackUnorm2x16 = (value: DynoVal<\"uint\">): DynoVal<\"vec2\"> =>\n  new UnpackUnorm2x16({ value });\n\nexport const packHalf2x16 = (value: DynoVal<\"vec2\">): DynoVal<\"uint\"> =>\n  new PackHalf2x16({ value });\nexport const unpackHalf2x16 = (value: DynoVal<\"uint\">): DynoVal<\"vec2\"> =>\n  new UnpackHalf2x16({ value });\n\nexport const uintToRgba8 = (value: DynoVal<\"uint\">): DynoVal<\"vec4\"> =>\n  new UintToRgba8({ value });\n\nexport class SimpleCast<\n  Allowed extends SimpleTypes,\n  OutType extends SimpleTypes,\n  OutKey extends string,\n> extends UnaryOp<Allowed, OutType, OutKey> {\n  constructor({\n    value,\n    outType,\n    outKey,\n  }: { value: DynoVal<Allowed>; outType: OutType; outKey: OutKey }) {\n    super({ a: value, outTypeFunc: () => outType, outKey });\n    this.statements = ({ inputs, outputs }) => [\n      `${outputs[outKey]} = ${typeLiteral(outType)}(${inputs.a});`,\n    ];\n  }\n}\n\nexport class Bool extends SimpleCast<\n  \"bool\" | \"int\" | \"uint\" | \"float\",\n  \"bool\",\n  \"bool\"\n> {\n  constructor({\n    value,\n  }: { value: DynoVal<\"bool\" | \"int\" | \"uint\" | \"float\"> }) {\n    super({ value, outType: \"bool\", outKey: \"bool\" });\n  }\n}\n\nexport class Int extends SimpleCast<\n  \"bool\" | \"int\" | \"uint\" | \"float\",\n  \"int\",\n  \"int\"\n> {\n  constructor({\n    value,\n  }: { value: DynoVal<\"bool\" | \"int\" | \"uint\" | \"float\"> }) {\n    super({ value, outType: \"int\", outKey: \"int\" });\n  }\n}\n\nexport class Uint extends SimpleCast<\n  \"bool\" | \"int\" | \"uint\" | \"float\",\n  \"uint\",\n  \"uint\"\n> {\n  constructor({\n    value,\n  }: { value: DynoVal<\"bool\" | \"int\" | \"uint\" | \"float\"> }) {\n    super({ value, outType: \"uint\", outKey: \"uint\" });\n  }\n}\n\nexport class Float extends SimpleCast<\n  \"bool\" | \"int\" | \"uint\" | \"float\",\n  \"float\",\n  \"float\"\n> {\n  constructor({\n    value,\n  }: { value: DynoVal<\"bool\" | \"int\" | \"uint\" | \"float\"> }) {\n    super({ value, outType: \"float\", outKey: \"float\" });\n  }\n}\n\nexport class BVec2 extends SimpleCast<\n  \"bool\" | \"bvec2\" | \"ivec2\" | \"uvec2\" | \"vec2\",\n  \"bvec2\",\n  \"bvec2\"\n> {\n  constructor({\n    value,\n  }: { value: DynoVal<\"bool\" | \"bvec2\" | \"ivec2\" | \"uvec2\" | \"vec2\"> }) {\n    super({ value, outType: \"bvec2\", outKey: \"bvec2\" });\n  }\n}\n\nexport class BVec3 extends SimpleCast<\n  \"bool\" | \"bvec3\" | \"ivec3\" | \"uvec3\" | \"vec3\",\n  \"bvec3\",\n  \"bvec3\"\n> {\n  constructor({\n    value,\n  }: { value: DynoVal<\"bool\" | \"bvec3\" | \"ivec3\" | \"uvec3\" | \"vec3\"> }) {\n    super({ value, outType: \"bvec3\", outKey: \"bvec3\" });\n  }\n}\n\nexport class BVec4 extends SimpleCast<\n  \"bool\" | \"bvec4\" | \"ivec4\" | \"uvec4\" | \"vec4\",\n  \"bvec4\",\n  \"bvec4\"\n> {\n  constructor({\n    value,\n  }: { value: DynoVal<\"bool\" | \"bvec4\" | \"ivec4\" | \"uvec4\" | \"vec4\"> }) {\n    super({ value, outType: \"bvec4\", outKey: \"bvec4\" });\n  }\n}\n\nexport class IVec2 extends SimpleCast<\n  \"int\" | \"bvec2\" | \"ivec2\" | \"uvec2\" | \"vec2\",\n  \"ivec2\",\n  \"ivec2\"\n> {\n  constructor({\n    value,\n  }: { value: DynoVal<\"int\" | \"bvec2\" | \"ivec2\" | \"uvec2\" | \"vec2\"> }) {\n    super({ value, outType: \"ivec2\", outKey: \"ivec2\" });\n  }\n}\n\nexport class IVec3 extends SimpleCast<\n  \"int\" | \"bvec3\" | \"ivec3\" | \"uvec3\" | \"vec3\",\n  \"ivec3\",\n  \"ivec3\"\n> {\n  constructor({\n    value,\n  }: { value: DynoVal<\"int\" | \"bvec3\" | \"ivec3\" | \"uvec3\" | \"vec3\"> }) {\n    super({ value, outType: \"ivec3\", outKey: \"ivec3\" });\n  }\n}\n\nexport class IVec4 extends SimpleCast<\n  \"int\" | \"bvec4\" | \"ivec4\" | \"uvec4\" | \"vec4\",\n  \"ivec4\",\n  \"ivec4\"\n> {\n  constructor({\n    value,\n  }: { value: DynoVal<\"int\" | \"bvec4\" | \"ivec4\" | \"uvec4\" | \"vec4\"> }) {\n    super({ value, outType: \"ivec4\", outKey: \"ivec4\" });\n  }\n}\n\nexport class UVec2 extends SimpleCast<\n  \"uint\" | \"ivec2\" | \"bvec2\" | \"uvec2\" | \"vec2\",\n  \"uvec2\",\n  \"uvec2\"\n> {\n  constructor({\n    value,\n  }: { value: DynoVal<\"uint\" | \"ivec2\" | \"bvec2\" | \"uvec2\" | \"vec2\"> }) {\n    super({ value, outType: \"uvec2\", outKey: \"uvec2\" });\n  }\n}\n\nexport class UVec3 extends SimpleCast<\n  \"uint\" | \"ivec3\" | \"bvec3\" | \"uvec3\" | \"vec3\",\n  \"uvec3\",\n  \"uvec3\"\n> {\n  constructor({\n    value,\n  }: { value: DynoVal<\"uint\" | \"ivec3\" | \"bvec3\" | \"uvec3\" | \"vec3\"> }) {\n    super({ value, outType: \"uvec3\", outKey: \"uvec3\" });\n  }\n}\n\nexport class UVec4 extends SimpleCast<\n  \"uint\" | \"ivec4\" | \"bvec4\" | \"uvec4\" | \"vec4\",\n  \"uvec4\",\n  \"uvec4\"\n> {\n  constructor({\n    value,\n  }: { value: DynoVal<\"uint\" | \"ivec4\" | \"bvec4\" | \"uvec4\" | \"vec4\"> }) {\n    super({ value, outType: \"uvec4\", outKey: \"uvec4\" });\n  }\n}\n\nexport class Vec2 extends SimpleCast<\n  \"float\" | \"bvec2\" | \"ivec2\" | \"uvec2\" | \"vec2\" | \"vec3\" | \"vec4\",\n  \"vec2\",\n  \"vec2\"\n> {\n  constructor({\n    value,\n  }: {\n    value: DynoVal<\n      \"float\" | \"bvec2\" | \"ivec2\" | \"uvec2\" | \"vec2\" | \"vec3\" | \"vec4\"\n    >;\n  }) {\n    super({ value, outType: \"vec2\", outKey: \"vec2\" });\n  }\n}\n\nexport class Vec3 extends SimpleCast<\n  \"float\" | \"bvec3\" | \"ivec3\" | \"uvec3\" | \"vec3\" | \"vec2\" | \"vec4\",\n  \"vec3\",\n  \"vec3\"\n> {\n  constructor({\n    value,\n  }: {\n    value: DynoVal<\n      \"float\" | \"bvec3\" | \"ivec3\" | \"uvec3\" | \"vec3\" | \"vec2\" | \"vec4\"\n    >;\n  }) {\n    super({ value, outType: \"vec3\", outKey: \"vec3\" });\n  }\n}\n\nexport class Vec4 extends SimpleCast<\n  \"float\" | \"bvec4\" | \"ivec4\" | \"uvec4\" | \"vec4\",\n  \"vec4\",\n  \"vec4\"\n> {\n  constructor({\n    value,\n  }: { value: DynoVal<\"float\" | \"bvec4\" | \"ivec4\" | \"uvec4\" | \"vec4\"> }) {\n    super({ value, outType: \"vec4\", outKey: \"vec4\" });\n  }\n}\n\nexport class Mat2 extends SimpleCast<\n  \"float\" | \"mat2\" | \"mat3\" | \"mat4\",\n  \"mat2\",\n  \"mat2\"\n> {\n  constructor({\n    value,\n  }: { value: DynoVal<\"float\" | \"mat2\" | \"mat3\" | \"mat4\"> }) {\n    super({ value, outType: \"mat2\", outKey: \"mat2\" });\n  }\n}\n\nexport class Mat3 extends SimpleCast<\n  \"float\" | \"mat2\" | \"mat3\" | \"mat4\",\n  \"mat3\",\n  \"mat3\"\n> {\n  constructor({\n    value,\n  }: { value: DynoVal<\"float\" | \"mat2\" | \"mat3\" | \"mat4\"> }) {\n    super({ value, outType: \"mat3\", outKey: \"mat3\" });\n  }\n}\n\nexport class Mat4 extends SimpleCast<\n  \"float\" | \"mat2\" | \"mat3\" | \"mat4\",\n  \"mat4\",\n  \"mat4\"\n> {\n  constructor({\n    value,\n  }: { value: DynoVal<\"float\" | \"mat2\" | \"mat3\" | \"mat4\"> }) {\n    super({ value, outType: \"mat4\", outKey: \"mat4\" });\n  }\n}\n\nexport class FloatBitsToInt extends UnaryOp<\"float\", \"int\", \"int\"> {\n  constructor({ value }: { value: DynoVal<\"float\"> }) {\n    super({ a: value, outKey: \"int\", outTypeFunc: () => \"int\" });\n    this.statements = ({ inputs, outputs }) => {\n      return [`${outputs.int} = floatBitsToInt(${inputs.a});`];\n    };\n  }\n}\n\nexport class FloatBitsToUint extends UnaryOp<\"float\", \"uint\", \"uint\"> {\n  constructor({ value }: { value: DynoVal<\"float\"> }) {\n    super({ a: value, outKey: \"uint\", outTypeFunc: () => \"uint\" });\n    this.statements = ({ inputs, outputs }) => {\n      return [`${outputs.uint} = floatBitsToUint(${inputs.a});`];\n    };\n  }\n}\n\nexport class IntBitsToFloat extends UnaryOp<\"int\", \"float\", \"float\"> {\n  constructor({ value }: { value: DynoVal<\"int\"> }) {\n    super({ a: value, outKey: \"float\", outTypeFunc: () => \"float\" });\n    this.statements = ({ inputs, outputs }) => {\n      return [`${outputs.float} = intBitsToFloat(${inputs.a});`];\n    };\n  }\n}\n\nexport class UintBitsToFloat extends UnaryOp<\"uint\", \"float\", \"float\"> {\n  constructor({ value }: { value: DynoVal<\"uint\"> }) {\n    super({ a: value, outKey: \"float\", outTypeFunc: () => \"float\" });\n    this.statements = ({ inputs, outputs }) => {\n      return [`${outputs.float} = uintBitsToFloat(${inputs.a});`];\n    };\n  }\n}\n\nexport class PackSnorm2x16 extends UnaryOp<\"vec2\", \"uint\", \"uint\"> {\n  constructor({ value }: { value: DynoVal<\"vec2\"> }) {\n    super({ a: value, outKey: \"uint\", outTypeFunc: () => \"uint\" });\n    this.statements = ({ inputs, outputs }) => {\n      return [`${outputs.uint} = packSnorm2x16(${inputs.a});`];\n    };\n  }\n}\n\nexport class UnpackSnorm2x16 extends UnaryOp<\"uint\", \"vec2\", \"vec2\"> {\n  constructor({ value }: { value: DynoVal<\"uint\"> }) {\n    super({ a: value, outKey: \"vec2\", outTypeFunc: () => \"vec2\" });\n    this.statements = ({ inputs, outputs }) => {\n      return [`${outputs.vec2} = unpackSnorm2x16(${inputs.a});`];\n    };\n  }\n}\n\nexport class PackUnorm2x16 extends UnaryOp<\"vec2\", \"uint\", \"uint\"> {\n  constructor({ value }: { value: DynoVal<\"vec2\"> }) {\n    super({ a: value, outKey: \"uint\", outTypeFunc: () => \"uint\" });\n    this.statements = ({ inputs, outputs }) => {\n      return [`${outputs.uint} = packUnorm2x16(${inputs.a});`];\n    };\n  }\n}\n\nexport class UnpackUnorm2x16 extends UnaryOp<\"uint\", \"vec2\", \"vec2\"> {\n  constructor({ value }: { value: DynoVal<\"uint\"> }) {\n    super({ a: value, outKey: \"vec2\", outTypeFunc: () => \"vec2\" });\n    this.statements = ({ inputs, outputs }) => {\n      return [`${outputs.vec2} = unpackUnorm2x16(${inputs.a});`];\n    };\n  }\n}\n\nexport class PackHalf2x16 extends UnaryOp<\"vec2\", \"uint\", \"uint\"> {\n  constructor({ value }: { value: DynoVal<\"vec2\"> }) {\n    super({ a: value, outKey: \"uint\", outTypeFunc: () => \"uint\" });\n    this.statements = ({ inputs, outputs }) => {\n      return [`${outputs.uint} = packHalf2x16(${inputs.a});`];\n    };\n  }\n}\n\nexport class UnpackHalf2x16 extends UnaryOp<\"uint\", \"vec2\", \"vec2\"> {\n  constructor({ value }: { value: DynoVal<\"uint\"> }) {\n    super({ a: value, outKey: \"vec2\", outTypeFunc: () => \"vec2\" });\n    this.statements = ({ inputs, outputs }) => {\n      return [`${outputs.vec2} = unpackHalf2x16(${inputs.a});`];\n    };\n  }\n}\n\nexport class UintToRgba8 extends UnaryOp<\"uint\", \"vec4\", \"rgba8\"> {\n  constructor({ value }: { value: DynoVal<\"uint\"> }) {\n    super({ a: value, outKey: \"rgba8\", outTypeFunc: () => \"vec4\" });\n    this.statements = ({ inputs, outputs }) => {\n      return [\n        `uvec4 uRgba = uvec4(${inputs.a} & 0xffu, (${inputs.a} >> 8u) & 0xffu, (${inputs.a} >> 16u) & 0xffu, (${inputs.a} >> 24u) & 0xffu);`,\n        `${outputs.rgba8} = vec4(uRgba) / 255.0;`,\n      ];\n    };\n  }\n}\n","import { BinaryOp, Dyno, TrinaryOp, UnaryOp } from \"./base\";\nimport {\n  type FloatTypes,\n  type IntTypes,\n  type MatFloatTypes,\n  type SquareMatTypes,\n  type UintTypes,\n  type VectorElementType,\n  type VectorTypes,\n  isFloatType,\n  isIntType,\n  isUintType,\n  vectorDim,\n  vectorElementType,\n} from \"./types\";\nimport {\n  DynoOutput,\n  type DynoVal,\n  type DynoValue,\n  type HasDynoOut,\n  literalZero,\n  valType,\n} from \"./value\";\n\nexport const length = <A extends \"vec2\" | \"vec3\" | \"vec4\">(\n  a: DynoVal<A>,\n): DynoVal<\"float\"> => new Length({ a });\nexport const distance = <A extends \"vec2\" | \"vec3\" | \"vec4\">(\n  a: DynoVal<A>,\n  b: DynoVal<A>,\n): DynoVal<\"float\"> => new Distance({ a, b });\nexport const dot = <A extends \"vec2\" | \"vec3\" | \"vec4\">(\n  a: DynoVal<A>,\n  b: DynoVal<A>,\n): DynoVal<\"float\"> => new Dot({ a, b });\nexport const cross = (\n  a: DynoVal<\"vec3\">,\n  b: DynoVal<\"vec3\">,\n): DynoVal<\"vec3\"> => new Cross({ a, b });\nexport const normalize = <A extends \"vec2\" | \"vec3\" | \"vec4\">(\n  a: DynoVal<A>,\n): DynoVal<A> => new Normalize({ a });\nexport const faceforward = <A extends \"vec2\" | \"vec3\" | \"vec4\">(\n  a: DynoVal<A>,\n  b: DynoVal<A>,\n  c: DynoVal<A>,\n): DynoVal<A> => new FaceForward({ a, b, c });\nexport const reflectVec = <A extends \"vec2\" | \"vec3\" | \"vec4\">(\n  incident: DynoVal<A>,\n  normal: DynoVal<A>,\n): DynoVal<A> => new ReflectVec({ incident, normal });\nexport const refractVec = <A extends \"vec2\" | \"vec3\" | \"vec4\">(\n  incident: DynoVal<A>,\n  normal: DynoVal<A>,\n  eta: DynoVal<\"float\">,\n): DynoVal<A> => new RefractVec({ incident, normal, eta });\nexport const split = <V extends VectorTypes>(vector: DynoVal<V>): Split<V> =>\n  new Split({ vector });\nexport const combine = <V extends VectorTypes, T extends VectorElementType<V>>({\n  vector,\n  vectorType,\n  x,\n  y,\n  z,\n  w,\n  r,\n  g,\n  b,\n  a,\n}: {\n  vector?: DynoVal<V>;\n  vectorType?: V;\n  x?: DynoVal<T>;\n  y?: DynoVal<T>;\n  z?: DynoVal<T>;\n  w?: DynoVal<T>;\n  r?: DynoVal<T>;\n  g?: DynoVal<T>;\n  b?: DynoVal<T>;\n  a?: DynoVal<T>;\n}): DynoVal<V> => new Combine({ vector, vectorType, x, y, z, w, r, g, b, a });\nexport const projectH = <A extends \"vec3\" | \"vec4\">(\n  a: DynoVal<A>,\n): DynoVal<ProjectHOutput<A>> => new ProjectH({ a });\nexport const extendVec = <A extends \"float\" | \"vec2\" | \"vec3\">(\n  a: DynoVal<A>,\n  b: DynoVal<\"float\">,\n): DynoVal<ExtendVecOutput<A>> => new ExtendVec({ a, b });\nexport const swizzle = <A extends VectorTypes, S extends SwizzleSelect>(\n  a: DynoVal<A>,\n  select: S,\n): DynoVal<SwizzleOutput<A, SwizzleSelectLen<S>>> =>\n  new Swizzle({ vector: a, select });\nexport const compMult = <A extends MatFloatTypes>(\n  a: DynoVal<A>,\n  b: DynoVal<A>,\n): DynoVal<A> => new CompMult({ a, b });\nexport const outer = <\n  A extends \"vec2\" | \"vec3\" | \"vec4\",\n  B extends \"vec2\" | \"vec3\" | \"vec4\",\n>(\n  a: DynoVal<A>,\n  b: DynoVal<B>,\n): DynoVal<OuterOutput<A, B>> => new Outer({ a, b });\nexport const transpose = <A extends MatFloatTypes>(\n  a: DynoVal<A>,\n): DynoVal<TransposeOutput<A>> => new Transpose({ a });\nexport const determinant = <A extends SquareMatTypes>(\n  a: DynoVal<A>,\n): DynoVal<\"float\"> => new Determinant({ a });\nexport const inverse = <A extends SquareMatTypes>(a: DynoVal<A>): DynoVal<A> =>\n  new Inverse({ a });\n\nexport class Length<A extends \"vec2\" | \"vec3\" | \"vec4\"> extends UnaryOp<\n  A,\n  \"float\",\n  \"length\"\n> {\n  constructor({ a }: { a: DynoVal<A> }) {\n    super({ a, outTypeFunc: (aType) => \"float\", outKey: \"length\" });\n    this.statements = ({ inputs, outputs }) => [\n      `${outputs.length} = length(${inputs.a});`,\n    ];\n  }\n}\n\nexport class Distance<A extends \"vec2\" | \"vec3\" | \"vec4\"> extends BinaryOp<\n  A,\n  A,\n  \"float\",\n  \"distance\"\n> {\n  constructor({ a, b }: { a: DynoVal<A>; b: DynoVal<A> }) {\n    super({ a, b, outKey: \"distance\", outTypeFunc: (aType, bType) => \"float\" });\n    this.statements = ({ inputs, outputs }) => [\n      `${outputs.distance} = distance(${inputs.a}, ${inputs.b});`,\n    ];\n  }\n}\n\nexport class Dot<A extends \"vec2\" | \"vec3\" | \"vec4\"> extends BinaryOp<\n  A,\n  A,\n  \"float\",\n  \"dot\"\n> {\n  constructor({ a, b }: { a: DynoVal<A>; b: DynoVal<A> }) {\n    super({ a, b, outKey: \"dot\", outTypeFunc: (aType, bType) => \"float\" });\n    this.statements = ({ inputs, outputs }) => [\n      `${outputs.dot} = dot(${inputs.a}, ${inputs.b});`,\n    ];\n  }\n}\n\nexport class Cross extends BinaryOp<\"vec3\", \"vec3\", \"vec3\", \"cross\"> {\n  constructor({ a, b }: { a: DynoVal<\"vec3\">; b: DynoVal<\"vec3\"> }) {\n    super({ a, b, outKey: \"cross\", outTypeFunc: (aType, bType) => \"vec3\" });\n    this.statements = ({ inputs, outputs }) => [\n      `${outputs.cross} = cross(${inputs.a}, ${inputs.b});`,\n    ];\n  }\n}\n\nexport class Normalize<A extends \"vec2\" | \"vec3\" | \"vec4\"> extends UnaryOp<\n  A,\n  A,\n  \"normalize\"\n> {\n  constructor({ a }: { a: DynoVal<A> }) {\n    super({ a, outTypeFunc: (aType) => aType, outKey: \"normalize\" });\n    this.statements = ({ inputs, outputs }) => [\n      `${outputs.normalize} = normalize(${inputs.a});`,\n    ];\n  }\n}\n\ntype ProjectHOutput<A extends \"vec3\" | \"vec4\"> = A extends \"vec3\"\n  ? \"vec2\"\n  : A extends \"vec4\"\n    ? \"vec3\"\n    : never;\n\nfunction projectHOutputType<A extends \"vec3\" | \"vec4\">(\n  type: A,\n): ProjectHOutput<A> {\n  if (type === \"vec3\") {\n    return \"vec2\" as ProjectHOutput<A>;\n  }\n  if (type === \"vec4\") {\n    return \"vec3\" as ProjectHOutput<A>;\n  }\n  throw new Error(\"Invalid type\");\n}\n\nexport class ProjectH<A extends \"vec3\" | \"vec4\"> extends UnaryOp<\n  A,\n  ProjectHOutput<A>,\n  \"projected\"\n> {\n  constructor({ a }: { a: DynoVal<A> }) {\n    super({\n      a,\n      outTypeFunc: (aType) => projectHOutputType(aType),\n      outKey: \"projected\",\n    });\n    this.statements = ({ inputs, outputs }) => {\n      if (this.inTypes.a === \"vec3\") {\n        return [`${outputs.projected} = ${inputs.a}.xy / ${inputs.a}.z;`];\n      }\n      if (this.inTypes.a === \"vec4\") {\n        return [`${outputs.projected} = ${inputs.a}.xyz / ${inputs.a}.w;`];\n      }\n      throw new Error(\"Invalid type\");\n    };\n  }\n}\n\ntype ExtendVecOutput<A extends \"float\" | \"vec2\" | \"vec3\"> = A extends \"float\"\n  ? \"vec2\"\n  : A extends \"vec2\"\n    ? \"vec3\"\n    : A extends \"vec3\"\n      ? \"vec4\"\n      : never;\n\nfunction extendVecOutputType<A extends \"float\" | \"vec2\" | \"vec3\">(\n  type: A,\n): ExtendVecOutput<A> {\n  if (type === \"float\") return \"vec2\" as ExtendVecOutput<A>;\n  if (type === \"vec2\") return \"vec3\" as ExtendVecOutput<A>;\n  if (type === \"vec3\") return \"vec4\" as ExtendVecOutput<A>;\n  throw new Error(\"Invalid type\");\n}\n\nexport class ExtendVec<A extends \"float\" | \"vec2\" | \"vec3\"> extends BinaryOp<\n  A,\n  \"float\",\n  ExtendVecOutput<A>,\n  \"extend\"\n> {\n  constructor({ a, b }: { a: DynoVal<A>; b: DynoVal<\"float\"> }) {\n    const type = valType(a);\n    const outType = extendVecOutputType(type);\n    super({ a, b, outKey: \"extend\", outTypeFunc: () => outType });\n    this.statements = ({ inputs, outputs }) => [\n      `${outputs.extend} = ${outType}(${inputs.a}, ${inputs.b});`,\n    ];\n  }\n}\n\nexport class FaceForward<A extends \"vec2\" | \"vec3\" | \"vec4\"> extends TrinaryOp<\n  A,\n  A,\n  A,\n  A,\n  \"forward\"\n> {\n  constructor({ a, b, c }: { a: DynoVal<A>; b: DynoVal<A>; c: DynoVal<A> }) {\n    super({\n      a,\n      b,\n      c,\n      outKey: \"forward\",\n      outTypeFunc: (aType, bType, cType) => aType,\n    });\n    this.statements = ({ inputs, outputs }) => [\n      `${outputs.forward} = faceforward(${inputs.a}, ${inputs.b}, ${inputs.c});`,\n    ];\n  }\n}\n\nexport class ReflectVec<A extends \"vec2\" | \"vec3\" | \"vec4\"> extends BinaryOp<\n  A,\n  A,\n  A,\n  \"reflection\"\n> {\n  constructor({\n    incident,\n    normal,\n  }: { incident: DynoVal<A>; normal: DynoVal<A> }) {\n    super({\n      a: incident,\n      b: normal,\n      outKey: \"reflection\",\n      outTypeFunc: (aType, bType) => aType,\n    });\n    this.statements = ({ inputs, outputs }) => [\n      `${outputs.reflection} = reflect(${inputs.a}, ${inputs.b});`,\n    ];\n  }\n}\n\nexport class RefractVec<A extends \"vec2\" | \"vec3\" | \"vec4\"> extends TrinaryOp<\n  A,\n  A,\n  \"float\",\n  A,\n  \"refraction\"\n> {\n  constructor({\n    incident,\n    normal,\n    eta,\n  }: { incident: DynoVal<A>; normal: DynoVal<A>; eta: DynoVal<\"float\"> }) {\n    super({\n      a: incident,\n      b: normal,\n      c: eta,\n      outKey: \"refraction\",\n      outTypeFunc: (aType, bType, cType) => aType,\n    });\n    this.statements = ({ inputs, outputs }) => [\n      `${outputs.refraction} = refract(${inputs.a}, ${inputs.b}, ${inputs.c});`,\n    ];\n  }\n}\n\nexport class CompMult<A extends MatFloatTypes> extends BinaryOp<\n  A,\n  A,\n  A,\n  \"product\"\n> {\n  constructor({ a, b }: { a: DynoVal<A>; b: DynoVal<A> }) {\n    super({ a, b, outKey: \"product\", outTypeFunc: (aType, bType) => aType });\n    this.statements = ({ inputs, outputs }) => [\n      `${outputs.product} = matrixCompMult(${a}, ${b});`,\n    ];\n  }\n}\n\ntype OuterOutput<\n  A extends \"vec2\" | \"vec3\" | \"vec4\",\n  B extends \"vec2\" | \"vec3\" | \"vec4\",\n> = A extends \"vec2\"\n  ? B extends \"vec2\"\n    ? \"mat2\"\n    : B extends \"vec3\"\n      ? \"mat3x2\"\n      : B extends \"vec4\"\n        ? \"mat4x2\"\n        : never\n  : A extends \"vec3\"\n    ? B extends \"vec2\"\n      ? \"mat2x3\"\n      : B extends \"vec3\"\n        ? \"mat3\"\n        : B extends \"vec4\"\n          ? \"mat4x3\"\n          : never\n    : A extends \"vec4\"\n      ? B extends \"vec2\"\n        ? \"mat2x4\"\n        : B extends \"vec3\"\n          ? \"mat3x4\"\n          : B extends \"vec4\"\n            ? \"mat4\"\n            : never\n      : never;\n\nfunction outerOutputType<\n  A extends \"vec2\" | \"vec3\" | \"vec4\",\n  B extends \"vec2\" | \"vec3\" | \"vec4\",\n>(aType: A, bType: B): OuterOutput<A, B> {\n  if (aType === \"vec2\") {\n    if (bType === \"vec2\") return \"mat2\" as OuterOutput<A, B>;\n    if (bType === \"vec3\") return \"mat3x2\" as OuterOutput<A, B>;\n    if (bType === \"vec4\") return \"mat4x2\" as OuterOutput<A, B>;\n  }\n  if (aType === \"vec3\") {\n    if (bType === \"vec2\") return \"mat2x3\" as OuterOutput<A, B>;\n    if (bType === \"vec3\") return \"mat3\" as OuterOutput<A, B>;\n    if (bType === \"vec4\") return \"mat4x3\" as OuterOutput<A, B>;\n  }\n  if (aType === \"vec4\") {\n    if (bType === \"vec2\") return \"mat2x4\" as OuterOutput<A, B>;\n    if (bType === \"vec3\") return \"mat3x4\" as OuterOutput<A, B>;\n    if (bType === \"vec4\") return \"mat4\" as OuterOutput<A, B>;\n  }\n  throw new Error(`Invalid outer type: ${aType}, ${bType}`);\n}\n\nexport class Outer<\n  A extends \"vec2\" | \"vec3\" | \"vec4\",\n  B extends \"vec2\" | \"vec3\" | \"vec4\",\n> extends BinaryOp<A, B, OuterOutput<A, B>, \"outer\"> {\n  constructor({ a, b }: { a: DynoVal<A>; b: DynoVal<B> }) {\n    super({ a, b, outKey: \"outer\", outTypeFunc: outerOutputType });\n    this.statements = ({ inputs, outputs }) => [\n      `${outputs.outer} = outerProduct(${inputs.a}, ${inputs.b});`,\n    ];\n  }\n}\n\ntype TransposeOutput<A extends MatFloatTypes> = A extends SquareMatTypes\n  ? A\n  : A extends \"mat2x3\"\n    ? \"mat3x2\"\n    : A extends \"mat2x4\"\n      ? \"mat4x2\"\n      : A extends \"mat3x2\"\n        ? \"mat2x3\"\n        : A extends \"mat3x4\"\n          ? \"mat4x3\"\n          : A extends \"mat4x2\"\n            ? \"mat2x4\"\n            : A extends \"mat4x3\"\n              ? \"mat3x4\"\n              : never;\n\nfunction transposeOutputType<A extends MatFloatTypes>(\n  type: A,\n): TransposeOutput<A> {\n  if (type === \"mat2\") return \"mat2\" as TransposeOutput<A>;\n  if (type === \"mat3\") return \"mat3\" as TransposeOutput<A>;\n  if (type === \"mat4\") return \"mat4\" as TransposeOutput<A>;\n  if (type === \"mat2x2\") return \"mat2x2\" as TransposeOutput<A>;\n  if (type === \"mat2x3\") return \"mat3x2\" as TransposeOutput<A>;\n  if (type === \"mat2x4\") return \"mat4x2\" as TransposeOutput<A>;\n  if (type === \"mat3x2\") return \"mat2x3\" as TransposeOutput<A>;\n  if (type === \"mat3x3\") return \"mat3x3\" as TransposeOutput<A>;\n  if (type === \"mat3x4\") return \"mat4x3\" as TransposeOutput<A>;\n  if (type === \"mat4x2\") return \"mat2x4\" as TransposeOutput<A>;\n  if (type === \"mat4x3\") return \"mat3x4\" as TransposeOutput<A>;\n  if (type === \"mat4x4\") return \"mat4x4\" as TransposeOutput<A>;\n  throw new Error(`Invalid transpose type: ${type}`);\n}\n\nexport class Transpose<A extends MatFloatTypes> extends UnaryOp<\n  A,\n  TransposeOutput<A>,\n  \"transpose\"\n> {\n  constructor({ a }: { a: DynoVal<A> }) {\n    super({ a, outKey: \"transpose\", outTypeFunc: transposeOutputType });\n    this.statements = ({ inputs, outputs }) => [\n      `${outputs.transpose} = transpose(${inputs.a});`,\n    ];\n  }\n}\n\nexport class Determinant<A extends SquareMatTypes> extends UnaryOp<\n  A,\n  \"float\",\n  \"det\"\n> {\n  constructor({ a }: { a: DynoVal<A> }) {\n    super({ a, outKey: \"det\", outTypeFunc: (aType) => \"float\" });\n    this.statements = ({ inputs, outputs }) => [\n      `${outputs.det} = determinant(${inputs.a});`,\n    ];\n  }\n}\n\nexport class Inverse<A extends SquareMatTypes> extends UnaryOp<\n  A,\n  A,\n  \"inverse\"\n> {\n  constructor({ a }: { a: DynoVal<A> }) {\n    super({ a, outKey: \"inverse\", outTypeFunc: (aType) => aType });\n    this.statements = ({ inputs, outputs }) => [\n      `${outputs.inverse} = inverse(${a});`,\n    ];\n  }\n}\n\ntype SplitOutTypes<A extends VectorTypes> = A extends \"vec2\"\n  ? { x: \"float\"; y: \"float\"; r: \"float\"; g: \"float\" }\n  : A extends \"vec3\"\n    ? { x: \"float\"; y: \"float\"; z: \"float\"; r: \"float\"; g: \"float\"; b: \"float\" }\n    : A extends \"vec4\"\n      ? {\n          x: \"float\";\n          y: \"float\";\n          z: \"float\";\n          w: \"float\";\n          r: \"float\";\n          g: \"float\";\n          b: \"float\";\n          a: \"float\";\n        }\n      : A extends \"ivec2\"\n        ? { x: \"int\"; y: \"int\"; r: \"int\"; g: \"int\" }\n        : A extends \"ivec3\"\n          ? { x: \"int\"; y: \"int\"; z: \"int\"; r: \"int\"; g: \"int\"; b: \"int\" }\n          : A extends \"ivec4\"\n            ? {\n                x: \"int\";\n                y: \"int\";\n                z: \"int\";\n                w: \"int\";\n                r: \"int\";\n                g: \"int\";\n                b: \"int\";\n                a: \"int\";\n              }\n            : A extends \"uvec2\"\n              ? { x: \"uint\"; y: \"uint\"; r: \"uint\"; g: \"uint\" }\n              : A extends \"uvec3\"\n                ? {\n                    x: \"uint\";\n                    y: \"uint\";\n                    z: \"uint\";\n                    r: \"uint\";\n                    g: \"uint\";\n                    b: \"uint\";\n                  }\n                : A extends \"uvec4\"\n                  ? {\n                      x: \"uint\";\n                      y: \"uint\";\n                      z: \"uint\";\n                      w: \"uint\";\n                      r: \"uint\";\n                      g: \"uint\";\n                      b: \"uint\";\n                      a: \"uint\";\n                    }\n                  : never;\n\nfunction splitOutTypes<A extends VectorTypes>(type: A): SplitOutTypes<A> {\n  const result = (value: unknown) => value as SplitOutTypes<A>;\n  switch (type) {\n    case \"vec2\":\n      return result({ x: \"float\", y: \"float\", r: \"float\", g: \"float\" });\n    case \"vec3\":\n      return result({\n        x: \"float\",\n        y: \"float\",\n        z: \"float\",\n        r: \"float\",\n        g: \"float\",\n        b: \"float\",\n      });\n    case \"vec4\":\n      return result({\n        x: \"float\",\n        y: \"float\",\n        z: \"float\",\n        w: \"float\",\n        r: \"float\",\n        g: \"float\",\n        b: \"float\",\n        a: \"float\",\n      });\n    case \"ivec2\":\n      return result({ x: \"int\", y: \"int\", r: \"int\", g: \"int\" });\n    case \"ivec3\":\n      return result({\n        x: \"int\",\n        y: \"int\",\n        z: \"int\",\n        r: \"int\",\n        g: \"int\",\n        b: \"int\",\n      });\n    case \"ivec4\":\n      return result({\n        x: \"int\",\n        y: \"int\",\n        z: \"int\",\n        w: \"int\",\n        r: \"int\",\n        g: \"int\",\n        b: \"int\",\n        a: \"int\",\n      });\n    case \"uvec2\":\n      return result({ x: \"uint\", y: \"uint\", r: \"uint\", g: \"uint\" });\n    case \"uvec3\":\n      return result({\n        x: \"uint\",\n        y: \"uint\",\n        z: \"uint\",\n        r: \"uint\",\n        g: \"uint\",\n        b: \"uint\",\n      });\n    case \"uvec4\":\n      return result({\n        x: \"uint\",\n        y: \"uint\",\n        z: \"uint\",\n        w: \"uint\",\n        r: \"uint\",\n        g: \"uint\",\n        b: \"uint\",\n        a: \"uint\",\n      });\n    default:\n      throw new Error(`Invalid vector type: ${type}`);\n  }\n}\n\nexport class Split<V extends VectorTypes> extends Dyno<\n  { vector: V },\n  SplitOutTypes<V>\n> {\n  constructor({ vector }: { vector: DynoVal<V> }) {\n    const type = valType(vector);\n    const inTypes = { vector: type };\n    const outTypes = splitOutTypes(inTypes.vector);\n    super({ inTypes, outTypes, inputs: { vector } });\n    this.statements = ({ inputs, outputs }) => {\n      const { x, y, z, w, r, g, b, a } = outputs as unknown as Record<\n        string,\n        string\n      >;\n      const { vector } = inputs;\n      return [\n        x ? `${x} = ${vector}.x;` : null,\n        y ? `${y} = ${vector}.y;` : null,\n        z ? `${z} = ${vector}.z;` : null,\n        w ? `${w} = ${vector}.w;` : null,\n        r ? `${r} = ${vector}.r;` : null,\n        g ? `${g} = ${vector}.g;` : null,\n        b ? `${b} = ${vector}.b;` : null,\n        a ? `${a} = ${vector}.a;` : null,\n      ].filter(Boolean) as string[];\n    };\n  }\n}\n\nexport class Combine<V extends VectorTypes, T extends VectorElementType<V>>\n  extends Dyno<SplitOutTypes<V> & { vector: V }, { vector: V }>\n  implements HasDynoOut<V>\n{\n  constructor({\n    vector,\n    vectorType,\n    x,\n    y,\n    z,\n    w,\n    r,\n    g,\n    b,\n    a,\n  }: {\n    vector?: DynoVal<V>;\n    vectorType?: V;\n    x?: DynoVal<T>;\n    y?: DynoVal<T>;\n    z?: DynoVal<T>;\n    w?: DynoVal<T>;\n    r?: DynoVal<T>;\n    g?: DynoVal<T>;\n    b?: DynoVal<T>;\n    a?: DynoVal<T>;\n  }) {\n    if (!vector && !vectorType) {\n      throw new Error(\"Either vector or vectorType must be provided\");\n    }\n    const vType = vectorType ?? valType(vector as DynoVal<V>);\n    const elType = vectorElementType(vType);\n    const dim = vectorDim(vType);\n\n    const inTypes = {\n      vector: vType,\n      x: elType,\n      y: elType,\n      r: elType,\n      g: elType,\n    } as unknown as SplitOutTypes<V> & { vector: V };\n    const inputs = { vector, x, y, r, g };\n    if (dim >= 3) {\n      Object.assign(inTypes, { z: elType, b: elType });\n      Object.assign(inputs, { z, b });\n    }\n    if (dim >= 4) {\n      Object.assign(inTypes, { w: elType, a: elType });\n      Object.assign(inputs, { w, a });\n    }\n    // @ts-ignore\n    super({ inTypes, outTypes: { vector: vType }, inputs });\n    this.statements = ({ inputs, outputs }) => {\n      const { vector } = outputs;\n      const {\n        vector: input,\n        x,\n        y,\n        z,\n        w,\n        r,\n        g,\n        b,\n        a,\n      } = inputs as Record<string, string>;\n      const statements = [\n        `${vector}.x = ${x ?? r ?? (input ? `${input}.x` : literalZero(elType))};`,\n        `${vector}.y = ${y ?? g ?? (input ? `${input}.y` : literalZero(elType))};`,\n      ];\n      if (dim >= 3)\n        statements.push(\n          `${vector}.z = ${z ?? b ?? (input ? `${input}.z` : literalZero(elType))};`,\n        );\n      if (dim >= 4)\n        statements.push(\n          `${vector}.w = ${w ?? a ?? (input ? `${input}.w` : literalZero(elType))};`,\n        );\n      return statements;\n    };\n  }\n\n  dynoOut(): DynoValue<V> {\n    return new DynoOutput<V, SplitOutTypes<V> & { vector: V }, { vector: V }>(\n      this,\n      \"vector\",\n    );\n  }\n}\n\ntype SwizzleOutput<\n  A extends VectorTypes,\n  Len extends number,\n> = A extends FloatTypes\n  ? Len extends 1\n    ? \"float\"\n    : Len extends 2\n      ? \"vec2\"\n      : Len extends 3\n        ? \"vec3\"\n        : Len extends 4\n          ? \"vec4\"\n          : never\n  : A extends IntTypes\n    ? Len extends 1\n      ? \"int\"\n      : Len extends 2\n        ? \"ivec2\"\n        : Len extends 3\n          ? \"ivec3\"\n          : Len extends 4\n            ? \"ivec4\"\n            : never\n    : A extends UintTypes\n      ? Len extends 1\n        ? \"uint\"\n        : Len extends 2\n          ? \"uvec2\"\n          : Len extends 3\n            ? \"uvec3\"\n            : Len extends 4\n              ? \"uvec4\"\n              : never\n      : never;\n\ntype SwizzleSelectLen<S extends SwizzleSelect> = S extends Swizzle1Select\n  ? 1\n  : S extends Swizzle2Select\n    ? 2\n    : S extends Swizzle3Select\n      ? 3\n      : S extends Swizzle4Select\n        ? 4\n        : never;\n\nfunction swizzleOutputType<A extends VectorTypes, S extends SwizzleSelect>(\n  type: A,\n  swizzle: S,\n): SwizzleOutput<A, SwizzleSelectLen<S>> {\n  let result = null;\n  if (isFloatType(type)) {\n    result =\n      swizzle.length === 1\n        ? \"float\"\n        : swizzle.length === 2\n          ? \"vec2\"\n          : swizzle.length === 3\n            ? \"vec3\"\n            : swizzle.length === 4\n              ? \"vec4\"\n              : null;\n  } else if (isIntType(type)) {\n    result =\n      swizzle.length === 1\n        ? \"int\"\n        : swizzle.length === 2\n          ? \"ivec2\"\n          : swizzle.length === 3\n            ? \"ivec3\"\n            : swizzle.length === 4\n              ? \"ivec4\"\n              : null;\n  } else if (isUintType(type)) {\n    result =\n      swizzle.length === 1\n        ? \"uint\"\n        : swizzle.length === 2\n          ? \"uvec2\"\n          : swizzle.length === 3\n            ? \"uvec3\"\n            : swizzle.length === 4\n              ? \"uvec4\"\n              : null;\n  }\n  if (result == null) {\n    throw new Error(`Invalid swizzle: ${swizzle}`);\n  }\n  return result as SwizzleOutput<A, SwizzleSelectLen<S>>;\n}\n\ntype Swizzle1Select = `${\"x\" | \"y\" | \"z\" | \"w\"}|${\"r\" | \"g\" | \"b\" | \"a\"}`;\ntype Swizzle2Select =\n  | `${\"x\" | \"y\" | \"z\" | \"w\"}${\"x\" | \"y\" | \"z\" | \"w\"}`\n  | `${\"r\" | \"g\" | \"b\" | \"a\"}${\"r\" | \"g\" | \"b\" | \"a\"}`;\ntype Swizzle3Select =\n  | `${\"x\" | \"y\" | \"z\" | \"w\"}${\"x\" | \"y\" | \"z\" | \"w\"}${\"x\" | \"y\" | \"z\" | \"w\"}`\n  | `${\"r\" | \"g\" | \"b\" | \"a\"}${\"r\" | \"g\" | \"b\" | \"a\"}${\"r\" | \"g\" | \"b\" | \"a\"}`;\ntype Swizzle4Select =\n  | `${\"x\" | \"y\" | \"z\" | \"w\"}${\"x\" | \"y\" | \"z\" | \"w\"}${\"x\" | \"y\" | \"z\" | \"w\"}${\"x\" | \"y\" | \"z\" | \"w\"}`\n  | `${\"r\" | \"g\" | \"b\" | \"a\"}${\"r\" | \"g\" | \"b\" | \"a\"}${\"r\" | \"g\" | \"b\" | \"a\"}${\"r\" | \"g\" | \"b\" | \"a\"}`;\ntype SwizzleSelect =\n  | Swizzle1Select\n  | Swizzle2Select\n  | Swizzle3Select\n  | Swizzle4Select;\n\nexport class Swizzle<\n  A extends VectorTypes,\n  S extends SwizzleSelect,\n> extends UnaryOp<A, SwizzleOutput<A, SwizzleSelectLen<S>>, \"swizzle\"> {\n  constructor({ vector, select }: { vector: DynoVal<A>; select: S }) {\n    super({\n      a: vector,\n      outKey: \"swizzle\",\n      outTypeFunc: (aType) => swizzleOutputType<A, S>(aType, select),\n    });\n    this.statements = ({ inputs, outputs }) => [\n      `${outputs.swizzle} = ${inputs.a}.${select};`,\n    ];\n  }\n}\n","import { Dyno, DynoBlock, unindent } from \"./base\";\nimport { float, vec2, vec3, vec4 } from \"./convert\";\nimport { mul } from \"./math\";\nimport { type ValueTypes, isIntType, isUintType, sameSizeUvec } from \"./types\";\nimport {\n  DynoOutput,\n  type DynoVal,\n  type DynoValue,\n  type HasDynoOut,\n  dynoConst,\n  valType,\n} from \"./value\";\nimport { combine } from \"./vecmat\";\n\nexport const remapIndex = (\n  index: DynoVal<\"int\">,\n  from: DynoVal<\"int\">,\n  to: DynoVal<\"int\">,\n): DynoVal<\"int\"> => {\n  return new DynoRemapIndex({ index, from, to });\n};\nexport const pcgMix = <T extends ValueTypes>(\n  value: DynoVal<T>,\n): DynoVal<\"uint\"> => {\n  return new PcgMix({ value });\n};\nexport const pcgNext = (state: DynoVal<\"uint\">): DynoVal<\"uint\"> => {\n  return new PcgNext({ state });\n};\nexport const pcgHash = (state: DynoVal<\"uint\">): DynoVal<\"uint\"> => {\n  return new PcgHash({ state });\n};\nexport const hash = <T extends ValueTypes>(\n  value: DynoVal<T>,\n): DynoVal<\"uint\"> => {\n  return new Hash({ value });\n};\nexport const hash2 = <T extends ValueTypes>(\n  value: DynoVal<T>,\n): DynoVal<\"uvec2\"> => {\n  return new Hash2({ value });\n};\nexport const hash3 = <T extends ValueTypes>(\n  value: DynoVal<T>,\n): DynoVal<\"uvec3\"> => {\n  return new Hash3({ value });\n};\nexport const hash4 = <T extends ValueTypes>(\n  value: DynoVal<T>,\n): DynoVal<\"uvec4\"> => {\n  return new Hash4({ value });\n};\nexport const hashFloat = <T extends ValueTypes>(\n  value: DynoVal<T>,\n): DynoVal<\"float\"> => {\n  return new HashFloat({ value });\n};\nexport const hashVec2 = <T extends ValueTypes>(\n  value: DynoVal<T>,\n): DynoVal<\"vec2\"> => {\n  return new HashVec2({ value });\n};\nexport const hashVec3 = <T extends ValueTypes>(\n  value: DynoVal<T>,\n): DynoVal<\"vec3\"> => {\n  return new HashVec3({ value });\n};\nexport const hashVec4 = <T extends ValueTypes>(\n  value: DynoVal<T>,\n): DynoVal<\"vec4\"> => {\n  return new HashVec4({ value });\n};\nexport const normalizedDepth = (\n  z: DynoVal<\"float\">,\n  zNear: DynoVal<\"float\">,\n  zFar: DynoVal<\"float\">,\n): DynoVal<\"float\"> => {\n  return new NormalizedDepth({ z, zNear, zFar }).outputs.depth;\n};\n\nexport class DynoRemapIndex\n  extends Dyno<{ from: \"int\"; to: \"int\"; index: \"int\" }, { index: \"int\" }>\n  implements HasDynoOut<\"int\">\n{\n  constructor({\n    from,\n    to,\n    index,\n  }: { from: DynoVal<\"int\">; to: DynoVal<\"int\">; index: DynoVal<\"int\"> }) {\n    super({\n      inTypes: { from: \"int\", to: \"int\", index: \"int\" },\n      outTypes: { index: \"int\" },\n      inputs: { from, to, index },\n      statements: ({ inputs, outputs }) => {\n        return [\n          `${outputs.index} = ${inputs.index} - ${inputs.from} + ${inputs.to};`,\n        ];\n      },\n    });\n  }\n\n  dynoOut(): DynoValue<\"int\"> {\n    return new DynoOutput(this, \"index\");\n  }\n}\n\nexport class PcgNext<T extends \"uint\" | \"int\" | \"float\">\n  extends Dyno<{ state: T }, { state: \"uint\" }>\n  implements HasDynoOut<\"uint\">\n{\n  constructor({ state }: { state: DynoVal<T> }) {\n    const type = valType(state);\n    super({\n      inTypes: { state: type },\n      outTypes: { state: \"uint\" },\n      inputs: { state },\n      globals: () => [\n        unindent(`\n          uint pcg_next(uint state) {\n            return state * 747796405u + 2891336453u;\n          }\n        `),\n      ],\n      statements: ({ inputs, outputs }) => {\n        const toUint =\n          type === \"uint\"\n            ? `${inputs.state}`\n            : type === \"int\"\n              ? `uint(${inputs.state})`\n              : `floatBitsToUint(${inputs.state})`;\n        return [`${outputs.state} = pcg_next(${toUint});`];\n      },\n    });\n  }\n  dynoOut(): DynoValue<\"uint\"> {\n    return new DynoOutput(this, \"state\");\n  }\n}\n\nexport class PcgHash\n  extends Dyno<{ state: \"uint\" }, { hash: \"uint\" }>\n  implements HasDynoOut<\"uint\">\n{\n  constructor({ state }: { state: DynoVal<\"uint\"> }) {\n    super({\n      inTypes: { state: \"uint\" },\n      outTypes: { hash: \"uint\" },\n      inputs: { state },\n      globals: () => [\n        unindent(`\n          uint pcg_hash(uint state) {\n            uint hash = ((state >> ((state >> 28u) + 4u)) ^ state) * 277803737u;\n            return (hash >> 22u) ^ hash;\n          }\n        `),\n      ],\n      statements: ({ inputs, outputs }) => [\n        `${outputs.hash} = pcg_hash(${inputs.state});`,\n      ],\n    });\n  }\n  dynoOut(): DynoValue<\"uint\"> {\n    return new DynoOutput(this, \"hash\");\n  }\n}\n\nexport class PcgMix<T extends ValueTypes>\n  extends Dyno<{ value: T }, { state: \"uint\" }>\n  implements HasDynoOut<\"uint\">\n{\n  constructor({ value }: { value: DynoVal<T> }) {\n    const type = valType(value);\n    const tempType = sameSizeUvec(type);\n    super({\n      inTypes: { value: type },\n      outTypes: { state: \"uint\" },\n      inputs: { value },\n      globals: () => [\n        unindent(`\n          uint pcg_mix(uint value) {\n            return value;\n          }\n          uint pcg_mix(uvec2 value) {\n            return value.x + 0x9e3779b9u * value.y;\n          }\n          uint pcg_mix(uvec3 value) {\n            return value.x + 0x9e3779b9u * value.y + 0x85ebca6bu * value.z;\n          }\n          uint pcg_mix(uvec4 value) {\n            return value.x + 0x9e3779b9u * value.y + 0x85ebca6bu * value.z + 0xc2b2ae35u * value.w;\n          }\n        `),\n      ],\n      statements: ({ inputs, outputs }) => {\n        const toUvec = isUintType(type)\n          ? `${inputs.value}`\n          : isIntType(type)\n            ? `${tempType}(${inputs.value})`\n            : `floatBitsToUint(${inputs.value})`;\n        return [\n          `${tempType} bits = ${toUvec};`,\n          `${outputs.state} = pcg_mix(bits);`,\n        ];\n      },\n    });\n  }\n  dynoOut(): DynoValue<\"uint\"> {\n    return new DynoOutput(this, \"state\");\n  }\n}\n\nexport class Hash<T extends ValueTypes>\n  extends DynoBlock<{ value: T }, { hash: \"uint\" }>\n  implements HasDynoOut<\"uint\">\n{\n  constructor({ value }: { value: DynoVal<T> }) {\n    super({\n      inTypes: { value: valType(value) },\n      outTypes: { hash: \"uint\" },\n      inputs: { value },\n      construct: ({ value }) => {\n        if (!value) {\n          throw new Error(\"value is required\");\n        }\n        let state = new PcgMix({ value: value }).outputs.state;\n        state = new PcgNext({ state }).outputs.state;\n        return new PcgHash({ state }).outputs;\n      },\n    });\n  }\n  dynoOut(): DynoValue<\"uint\"> {\n    return new DynoOutput(this, \"hash\");\n  }\n}\n\nexport class Hash2<T extends ValueTypes>\n  extends DynoBlock<{ value: T }, { hash: \"uvec2\" }>\n  implements HasDynoOut<\"uvec2\">\n{\n  constructor({ value }: { value: DynoVal<T> }) {\n    super({\n      inTypes: { value: valType(value) },\n      outTypes: { hash: \"uvec2\" },\n      inputs: { value },\n      construct: ({ value }) => {\n        if (!value) {\n          throw new Error(\"value is required\");\n        }\n        let state = new PcgMix({ value: value }).outputs.state;\n        state = new PcgNext({ state }).outputs.state;\n        const x = new PcgHash({ state }).outputs.hash;\n        state = new PcgNext({ state }).outputs.state;\n        const y = new PcgHash({ state }).outputs.hash;\n        return { hash: combine({ vectorType: \"uvec2\", x, y }) };\n      },\n    });\n  }\n  dynoOut(): DynoValue<\"uvec2\"> {\n    return new DynoOutput(this, \"hash\");\n  }\n}\n\nexport class Hash3<T extends ValueTypes>\n  extends DynoBlock<{ value: T }, { hash: \"uvec3\" }>\n  implements HasDynoOut<\"uvec3\">\n{\n  constructor({ value }: { value: DynoVal<T> }) {\n    super({\n      inTypes: { value: valType(value) },\n      outTypes: { hash: \"uvec3\" },\n      inputs: { value },\n      construct: ({ value }) => {\n        if (!value) {\n          throw new Error(\"value is required\");\n        }\n        let state = new PcgMix({ value: value }).outputs.state;\n        state = new PcgNext({ state }).outputs.state;\n        const x = new PcgHash({ state }).outputs.hash;\n        state = new PcgNext({ state }).outputs.state;\n        const y = new PcgHash({ state }).outputs.hash;\n        state = new PcgNext({ state }).outputs.state;\n        const z = new PcgHash({ state }).outputs.hash;\n        return { hash: combine({ vectorType: \"uvec3\", x, y, z }) };\n      },\n    });\n  }\n  dynoOut(): DynoValue<\"uvec3\"> {\n    return new DynoOutput(this, \"hash\");\n  }\n}\n\nexport class Hash4<T extends ValueTypes>\n  extends DynoBlock<{ value: T }, { hash: \"uvec4\" }>\n  implements HasDynoOut<\"uvec4\">\n{\n  constructor({ value }: { value: DynoVal<T> }) {\n    super({\n      inTypes: { value: valType(value) },\n      outTypes: { hash: \"uvec4\" },\n      inputs: { value },\n      construct: ({ value }) => {\n        if (!value) {\n          throw new Error(\"value is required\");\n        }\n        let state = new PcgMix({ value: value }).outputs.state;\n        state = new PcgNext({ state }).outputs.state;\n        const x = new PcgHash({ state }).outputs.hash;\n        state = new PcgNext({ state }).outputs.state;\n        const y = new PcgHash({ state }).outputs.hash;\n        state = new PcgNext({ state }).outputs.state;\n        const z = new PcgHash({ state }).outputs.hash;\n        state = new PcgNext({ state }).outputs.state;\n        const w = new PcgHash({ state }).outputs.hash;\n        return { hash: combine({ vectorType: \"uvec4\", x, y, z, w }) };\n      },\n    });\n  }\n  dynoOut(): DynoValue<\"uvec4\"> {\n    return new DynoOutput(this, \"hash\");\n  }\n}\n\nexport class HashFloat<T extends ValueTypes>\n  extends DynoBlock<{ value: T }, { hash: \"float\" }>\n  implements HasDynoOut<\"float\">\n{\n  constructor({ value }: { value: DynoVal<T> }) {\n    super({\n      inTypes: { value: valType(value) },\n      outTypes: { hash: \"float\" },\n      inputs: { value },\n      construct: ({ value }) => {\n        if (!value) {\n          throw new Error(\"value is required\");\n        }\n        const word = hash(value);\n        return { hash: mul(float(word), dynoConst(\"float\", 1 / 2 ** 32)) };\n      },\n    });\n  }\n  dynoOut(): DynoValue<\"float\"> {\n    return new DynoOutput(this, \"hash\");\n  }\n}\n\nexport class HashVec2<T extends ValueTypes>\n  extends DynoBlock<{ value: T }, { hash: \"vec2\" }>\n  implements HasDynoOut<\"vec2\">\n{\n  constructor({ value }: { value: DynoVal<T> }) {\n    super({\n      inTypes: { value: valType(value) },\n      outTypes: { hash: \"vec2\" },\n      inputs: { value },\n      construct: ({ value }) => {\n        if (!value) {\n          throw new Error(\"value is required\");\n        }\n        const words = hash2(value);\n        return { hash: mul(vec2(words), dynoConst(\"float\", 1 / 2 ** 32)) };\n      },\n    });\n  }\n  dynoOut(): DynoValue<\"vec2\"> {\n    return new DynoOutput(this, \"hash\");\n  }\n}\n\nexport class HashVec3<T extends ValueTypes>\n  extends DynoBlock<{ value: T }, { hash: \"vec3\" }>\n  implements HasDynoOut<\"vec3\">\n{\n  constructor({ value }: { value: DynoVal<T> }) {\n    super({\n      inTypes: { value: valType(value) },\n      outTypes: { hash: \"vec3\" },\n      inputs: { value },\n      construct: ({ value }) => {\n        if (!value) {\n          throw new Error(\"value is required\");\n        }\n        const words = hash3(value);\n        return { hash: mul(vec3(words), dynoConst(\"float\", 1 / 2 ** 32)) };\n      },\n    });\n  }\n  dynoOut(): DynoValue<\"vec3\"> {\n    return new DynoOutput(this, \"hash\");\n  }\n}\n\nexport class HashVec4<T extends ValueTypes>\n  extends DynoBlock<{ value: T }, { hash: \"vec4\" }>\n  implements HasDynoOut<\"vec4\">\n{\n  constructor({ value }: { value: DynoVal<T> }) {\n    super({\n      inTypes: { value: valType(value) },\n      outTypes: { hash: \"vec4\" },\n      inputs: { value },\n      construct: ({ value }) => {\n        if (!value) {\n          throw new Error(\"value is required\");\n        }\n        const words = hash4(value);\n        return { hash: mul(vec4(words), dynoConst(\"float\", 1 / 2 ** 32)) };\n      },\n    });\n  }\n  dynoOut(): DynoValue<\"vec4\"> {\n    return new DynoOutput(this, \"hash\");\n  }\n}\n\nexport class NormalizedDepth\n  extends Dyno<\n    { z: \"float\"; zNear: \"float\"; zFar: \"float\" },\n    { depth: \"float\" }\n  >\n  implements HasDynoOut<\"float\">\n{\n  constructor({\n    z,\n    zNear,\n    zFar,\n  }: { z: DynoVal<\"float\">; zNear: DynoVal<\"float\">; zFar: DynoVal<\"float\"> }) {\n    super({\n      inTypes: { z: \"float\", zNear: \"float\", zFar: \"float\" },\n      outTypes: { depth: \"float\" },\n      inputs: { z, zNear, zFar },\n      statements: ({ inputs, outputs }) => [\n        `float clamped = clamp(${inputs.z}, ${inputs.zNear}, ${inputs.zFar});`,\n        `${outputs.depth} = (log2(clamped + 1.0) - log2(${inputs.zNear} + 1.0)) / (log2(${inputs.zFar} + 1.0) - log2(${inputs.zNear} + 1.0));`,\n      ],\n    });\n  }\n\n  dynoOut(): DynoValue<\"float\"> {\n    return new DynoOutput(this, \"depth\");\n  }\n}\n","import { Dyno } from \"./base\";\nimport type { DynoVal } from \"./value\";\n\nexport const transformPos = (\n  position: DynoVal<\"vec3\">,\n  {\n    scale,\n    scales,\n    rotate,\n    translate,\n  }: {\n    scale?: DynoVal<\"float\">;\n    scales?: DynoVal<\"vec3\">;\n    rotate?: DynoVal<\"vec4\">;\n    translate?: DynoVal<\"vec3\">;\n  },\n): DynoVal<\"vec3\"> => {\n  return new TransformPosition({ position, scale, scales, rotate, translate })\n    .outputs.position;\n};\nexport const transformDir = (\n  dir: DynoVal<\"vec3\">,\n  {\n    scale,\n    scales,\n    rotate,\n  }: {\n    scale?: DynoVal<\"float\">;\n    scales?: DynoVal<\"vec3\">;\n    rotate?: DynoVal<\"vec4\">;\n  },\n): DynoVal<\"vec3\"> => {\n  return new TransformDir({ dir, scale, scales, rotate }).outputs.dir;\n};\nexport const transformQuat = (\n  quaternion: DynoVal<\"vec4\">,\n  { rotate }: { rotate?: DynoVal<\"vec4\"> },\n): DynoVal<\"vec4\"> => {\n  return new TransformQuaternion({ quaternion, rotate }).outputs.quaternion;\n};\n\nexport class TransformPosition extends Dyno<\n  {\n    position: \"vec3\";\n    scale: \"float\";\n    scales: \"vec3\";\n    rotate: \"vec4\";\n    translate: \"vec3\";\n  },\n  { position: \"vec3\" }\n> {\n  constructor({\n    position,\n    scale,\n    scales,\n    rotate,\n    translate,\n  }: {\n    position?: DynoVal<\"vec3\">;\n    scale?: DynoVal<\"float\">;\n    scales?: DynoVal<\"vec3\">;\n    rotate?: DynoVal<\"vec4\">;\n    translate?: DynoVal<\"vec3\">;\n  }) {\n    super({\n      inTypes: {\n        position: \"vec3\",\n        scale: \"float\",\n        scales: \"vec3\",\n        rotate: \"vec4\",\n        translate: \"vec3\",\n      },\n      outTypes: { position: \"vec3\" },\n      inputs: { position, scale, scales, rotate, translate },\n      statements: ({ inputs, outputs }) => {\n        const { position } = outputs;\n        if (!position) {\n          return [];\n        }\n        const { scale, scales, rotate, translate } = inputs;\n        return [\n          `${position} = ${inputs.position ?? \"vec3(0.0, 0.0, 0.0)\"};`,\n          !scale ? null : `${position} *= ${scale};`,\n          !scales ? null : `${position} *= ${scales};`,\n          !rotate ? null : `${position} = quatVec(${rotate}, ${position});`,\n          !translate ? null : `${position} += ${translate};`,\n        ].filter(Boolean) as string[];\n      },\n    });\n  }\n}\n\nexport class TransformDir extends Dyno<\n  { dir: \"vec3\"; scale: \"float\"; scales: \"vec3\"; rotate: \"vec4\" },\n  { dir: \"vec3\" }\n> {\n  constructor({\n    dir,\n    scale,\n    scales,\n    rotate,\n  }: {\n    dir?: DynoVal<\"vec3\">;\n    scale?: DynoVal<\"float\">;\n    scales?: DynoVal<\"vec3\">;\n    rotate?: DynoVal<\"vec4\">;\n  }) {\n    super({\n      inTypes: { dir: \"vec3\", scale: \"float\", scales: \"vec3\", rotate: \"vec4\" },\n      outTypes: { dir: \"vec3\" },\n      inputs: { dir, scale, scales, rotate },\n      statements: ({ inputs, outputs }) => {\n        const { dir } = outputs;\n        if (!dir) {\n          return [];\n        }\n        const { scale, scales, rotate } = inputs;\n        return [\n          `${dir} = ${inputs.dir ?? \"vec3(0.0, 0.0, 0.0)\"};`,\n          !scale ? null : `${dir} *= ${scale};`,\n          !scales ? null : `${dir} *= ${scales};`,\n          !rotate ? null : `${dir} = quatVec(${rotate}, ${dir});`,\n        ].filter(Boolean) as string[];\n      },\n    });\n  }\n}\n\nexport class TransformQuaternion extends Dyno<\n  { quaternion: \"vec4\"; rotate: \"vec4\" },\n  { quaternion: \"vec4\" }\n> {\n  constructor({\n    quaternion,\n    rotate,\n  }: { quaternion?: DynoVal<\"vec4\">; rotate?: DynoVal<\"vec4\"> }) {\n    super({\n      inTypes: { quaternion: \"vec4\", rotate: \"vec4\" },\n      outTypes: { quaternion: \"vec4\" },\n      inputs: { quaternion, rotate },\n      statements: ({ inputs, outputs }) => {\n        const { quaternion } = outputs;\n        if (!quaternion) {\n          return [];\n        }\n        return [\n          `${quaternion} = ${inputs.quaternion ?? \"vec4(0.0, 0.0, 0.0, 1.0)\"};`,\n          !rotate\n            ? null\n            : `${quaternion} = quatQuat(${inputs.rotate}, ${quaternion});`,\n        ].filter(Boolean) as string[];\n      },\n    });\n  }\n}\n","// TODO:\n// if, switch, for, comment,\n// arrayIndex, arrayLength,\n\nexport const dynoIf = () => {\n  throw new Error(\"Not implemented\");\n};\nexport const dynoSwitch = () => {\n  throw new Error(\"Not implemented\");\n};\nexport const dynoFor = () => {\n  throw new Error(\"Not implemented\");\n};\nexport const comment = () => {\n  throw new Error(\"Not implemented\");\n};\nexport const arrayIndex = () => {\n  throw new Error(\"Not implemented\");\n};\nexport const arrayLength = () => {\n  throw new Error(\"Not implemented\");\n};\n","import { Dyno } from \"./base\";\nimport type {\n  AllSamplerTypes,\n  IsamplerTypes,\n  NormalSamplerTypes,\n  Sampler2DArrayTypes,\n  Sampler2DTypes,\n  Sampler3DTypes,\n  SamplerCubeTypes,\n  SamplerShadowTypes,\n  SamplerTypes,\n  UsamplerTypes,\n} from \"./types\";\nimport {\n  DynoOutput,\n  type DynoVal,\n  type DynoValue,\n  type HasDynoOut,\n  valType,\n} from \"./value\";\n\nexport const textureSize = <T extends AllSamplerTypes>(\n  texture: DynoVal<T>,\n  lod?: DynoVal<\"int\">,\n): DynoVal<TextureSizeType<T>> => new TextureSize<T>({ texture, lod });\nexport const texture = <T extends AllSamplerTypes>(\n  texture: DynoVal<T>,\n  coord: DynoVal<TextureCoordType<T>>,\n  bias?: DynoVal<\"float\">,\n): DynoVal<TextureReturnType<T>> => new Texture<T>({ texture, coord, bias });\nexport const texelFetch = <T extends NormalSamplerTypes>(\n  texture: DynoVal<T>,\n  coord: DynoVal<TextureSizeType<T>>,\n  lod?: DynoVal<\"int\">,\n): DynoVal<TextureReturnType<T>> => new TexelFetch<T>({ texture, coord, lod });\n\nexport class TextureSize<T extends AllSamplerTypes>\n  extends Dyno<{ texture: T; lod: \"int\" }, { size: TextureSizeType<T> }>\n  implements HasDynoOut<TextureSizeType<T>>\n{\n  constructor({ texture, lod }: { texture: DynoVal<T>; lod?: DynoVal<\"int\"> }) {\n    const textureType = valType(texture);\n    super({\n      inTypes: { texture: textureType, lod: \"int\" },\n      outTypes: { size: textureSizeType(textureType) },\n      inputs: { texture, lod },\n      statements: ({ inputs, outputs }) => [\n        `${outputs.size} = textureSize(${inputs.texture}, ${inputs.lod ?? \"0\"});`,\n      ],\n    });\n  }\n\n  dynoOut(): DynoValue<TextureSizeType<T>> {\n    return new DynoOutput(this, \"size\");\n  }\n}\n\nexport class Texture<T extends AllSamplerTypes>\n  extends Dyno<\n    { texture: T; coord: TextureCoordType<T>; bias: \"float\" },\n    { sample: TextureReturnType<T> }\n  >\n  implements HasDynoOut<TextureReturnType<T>>\n{\n  constructor({\n    texture,\n    coord,\n    bias,\n  }: {\n    texture: DynoVal<T>;\n    coord: DynoVal<TextureCoordType<T>>;\n    bias?: DynoVal<\"float\">;\n  }) {\n    const textureType = valType(texture);\n    super({\n      inTypes: {\n        texture: textureType,\n        coord: textureCoordType(textureType),\n        bias: \"float\",\n      },\n      outTypes: { sample: textureReturnType(textureType) },\n      inputs: { texture, coord, bias },\n      statements: ({ inputs, outputs }) => [\n        `${outputs.sample} = texture(${inputs.texture}, ${inputs.coord}${inputs.bias ? `, ${inputs.bias}` : \"\"});`,\n      ],\n    });\n  }\n\n  dynoOut(): DynoValue<TextureReturnType<T>> {\n    return new DynoOutput(this, \"sample\");\n  }\n}\n\nexport class TexelFetch<T extends NormalSamplerTypes>\n  extends Dyno<\n    { texture: T; coord: TextureSizeType<T>; lod: \"int\" },\n    { texel: TextureReturnType<T> }\n  >\n  implements HasDynoOut<TextureReturnType<T>>\n{\n  constructor({\n    texture,\n    coord,\n    lod,\n  }: {\n    texture: DynoVal<T>;\n    coord: DynoVal<TextureSizeType<T>>;\n    lod?: DynoVal<\"int\">;\n  }) {\n    const textureType = valType(texture);\n    super({\n      inTypes: {\n        texture: textureType,\n        coord: textureSizeType(textureType),\n        lod: \"int\",\n      },\n      outTypes: { texel: textureReturnType(textureType) },\n      inputs: { texture, coord, lod },\n      statements: ({ inputs, outputs }) => [\n        `${outputs.texel} = texelFetch(${inputs.texture}, ${inputs.coord}, ${inputs.lod ?? \"0\"});`,\n      ],\n    });\n  }\n\n  dynoOut(): DynoValue<TextureReturnType<T>> {\n    return new DynoOutput(this, \"texel\");\n  }\n}\n\ntype TextureSizeType<T extends AllSamplerTypes> = T extends\n  | Sampler2DTypes\n  | SamplerCubeTypes\n  ? \"ivec2\"\n  : T extends Sampler3DTypes | Sampler2DArrayTypes\n    ? \"ivec3\"\n    : never;\n\nfunction textureSizeType<T extends AllSamplerTypes>(\n  textureType: T,\n): TextureSizeType<T> {\n  switch (textureType) {\n    case \"sampler2D\":\n    case \"usampler2D\":\n    case \"isampler2D\":\n    case \"samplerCube\":\n    case \"usamplerCube\":\n    case \"isamplerCube\":\n    case \"sampler2DShadow\":\n    case \"samplerCubeShadow\":\n      return \"ivec2\" as TextureSizeType<T>;\n    case \"sampler3D\":\n    case \"usampler3D\":\n    case \"isampler3D\":\n    case \"sampler2DArray\":\n    case \"usampler2DArray\":\n    case \"isampler2DArray\":\n    case \"sampler2DArrayShadow\":\n      return \"ivec3\" as TextureSizeType<T>;\n    default:\n      throw new Error(`Invalid texture type: ${textureType}`);\n  }\n}\n\ntype TextureCoordType<T extends AllSamplerTypes> = T extends Sampler2DTypes\n  ? \"vec2\"\n  : T extends\n        | Sampler3DTypes\n        | Sampler2DArrayTypes\n        | SamplerCubeTypes\n        | Sampler2DArrayTypes\n    ? \"vec3\"\n    : T extends \"samperCubeShadow\" | \"sampler2DArrayShadow\"\n      ? \"vec4\"\n      : never;\n\nfunction textureCoordType<T extends AllSamplerTypes>(\n  textureType: T,\n): TextureCoordType<T> {\n  switch (textureType) {\n    case \"sampler2D\":\n    case \"usampler2D\":\n    case \"isampler2D\":\n      return \"vec2\" as TextureCoordType<T>;\n    case \"sampler3D\":\n    case \"usampler3D\":\n    case \"isampler3D\":\n    case \"samplerCube\":\n    case \"usamplerCube\":\n    case \"isamplerCube\":\n    case \"sampler2DArray\":\n    case \"usampler2DArray\":\n    case \"isampler2DArray\":\n    case \"sampler2DShadow\":\n      return \"vec3\" as TextureCoordType<T>;\n    case \"samplerCubeShadow\":\n    case \"sampler2DArrayShadow\":\n      return \"vec4\" as TextureCoordType<T>;\n    default:\n      throw new Error(`Invalid texture type: ${textureType}`);\n  }\n}\n\ntype TextureReturnType<T extends AllSamplerTypes> = T extends SamplerTypes\n  ? \"vec4\"\n  : T extends UsamplerTypes\n    ? \"uvec4\"\n    : T extends IsamplerTypes\n      ? \"ivec4\"\n      : T extends SamplerShadowTypes\n        ? \"float\"\n        : never;\n\nfunction textureReturnType<T extends AllSamplerTypes>(\n  textureType: T,\n): TextureReturnType<T> {\n  switch (textureType) {\n    case \"sampler2D\":\n    case \"sampler2DArray\":\n    case \"sampler3D\":\n    case \"samplerCube\":\n    case \"sampler2DShadow\":\n      return \"vec4\" as TextureReturnType<T>;\n    case \"usampler2D\":\n    case \"usampler2DArray\":\n    case \"usampler3D\":\n    case \"usamplerCube\":\n      return \"uvec4\" as TextureReturnType<T>;\n    case \"isampler2D\":\n    case \"isampler2DArray\":\n    case \"isampler3D\":\n    case \"isamplerCube\":\n      return \"ivec4\" as TextureReturnType<T>;\n    case \"samplerCubeShadow\":\n    case \"sampler2DArrayShadow\":\n      return \"float\" as TextureReturnType<T>;\n    default:\n      throw new Error(`Invalid texture type: ${textureType}`);\n  }\n}\n","import { BinaryOp, UnaryOp } from \"./base\";\nimport type { FloatTypes } from \"./types\";\nimport type { DynoVal } from \"./value\";\n\nexport const radians = <A extends FloatTypes>(\n  degrees: DynoVal<A>,\n): DynoVal<A> => new Radians({ degrees });\nexport const degrees = <A extends FloatTypes>(\n  radians: DynoVal<A>,\n): DynoVal<A> => new Degrees({ radians });\n\nexport const sin = <A extends FloatTypes>(radians: DynoVal<A>): DynoVal<A> =>\n  new Sin({ radians });\nexport const cos = <A extends FloatTypes>(radians: DynoVal<A>): DynoVal<A> =>\n  new Cos({ radians });\nexport const tan = <A extends FloatTypes>(radians: DynoVal<A>): DynoVal<A> =>\n  new Tan({ radians });\n\nexport const asin = <A extends FloatTypes>(sin: DynoVal<A>): DynoVal<A> =>\n  new Asin({ sin });\nexport const acos = <A extends FloatTypes>(cos: DynoVal<A>): DynoVal<A> =>\n  new Acos({ cos });\nexport const atan = <A extends FloatTypes>(tan: DynoVal<A>): DynoVal<A> =>\n  new Atan({ tan });\nexport const atan2 = <A extends FloatTypes>(\n  y: DynoVal<A>,\n  x: DynoVal<A>,\n): DynoVal<A> => new Atan2({ y, x });\n\nexport const sinh = <A extends FloatTypes>(x: DynoVal<A>): DynoVal<A> =>\n  new Sinh({ x });\nexport const cosh = <A extends FloatTypes>(x: DynoVal<A>): DynoVal<A> =>\n  new Cosh({ x });\nexport const tanh = <A extends FloatTypes>(x: DynoVal<A>): DynoVal<A> =>\n  new Tanh({ x });\n\nexport const asinh = <A extends FloatTypes>(x: DynoVal<A>): DynoVal<A> =>\n  new Asinh({ x });\nexport const acosh = <A extends FloatTypes>(x: DynoVal<A>): DynoVal<A> =>\n  new Acosh({ x });\nexport const atanh = <A extends FloatTypes>(x: DynoVal<A>): DynoVal<A> =>\n  new Atanh({ x });\n\nexport class Radians<A extends FloatTypes> extends UnaryOp<A, A, \"radians\"> {\n  constructor({ degrees }: { degrees: DynoVal<A> }) {\n    super({ a: degrees, outTypeFunc: (aType) => aType, outKey: \"radians\" });\n    this.statements = ({ inputs, outputs }) => [\n      `${outputs.radians} = radians(${inputs.a});`,\n    ];\n  }\n}\n\nexport class Degrees<A extends FloatTypes> extends UnaryOp<A, A, \"degrees\"> {\n  constructor({ radians }: { radians: DynoVal<A> }) {\n    super({ a: radians, outTypeFunc: (aType) => aType, outKey: \"degrees\" });\n    this.statements = ({ inputs, outputs }) => [\n      `${outputs.degrees} = degrees(${inputs.a});`,\n    ];\n  }\n}\n\nexport class Sin<A extends FloatTypes> extends UnaryOp<A, A, \"sin\"> {\n  constructor({ radians }: { radians: DynoVal<A> }) {\n    super({ a: radians, outTypeFunc: (aType) => aType, outKey: \"sin\" });\n    this.statements = ({ inputs, outputs }) => [\n      `${outputs.sin} = sin(${inputs.a});`,\n    ];\n  }\n}\n\nexport class Cos<A extends FloatTypes> extends UnaryOp<A, A, \"cos\"> {\n  constructor({ radians }: { radians: DynoVal<A> }) {\n    super({ a: radians, outTypeFunc: (aType) => aType, outKey: \"cos\" });\n    this.statements = ({ inputs, outputs }) => [\n      `${outputs.cos} = cos(${inputs.a});`,\n    ];\n  }\n}\n\nexport class Tan<A extends FloatTypes> extends UnaryOp<A, A, \"tan\"> {\n  constructor({ radians }: { radians: DynoVal<A> }) {\n    super({ a: radians, outTypeFunc: (aType) => aType, outKey: \"tan\" });\n    this.statements = ({ inputs, outputs }) => [\n      `${outputs.tan} = tan(${inputs.a});`,\n    ];\n  }\n}\n\nexport class Asin<A extends FloatTypes> extends UnaryOp<A, A, \"asin\"> {\n  constructor({ sin }: { sin: DynoVal<A> }) {\n    super({ a: sin, outTypeFunc: (aType) => aType, outKey: \"asin\" });\n    this.statements = ({ inputs, outputs }) => [\n      `${outputs.asin} = asin(${inputs.a});`,\n    ];\n  }\n}\n\nexport class Acos<A extends FloatTypes> extends UnaryOp<A, A, \"acos\"> {\n  constructor({ cos }: { cos: DynoVal<A> }) {\n    super({ a: cos, outTypeFunc: (aType) => aType, outKey: \"acos\" });\n    this.statements = ({ inputs, outputs }) => [\n      `${outputs.acos} = acos(${inputs.a});`,\n    ];\n  }\n}\n\nexport class Atan<A extends FloatTypes> extends UnaryOp<A, A, \"atan\"> {\n  constructor({ tan }: { tan: DynoVal<A> }) {\n    super({ a: tan, outTypeFunc: (aType) => aType, outKey: \"atan\" });\n    this.statements = ({ inputs, outputs }) => [\n      `${outputs.atan} = atan(${inputs.a});`,\n    ];\n  }\n}\n\nexport class Atan2<A extends FloatTypes> extends BinaryOp<A, A, A, \"atan2\"> {\n  constructor({ y, x }: { y: DynoVal<A>; x: DynoVal<A> }) {\n    super({\n      a: y,\n      b: x,\n      outTypeFunc: (aType, bType) => aType,\n      outKey: \"atan2\",\n    });\n    this.statements = ({ inputs, outputs }) => [\n      `${outputs.atan2} = atan2(${inputs.a}, ${inputs.b});`,\n    ];\n  }\n}\n\nexport class Sinh<A extends FloatTypes> extends UnaryOp<A, A, \"sinh\"> {\n  constructor({ x }: { x: DynoVal<A> }) {\n    super({ a: x, outTypeFunc: (aType) => aType, outKey: \"sinh\" });\n    this.statements = ({ inputs, outputs }) => [\n      `${outputs.sinh} = sinh(${inputs.a});`,\n    ];\n  }\n}\n\nexport class Cosh<A extends FloatTypes> extends UnaryOp<A, A, \"cosh\"> {\n  constructor({ x }: { x: DynoVal<A> }) {\n    super({ a: x, outTypeFunc: (aType) => aType, outKey: \"cosh\" });\n    this.statements = ({ inputs, outputs }) => [\n      `${outputs.cosh} = cosh(${inputs.a});`,\n    ];\n  }\n}\n\nexport class Tanh<A extends FloatTypes> extends UnaryOp<A, A, \"tanh\"> {\n  constructor({ x }: { x: DynoVal<A> }) {\n    super({ a: x, outTypeFunc: (aType) => aType, outKey: \"tanh\" });\n    this.statements = ({ inputs, outputs }) => [\n      `${outputs.tanh} = tanh(${inputs.a});`,\n    ];\n  }\n}\n\nexport class Asinh<A extends FloatTypes> extends UnaryOp<A, A, \"asinh\"> {\n  constructor({ x }: { x: DynoVal<A> }) {\n    super({ a: x, outTypeFunc: (aType) => aType, outKey: \"asinh\" });\n    this.statements = ({ inputs, outputs }) => [\n      `${outputs.asinh} = asinh(${inputs.a});`,\n    ];\n  }\n}\n\nexport class Acosh<A extends FloatTypes> extends UnaryOp<A, A, \"acosh\"> {\n  constructor({ x }: { x: DynoVal<A> }) {\n    super({ a: x, outTypeFunc: (aType) => aType, outKey: \"acosh\" });\n    this.statements = ({ inputs, outputs }) => [\n      `${outputs.acosh} = acosh(${inputs.a});`,\n    ];\n  }\n}\n\nexport class Atanh<A extends FloatTypes> extends UnaryOp<A, A, \"atanh\"> {\n  constructor({ x }: { x: DynoVal<A> }) {\n    super({ a: x, outTypeFunc: (aType) => aType, outKey: \"atanh\" });\n    this.statements = ({ inputs, outputs }) => [\n      `${outputs.atanh} = atanh(${inputs.a});`,\n    ];\n  }\n}\n","precision highp float;\nprecision highp int;\nprecision highp sampler2D;\nprecision highp usampler2D;\nprecision highp isampler2D;\nprecision highp sampler2DArray;\nprecision highp usampler2DArray;\nprecision highp isampler2DArray;\nprecision highp sampler3D;\nprecision highp usampler3D;\nprecision highp isampler3D;\n\n#include <splatDefines>\n\nuniform uint targetLayer;\nuniform int targetBase;\nuniform int targetCount;\n\nout vec4 target;\n\n{{ GLOBALS }}\n\nvoid computeReadback(int index) {\n    {{ STATEMENTS }}\n}\n\nvoid main() {\n    int targetIndex = int(targetLayer << SPLAT_TEX_LAYER_BITS) + int(uint(gl_FragCoord.y) << SPLAT_TEX_WIDTH_BITS) + int(gl_FragCoord.x);\n    int index = targetIndex - targetBase;\n\n    if ((index >= 0) && (index < targetCount)) {\n        computeReadback(index);\n    } else {\n        target = vec4(0.0, 0.0, 0.0, 0.0);\n    }\n}\n","import * as THREE from \"three\";\nimport { FullScreenQuad } from \"three/addons/postprocessing/Pass.js\";\n\nimport { SPLAT_TEX_HEIGHT, SPLAT_TEX_WIDTH } from \"./defines\";\nimport { type Dyno, OutputRgba8, dynoBlock } from \"./dyno\";\nimport { DynoProgram, DynoProgramTemplate } from \"./dyno/program\";\nimport computeVec4Template from \"./shaders/computeVec4.glsl\";\nimport { getTextureSize } from \"./utils\";\n\n// Readback can be used to run a Dyno program that maps an index to a 32-bit\n// RGBA8 value, which is the only allowed, portable readback format for WebGL2.\n// Using data packing and conversion you can read back any 32-bit value, which\n// Spark uses to read back 2 float16 Gsplat distance values per index.\n\nexport type Rgba8Readback = Dyno<{ index: \"int\" }, { rgba8: \"vec4\" }>;\n\n// Readback can be performed with various typed buffers, making it convenient\n// to encode readback data in a variety of formats.\n\nexport type ReadbackBuffer =\n  | ArrayBuffer\n  | Uint8Array\n  | Int8Array\n  | Uint16Array\n  | Int16Array\n  | Uint32Array\n  | Int32Array\n  | Float32Array;\n\nexport class Readback {\n  renderer?: THREE.WebGLRenderer;\n  target?: THREE.WebGLArrayRenderTarget;\n  capacity: number;\n  count: number;\n\n  constructor({ renderer }: { renderer?: THREE.WebGLRenderer } = {}) {\n    this.renderer = renderer;\n    this.capacity = 0;\n    this.count = 0;\n  }\n\n  dispose() {\n    if (this.target) {\n      this.target.dispose();\n      this.target = undefined;\n    }\n  }\n\n  // Ensure we have a buffer large enough for the readback of count indices.\n  // Pass in previous bufer of the desired type.\n  ensureBuffer<B extends ReadbackBuffer>(count: number, buffer: B): B {\n    // Readback is performed in a 2D array of pixels, so round up with SPLAT_TEX_WIDTH\n    const roundedCount =\n      Math.ceil(Math.max(1, count) / SPLAT_TEX_WIDTH) * SPLAT_TEX_WIDTH;\n    const bytes = roundedCount * 4;\n    if (buffer.byteLength >= bytes) {\n      return buffer;\n    }\n\n    // Need a larger buffer, create a new one of the same type\n    const newBuffer = new ArrayBuffer(bytes);\n    if (buffer instanceof ArrayBuffer) {\n      return newBuffer as B;\n    }\n\n    const ctor = buffer.constructor as { new (arrayBuffer: ArrayBuffer): B };\n    return new ctor(newBuffer) as B;\n  }\n\n  // Ensure our render target is large enough for the readback of capacity indices.\n  ensureCapacity(capacity: number) {\n    const { width, height, depth, maxSplats } = getTextureSize(capacity);\n    if (!this.target || maxSplats > this.capacity) {\n      this.dispose();\n      this.capacity = maxSplats;\n\n      // The only portable readback format for WebGL2 is RGBA8\n      this.target = new THREE.WebGLArrayRenderTarget(width, height, depth, {\n        depthBuffer: false,\n        stencilBuffer: false,\n        generateMipmaps: false,\n        magFilter: THREE.NearestFilter,\n        minFilter: THREE.NearestFilter,\n      });\n      this.target.texture.format = THREE.RGBAFormat;\n      this.target.texture.type = THREE.UnsignedByteType;\n      this.target.texture.internalFormat = \"RGBA8\";\n      this.target.scissorTest = true;\n    }\n  }\n\n  // Get a program and THREE.RawShaderMaterial for a given Rgba8Readback,\n  // generating it if necessary and caching the result.\n  prepareProgramMaterial(reader: Rgba8Readback): {\n    program: DynoProgram;\n    material: THREE.RawShaderMaterial;\n  } {\n    let program = Readback.readbackProgram.get(reader);\n    if (!program) {\n      const graph = dynoBlock(\n        { index: \"int\" },\n        { rgba8: \"vec4\" },\n        ({ index }) => {\n          reader.inputs.index = index;\n          const rgba8 = new OutputRgba8({ rgba8: reader.outputs.rgba8 });\n          return { rgba8 };\n        },\n      );\n      if (!Readback.programTemplate) {\n        Readback.programTemplate = new DynoProgramTemplate(computeVec4Template);\n      }\n      // Create a program from the template and graph\n      program = new DynoProgram({\n        graph,\n        inputs: { index: \"index\" },\n        outputs: { rgba8: \"target\" },\n        template: Readback.programTemplate,\n      });\n      Object.assign(program.uniforms, {\n        targetLayer: { value: 0 },\n        targetBase: { value: 0 },\n        targetCount: { value: 0 },\n      });\n      Readback.readbackProgram.set(reader, program);\n    }\n\n    const material = program.prepareMaterial();\n    Readback.fullScreenQuad.material = material;\n    return { program, material };\n  }\n\n  private saveRenderState(renderer: THREE.WebGLRenderer) {\n    return {\n      xrEnabled: renderer.xr.enabled,\n      autoClear: renderer.autoClear,\n    };\n  }\n\n  private resetRenderState(\n    renderer: THREE.WebGLRenderer,\n    state: {\n      xrEnabled: boolean;\n      autoClear: boolean;\n    },\n  ) {\n    renderer.setRenderTarget(null);\n    renderer.xr.enabled = state.xrEnabled;\n    renderer.autoClear = state.autoClear;\n  }\n\n  private process({\n    count,\n    material,\n  }: { count: number; material: THREE.RawShaderMaterial }) {\n    const renderer = this.renderer;\n    if (!renderer) {\n      throw new Error(\"No renderer\");\n    }\n    if (!this.target) {\n      throw new Error(\"No target\");\n    }\n\n    // Run the program in \"layer\" chunks, in horizontal row ranges,\n    // that cover the total count of indices.\n    const layerSize = SPLAT_TEX_WIDTH * SPLAT_TEX_HEIGHT;\n    material.uniforms.targetBase.value = 0;\n    material.uniforms.targetCount.value = count;\n    let baseIndex = 0;\n\n    // Keep generating layers until completed count items\n    while (baseIndex < count) {\n      const layer = Math.floor(baseIndex / layerSize);\n      const layerBase = layer * layerSize;\n      const layerYEnd = Math.min(\n        SPLAT_TEX_HEIGHT,\n        Math.ceil((count - layerBase) / SPLAT_TEX_WIDTH),\n      );\n      material.uniforms.targetLayer.value = layer;\n\n      // Render the desired portion of the layer\n      this.target.scissor.set(0, 0, SPLAT_TEX_WIDTH, layerYEnd);\n      renderer.setRenderTarget(this.target, layer);\n      renderer.xr.enabled = false;\n      renderer.autoClear = false;\n      Readback.fullScreenQuad.render(renderer);\n\n      baseIndex += SPLAT_TEX_WIDTH * layerYEnd;\n    }\n\n    this.count = count;\n  }\n\n  private async read<B extends ReadbackBuffer>({\n    readback,\n  }: { readback: B }): Promise<B> {\n    const renderer = this.renderer;\n    if (!renderer) {\n      throw new Error(\"No renderer\");\n    }\n    if (!this.target) {\n      throw new Error(\"No target\");\n    }\n\n    const roundedCount =\n      Math.ceil(this.count / SPLAT_TEX_WIDTH) * SPLAT_TEX_WIDTH;\n    if (readback.byteLength < roundedCount * 4) {\n      throw new Error(\n        `Readback buffer too small: ${readback.byteLength} < ${roundedCount * 4}`,\n      );\n    }\n    const readbackUint8 = new Uint8Array(\n      readback instanceof ArrayBuffer ? readback : readback.buffer,\n    );\n\n    // We can only read back one 2D array layer of pixels at a time,\n    // so loop through them, initiate the readback, and collect the\n    // completion promises.\n\n    const layerSize = SPLAT_TEX_WIDTH * SPLAT_TEX_HEIGHT;\n    let baseIndex = 0;\n    const promises = [];\n\n    while (baseIndex < this.count) {\n      const layer = Math.floor(baseIndex / layerSize);\n      const layerBase = layer * layerSize;\n      const layerYEnd = Math.min(\n        SPLAT_TEX_HEIGHT,\n        Math.ceil((this.count - layerBase) / SPLAT_TEX_WIDTH),\n      );\n\n      renderer.setRenderTarget(this.target, layer);\n\n      // Compute the subarray that this layer of readback corresponds to\n      const readbackSize = SPLAT_TEX_WIDTH * layerYEnd * 4;\n      const subReadback = readbackUint8.subarray(\n        layerBase * 4,\n        layerBase * 4 + readbackSize,\n      );\n      const promise = renderer?.readRenderTargetPixelsAsync(\n        this.target,\n        0,\n        0,\n        SPLAT_TEX_WIDTH,\n        layerYEnd,\n        subReadback,\n      );\n      promises.push(promise);\n\n      baseIndex += SPLAT_TEX_WIDTH * layerYEnd;\n    }\n    return Promise.all(promises).then(() => readback);\n  }\n\n  // Perform render operation to run the Rgba8Readback program\n  // but don't perform the readback yet.\n  render({\n    reader,\n    count,\n    renderer,\n  }: { reader: Rgba8Readback; count: number; renderer?: THREE.WebGLRenderer }) {\n    this.renderer = renderer || this.renderer;\n    if (!this.renderer) {\n      throw new Error(\"No renderer\");\n    }\n\n    this.ensureCapacity(count);\n\n    const { program, material } = this.prepareProgramMaterial(reader);\n    program.update();\n\n    const renderState = this.saveRenderState(this.renderer);\n    this.process({ count, material });\n    this.resetRenderState(this.renderer, renderState);\n  }\n\n  // Perform a readback of the render target, returning a buffer of the\n  // given type.\n  async readback<B extends ReadbackBuffer>({\n    readback,\n  }: { readback: B }): Promise<B> {\n    if (!this.renderer) {\n      throw new Error(\"No renderer\");\n    }\n    const renderState = this.saveRenderState(this.renderer);\n    const promise = this.read({ readback });\n    this.resetRenderState(this.renderer, renderState);\n    return promise;\n  }\n\n  // Perform a render and readback operation for the given Rgba8Readback,\n  // and readback buffer (call ensureBuffer first).\n  async renderReadback<B extends ReadbackBuffer>({\n    reader,\n    count,\n    renderer,\n    readback,\n  }: {\n    reader: Rgba8Readback;\n    count: number;\n    renderer?: THREE.WebGLRenderer;\n    readback: B;\n  }): Promise<B> {\n    this.renderer = renderer || this.renderer;\n    if (!this.renderer) {\n      throw new Error(\"No renderer\");\n    }\n\n    this.ensureCapacity(count);\n\n    const { program, material } = this.prepareProgramMaterial(reader);\n    program.update();\n\n    const renderState = this.saveRenderState(this.renderer);\n\n    // Generate output\n    this.process({ count, material });\n\n    // Initiate readback\n    const promise = this.read({ readback });\n\n    this.resetRenderState(this.renderer, renderState);\n    return promise;\n  }\n\n  getTexture(): THREE.DataArrayTexture | undefined {\n    return this.target?.texture;\n  }\n\n  static programTemplate: DynoProgramTemplate | null = null;\n\n  // Cache for Rgba8Readback programs\n  static readbackProgram = new Map<Rgba8Readback, DynoProgram>();\n\n  // Static full-screen quad for pseudo-compute shader rendering\n  static fullScreenQuad = new FullScreenQuad(\n    new THREE.RawShaderMaterial({ visible: false }),\n  );\n}\n","import * as THREE from \"three\";\n\nimport { DynoPackedSplats, type PackedSplats } from \"./PackedSplats\";\nimport { Readback, type Rgba8Readback } from \"./Readback\";\nimport { SPLAT_TEX_WIDTH } from \"./defines\";\nimport {\n  Dyno,\n  type DynoBlock,\n  DynoInt,\n  DynoUniform,\n  type DynoVal,\n  add,\n  dynoBlock,\n  readPackedSplatRange,\n  splitGsplat,\n  unindent,\n  unindentLines,\n} from \"./dyno\";\nimport { getTextureSize } from \"./utils\";\n\n// An RgbaArray is a collection of ordered RGBA8 values, which can be used as a dyno\n// data source, for example for recoloring Gsplats via SplatMesh.splatRgba.\n// It can be instantiated from a Uint8Array of RGBA8 values, or it can be\n// generated using a Rgba8Readback dyno program.\n\nexport type RgbaArrayOptions = {\n  // Reserve space for at least this many RGBA values.\n  capacity?: number;\n  // Use the provided array of RGBA8 values as the source.\n  array?: Uint8Array;\n  // The number of actual RGBA8 values in the array.\n  count?: number;\n};\n\nexport class RgbaArray {\n  capacity = 0;\n  count = 0;\n  array: Uint8Array | null = null;\n\n  readback: Readback | null = null;\n  source: THREE.DataArrayTexture | null = null;\n  // Set to true if source array is updated to have it upload to GPU\n  needsUpdate = true;\n\n  // Use this as a TRgbaArray in a dyno graph\n  dyno: DynoUniform<typeof TRgbaArray, \"rgbaArray\">;\n\n  constructor(options: RgbaArrayOptions = {}) {\n    this.dyno = new DynoUniform({\n      key: \"rgbaArray\",\n      type: TRgbaArray,\n      globals: () => [defineRgbaArray],\n      value: {\n        texture: RgbaArray.getEmpty(),\n        count: 0,\n      },\n      update: (value) => {\n        value.texture =\n          this.readback?.getTexture() ?? this.source ?? RgbaArray.getEmpty();\n        value.count = this.count;\n        return value;\n      },\n    });\n\n    if (options.array) {\n      // Initialize with given array\n      this.array = options.array;\n      this.capacity = Math.floor(this.array.length / 4);\n      this.capacity =\n        Math.floor(this.capacity / SPLAT_TEX_WIDTH) * SPLAT_TEX_WIDTH;\n      this.count = Math.min(\n        this.capacity,\n        options.count ?? Number.POSITIVE_INFINITY,\n      );\n    } else {\n      this.capacity = options.capacity ?? 0;\n      this.count = 0;\n    }\n  }\n\n  // Free up resources\n  dispose() {\n    if (this.readback) {\n      this.readback.dispose();\n      this.readback = null;\n    }\n    if (this.source) {\n      this.source.dispose();\n      this.source = null;\n    }\n  }\n\n  // Ensure that our array is large enough to hold capacity RGBA8 values.\n  ensureCapacity(capacity: number): Uint8Array {\n    if (!this.array || capacity > (this.array?.length ?? 0) / 4) {\n      this.capacity = getTextureSize(capacity).maxSplats;\n      const newArray = new Uint8Array(this.capacity * 4);\n      if (this.array) {\n        // Copy over existing data\n        newArray.set(this.array);\n      }\n      this.array = newArray;\n    }\n    return this.array;\n  }\n\n  // Get the THREE.DataArrayTexture from either the readback or the source.\n  getTexture(): THREE.DataArrayTexture {\n    let texture = this.readback?.getTexture();\n    if (this.source || this.array) {\n      texture = this.maybeUpdateSource();\n    }\n    return texture ?? RgbaArray.getEmpty();\n  }\n\n  // Create or get a THREE.DataArrayTexture from the data array.\n  private maybeUpdateSource(): THREE.DataArrayTexture {\n    if (!this.array) {\n      throw new Error(\"No array\");\n    }\n\n    if (this.needsUpdate || !this.source) {\n      this.needsUpdate = false;\n\n      if (this.source) {\n        const { width, height, depth } = this.source.image;\n        if (this.capacity !== width * height * depth) {\n          this.source.dispose();\n          this.source = null;\n        }\n      }\n      if (!this.source) {\n        const { width, height, depth } = getTextureSize(this.capacity);\n        this.source = new THREE.DataArrayTexture(\n          this.array,\n          width,\n          height,\n          depth,\n        );\n        this.source.format = THREE.RGBAFormat;\n        this.source.type = THREE.UnsignedByteType;\n        this.source.internalFormat = \"RGBA8\";\n        this.source.needsUpdate = true;\n      } else if (this.array.buffer !== this.source.image.data.buffer) {\n        this.source.image.data = new Uint8Array(this.array.buffer);\n      }\n      this.source.needsUpdate = true;\n    }\n    return this.source;\n  }\n\n  // Generate the RGBA8 values from a Rgba8Readback dyno program.\n  render({\n    reader,\n    count,\n    renderer,\n  }: { reader: Rgba8Readback; count: number; renderer: THREE.WebGLRenderer }) {\n    if (!this.readback) {\n      this.readback = new Readback({ renderer });\n    }\n    this.readback.render({ reader, count, renderer });\n    this.capacity = this.readback.capacity;\n    this.count = this.readback.count;\n  }\n\n  // Extract the RGBA8 values from a PackedSplats collection.\n  fromPackedSplats({\n    packedSplats,\n    base,\n    count,\n    renderer,\n  }: {\n    packedSplats: PackedSplats;\n    base: number;\n    count: number;\n    renderer: THREE.WebGLRenderer;\n  }) {\n    const { dynoSplats, dynoBase, dynoCount, reader } = RgbaArray.makeDynos();\n    dynoSplats.packedSplats = packedSplats;\n    dynoBase.value = base;\n    dynoCount.value = count;\n    this.render({ reader, count, renderer });\n    return this;\n  }\n\n  // Read back the RGBA8 values from the readback buffer.\n  async read(): Promise<Uint8Array> {\n    if (!this.readback) {\n      throw new Error(\"No readback\");\n    }\n    if (!this.array || this.array.length < this.count * 4) {\n      this.array = new Uint8Array(this.capacity * 4);\n    }\n    const result = await this.readback.readback({ readback: this.array });\n    return result.subarray(0, this.count * 4);\n  }\n\n  private static emptySource: THREE.DataArrayTexture | null = null;\n\n  // Can be used where you need an uninitialized THREE.DataArrayTexture like\n  // a uniform you will update with the result of this.getTexture() later.\n  static getEmpty(): THREE.DataArrayTexture {\n    if (!RgbaArray.emptySource) {\n      const emptyArray = new Uint8Array(1 * 4);\n      RgbaArray.emptySource = new THREE.DataArrayTexture(emptyArray, 1, 1, 1);\n      RgbaArray.emptySource.format = THREE.RGBAFormat;\n      RgbaArray.emptySource.type = THREE.UnsignedByteType;\n      RgbaArray.emptySource.internalFormat = \"RGBA8\";\n      RgbaArray.emptySource.needsUpdate = true;\n    }\n    return RgbaArray.emptySource;\n  }\n\n  private static dynos: {\n    dynoSplats: DynoPackedSplats;\n    dynoBase: DynoInt<string>;\n    dynoCount: DynoInt<string>;\n    reader: DynoBlock<{ index: \"int\" }, { rgba8: \"vec4\" }>;\n  } | null = null;\n\n  // Create a dyno program that can extract RGBA8 values from a PackedSplats\n  private static makeDynos() {\n    if (!RgbaArray.dynos) {\n      const dynoSplats = new DynoPackedSplats();\n      const dynoBase = new DynoInt({ value: 0 });\n      const dynoCount = new DynoInt({ value: 0 });\n      const reader = dynoBlock(\n        { index: \"int\" },\n        { rgba8: \"vec4\" },\n        ({ index }) => {\n          if (!index) {\n            throw new Error(\"index is undefined\");\n          }\n          index = add(index, dynoBase);\n          const gsplat = readPackedSplatRange(\n            dynoSplats,\n            index,\n            dynoBase,\n            dynoCount,\n          );\n          return { rgba8: splitGsplat(gsplat).outputs.rgba };\n        },\n      );\n      RgbaArray.dynos = { dynoSplats, dynoBase, dynoCount, reader };\n    }\n    return RgbaArray.dynos;\n  }\n}\n\n// Dyno types and definitions\n\nexport const TRgbaArray = { type: \"RgbaArray\" } as { type: \"RgbaArray\" };\n\nexport const defineRgbaArray = unindent(`\n  struct RgbaArray {\n    sampler2DArray texture;\n    int count;\n  };\n`);\n\nexport function readRgbaArray(\n  rgba: DynoVal<typeof TRgbaArray>,\n  index: DynoVal<\"int\">,\n): DynoVal<\"vec4\"> {\n  const dyno = new Dyno<\n    { rgba: typeof TRgbaArray; index: \"int\" },\n    { rgba: \"vec4\" }\n  >({\n    inTypes: { rgba: TRgbaArray, index: \"int\" },\n    outTypes: { rgba: \"vec4\" },\n    inputs: { rgba, index },\n    globals: () => [defineRgbaArray],\n    statements: ({ inputs, outputs }) =>\n      unindentLines(`\n        if ((index >= 0) && (index < ${inputs.rgba}.count)) {\n          ${outputs.rgba} = texelFetch(${inputs.rgba}.texture, splatTexCoord(index), 0);\n        } else {\n          ${outputs.rgba} = vec4(0.0, 0.0, 0.0, 0.0);\n        }\n      `),\n  });\n  return dyno.outputs.rgba;\n}\n","import * as THREE from \"three\";\n\nimport {\n  Dyno,\n  DynoInt,\n  DynoUniform,\n  type DynoVal,\n  Gsplat,\n  unindent,\n  unindentLines,\n} from \"./dyno\";\nimport { newArray } from \"./utils\";\n\n// Spark provides the ability to apply \"edits\" to Gsplats as part of the standard\n// SplatMesh pipeline. These edits take the form of a sequence of operations,\n// applied one at a time to the set of Gsplats in its packedSplats. Each operation\n// evaluates a 7-dimensional field (RGBA and XYZ displacement) at each point in\n// space that derives from N=1 or more Signed Distance Field shapes (such as spheres,\n// boxes, planes, etc.), blended together and across inside-outisde boundaries.\n\n// The result is a an RGBA,XYZ value for each point in space, which combined with\n// SplatEditRgbaBlendMode.MULTIPLY/SET_RGB/ADD_RGBA can be used to create special\n// effects, for example simulating simple lighting or applying deformations in space,\n// whose parameters can be updated each frame to create animated effects.\n\n// RGBA-XYZ values are computed by blending together values from all SDF shapes using\n// the exponential \"softmax\" function, which is commutative (so blending order within\n// a SplatEdit operation doesn't matter). The parameter SplatEdit.sdfSmooth controls\n// the blending scale between SDF shapes, while SplatEdit.softEdge controls the scale\n// of soft inside-outside shape edit blending. Their default values start at 0.0 and\n// should be increased to soften the effect.\n\n// Note that XYZ displacement values are blended in the same way as RGBA, with a\n// resulting displacement field that can be quite complex but \"softly\" blending\n// between shapes. These RGBA-XYZ edits, along with time-based and overlapping\n// fields can create many interesting animations and special effects, such as\n// rippling leaves in the wind, an angry fire, or a looping water effects. Simply\n// update the SplatEdit and SplatEditSdf objects and the operations will be applied\n// immediately to the Gsplats in the scene.\n\nexport enum SplatEditSdfType {\n  // ALL: Affects all points in space\n  ALL = \"all\",\n  // PLANE: Infinite plane (position, rotation)\n  PLANE = \"plane\",\n  // SPHERE: Sphere (position, radius)\n  SPHERE = \"sphere\",\n  // BOX: Rounded box (position, rotation, sizes, radius)\n  BOX = \"box\",\n  // ELLIPSOID: Ellipsoid (position, rotation, sizes)\n  ELLIPSOID = \"ellipsoid\",\n  // CYLINDER: Cylinder (position, rotation, radius, size_y)\n  CYLINDER = \"cylinder\",\n  // CAPSULE: Capsule (position, rotation, radius, size_y)\n  CAPSULE = \"capsule\",\n  // INFINITE_CONE: Infinite cone (position, rotation, radius=angle)\n  INFINITE_CONE = \"infinite_cone\",\n}\n\nfunction sdfTypeToNumber(type: SplatEditSdfType) {\n  switch (type) {\n    case SplatEditSdfType.ALL:\n      return 0;\n    case SplatEditSdfType.PLANE:\n      return 1;\n    case SplatEditSdfType.SPHERE:\n      return 2;\n    case SplatEditSdfType.BOX:\n      return 3;\n    case SplatEditSdfType.ELLIPSOID:\n      return 4;\n    case SplatEditSdfType.CYLINDER:\n      return 5;\n    case SplatEditSdfType.CAPSULE:\n      return 6;\n    case SplatEditSdfType.INFINITE_CONE:\n      return 7;\n    default:\n      throw new Error(`Unknown SDF type: ${type}`);\n  }\n}\n\nexport enum SplatEditRgbaBlendMode {\n  // The RGBA of the splat is multiplied component-wise by the SDF’s\n  // RGBA value at that point in space.\n  MULTIPLY = \"multiply\",\n  // Ignore the Alpha value in the SDF, but set the splat’s RGB to\n  // equal the SDF’s RGB value at that point.\n  SET_RGB = \"set_rgb\",\n  // Add the SDF’s RGBA value at that point to the RGBA value of\n  // the Gsplat. This can produce hyper-saturated results, but is useful\n  // to easily “light up” areas.\n  ADD_RGBA = \"add_rgba\",\n}\n\nfunction rgbaBlendModeToNumber(mode: SplatEditRgbaBlendMode) {\n  switch (mode) {\n    case SplatEditRgbaBlendMode.MULTIPLY:\n      return 0;\n    case SplatEditRgbaBlendMode.SET_RGB:\n      return 1;\n    case SplatEditRgbaBlendMode.ADD_RGBA:\n      return 2;\n    default:\n      throw new Error(`Unknown blend mode: ${mode}`);\n  }\n}\n\nexport type SplatEditSdfOptions = {\n  // The SDF shape type: ALL, PLANE, SPHERE, BOX, ELLIPSOID, CYLINDER, CAPSULE,\n  // or INFINITE_CONE. (default: SplatEditSdfType.SPHERE)\n  type?: SplatEditSdfType;\n  // Invert the SDF evaluation, swapping inside and outside regions. (default: false)\n  invert?: boolean;\n  // Opacity / \"alpha\" value used differently by blending modes (default: 1.0)\n  opacity?: number;\n  // RGB color applied within the shape. (default: new THREE.Color(1.0, 1.0, 1.0))\n  color?: THREE.Color;\n  // XYZ displacement applied to splat positions inside the shape.\n  // (default: new THREE.Vector3(0.0, 0.0, 0.0))\n  displace?: THREE.Vector3;\n  // Shape-specific size parameter: sphere radius, box corner rounding,\n  // cylinder/capsule radius, or for the infinite cone the angle factor\n  // (opening half-angle = π/4 × radius).\n  radius?: number;\n};\n\nexport class SplatEditSdf extends THREE.Object3D {\n  type: SplatEditSdfType;\n  invert: boolean;\n  opacity: number;\n  color: THREE.Color;\n  displace: THREE.Vector3;\n  radius: number;\n\n  constructor(options: SplatEditSdfOptions = {}) {\n    super();\n    const { type, invert, opacity, color, displace, radius } = options;\n    this.type = type ?? SplatEditSdfType.SPHERE;\n    this.invert = invert ?? false;\n    this.opacity = opacity ?? 1.0;\n    this.color = color ?? new THREE.Color(1.0, 1.0, 1.0);\n    this.displace = displace ?? new THREE.Vector3(0.0, 0.0, 0.0);\n    this.radius = radius ?? 0.0;\n  }\n}\n\nexport type SplatEditOptions = {\n  // Name of this edit operation. If you omit it, a default \"Edit 1\", \"Edit 2\", ...\n  // is assigned.\n  name?: string;\n  // How the SDF’s RGBA modifies each splat’s RGBA: multiply, overwrite RGB,\n  // or add RGBA. (default: MULTIPLY)\n  rgbaBlendMode?: SplatEditRgbaBlendMode;\n  // Smoothing (in world‐space units) for blending between multiple SDF shapes\n  // at their boundaries. (default: 0.0)\n  sdfSmooth?: number;\n  // Soft‐edge falloff radius (in world‐space units) around each SDF shape’s surface.\n  // (default: 0.0)\n  softEdge?: number;\n  // Invert the SDF evaluation (inside/outside swap). (default: false)\n  invert?: boolean;\n  // Explicit array of SplatEditSdf objects to include. If null, any child\n  // SplatEditSdf instances are used.\n  sdfs?: SplatEditSdf[];\n};\n\nexport class SplatEdit extends THREE.Object3D {\n  // ordering used to apply SplatEdit operations to Gsplats. This is implicitly\n  // increased with each new SplatEdit. Reassigning ordering can be used to\n  // reorder the operations.\n  ordering: number;\n  rgbaBlendMode: SplatEditRgbaBlendMode;\n  sdfSmooth: number;\n  softEdge: number;\n  invert: boolean;\n\n  // Optional list of explicit SDFs to including in this edit. If it is null, then\n  // any SplatEditSdf children in the scene graph will be added automatically.\n  sdfs: SplatEditSdf[] | null;\n\n  // The next ordering number to use for a new SplatEdit, auto-incremented\n  static nextOrdering = 1;\n\n  constructor(options: SplatEditOptions = {}) {\n    const {\n      name,\n      rgbaBlendMode = SplatEditRgbaBlendMode.MULTIPLY,\n      sdfSmooth = 0.0,\n      softEdge = 0.0,\n      invert = false,\n      sdfs = null,\n    } = options;\n\n    super();\n    this.rgbaBlendMode = rgbaBlendMode;\n    this.sdfSmooth = sdfSmooth;\n    this.softEdge = softEdge;\n    this.invert = invert;\n    this.sdfs = sdfs;\n    // Assign and auto-increment unique ordering number for this edit\n    this.ordering = SplatEdit.nextOrdering++;\n    // Automatically assign a default name if not provided\n    this.name = name ?? `Edit ${this.ordering}`;\n  }\n\n  addSdf(sdf: SplatEditSdf) {\n    if (this.sdfs == null) {\n      this.sdfs = [];\n    }\n    if (!this.sdfs.includes(sdf)) {\n      this.sdfs.push(sdf);\n    }\n  }\n\n  removeSdf(sdf: SplatEditSdf) {\n    if (this.sdfs == null) {\n      return;\n    }\n    this.sdfs = this.sdfs.filter((s) => s !== sdf);\n  }\n}\n\n// Dyno implementation of RGBA-XYZ SDF editing.\n// The SDFs are encoded in a texture while the edits are encoded\n// as a uniform uvec4 array.\n\nexport class SplatEdits {\n  // Maximum number of SDFs allocated\n  maxSdfs: number;\n  // Number of SDFs currently in use\n  numSdfs: number;\n  // Encoded SDF data\n  sdfData: Uint32Array;\n  // Float interpretation of SDF data\n  sdfFloatData: Float32Array;\n  // Texture with encoded SDF data\n  sdfTexture: THREE.DataTexture;\n  // An SdfArray dyno uniform\n  dynoSdfArray: DynoUniform<typeof SdfArray, \"sdfArray\">;\n\n  // Maximum number of edits allocated\n  maxEdits: number;\n  // Number of edits currently in use\n  numEdits: number;\n  // Encoded edit data\n  editData: Uint32Array;\n  // Float interpretation of edit data\n  editFloatData: Float32Array;\n  // A dyno uniform for the number of edits\n  dynoNumEdits: DynoUniform<\"int\", \"numEdits\">;\n  // A dyno uniform for the encoded edits, one uvec4 per edit\n  dynoEdits: DynoUniform<\"uvec4\", \"edits\">;\n\n  constructor({ maxSdfs, maxEdits }: { maxSdfs?: number; maxEdits?: number }) {\n    // Allocate at least 16 SDFs for efficiency\n    this.maxSdfs = Math.max(16, maxSdfs ?? 0);\n    this.numSdfs = 0;\n\n    // Allocate space: 8 x (u)vec4 values per SDF, Uint32 and Float32 arrays\n    this.sdfData = new Uint32Array(this.maxSdfs * 8 * 4);\n    this.sdfFloatData = new Float32Array(this.sdfData.buffer);\n    this.sdfTexture = this.newSdfTexture(this.sdfData, this.maxSdfs);\n    this.dynoSdfArray = new DynoUniform({\n      key: \"sdfArray\",\n      type: SdfArray,\n      globals: () => [defineSdfArray],\n      value: {\n        numSdfs: 0,\n        sdfTexture: this.sdfTexture,\n      },\n      update: (uniform) => {\n        uniform.numSdfs = this.numSdfs;\n        uniform.sdfTexture = this.sdfTexture;\n        return uniform;\n      },\n    });\n\n    // Allocate at least 16 edits slots for efficiency\n    this.maxEdits = Math.max(16, maxEdits ?? 0);\n    this.numEdits = 0;\n    // Allocate space: 1 uvec4 per edit\n    this.editData = new Uint32Array(this.maxEdits * 4);\n    this.editFloatData = new Float32Array(this.editData.buffer);\n    this.dynoNumEdits = new DynoInt({ value: 0 });\n    this.dynoEdits = this.newEdits(this.editData, this.maxEdits);\n  }\n\n  private newSdfTexture(data: Uint32Array, maxSdfs: number) {\n    const texture = new THREE.DataTexture(\n      data,\n      8,\n      maxSdfs,\n      THREE.RGBAIntegerFormat,\n      THREE.UnsignedIntType,\n    );\n    texture.internalFormat = \"RGBA32UI\";\n    texture.needsUpdate = true;\n    return texture;\n  }\n\n  private newEdits(data: Uint32Array, maxEdits: number) {\n    return new DynoUniform({\n      key: \"edits\",\n      type: \"uvec4\",\n      count: maxEdits,\n      globals: () => [defineEdit],\n      value: data,\n    });\n  }\n\n  // Ensure our SDF texture and edits uniform array have enough capacity.\n  // Reallocate if not.\n  private ensureCapacity({\n    maxSdfs,\n    maxEdits,\n  }: { maxSdfs: number; maxEdits: number }): boolean {\n    let dynoUpdated = false;\n    if (maxSdfs > this.sdfTexture.image.height) {\n      this.sdfTexture.dispose();\n      // At least double the size to avoid frequent reallocations\n      this.maxSdfs = Math.max(this.maxSdfs * 2, maxSdfs);\n      this.sdfData = new Uint32Array(this.maxSdfs * 8 * 4);\n      this.sdfFloatData = new Float32Array(this.sdfData.buffer);\n      this.sdfTexture = this.newSdfTexture(this.sdfData, this.maxSdfs);\n    }\n    if (maxEdits > (this.dynoEdits.count ?? 0)) {\n      // At least double the size to avoid frequent reallocations\n      this.maxEdits = Math.max(this.maxEdits * 2, maxEdits);\n      this.editData = new Uint32Array(this.maxEdits * 4);\n      this.editFloatData = new Float32Array(this.editData.buffer);\n      this.dynoEdits = this.newEdits(this.editData, this.maxEdits);\n      dynoUpdated = true;\n    }\n    return dynoUpdated;\n  }\n\n  private updateEditData(offset: number, value: number): boolean {\n    // Update an edit uint32 value and return true if it changed\n    const updated = this.editData[offset] !== value;\n    this.editData[offset] = value;\n    return updated;\n  }\n\n  private updateEditFloatData(offset: number, value: number): boolean {\n    // Update an edit float32 value and return true if it changed\n    tempFloat32[0] = value;\n    const updated = this.editFloatData[offset] !== tempFloat32[0];\n    if (updated) {\n      this.editFloatData[offset] = tempFloat32[0];\n    }\n    return updated;\n  }\n\n  private encodeEdit(\n    editIndex: number,\n    {\n      sdfFirst,\n      sdfCount,\n      invert,\n      rgbaBlendMode,\n      softEdge,\n      sdfSmooth,\n    }: {\n      sdfFirst: number;\n      sdfCount: number;\n      invert: boolean;\n      rgbaBlendMode: number;\n      softEdge: number;\n      sdfSmooth: number;\n    },\n  ): boolean {\n    const base = editIndex * 4;\n    let updated = false;\n    // Encode the edit fields into the editData array and check if any changed\n    updated =\n      this.updateEditData(base + 0, rgbaBlendMode | (invert ? 1 << 8 : 0)) ||\n      updated;\n    updated =\n      this.updateEditData(base + 1, sdfFirst | (sdfCount << 16)) || updated;\n    updated = this.updateEditFloatData(base + 2, softEdge) || updated;\n    updated = this.updateEditFloatData(base + 3, sdfSmooth) || updated;\n    return updated;\n  }\n\n  private updateSdfData(offset: number, value: number): boolean {\n    // Update an SDF uint32 value and return true if it changed\n    const updated = this.sdfData[offset] !== value;\n    this.sdfData[offset] = value;\n    return updated;\n  }\n\n  private updateSdfFloatData(offset: number, value: number): boolean {\n    // Update an SDF float32 value and return true if it changed\n    tempFloat32[0] = value;\n    const updated = this.sdfFloatData[offset] !== tempFloat32[0];\n    if (updated) {\n      this.sdfFloatData[offset] = tempFloat32[0];\n    }\n    return updated;\n  }\n\n  private encodeSdf(\n    sdfIndex: number,\n    {\n      sdfType,\n      invert,\n      center,\n      quaternion,\n      scale,\n      sizes,\n    }: {\n      sdfType: number;\n      invert?: boolean;\n      center?: THREE.Vector3;\n      quaternion?: THREE.Quaternion;\n      scale?: THREE.Vector3;\n      sizes?: THREE.Vector4;\n    },\n    values: THREE.Vector4[],\n  ): boolean {\n    // Encode the SDF fields into the sdfData array and check if any changed\n    const base = sdfIndex * (8 * 4);\n    const flags = sdfType | (invert ? 1 << 8 : 0);\n    let updated = false;\n\n    updated = this.updateSdfFloatData(base + 0, center?.x ?? 0) || updated;\n    updated = this.updateSdfFloatData(base + 1, center?.y ?? 0) || updated;\n    updated = this.updateSdfFloatData(base + 2, center?.z ?? 0) || updated;\n    updated = this.updateSdfData(base + 3, flags) || updated;\n\n    updated = this.updateSdfFloatData(base + 4, quaternion?.x ?? 0) || updated;\n    updated = this.updateSdfFloatData(base + 5, quaternion?.y ?? 0) || updated;\n    updated = this.updateSdfFloatData(base + 6, quaternion?.z ?? 0) || updated;\n    updated = this.updateSdfFloatData(base + 7, quaternion?.w ?? 0) || updated;\n\n    updated = this.updateSdfFloatData(base + 8, scale?.x ?? 0) || updated;\n    updated = this.updateSdfFloatData(base + 9, scale?.y ?? 0) || updated;\n    updated = this.updateSdfFloatData(base + 10, scale?.z ?? 0) || updated;\n    updated = this.updateSdfData(base + 11, 0) || updated;\n\n    updated = this.updateSdfFloatData(base + 12, sizes?.x ?? 0) || updated;\n    updated = this.updateSdfFloatData(base + 13, sizes?.y ?? 0) || updated;\n    updated = this.updateSdfFloatData(base + 14, sizes?.z ?? 0) || updated;\n    updated = this.updateSdfFloatData(base + 15, sizes?.w ?? 0) || updated;\n\n    const nValues = Math.min(4, values.length);\n    for (let i = 0; i < nValues; ++i) {\n      const vBase = base + 16 + i * 4;\n      updated = this.updateSdfFloatData(vBase + 0, values[i].x) || updated;\n      updated = this.updateSdfFloatData(vBase + 1, values[i].y) || updated;\n      updated = this.updateSdfFloatData(vBase + 2, values[i].z) || updated;\n      updated = this.updateSdfFloatData(vBase + 3, values[i].w) || updated;\n    }\n    return updated;\n  }\n\n  // Update the SDFs and edits from an array of SplatEdits and their\n  // associated SplatEditSdfs, updating it for the dyno shader program.\n  update(edits: { edit: SplatEdit; sdfs: SplatEditSdf[] }[]): {\n    updated: boolean;\n    dynoUpdated: boolean;\n  } {\n    const sdfCount = edits.reduce((total, { sdfs }) => total + sdfs.length, 0);\n    const dynoUpdated = this.ensureCapacity({\n      maxEdits: edits.length,\n      maxSdfs: sdfCount,\n    });\n\n    const values = [new THREE.Vector4(), new THREE.Vector4()];\n    const center = new THREE.Vector3();\n    const quaternion = new THREE.Quaternion();\n    const scale = new THREE.Vector3();\n    const sizes = new THREE.Vector4();\n\n    let sdfIndex = 0;\n    let updated = dynoUpdated;\n\n    if (edits.length !== this.dynoNumEdits.value) {\n      this.dynoNumEdits.value = edits.length;\n      this.numEdits = edits.length;\n      updated = true;\n    }\n\n    for (const [editIndex, { edit, sdfs }] of edits.entries()) {\n      updated =\n        this.encodeEdit(editIndex, {\n          sdfFirst: sdfIndex,\n          sdfCount: sdfs.length,\n          invert: edit.invert,\n          rgbaBlendMode: rgbaBlendModeToNumber(edit.rgbaBlendMode),\n          softEdge: edit.softEdge,\n          sdfSmooth: edit.sdfSmooth,\n        }) || updated;\n\n      let sdfUpdated = false;\n      for (const sdf of sdfs) {\n        sizes.set(sdf.scale.x, sdf.scale.y, sdf.scale.z, sdf.radius);\n        // Temporarily set the SDF scale to 1.0 to get the world-to-SDF\n        // transform without scaling. The SDF treats the scale separately.\n        sdf.scale.setScalar(1.0);\n        sdf.updateMatrixWorld();\n        const worldToSdf = sdf.matrixWorld.clone().invert();\n        worldToSdf.decompose(center, quaternion, scale);\n\n        sdf.scale.set(sizes.x, sizes.y, sizes.z);\n        sdf.updateMatrixWorld();\n\n        values[0].set(sdf.color.r, sdf.color.g, sdf.color.b, sdf.opacity);\n        values[1].set(sdf.displace.x, sdf.displace.y, sdf.displace.z, 1.0);\n\n        sdfUpdated =\n          this.encodeSdf(\n            sdfIndex,\n            {\n              sdfType: sdfTypeToNumber(sdf.type),\n              invert: sdf.invert,\n              center,\n              quaternion,\n              scale,\n              sizes,\n            },\n            values,\n          ) || sdfUpdated;\n\n        sdfIndex += 1;\n      }\n      this.numSdfs = sdfIndex;\n      if (sdfUpdated) {\n        this.sdfTexture.needsUpdate = true;\n      }\n      updated ||= sdfUpdated;\n    }\n    return { updated, dynoUpdated };\n  }\n\n  // Modify a Gsplat in a dyno shader program using the current edits and SDFs.\n  modify(gsplat: DynoVal<typeof Gsplat>): DynoVal<typeof Gsplat> {\n    return applyGsplatRgbaDisplaceEdits(\n      gsplat,\n      this.dynoSdfArray,\n      this.dynoNumEdits,\n      this.dynoEdits,\n    );\n  }\n}\n\n// Dyno types and components:\n\n// An SdfArray contains a collection of SDFs encoded in a texture.\n// Each SDF has a type and geometric parameters, but also encodes\n// 4 x vec4 values, which can all be blended across multiple SDFs.\n// The SplatEdit system uses 7 of these 16 values to encode RGBA-XYZ edits,\n// but more can be added, and these SDFs can be used for entirely different\n// purposes as well.\n\nexport const SdfArray = { type: \"SdfArray\" } as { type: \"SdfArray\" };\n\nexport const defineSdfArray = unindent(`\n  struct SdfArray {\n    int numSdfs;\n    usampler2D sdfTexture;\n  };\n\n  void unpackSdfArray(\n    usampler2D sdfTexture, int sdfIndex, out uint flags,\n    out vec3 center, out vec4 quaternion, out vec3 scale, out vec4 sizes,\n    int numValues, out vec4 values[4]\n  ) {\n    uvec4 temp = texelFetch(sdfTexture, ivec2(0, sdfIndex), 0);\n    flags = temp.w;\n    center = vec3(uintBitsToFloat(temp.x), uintBitsToFloat(temp.y), uintBitsToFloat(temp.z));\n\n    temp = texelFetch(sdfTexture, ivec2(1, sdfIndex), 0);\n    quaternion = vec4(uintBitsToFloat(temp.x), uintBitsToFloat(temp.y), uintBitsToFloat(temp.z), uintBitsToFloat(temp.w));\n\n    temp = texelFetch(sdfTexture, ivec2(2, sdfIndex), 0);\n    scale = vec3(uintBitsToFloat(temp.x), uintBitsToFloat(temp.y), uintBitsToFloat(temp.z));\n\n    temp = texelFetch(sdfTexture, ivec2(3, sdfIndex), 0);\n    sizes = vec4(uintBitsToFloat(temp.x), uintBitsToFloat(temp.y), uintBitsToFloat(temp.z), uintBitsToFloat(temp.w));\n\n    for (int i = 0; i < numValues; ++i) {\n      temp = texelFetch(sdfTexture, ivec2(4 + i, sdfIndex), 0);\n      values[i] = vec4(uintBitsToFloat(temp.x), uintBitsToFloat(temp.y), uintBitsToFloat(temp.z), uintBitsToFloat(temp.w));\n    }\n  }\n\n  const uint SDF_FLAG_TYPE = 0xFFu;\n  const uint SDF_FLAG_INVERT = 1u << 8u;\n\n  const uint SDF_TYPE_ALL = 0u;\n  const uint SDF_TYPE_PLANE = 1u;\n  const uint SDF_TYPE_SPHERE = 2u;\n  const uint SDF_TYPE_BOX = 3u;\n  const uint SDF_TYPE_ELLIPSOID = 4u;\n  const uint SDF_TYPE_CYLINDER = 5u;\n  const uint SDF_TYPE_CAPSULE = 6u;\n  const uint SDF_TYPE_INFINITE_CONE = 7u;\n\n  float evaluateSdfArray(\n    usampler2D sdfTexture, int numSdfs, int sdfFirst, int sdfCount, vec3 pos,\n    float smoothK, int numValues, out vec4 outValues[4]\n  ) {\n    float distanceAccum = (smoothK == 0.0) ? 1.0 / 0.0 : 0.0;\n    float maxExp = -1.0 / 0.0;\n    for (int i = 0; i < numValues; ++i) {\n        outValues[i] = vec4(0.0);\n    }\n\n    uint flags;\n    vec3 center, scale;\n    vec4 quaternion, sizes;\n    vec4 values[4];\n\n    int sdfLast = min(sdfFirst + sdfCount, numSdfs);\n    for (int index = sdfFirst; index < sdfLast; ++index) {\n      unpackSdfArray(sdfTexture, index, flags, center, quaternion, scale, sizes, numValues, values);\n      uint sdfType = flags & SDF_FLAG_TYPE;\n      vec3 sdfPos = quatVec(quaternion, pos * scale) + center;\n\n      float distance;\n      switch (sdfType) {\n        case SDF_TYPE_ALL:\n          distance = -1.0 / 0.0;\n          break;\n        case SDF_TYPE_PLANE: {\n          distance = sdfPos.z;\n          break;\n        }\n        case SDF_TYPE_SPHERE: {\n          distance = length(sdfPos) - sizes.w;\n          break;\n        }\n        case SDF_TYPE_BOX: {\n          vec3 q = abs(sdfPos) - sizes.xyz + sizes.w;\n          distance = length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0) - sizes.w;\n          break;\n        }\n        case SDF_TYPE_ELLIPSOID: {\n          vec3 sizes = sizes.xyz;\n          float k0 = length(sdfPos / sizes);\n          float k1 = length(sdfPos / dot(sizes, sizes));\n          distance = k0 * (k0 - 1.0) / k1;\n          break;\n        }\n        case SDF_TYPE_CYLINDER: {\n          vec2 d = abs(vec2(length(sdfPos.xz), sdfPos.y)) - sizes.wy;\n          distance = min(max(d.x, d.y), 0.0) + length(max(d, 0.0));\n          break;\n        }\n        case SDF_TYPE_CAPSULE: {\n          sdfPos.y -= clamp(sdfPos.y, -0.5 * sizes.y, 0.5 * sizes.y);\n          distance = length(sdfPos) - sizes.w;\n          break;\n        }\n        case SDF_TYPE_INFINITE_CONE: {\n          float angle = 0.25 * PI * sizes.w;\n          vec2 c = vec2(sin(angle), cos(angle));\n          vec2 q = vec2(length(sdfPos.xy), -sdfPos.z);\n          float d = length(q - c * max(dot(q, c), 0.0));\n          distance = d * (((q.x * c.y - q.y * c.x) < 0.0) ? -1.0 : 1.0);\n          break;\n        }\n      }\n\n      if ((flags & SDF_FLAG_INVERT) != 0u) {\n        distance = -distance;\n      }\n\n      if (smoothK == 0.0) {\n        if (distance < distanceAccum) {\n          distanceAccum = distance;\n          for (int i = 0; i < numValues; ++i) {\n            outValues[i] = values[i];\n          }\n        }\n      } else {\n        float scaledDistance = -distance / smoothK;\n        if (scaledDistance > maxExp) {\n          float scale = exp(maxExp - scaledDistance);\n          distanceAccum *= scale;\n          for (int i = 0; i < numValues; ++i) {\n            outValues[i] *= scale;\n          }\n          maxExp = scaledDistance;\n        }\n\n        float weight = exp(scaledDistance - maxExp);\n        distanceAccum += weight;\n        for (int i = 0; i < numValues; ++i) {\n          outValues[i] += weight * values[i];\n        }\n      }\n    }\n\n    if (smoothK == 0.0) {\n      return distanceAccum;\n    } else {\n      // Very distant SDFs may result in 0 accumulation\n      if (distanceAccum == 0.0) {\n        return 1.0 / 0.0;\n      }\n      for (int i = 0; i < numValues; ++i) {\n        outValues[i] /= distanceAccum;\n      }\n      return (-log(distanceAccum) - maxExp) * smoothK;\n    }\n  }\n\n  float modulateSdfArray(\n    usampler2D sdfTexture, int numSdfs, int sdfFirst, int sdfCount, vec3 pos,\n    float smoothK, int numValues, out vec4 values[4],\n    float softEdge, bool invert\n  ) {\n    float distance = evaluateSdfArray(sdfTexture, numSdfs, sdfFirst, sdfCount, pos, smoothK, numValues, values);\n    if (invert) {\n      distance = -distance;\n    }\n\n    return (softEdge == 0.0) ? ((distance < 0.0) ? 1.0 : 0.0)\n      : clamp(-distance / softEdge + 0.5, 0.0, 1.0);\n  }\n`);\n\nexport const defineEdit = unindent(`\n  const uint EDIT_FLAG_BLEND = 0xFFu;\n  const uint EDIT_BLEND_MULTIPLY = 0u;\n  const uint EDIT_BLEND_SET_RGB = 1u;\n  const uint EDIT_BLEND_ADD_RGBA = 2u;\n  const uint EDIT_FLAG_INVERT = 0x100u;\n\n  void decodeEdit(\n    uvec4 packedEdit, out int sdfFirst, out int sdfCount,\n    out bool invert, out uint rgbaBlendMode, out float softEdge, out float sdfSmooth\n  ) {\n    rgbaBlendMode = packedEdit.x & EDIT_FLAG_BLEND;\n    invert = (packedEdit.x & EDIT_FLAG_INVERT) != 0u;\n\n    sdfFirst = int(packedEdit.y & 0xFFFFu);\n    sdfCount = int(packedEdit.y >> 16u);\n\n    softEdge = uintBitsToFloat(packedEdit.z);\n    sdfSmooth = uintBitsToFloat(packedEdit.w);\n  }\n\n  void applyRgbaDisplaceEdit(\n    usampler2D sdfTexture, int numSdfs, int sdfFirst, int sdfCount, inout vec3 pos,\n    float smoothK, float softEdge, bool invert, uint rgbaBlendMode, inout vec4 rgba\n  ) {\n    vec4 values[4];\n    float modulate = modulateSdfArray(sdfTexture, numSdfs, sdfFirst, sdfCount, pos, smoothK, 2, values, softEdge, invert);\n    // On Android, moving values[0] is necessary to work around a compiler bug.\n    vec4 sdfRgba = values[0];\n    vec4 sdfDisplaceScale = values[1];\n\n    vec4 target;\n    switch (rgbaBlendMode) {\n      case EDIT_BLEND_MULTIPLY:\n        target = rgba * sdfRgba;\n        break;\n      case EDIT_BLEND_SET_RGB:\n        target = vec4(sdfRgba.rgb, rgba.a * sdfRgba.a);\n        break;\n      case EDIT_BLEND_ADD_RGBA:\n        target = rgba + sdfRgba;\n        break;\n      default:\n        // Debug output if blend mode not set\n        target = vec4(fract(pos), 1.0);\n    }\n    rgba = mix(rgba, target, modulate);\n    pos += sdfDisplaceScale.xyz * modulate;\n  }\n\n  void applyPackedRgbaDisplaceEdit(uvec4 packedEdit, usampler2D sdfTexture, int numSdfs, inout vec3 pos, inout vec4 rgba) {\n    int sdfFirst, sdfCount;\n    bool invert;\n    uint rgbaBlendMode;\n    float softEdge, sdfSmooth;\n    decodeEdit(packedEdit, sdfFirst, sdfCount, invert, rgbaBlendMode, softEdge, sdfSmooth);\n    applyRgbaDisplaceEdit(sdfTexture, numSdfs, sdfFirst, sdfCount, pos, sdfSmooth, softEdge, invert, rgbaBlendMode, rgba);\n  }\n`);\n\nfunction applyGsplatRgbaDisplaceEdits(\n  gsplat: DynoVal<typeof Gsplat>,\n  sdfArray: DynoVal<typeof SdfArray>,\n  numEdits: DynoVal<\"int\">,\n  rgbaDisplaceEdits: DynoVal<\"uvec4\">,\n): DynoVal<typeof Gsplat> {\n  const dyno = new Dyno<\n    {\n      gsplat: typeof Gsplat;\n      sdfArray: typeof SdfArray;\n      numEdits: \"int\";\n      rgbaDisplaceEdits: \"uvec4\";\n    },\n    { gsplat: typeof Gsplat }\n  >({\n    inTypes: {\n      gsplat: Gsplat,\n      sdfArray: SdfArray,\n      numEdits: \"int\",\n      rgbaDisplaceEdits: \"uvec4\",\n    },\n    outTypes: { gsplat: Gsplat },\n    globals: () => [defineSdfArray, defineEdit],\n    inputs: { gsplat, sdfArray, numEdits, rgbaDisplaceEdits },\n    statements: ({ inputs, outputs }) => {\n      const { sdfArray, numEdits, rgbaDisplaceEdits } = inputs;\n      const { gsplat } = outputs;\n      return unindentLines(`\n        ${gsplat} = ${inputs.gsplat};\n        if (isGsplatActive(${gsplat}.flags)) {\n          for (int editIndex = 0; editIndex < ${numEdits}; ++editIndex) {\n            applyPackedRgbaDisplaceEdit(\n              ${rgbaDisplaceEdits}[editIndex], ${sdfArray}.sdfTexture, ${sdfArray}.numSdfs,\n              ${gsplat}.center, ${gsplat}.rgba\n            );\n          }\n        }\n      `);\n    },\n  });\n  return dyno.outputs.gsplat;\n}\n\nconst tempFloat32 = new Float32Array(1);\n","import * as THREE from \"three\";\nimport type { SplatEdit } from \"./SplatEdit\";\nimport {\n  type Dyno,\n  DynoFloat,\n  type DynoVal,\n  DynoVec3,\n  DynoVec4,\n  Gsplat,\n  dynoBlock,\n  transformDir,\n  transformGsplat,\n  transformPos,\n} from \"./dyno\";\n\n// A GsplatGenerator is a dyno program that maps an index to a Gsplat's properties\n\nexport type GsplatGenerator = Dyno<{ index: \"int\" }, { gsplat: typeof Gsplat }>;\n\n// A GsplatModifier is a dyno program that inputs a Gsplat, modifies, and outputs it\n\nexport type GsplatModifier = Dyno<\n  { gsplat: typeof Gsplat },\n  { gsplat: typeof Gsplat }\n>;\n\n// A SplatModifier is a utility class to apply a GsplatModifier to\n// a GsplatGenerator pipeline, caching the combined result for efficiency.\n\nexport class SplatModifier {\n  modifier: GsplatModifier;\n  cache: Map<GsplatGenerator, GsplatGenerator>;\n\n  constructor(modifier: GsplatModifier) {\n    this.modifier = modifier;\n    this.cache = new Map();\n  }\n\n  apply(generator: GsplatGenerator): GsplatGenerator {\n    let modified = this.cache.get(generator);\n    if (!modified) {\n      modified = dynoBlock(\n        { index: \"int\" },\n        { gsplat: Gsplat },\n        ({ index }) => {\n          const { gsplat } = generator.apply({ index });\n          return this.modifier.apply({ gsplat });\n        },\n      );\n      this.cache.set(generator, modified);\n    }\n    return modified;\n  }\n}\n\n// A SplatTransformer is a utility class to apply a transform to a Gsplat\n// via a scale, rotation, and translation. Scale is a single float because\n// anisotropic scaling of Gsplats is not supported.\n\nexport class SplatTransformer {\n  scale: DynoFloat;\n  rotate: DynoVec4<THREE.Quaternion>;\n  translate: DynoVec3<THREE.Vector3>;\n\n  // Create the dyno uniforms that parameterize the transform, setting them\n  // to initial values that are different from any valid transform.\n  constructor() {\n    this.scale = new DynoFloat({ value: Number.NEGATIVE_INFINITY });\n    this.rotate = new DynoVec4({\n      value: new THREE.Quaternion(\n        Number.POSITIVE_INFINITY,\n        Number.POSITIVE_INFINITY,\n        Number.POSITIVE_INFINITY,\n        Number.POSITIVE_INFINITY,\n      ),\n    });\n    this.translate = new DynoVec3({\n      value: new THREE.Vector3(\n        Number.POSITIVE_INFINITY,\n        Number.POSITIVE_INFINITY,\n        Number.POSITIVE_INFINITY,\n      ),\n    });\n  }\n\n  // Apply the transform to a Vec3 position in a dyno program.\n  apply(position: DynoVal<\"vec3\">): DynoVal<\"vec3\"> {\n    return transformPos(position, {\n      scale: this.scale,\n      rotate: this.rotate,\n      translate: this.translate,\n    });\n  }\n\n  applyDir(dir: DynoVal<\"vec3\">): DynoVal<\"vec3\"> {\n    return transformDir(dir, {\n      rotate: this.rotate,\n    });\n  }\n\n  // Apply the transform to a Gsplat in a dyno program.\n  applyGsplat(gsplat: DynoVal<typeof Gsplat>): DynoVal<typeof Gsplat> {\n    return transformGsplat(gsplat, {\n      scale: this.scale,\n      rotate: this.rotate,\n      translate: this.translate,\n    });\n  }\n\n  // Update the uniforms to match the given transform matrix.\n  updateFromMatrix(transform: THREE.Matrix4) {\n    const scale = new THREE.Vector3();\n    const quaternion = new THREE.Quaternion();\n    const position = new THREE.Vector3();\n    transform.decompose(position, quaternion, scale);\n    const newScale = (scale.x + scale.y + scale.z) / 3;\n\n    let updated = false;\n    if (newScale !== this.scale.value) {\n      this.scale.value = newScale;\n      updated = true;\n    }\n    if (!position.equals(this.translate.value)) {\n      this.translate.value.copy(position);\n      updated = true;\n    }\n    if (!quaternion.equals(this.rotate.value)) {\n      this.rotate.value.copy(quaternion);\n      updated = true;\n    }\n    return updated;\n  }\n\n  // Update this transform to match the object's to-world transform.\n  update(object: THREE.Object3D): boolean {\n    object.updateMatrixWorld();\n    return this.updateFromMatrix(object.matrixWorld);\n  }\n}\n\n// SplatGenerator is an Object3D that can be placed anywhere in the scene\n// to generate Gsplats into the world for SparkRenderer. All Gsplats from\n// SplatGenerators across the scene will be accumulated into a single\n// SplatAccumulator, which are sorted and rendered together.\n//\n// Each SplatGenerator has two main properties:\n// - numSplats: the number of Gsplats to generate\n// - generator: a GsplatGenerator dyno program that maps a splat index\n//   to a Gsplat's properties\n// Each of these properties can be changed at anytime, however changing\n// numSplats means we no longer have a correspondence between Gsplats\n// in successive frames, meaning we can't reuse the previous Gsplat sort\n// order. Similarly, changing the generator requires re-generating the\n// shader program, which will trigger a GPU shader compilation the first\n// time (possibly a perceptible \"hickup\" in the framerate) but is cached\n// subsequence times if the generator is the same as one that was used previously.\n//\n// A SplatGenerator also has a custom frameUpdate function that is called\n// on each execution, allowing you to update uniforms or other parameters that\n// affect the generation. If the Gsplats are changed, you must call\n// updateVersion() (alternatively, set needsUpdate to true) to trigger a\n// re-generation of the Gsplats for this SplatGenerator.\n\nexport class SplatGenerator extends THREE.Object3D {\n  numSplats: number;\n  generator?: GsplatGenerator;\n  generatorError?: unknown;\n  frameUpdate?: ({\n    object,\n    time,\n    deltaTime,\n    viewToWorld,\n    globalEdits,\n  }: {\n    object: SplatGenerator;\n    time: number;\n    deltaTime: number;\n    viewToWorld: THREE.Matrix4;\n    globalEdits: SplatEdit[];\n  }) => void;\n  version: number;\n\n  constructor({\n    numSplats,\n    generator,\n    construct,\n    update,\n  }: {\n    numSplats?: number;\n    generator?: GsplatGenerator;\n    construct?: (object: SplatGenerator) => {\n      generator?: GsplatGenerator;\n      numSplats?: number;\n      frameUpdate?: (object: SplatGenerator) => void;\n    };\n    update?: ({\n      object,\n      time,\n      deltaTime,\n      viewToWorld,\n      globalEdits,\n    }: {\n      object: SplatGenerator;\n      time: number;\n      deltaTime: number;\n      viewToWorld: THREE.Matrix4;\n      globalEdits: SplatEdit[];\n    }) => void;\n  }) {\n    super();\n\n    this.numSplats = numSplats ?? 0;\n    this.generator = generator;\n    this.frameUpdate = update;\n    this.version = 0;\n\n    if (construct) {\n      const constructed = construct(this);\n      // If we returned something, update our properties\n      Object.assign(this, constructed);\n    }\n  }\n\n  updateVersion() {\n    this.version += 1;\n  }\n\n  set needsUpdate(value: boolean) {\n    if (value) {\n      this.updateVersion();\n    }\n  }\n}\n","import * as THREE from \"three\";\n\nimport init_wasm, { raycast_splats } from \"spark-internal-rs\";\nimport {\n  DEFAULT_SPLAT_ENCODING,\n  PackedSplats,\n  type SplatEncoding,\n} from \"./PackedSplats\";\nimport { type RgbaArray, readRgbaArray } from \"./RgbaArray\";\nimport { SplatEdit, SplatEditSdf, SplatEdits } from \"./SplatEdit\";\nimport {\n  type GsplatModifier,\n  SplatGenerator,\n  SplatTransformer,\n} from \"./SplatGenerator\";\nimport type { SplatFileType } from \"./SplatLoader\";\nimport type { SplatSkinning } from \"./SplatSkinning\";\nimport { LN_SCALE_MAX, LN_SCALE_MIN } from \"./defines\";\nimport {\n  DynoFloat,\n  DynoUsampler2DArray,\n  type DynoVal,\n  DynoVec4,\n  Gsplat,\n  add,\n  combineGsplat,\n  defineGsplat,\n  dyno,\n  dynoBlock,\n  dynoConst,\n  extendVec,\n  mul,\n  normalize,\n  readPackedSplat,\n  split,\n  splitGsplat,\n  sub,\n  unindent,\n  unindentLines,\n} from \"./dyno\";\nimport { getTextureSize } from \"./utils\";\n\nexport type SplatMeshOptions = {\n  // URL to fetch a Gaussian splat file from(supports .ply, .splat, .ksplat,\n  // .spz formats). (default: undefined)\n  url?: string;\n  // Raw bytes of a Gaussian splat file to decode directly instead of fetching\n  // from URL. (default: undefined)\n  fileBytes?: Uint8Array | ArrayBuffer;\n  // Override the file type detection for formats that can't be reliably\n  // auto-detected (.splat, .ksplat). (default: undefined auto-detects other\n  // formats from file contents)\n  fileType?: SplatFileType;\n  // File name to use for type detection. (default: undefined)\n  fileName?: string;\n  // Use an existing PackedSplats object as the source instead of loading from\n  // a file. Can be used to share a collection of Gsplats among multiple SplatMeshes\n  // (default: undefined creates a new empty PackedSplats or decoded from a\n  // data source above)\n  packedSplats?: PackedSplats;\n  // Reserve space for at least this many splats when constructing the mesh\n  // initially. (default: determined by file)\n  maxSplats?: number;\n  // Callback function to programmatically create splats at initialization\n  // in provided PackedSplats. (default: undefined)\n  constructSplats?: (splats: PackedSplats) => Promise<void> | void;\n  // Callback function that is called when mesh initialization is complete.\n  // (default: undefined)\n  onLoad?: (mesh: SplatMesh) => Promise<void> | void;\n  // Controls whether SplatEdits have any effect on this mesh. (default: true)\n  editable?: boolean;\n  // Callback function that is called every frame to update the mesh.\n  // Call mesh.updateVersion() if splats need to be regenerated due to some change.\n  // Calling updateVersion() is not necessary for object transformations, recoloring,\n  // or opacity adjustments as these are auto-detected. (default: undefined)\n  onFrame?: ({\n    mesh,\n    time,\n    deltaTime,\n  }: { mesh: SplatMesh; time: number; deltaTime: number }) => void;\n  // Gsplat modifier to apply in object-space before any transformations.\n  // A GsplatModifier is a dyno shader-graph block that transforms an input\n  // gsplat: DynoVal<Gsplat> to an output gsplat: DynoVal<Gsplat> with gsplat.center\n  // coordinate in object-space. (default: undefined)\n  objectModifier?: GsplatModifier;\n  // Gsplat modifier to apply in world-space after transformations.\n  // (default: undefined)\n  worldModifier?: GsplatModifier;\n  // Override the default splat encoding ranges for the PackedSplats.\n  // (default: undefined)\n  splatEncoding?: SplatEncoding;\n};\n\nexport type SplatMeshContext = {\n  transform: SplatTransformer;\n  viewToWorld: SplatTransformer;\n  worldToView: SplatTransformer;\n  viewToObject: SplatTransformer;\n  recolor: DynoVec4<THREE.Vector4>;\n  time: DynoFloat;\n  deltaTime: DynoFloat;\n};\n\nexport class SplatMesh extends SplatGenerator {\n  // A Promise<SplatMesh> you can await to ensure fetching, parsing,\n  // and initialization has completed\n  initialized: Promise<SplatMesh>;\n  // A boolean indicating whether initialization is complete\n  isInitialized = false;\n\n  // If you modify packedSplats you should set\n  // splatMesh.packedSplats.needsUpdate = true to signal to Three.js that it\n  // should re-upload the data to the underlying texture. Use this sparingly with\n  // objects with smaller Gsplat counts as it requires a CPU-GPU data transfer for\n  // each frame. Thousands to tens of thousands of Gsplats ir fine. (See hands.ts\n  // for an example of rendering \"Gsplat hands\" in WebXR using this technique.)\n  packedSplats: PackedSplats;\n\n  // A THREE.Color that can be used to tint all splats in the mesh.\n  // (default: new THREE.Color(1, 1, 1))\n  recolor: THREE.Color = new THREE.Color(1, 1, 1);\n  // Global opacity multiplier for all splats in the mesh. (default: 1)\n  opacity = 1;\n\n  // A SplatMeshContext consisting of useful scene and object dyno uniforms that can\n  // be used to in the Gsplat processing pipeline, for example via objectModifier and\n  // worldModifier. (created on construction)\n  context: SplatMeshContext;\n  onFrame?: ({\n    mesh,\n    time,\n    deltaTime,\n  }: { mesh: SplatMesh; time: number; deltaTime: number }) => void;\n\n  objectModifier?: GsplatModifier;\n  worldModifier?: GsplatModifier;\n  // Set to true to have the viewToObject property in context be updated each frame.\n  // If the mesh has extra.sh1 (first order spherical harmonics directional lighting)\n  // this property will always be updated. (default: false)\n  enableViewToObject = false;\n  // Set to true to have context.viewToWorld updated each frame. (default: false)\n  enableViewToWorld = false;\n  // Set to true to have context.worldToView updated each frame. (default: false)\n  enableWorldToView = false;\n\n  // Optional SplatSkinning instance for animating splats with dual-quaternion\n  // skeletal animation. (default: null)\n  skinning: SplatSkinning | null = null;\n\n  // Optional list of SplatEdits to apply to the mesh. If null, any SplatEdit\n  // children in the scene graph will be added automatically. (default: null)\n  edits: SplatEdit[] | null = null;\n  editable: boolean;\n  // Compiled SplatEdits for applying SDF edits to splat RGBA + centers\n  private rgbaDisplaceEdits: SplatEdits | null = null;\n  // Optional RgbaArray to overwrite splat RGBA values with custom values.\n  // Useful for \"baking\" RGB and opacity edits into the SplatMesh. (default: null)\n  splatRgba: RgbaArray | null = null;\n\n  // Maximum Spherical Harmonics level to use. Call updateGenerator()\n  // after changing. (default: 3)\n  maxSh = 3;\n\n  constructor(options: SplatMeshOptions = {}) {\n    const transform = new SplatTransformer();\n    const viewToWorld = new SplatTransformer();\n    const worldToView = new SplatTransformer();\n    const viewToObject = new SplatTransformer();\n    const recolor = new DynoVec4({\n      value: new THREE.Vector4(\n        Number.NEGATIVE_INFINITY,\n        Number.NEGATIVE_INFINITY,\n        Number.NEGATIVE_INFINITY,\n        Number.NEGATIVE_INFINITY,\n      ),\n    });\n    const time = new DynoFloat({ value: 0 });\n    const deltaTime = new DynoFloat({ value: 0 });\n    const context = {\n      transform,\n      viewToWorld,\n      worldToView,\n      viewToObject,\n      recolor,\n      time,\n      deltaTime,\n    };\n\n    super({\n      update: ({ time, deltaTime, viewToWorld, globalEdits }) =>\n        this.update({ time, deltaTime, viewToWorld, globalEdits }),\n    });\n\n    this.packedSplats = options.packedSplats ?? new PackedSplats();\n    this.packedSplats.splatEncoding = options.splatEncoding ?? {\n      ...DEFAULT_SPLAT_ENCODING,\n    };\n    this.numSplats = this.packedSplats.numSplats;\n    this.editable = options.editable ?? true;\n    this.onFrame = options.onFrame;\n\n    this.context = context;\n    this.objectModifier = options.objectModifier;\n    this.worldModifier = options.worldModifier;\n\n    this.updateGenerator();\n\n    if (\n      options.url ||\n      options.fileBytes ||\n      options.constructSplats ||\n      (options.packedSplats && !options.packedSplats.isInitialized)\n    ) {\n      // We need to initialize asynchronously given the options\n      this.initialized = this.asyncInitialize(options).then(async () => {\n        this.updateGenerator();\n\n        this.isInitialized = true;\n        if (options.onLoad) {\n          const maybePromise = options.onLoad(this);\n          if (maybePromise instanceof Promise) {\n            await maybePromise;\n          }\n        }\n        return this;\n      });\n    } else {\n      this.isInitialized = true;\n      this.initialized = Promise.resolve(this);\n      if (options.onLoad) {\n        const maybePromise = options.onLoad(this);\n        // If onLoad returns a promise, wait for it to complete\n        if (maybePromise instanceof Promise) {\n          this.initialized = maybePromise.then(() => this);\n        }\n      }\n    }\n  }\n\n  async asyncInitialize(options: SplatMeshOptions) {\n    const {\n      url,\n      fileBytes,\n      fileType,\n      fileName,\n      maxSplats,\n      constructSplats,\n      splatEncoding,\n    } = options;\n    if (url || fileBytes || constructSplats) {\n      const packedSplatsOptions = {\n        url,\n        fileBytes,\n        fileType,\n        fileName,\n        maxSplats,\n        construct: constructSplats,\n        splatEncoding,\n      };\n      this.packedSplats.reinitialize(packedSplatsOptions);\n    }\n    if (this.packedSplats) {\n      await this.packedSplats.initialized;\n      this.numSplats = this.packedSplats.numSplats;\n      this.updateGenerator();\n    }\n  }\n\n  static staticInitialized = SplatMesh.staticInitialize();\n  static isStaticInitialized = false;\n\n  static dynoTime = new DynoFloat({ value: 0 });\n\n  static async staticInitialize() {\n    await init_wasm();\n    SplatMesh.isStaticInitialized = true;\n  }\n\n  // Creates a new Gsplat with the provided parameters (all values in \"float\" space,\n  // i.e. 0-1 for opacity and color) and adds it to the end of the packedSplats,\n  // increasing numSplats by 1. If necessary, reallocates the buffer with an exponential\n  // doubling strategy to fit the new data, so it's fairly efficient to just\n  // pushSplat(...) each Gsplat you want to create in a loop.\n  pushSplat(\n    center: THREE.Vector3,\n    scales: THREE.Vector3,\n    quaternion: THREE.Quaternion,\n    opacity: number,\n    color: THREE.Color,\n  ) {\n    this.packedSplats.pushSplat(center, scales, quaternion, opacity, color);\n  }\n\n  // This method iterates over all Gsplats in this instance's packedSplats,\n  // invoking the provided callback with index: number in 0..=(this.numSplats-1) and\n  // center: THREE.Vector3, scales: THREE.Vector3, quaternion: THREE.Quaternion,\n  // opacity: number (0..1), and color: THREE.Color (rgb values in 0..1).\n  // Note that the objects passed in as center etc. are the same for every callback\n  // invocation: these objects are reused for efficiency. Changing these values has\n  // no effect as they are decoded/unpacked copies of the underlying data. To update\n  // the packedSplats, call .packedSplats.setSplat(index, center, scales,\n  // quaternion, opacity, color).\n  forEachSplat(\n    callback: (\n      index: number,\n      center: THREE.Vector3,\n      scales: THREE.Vector3,\n      quaternion: THREE.Quaternion,\n      opacity: number,\n      color: THREE.Color,\n    ) => void,\n  ) {\n    this.packedSplats.forEachSplat(callback);\n  }\n\n  // Call this when you are finished with the SplatMesh and want to free\n  // any buffers it holds (via packedSplats).\n  dispose() {\n    this.packedSplats.dispose();\n  }\n\n  constructGenerator(context: SplatMeshContext) {\n    const { transform, viewToObject, recolor } = context;\n    const generator = dynoBlock(\n      { index: \"int\" },\n      { gsplat: Gsplat },\n      ({ index }) => {\n        if (!index) {\n          throw new Error(\"index is undefined\");\n        }\n        // Read a Gsplat from the PackedSplats template\n        let gsplat = readPackedSplat(this.packedSplats.dyno, index);\n\n        if (this.maxSh >= 1) {\n          // Inject lighting from SH1..SH3\n          const { sh1Texture, sh2Texture, sh3Texture } =\n            this.ensureShTextures();\n          if (sh1Texture) {\n            //Calculate view direction in object space\n            const viewCenterInObject = viewToObject.translate;\n            const { center } = splitGsplat(gsplat).outputs;\n            const viewDir = normalize(sub(center, viewCenterInObject));\n\n            function rescaleSh(\n              sNorm: DynoVal<\"vec3\">,\n              minMax: DynoVal<\"vec2\">,\n            ) {\n              const { x: min, y: max } = split(minMax).outputs;\n              const mid = mul(add(min, max), dynoConst(\"float\", 0.5));\n              const scale = mul(sub(max, min), dynoConst(\"float\", 0.5));\n              return add(mid, mul(sNorm, scale));\n            }\n\n            // Evaluate Spherical Harmonics\n            const sh1Snorm = evaluateSH1(gsplat, sh1Texture, viewDir);\n            let rgb = rescaleSh(sh1Snorm, this.packedSplats.dynoSh1MinMax);\n            if (this.maxSh >= 2 && sh2Texture) {\n              const sh2Snorm = evaluateSH2(gsplat, sh2Texture, viewDir);\n              rgb = add(\n                rgb,\n                rescaleSh(sh2Snorm, this.packedSplats.dynoSh2MinMax),\n              );\n            }\n            if (this.maxSh >= 3 && sh3Texture) {\n              const sh3Snorm = evaluateSH3(gsplat, sh3Texture, viewDir);\n              rgb = add(\n                rgb,\n                rescaleSh(sh3Snorm, this.packedSplats.dynoSh3MinMax),\n              );\n            }\n\n            // Flash off for 0.3 / 1.0 sec for debugging\n            // const fractTime = fract(SplatMesh.dynoTime);\n            // const lessThan05 = lessThan(fractTime, dynoConst(\"float\", 0.3));\n            // rgb = select(lessThan05, dynoConst(\"vec3\", new THREE.Vector3()), rgb);\n\n            // Add SH lighting to RGBA\n            let { rgba } = splitGsplat(gsplat).outputs;\n            rgba = add(rgba, extendVec(rgb, dynoConst(\"float\", 0.0)));\n            gsplat = combineGsplat({ gsplat, rgba });\n          }\n        }\n\n        if (this.splatRgba) {\n          // Overwrite RGBA with baked RGBA values\n          const rgba = readRgbaArray(this.splatRgba.dyno, index);\n          gsplat = combineGsplat({ gsplat, rgba });\n        }\n\n        if (this.skinning) {\n          // Transform according to bones + skinning weights\n          gsplat = this.skinning.modify(gsplat);\n        }\n\n        if (this.objectModifier) {\n          // Inject object-space Gsplat modifier dyno\n          gsplat = this.objectModifier.apply({ gsplat }).gsplat;\n        }\n\n        // Transform from object to world-space\n        gsplat = transform.applyGsplat(gsplat);\n\n        // Apply any global recoloring and opacity\n        const recolorRgba = mul(recolor, splitGsplat(gsplat).outputs.rgba);\n        gsplat = combineGsplat({ gsplat, rgba: recolorRgba });\n\n        if (this.rgbaDisplaceEdits) {\n          // Apply RGBA edit layer SDFs\n          gsplat = this.rgbaDisplaceEdits.modify(gsplat);\n        }\n        if (this.worldModifier) {\n          // Inject world-space Gsplat modifier dyno\n          gsplat = this.worldModifier.apply({ gsplat }).gsplat;\n        }\n\n        // We're done! Output resulting Gsplat\n        return { gsplat };\n      },\n    );\n    this.generator = generator;\n  }\n\n  // Call this whenever something changes in the Gsplat processing pipeline,\n  // for example changing maxSh or updating objectModifier or worldModifier.\n  // Compiled generators are cached for efficiency and re-use when the same\n  // pipeline structure emerges after successive changes.\n  updateGenerator() {\n    this.constructGenerator(this.context);\n  }\n\n  // This is called automatically by SparkRenderer and you should not have to\n  // call it. It updates parameters for the generated pipeline and calls\n  // updateGenerator() if the pipeline needs to change.\n  update({\n    time,\n    viewToWorld,\n    deltaTime,\n    globalEdits,\n  }: {\n    time: number;\n    viewToWorld: THREE.Matrix4;\n    deltaTime: number;\n    globalEdits: SplatEdit[];\n  }) {\n    this.numSplats = this.packedSplats.numSplats;\n    this.context.time.value = time;\n    this.context.deltaTime.value = deltaTime;\n    SplatMesh.dynoTime.value = time;\n\n    const { transform, viewToObject, recolor } = this.context;\n    let updated = transform.update(this);\n\n    if (\n      this.context.viewToWorld.updateFromMatrix(viewToWorld) &&\n      this.enableViewToWorld\n    ) {\n      updated = true;\n    }\n    const worldToView = viewToWorld.clone().invert();\n    if (\n      this.context.worldToView.updateFromMatrix(worldToView) &&\n      this.enableWorldToView\n    ) {\n      updated = true;\n    }\n\n    const objectToWorld = new THREE.Matrix4().compose(\n      transform.translate.value,\n      transform.rotate.value,\n      new THREE.Vector3().setScalar(transform.scale.value),\n    );\n    const worldToObject = objectToWorld.invert();\n    const viewToObjectMatrix = worldToObject.multiply(viewToWorld);\n    if (\n      viewToObject.updateFromMatrix(viewToObjectMatrix) &&\n      (this.enableViewToObject || this.packedSplats.extra.sh1)\n    ) {\n      // Only trigger update if we have view-dependent spherical harmonics\n      updated = true;\n    }\n\n    const newRecolor = new THREE.Vector4(\n      this.recolor.r,\n      this.recolor.g,\n      this.recolor.b,\n      this.opacity,\n    );\n    if (!newRecolor.equals(recolor.value)) {\n      recolor.value.copy(newRecolor);\n      updated = true;\n    }\n\n    const edits = this.editable ? (this.edits ?? []).concat(globalEdits) : [];\n    if (this.editable && !this.edits) {\n      // If we haven't set any explicit edits, add any child SplatEdits\n      this.traverseVisible((node) => {\n        if (node instanceof SplatEdit) {\n          edits.push(node);\n        }\n      });\n    }\n\n    edits.sort((a, b) => a.ordering - b.ordering);\n    const editsSdfs = edits.map((edit) => {\n      if (edit.sdfs != null) {\n        return { edit, sdfs: edit.sdfs };\n      }\n      const sdfs: SplatEditSdf[] = [];\n      edit.traverseVisible((node) => {\n        if (node instanceof SplatEditSdf) {\n          sdfs.push(node);\n        }\n      });\n      return { edit, sdfs };\n    });\n\n    if (editsSdfs.length > 0 && !this.rgbaDisplaceEdits) {\n      const edits = editsSdfs.length;\n      const sdfs = editsSdfs.reduce(\n        (total, edit) => total + edit.sdfs.length,\n        0,\n      );\n      this.rgbaDisplaceEdits = new SplatEdits({\n        maxEdits: edits,\n        maxSdfs: sdfs,\n      });\n      this.updateGenerator();\n    }\n    if (this.rgbaDisplaceEdits) {\n      const editResult = this.rgbaDisplaceEdits.update(editsSdfs);\n      updated ||= editResult.updated;\n      if (editResult.dynoUpdated) {\n        this.updateGenerator();\n      }\n    }\n\n    if (updated) {\n      this.updateVersion();\n    }\n\n    this.onFrame?.({ mesh: this, time, deltaTime });\n  }\n\n  // This method conforms to the standard THREE.Raycaster API, performing object-ray\n  // intersections using this method to populate the provided intersects[] array\n  // with each intersection point.\n  raycast(\n    raycaster: THREE.Raycaster,\n    intersects: {\n      distance: number;\n      point: THREE.Vector3;\n      object: THREE.Object3D;\n    }[],\n  ) {\n    if (!this.packedSplats.packedArray || !this.packedSplats.numSplats) {\n      return;\n    }\n\n    const { near, far, ray } = raycaster;\n    const worldToMesh = this.matrixWorld.clone().invert();\n    const worldToMeshRot = new THREE.Matrix3().setFromMatrix4(worldToMesh);\n    const origin = ray.origin.clone().applyMatrix4(worldToMesh);\n    const direction = ray.direction.clone().applyMatrix3(worldToMeshRot);\n    const scales = new THREE.Vector3();\n    worldToMesh.decompose(new THREE.Vector3(), new THREE.Quaternion(), scales);\n    const scale = (scales.x * scales.y * scales.z) ** (1.0 / 3.0);\n\n    const RAYCAST_ELLIPSOID = true;\n    const distances = raycast_splats(\n      origin.x,\n      origin.y,\n      origin.z,\n      direction.x,\n      direction.y,\n      direction.z,\n      near,\n      far,\n      this.packedSplats.numSplats,\n      this.packedSplats.packedArray,\n      RAYCAST_ELLIPSOID,\n      this.packedSplats.splatEncoding?.lnScaleMin ?? LN_SCALE_MIN,\n      this.packedSplats.splatEncoding?.lnScaleMax ?? LN_SCALE_MAX,\n    );\n\n    for (const distance of distances) {\n      const point = ray.direction\n        .clone()\n        .multiplyScalar(distance)\n        .add(ray.origin);\n      intersects.push({\n        distance,\n        point,\n        object: this,\n      });\n    }\n  }\n\n  private ensureShTextures(): {\n    sh1Texture?: DynoUsampler2DArray<\"sh1\", THREE.DataArrayTexture>;\n    sh2Texture?: DynoUsampler2DArray<\"sh2\", THREE.DataArrayTexture>;\n    sh3Texture?: DynoUsampler2DArray<\"sh3\", THREE.DataArrayTexture>;\n  } {\n    // Ensure we have textures for SH1..SH3 if we have data\n    if (!this.packedSplats.extra.sh1) {\n      return {};\n    }\n\n    let sh1Texture = this.packedSplats.extra.sh1Texture as\n      | DynoUsampler2DArray<\"sh1\", THREE.DataArrayTexture>\n      | undefined;\n    if (!sh1Texture) {\n      let sh1 = this.packedSplats.extra.sh1 as Uint32Array;\n      const { width, height, depth, maxSplats } = getTextureSize(\n        sh1.length / 2,\n      );\n      if (sh1.length < maxSplats * 2) {\n        const newSh1 = new Uint32Array(maxSplats * 2);\n        newSh1.set(sh1);\n        this.packedSplats.extra.sh1 = newSh1;\n        sh1 = newSh1;\n      }\n\n      const texture = new THREE.DataArrayTexture(sh1, width, height, depth);\n      texture.format = THREE.RGIntegerFormat;\n      texture.type = THREE.UnsignedIntType;\n      texture.internalFormat = \"RG32UI\";\n      texture.needsUpdate = true;\n\n      sh1Texture = new DynoUsampler2DArray({\n        value: texture,\n        key: \"sh1\",\n      });\n      this.packedSplats.extra.sh1Texture = sh1Texture;\n    }\n\n    if (!this.packedSplats.extra.sh2) {\n      return { sh1Texture };\n    }\n\n    let sh2Texture = this.packedSplats.extra.sh2Texture as\n      | DynoUsampler2DArray<\"sh2\", THREE.DataArrayTexture>\n      | undefined;\n    if (!sh2Texture) {\n      let sh2 = this.packedSplats.extra.sh2 as Uint32Array;\n      const { width, height, depth, maxSplats } = getTextureSize(\n        sh2.length / 4,\n      );\n      if (sh2.length < maxSplats * 4) {\n        const newSh2 = new Uint32Array(maxSplats * 4);\n        newSh2.set(sh2);\n        this.packedSplats.extra.sh2 = newSh2;\n        sh2 = newSh2;\n      }\n\n      const texture = new THREE.DataArrayTexture(sh2, width, height, depth);\n      texture.format = THREE.RGBAIntegerFormat;\n      texture.type = THREE.UnsignedIntType;\n      texture.internalFormat = \"RGBA32UI\";\n      texture.needsUpdate = true;\n\n      sh2Texture = new DynoUsampler2DArray({\n        value: texture,\n        key: \"sh2\",\n      });\n      this.packedSplats.extra.sh2Texture = sh2Texture;\n    }\n\n    if (!this.packedSplats.extra.sh3) {\n      return { sh1Texture, sh2Texture };\n    }\n\n    let sh3Texture = this.packedSplats.extra.sh3Texture as\n      | DynoUsampler2DArray<\"sh3\", THREE.DataArrayTexture>\n      | undefined;\n    if (!sh3Texture) {\n      let sh3 = this.packedSplats.extra.sh3 as Uint32Array;\n      const { width, height, depth, maxSplats } = getTextureSize(\n        sh3.length / 4,\n      );\n      if (sh3.length < maxSplats * 4) {\n        const newSh3 = new Uint32Array(maxSplats * 4);\n        newSh3.set(sh3);\n        this.packedSplats.extra.sh3 = newSh3;\n        sh3 = newSh3;\n      }\n\n      const texture = new THREE.DataArrayTexture(sh3, width, height, depth);\n      texture.format = THREE.RGBAIntegerFormat;\n      texture.type = THREE.UnsignedIntType;\n      texture.internalFormat = \"RGBA32UI\";\n      texture.needsUpdate = true;\n\n      sh3Texture = new DynoUsampler2DArray({\n        value: texture,\n        key: \"sh3\",\n      });\n      this.packedSplats.extra.sh3Texture = sh3Texture;\n    }\n\n    return { sh1Texture, sh2Texture, sh3Texture };\n  }\n}\n\nconst defineEvaluateSH1 = unindent(`\n  vec3 evaluateSH1(Gsplat gsplat, usampler2DArray sh1, vec3 viewDir) {\n    // Extract sint7 values packed into 2 x uint32\n    uvec2 packed = texelFetch(sh1, splatTexCoord(gsplat.index), 0).rg;\n    vec3 sh1_0 = vec3(ivec3(\n      int(packed.x << 25u) >> 25,\n      int(packed.x << 18u) >> 25,\n      int(packed.x << 11u) >> 25\n    )) / 63.0;\n    vec3 sh1_1 = vec3(ivec3(\n      int(packed.x << 4u) >> 25,\n      int((packed.x >> 3u) | (packed.y << 29u)) >> 25,\n      int(packed.y << 22u) >> 25\n    )) / 63.0;\n    vec3 sh1_2 = vec3(ivec3(\n      int(packed.y << 15u) >> 25,\n      int(packed.y << 8u) >> 25,\n      int(packed.y << 1u) >> 25\n    )) / 63.0;\n\n    return sh1_0 * (-0.4886025 * viewDir.y)\n      + sh1_1 * (0.4886025 * viewDir.z)\n      + sh1_2 * (-0.4886025 * viewDir.x);\n  }\n`);\n\nconst defineEvaluateSH2 = unindent(`\n  vec3 evaluateSH2(Gsplat gsplat, usampler2DArray sh2, vec3 viewDir) {\n    // Extract sint8 values packed into 4 x uint32\n    uvec4 packed = texelFetch(sh2, splatTexCoord(gsplat.index), 0);\n    vec3 sh2_0 = vec3(ivec3(\n      int(packed.x << 24u) >> 24,\n      int(packed.x << 16u) >> 24,\n      int(packed.x << 8u) >> 24\n    )) / 127.0;\n    vec3 sh2_1 = vec3(ivec3(\n      int(packed.x) >> 24,\n      int(packed.y << 24u) >> 24,\n      int(packed.y << 16u) >> 24\n    )) / 127.0;\n    vec3 sh2_2 = vec3(ivec3(\n      int(packed.y << 8u) >> 24,\n      int(packed.y) >> 24,\n      int(packed.z << 24u) >> 24\n    )) / 127.0;\n    vec3 sh2_3 = vec3(ivec3(\n      int(packed.z << 16u) >> 24,\n      int(packed.z << 8u) >> 24,\n      int(packed.z) >> 24\n    )) / 127.0;\n    vec3 sh2_4 = vec3(ivec3(\n      int(packed.w << 24u) >> 24,\n      int(packed.w << 16u) >> 24,\n      int(packed.w << 8u) >> 24\n    )) / 127.0;\n\n    return sh2_0 * (1.0925484 * viewDir.x * viewDir.y)\n      + sh2_1 * (-1.0925484 * viewDir.y * viewDir.z)\n      + sh2_2 * (0.3153915 * (2.0 * viewDir.z * viewDir.z - viewDir.x * viewDir.x - viewDir.y * viewDir.y))\n      + sh2_3 * (-1.0925484 * viewDir.x * viewDir.z)\n      + sh2_4 * (0.5462742 * (viewDir.x * viewDir.x - viewDir.y * viewDir.y));\n  }\n`);\n\nconst defineEvaluateSH3 = unindent(`\n  vec3 evaluateSH3(Gsplat gsplat, usampler2DArray sh3, vec3 viewDir) {\n    // Extract sint6 values packed into 4 x uint32\n    uvec4 packed = texelFetch(sh3, splatTexCoord(gsplat.index), 0);\n    vec3 sh3_0 = vec3(ivec3(\n      int(packed.x << 26u) >> 26,\n      int(packed.x << 20u) >> 26,\n      int(packed.x << 14u) >> 26\n    )) / 31.0;\n    vec3 sh3_1 = vec3(ivec3(\n      int(packed.x << 8u) >> 26,\n      int(packed.x << 2u) >> 26,\n      int((packed.x >> 4u) | (packed.y << 28u)) >> 26\n    )) / 31.0;\n    vec3 sh3_2 = vec3(ivec3(\n      int(packed.y << 22u) >> 26,\n      int(packed.y << 16u) >> 26,\n      int(packed.y << 10u) >> 26\n    )) / 31.0;\n    vec3 sh3_3 = vec3(ivec3(\n      int(packed.y << 4u) >> 26,\n      int((packed.y >> 2u) | (packed.z << 30u)) >> 26,\n      int(packed.z << 24u) >> 26\n    )) / 31.0;\n    vec3 sh3_4 = vec3(ivec3(\n      int(packed.z << 18u) >> 26,\n      int(packed.z << 12u) >> 26,\n      int(packed.z << 6u) >> 26\n    )) / 31.0;\n    vec3 sh3_5 = vec3(ivec3(\n      int(packed.z) >> 26,\n      int(packed.w << 26u) >> 26,\n      int(packed.w << 20u) >> 26\n    )) / 31.0;\n    vec3 sh3_6 = vec3(ivec3(\n      int(packed.w << 14u) >> 26,\n      int(packed.w << 8u) >> 26,\n      int(packed.w << 2u) >> 26\n    )) / 31.0;\n\n    float xx = viewDir.x * viewDir.x;\n    float yy = viewDir.y * viewDir.y;\n    float zz = viewDir.z * viewDir.z;\n    float xy = viewDir.x * viewDir.y;\n    float yz = viewDir.y * viewDir.z;\n    float zx = viewDir.z * viewDir.x;\n\n    return sh3_0 * (-0.5900436 * viewDir.y * (3.0 * xx - yy))\n      + sh3_1 * (2.8906114 * xy * viewDir.z) +\n      + sh3_2 * (-0.4570458 * viewDir.y * (4.0 * zz - xx - yy))\n      + sh3_3 * (0.3731763 * viewDir.z * (2.0 * zz - 3.0 * xx - 3.0 * yy))\n      + sh3_4 * (-0.4570458 * viewDir.x * (4.0 * zz - xx - yy))\n      + sh3_5 * (1.4453057 * viewDir.z * (xx - yy))\n      + sh3_6 * (-0.5900436 * viewDir.x * (xx - 3.0 * yy));\n  }\n`);\n\nexport function evaluateSH1(\n  gsplat: DynoVal<typeof Gsplat>,\n  sh1: DynoUsampler2DArray<\"sh1\", THREE.DataArrayTexture>,\n  viewDir: DynoVal<\"vec3\">,\n): DynoVal<\"vec3\"> {\n  return dyno({\n    inTypes: { gsplat: Gsplat, sh1: \"usampler2DArray\", viewDir: \"vec3\" },\n    outTypes: { rgb: \"vec3\" },\n    inputs: { gsplat, sh1, viewDir },\n    globals: () => [defineGsplat, defineEvaluateSH1],\n    statements: ({ inputs, outputs }) => {\n      const statements = unindentLines(`\n        if (isGsplatActive(${inputs.gsplat}.flags)) {\n          ${outputs.rgb} = evaluateSH1(${inputs.gsplat}, ${inputs.sh1}, ${inputs.viewDir});\n        } else {\n          ${outputs.rgb} = vec3(0.0);\n        }\n      `);\n      return statements;\n    },\n  }).outputs.rgb;\n}\n\nexport function evaluateSH2(\n  gsplat: DynoVal<typeof Gsplat>,\n  sh2: DynoVal<\"usampler2DArray\">,\n  viewDir: DynoVal<\"vec3\">,\n): DynoVal<\"vec3\"> {\n  return dyno({\n    inTypes: { gsplat: Gsplat, sh2: \"usampler2DArray\", viewDir: \"vec3\" },\n    outTypes: { rgb: \"vec3\" },\n    inputs: { gsplat, sh2, viewDir },\n    globals: () => [defineGsplat, defineEvaluateSH2],\n    statements: ({ inputs, outputs }) =>\n      unindentLines(`\n        if (isGsplatActive(${inputs.gsplat}.flags)) {\n          ${outputs.rgb} = evaluateSH2(${inputs.gsplat}, ${inputs.sh2}, ${inputs.viewDir});\n        } else {\n          ${outputs.rgb} = vec3(0.0);\n        }\n      `),\n  }).outputs.rgb;\n}\n\nexport function evaluateSH3(\n  gsplat: DynoVal<typeof Gsplat>,\n  sh3: DynoVal<\"usampler2DArray\">,\n  viewDir: DynoVal<\"vec3\">,\n): DynoVal<\"vec3\"> {\n  return dyno({\n    inTypes: { gsplat: Gsplat, sh3: \"usampler2DArray\", viewDir: \"vec3\" },\n    outTypes: { rgb: \"vec3\" },\n    inputs: { gsplat, sh3, viewDir },\n    globals: () => [defineGsplat, defineEvaluateSH3],\n    statements: ({ inputs, outputs }) =>\n      unindentLines(`\n        if (isGsplatActive(${inputs.gsplat}.flags)) {\n          ${outputs.rgb} = evaluateSH3(${inputs.gsplat}, ${inputs.sh3}, ${inputs.viewDir});\n        } else {\n          ${outputs.rgb} = vec3(0.0);\n        }\n      `),\n  }).outputs.rgb;\n}\n","// PLY file format reader\n\nexport type PlyPropertyType =\n  | \"char\"\n  | \"uchar\"\n  | \"short\"\n  | \"ushort\"\n  | \"int\"\n  | \"uint\"\n  | \"float\"\n  | \"double\";\n\nexport type PlyElement = {\n  name: string;\n  count: number;\n  properties: Record<string, PlyProperty>;\n};\n\nexport type PlyProperty = {\n  isList: boolean;\n  type: PlyPropertyType;\n  countType?: PlyPropertyType;\n};\n\n// Callback for parseSplats base Gsplat data\nexport type SplatCallback = (\n  index: number,\n  x: number,\n  y: number,\n  z: number,\n  scaleX: number,\n  scaleY: number,\n  scaleZ: number,\n  quatX: number,\n  quatY: number,\n  quatZ: number,\n  quatW: number,\n  opacity: number,\n  r: number,\n  g: number,\n  b: number,\n) => void;\n\n// Callback for parseSplats SH coefficients\nexport type SplatShCallback = (\n  index: number,\n  sh1: Float32Array,\n  sh2?: Float32Array,\n  sh3?: Float32Array,\n) => void;\n\n// A PlyReader is used to parse PLY files for Gsplat data.\n// It takes a Uint8Array/ArrayBuffer as input fileBytes, parses the text header,\n// and provides a method parseData to iterate over the entire binary data\n// efficiently, or parseSplats to iterate over Gsplat data.\n\nexport class PlyReader {\n  fileBytes: Uint8Array;\n  header = \"\";\n  littleEndian = true;\n  elements: Record<string, PlyElement> = {};\n  comments: string[] = [];\n  data: DataView | null = null;\n  static defaultPointScale = 0.001;\n\n  numSplats = 0;\n\n  // Create a PlyReader from a Uint8Array/ArrayBuffer, no parsing done yet\n  constructor({ fileBytes }: { fileBytes: Uint8Array | ArrayBuffer }) {\n    this.fileBytes =\n      fileBytes instanceof ArrayBuffer ? new Uint8Array(fileBytes) : fileBytes;\n  }\n\n  // Identify and parse the PLY text header (assumed to be <64KB in size).\n  // this.elements will contain all the elements in the file, typically\n  // \"vertex\" contains the Gsplat data.\n  async parseHeader() {\n    const bufferStream = new ReadableStream({\n      start: (controller: ReadableStreamController<Uint8Array>) => {\n        // Assume the header is less than 64KB\n        controller.enqueue(this.fileBytes.slice(0, 65536));\n        controller.close();\n      },\n    });\n    const decoder = bufferStream\n      .pipeThrough(new TextDecoderStream())\n      .getReader();\n\n    // Find the end of the text section of the PLY file\n    this.header = \"\";\n    const headerTerminator = \"end_header\\n\";\n    while (true) {\n      const { value, done } = await decoder.read();\n      if (done) {\n        throw new Error(\"Failed to read header\");\n      }\n\n      this.header += value as string;\n      const endHeader = this.header.indexOf(headerTerminator);\n      if (endHeader >= 0) {\n        this.header = this.header.slice(0, endHeader + headerTerminator.length);\n        break;\n      }\n    }\n    // Partition the file into header and binary data\n    const headerLen = new TextEncoder().encode(this.header).length;\n    this.data = new DataView(this.fileBytes.buffer, headerLen);\n\n    this.elements = {};\n    let curElement: PlyElement | null = null;\n    this.comments = [];\n\n    this.header\n      .trim()\n      .split(\"\\n\")\n      .forEach((line: string, lineIndex: number) => {\n        const trimmedLine = line.trim();\n        if (lineIndex === 0) {\n          if (trimmedLine !== \"ply\") {\n            throw new Error(\"Invalid PLY header\");\n          }\n          return;\n        }\n        if (trimmedLine.length === 0) {\n          return; // Skip empty lines\n        }\n\n        const fields = trimmedLine.split(\" \");\n        switch (fields[0]) {\n          case \"format\":\n            if (fields[1] === \"binary_little_endian\") {\n              this.littleEndian = true;\n            } else if (fields[1] === \"binary_big_endian\") {\n              this.littleEndian = false;\n            } else {\n              // ascii formats not supported\n              throw new Error(`Unsupported PLY format: ${fields[1]}`);\n            }\n            if (fields[2] !== \"1.0\") {\n              throw new Error(`Unsupported PLY version: ${fields[2]}`);\n            }\n            break;\n          case \"end_header\":\n            break;\n          case \"comment\":\n            this.comments.push(trimmedLine.slice(\"comment \".length));\n            break;\n          case \"element\": {\n            const name = fields[1];\n            curElement = {\n              name,\n              count: Number.parseInt(fields[2]),\n              properties: {},\n            };\n            this.elements[name] = curElement;\n            break;\n          }\n          case \"property\":\n            if (curElement == null) {\n              throw new Error(\"Property must be inside an element\");\n            }\n            if (fields[1] === \"list\") {\n              curElement.properties[fields[4]] = {\n                isList: true,\n                type: fields[3] as PlyPropertyType,\n                countType: fields[2] as PlyPropertyType,\n              };\n            } else {\n              curElement.properties[fields[2]] = {\n                isList: false,\n                type: fields[1] as PlyPropertyType,\n              };\n            }\n            break;\n          default:\n          // console.warn(`Skipping unsupported PLY keyword: ${fields[0]}`);\n        }\n      });\n\n    if (this.elements.vertex) {\n      this.numSplats = this.elements.vertex.count;\n    }\n  }\n\n  parseData(\n    elementCallback: (\n      element: PlyElement,\n    ) =>\n      | null\n      | ((index: number, item: Record<string, number | number[]>) => void),\n  ) {\n    // Go through the entire binary data of the PLY file, starting at offset 0\n    let offset = 0;\n    const data = this.data;\n    if (data == null) {\n      throw new Error(\"No data to parse\");\n    }\n\n    for (const elementName in this.elements) {\n      const element = this.elements[elementName];\n      const { count, properties } = element;\n      const item: Record<string, number | number[]> = {};\n      // Construct an array of parser function to parse each property in an item\n      const parsers = [];\n      for (const [propertyName, property] of Object.entries(properties)) {\n        if (!property.isList) {\n          item[propertyName] = 0;\n          parsers.push(() => {\n            item[propertyName] = PARSE_FIELD[property.type](\n              data,\n              offset,\n              this.littleEndian,\n            );\n            offset += FIELD_BYTES[property.type];\n          });\n        } else {\n          // Property is a list, so parse the count first\n          item[propertyName] = [];\n          parsers.push(() => {\n            const list = item[propertyName] as number[];\n            list.length = PARSE_FIELD[property.countType as PlyPropertyType](\n              data,\n              offset,\n              this.littleEndian,\n            );\n            offset += FIELD_BYTES[property.countType as PlyPropertyType];\n            for (let i = 0; i < list.length; i++) {\n              list[i] = PARSE_FIELD[property.type](\n                data,\n                offset,\n                this.littleEndian,\n              );\n              offset += FIELD_BYTES[property.type];\n            }\n          });\n        }\n      }\n\n      // Parse all the items in the element\n      const callback = elementCallback(element) ?? (() => {});\n      for (let index = 0; index < count; index++) {\n        for (const parser of parsers) {\n          parser();\n        }\n        callback(index, item);\n      }\n    }\n  }\n\n  // Parse all the Gsplat data in the PLY file in go, invoking the given\n  // callbacks for each Gsplat.\n  parseSplats(splatCallback: SplatCallback, shCallback?: SplatShCallback) {\n    if (this.elements.vertex == null) {\n      throw new Error(\"No vertex element found\");\n    }\n\n    let isSuperSplat = false;\n    const ssChunks: SSChunk[] = [];\n\n    let numSh = 0;\n    let sh1Props: string[] = [];\n    let sh2Props: string[] = [];\n    let sh3Props: string[] = [];\n    let sh1: Float32Array | undefined = undefined;\n    let sh2: Float32Array | undefined = undefined;\n    let sh3: Float32Array | undefined = undefined;\n\n    function prepareSh() {\n      // Prepare SH coefficient names and arrays for numSh total SH levels\n      const num_f_rest = NUM_SH_TO_NUM_F_REST[numSh];\n      sh1Props = new Array(3)\n        .fill(null)\n        .flatMap((_, k) =>\n          [0, 1, 2].map((_, d) => `f_rest_${k + (d * num_f_rest) / 3}`),\n        );\n      sh2Props = new Array(5)\n        .fill(null)\n        .flatMap((_, k) =>\n          [0, 1, 2].map((_, d) => `f_rest_${3 + k + (d * num_f_rest) / 3}`),\n        );\n      sh3Props = new Array(7)\n        .fill(null)\n        .flatMap((_, k) =>\n          [0, 1, 2].map((_, d) => `f_rest_${8 + k + (d * num_f_rest) / 3}`),\n        );\n      sh1 = numSh >= 1 ? new Float32Array(3 * 3) : undefined;\n      sh2 = numSh >= 2 ? new Float32Array(5 * 3) : undefined;\n      sh3 = numSh >= 3 ? new Float32Array(7 * 3) : undefined;\n    }\n\n    function ssShCallback(\n      index: number,\n      item: Record<string, number | number[]>,\n    ) {\n      // Decode SH for SuperSplat compressed data\n      if (!sh1) {\n        throw new Error(\"Missing sh1\");\n      }\n      for (const [i, key] of sh1Props.entries()) {\n        sh1[i] = ((item[key] as number) * 8) / 255 - 4;\n      }\n      if (sh2) {\n        for (const [i, key] of sh2Props.entries()) {\n          sh2[i] = ((item[key] as number) * 8) / 255 - 4;\n        }\n      }\n      if (sh3) {\n        for (const [i, key] of sh3Props.entries()) {\n          sh3[i] = ((item[key] as number) * 8) / 255 - 4;\n        }\n      }\n      shCallback?.(index, sh1, sh2, sh3);\n    }\n\n    function initSuperSplat(element: PlyElement) {\n      const {\n        min_x,\n        min_y,\n        min_z,\n        max_x,\n        max_y,\n        max_z,\n        min_scale_x,\n        min_scale_y,\n        min_scale_z,\n        max_scale_x,\n        max_scale_y,\n        max_scale_z,\n      } = element.properties;\n      if (\n        !min_x ||\n        !min_y ||\n        !min_z ||\n        !max_x ||\n        !max_y ||\n        !max_z ||\n        !min_scale_x ||\n        !min_scale_y ||\n        !min_scale_z ||\n        !max_scale_x ||\n        !max_scale_y ||\n        !max_scale_z\n      ) {\n        throw new Error(\"Missing PLY chunk properties\");\n      }\n\n      // SuperSplat chunks are used to quantize splat data, so we need to store them\n      isSuperSplat = true;\n      return (index: number, item: Record<string, number | number[]>) => {\n        const {\n          min_x,\n          min_y,\n          min_z,\n          max_x,\n          max_y,\n          max_z,\n          min_scale_x,\n          min_scale_y,\n          min_scale_z,\n          max_scale_x,\n          max_scale_y,\n          max_scale_z,\n          min_r,\n          min_g,\n          min_b,\n          max_r,\n          max_g,\n          max_b,\n        } = item as Record<string, number>;\n        ssChunks.push({\n          min_x,\n          min_y,\n          min_z,\n          max_x,\n          max_y,\n          max_z,\n          min_scale_x,\n          min_scale_y,\n          min_scale_z,\n          max_scale_x,\n          max_scale_y,\n          max_scale_z,\n          min_r,\n          min_g,\n          min_b,\n          max_r,\n          max_g,\n          max_b,\n        });\n      };\n    }\n\n    function decodeSuperSplat(element: PlyElement) {\n      // Decode SuperSplat compressed data in vertex and sh elements\n      if (shCallback && element.name === \"sh\") {\n        numSh = getNumSh(element.properties);\n        prepareSh();\n        return ssShCallback;\n      }\n      if (element.name !== \"vertex\") {\n        return null;\n      }\n\n      const { packed_position, packed_rotation, packed_scale, packed_color } =\n        element.properties;\n      if (\n        !packed_position ||\n        !packed_rotation ||\n        !packed_scale ||\n        !packed_color\n      ) {\n        throw new Error(\n          \"Missing PLY properties: packed_position, packed_rotation, packed_scale, packed_color\",\n        );\n      }\n\n      const SQRT2 = Math.sqrt(2);\n\n      return (index: number, item: Record<string, number | number[]>) => {\n        // SuperSplat data are quantized within chunks with 256 Gsplats each\n        const chunk = ssChunks[index >>> 8];\n        if (chunk == null) {\n          throw new Error(\"Missing PLY chunk\");\n        }\n        const {\n          min_x,\n          min_y,\n          min_z,\n          max_x,\n          max_y,\n          max_z,\n          min_scale_x,\n          min_scale_y,\n          min_scale_z,\n          max_scale_x,\n          max_scale_y,\n          max_scale_z,\n          min_r,\n          min_g,\n          min_b,\n          max_r,\n          max_g,\n          max_b,\n        } = chunk;\n        const { packed_position, packed_rotation, packed_scale, packed_color } =\n          item as Record<string, number>;\n\n        const x =\n          (((packed_position >>> 21) & 2047) / 2047) * (max_x - min_x) + min_x;\n        const y =\n          (((packed_position >>> 11) & 1023) / 1023) * (max_y - min_y) + min_y;\n        const z = ((packed_position & 2047) / 2047) * (max_z - min_z) + min_z;\n\n        const r0 = (((packed_rotation >>> 20) & 1023) / 1023 - 0.5) * SQRT2;\n        const r1 = (((packed_rotation >>> 10) & 1023) / 1023 - 0.5) * SQRT2;\n        const r2 = ((packed_rotation & 1023) / 1023 - 0.5) * SQRT2;\n        const rr = Math.sqrt(Math.max(0, 1.0 - r0 * r0 - r1 * r1 - r2 * r2));\n\n        const rOrder = packed_rotation >>> 30;\n        const quatX = rOrder === 0 ? r0 : rOrder === 1 ? rr : r1;\n        const quatY = rOrder <= 1 ? r1 : rOrder === 2 ? rr : r2;\n        const quatZ = rOrder <= 2 ? r2 : rr;\n        const quatW = rOrder === 0 ? rr : r0;\n\n        const scaleX = Math.exp(\n          (((packed_scale >>> 21) & 2047) / 2047) *\n            (max_scale_x - min_scale_x) +\n            min_scale_x,\n        );\n        const scaleY = Math.exp(\n          (((packed_scale >>> 11) & 1023) / 1023) *\n            (max_scale_y - min_scale_y) +\n            min_scale_y,\n        );\n        const scaleZ = Math.exp(\n          ((packed_scale & 2047) / 2047) * (max_scale_z - min_scale_z) +\n            min_scale_z,\n        );\n\n        const r =\n          (((packed_color >>> 24) & 255) / 255) *\n            ((max_r ?? 1) - (min_r ?? 0)) +\n          (min_r ?? 0);\n        const g =\n          (((packed_color >>> 16) & 255) / 255) *\n            ((max_g ?? 1) - (min_g ?? 0)) +\n          (min_g ?? 0);\n        const b =\n          (((packed_color >>> 8) & 255) / 255) * ((max_b ?? 1) - (min_b ?? 0)) +\n          (min_b ?? 0);\n        const opacity = (packed_color & 255) / 255;\n\n        splatCallback(\n          index,\n          x,\n          y,\n          z,\n          scaleX,\n          scaleY,\n          scaleZ,\n          quatX,\n          quatY,\n          quatZ,\n          quatW,\n          opacity,\n          r,\n          g,\n          b,\n        );\n      };\n    }\n\n    const elementCallback = (element: PlyElement) => {\n      if (element.name === \"chunk\") {\n        // \"chunk\" could conceivably be used for other formats, and we would\n        // ideally check for the comment: Generated by SuperSplat 2.*\n        // but gsplat also outputs this format without such a comment.\n        // In order to support both, let's assume a \"chunk\" element should\n        // be interpreted as this format.\n        return initSuperSplat(element);\n      }\n      if (isSuperSplat) {\n        return decodeSuperSplat(element);\n      }\n\n      if (element.name !== \"vertex\") {\n        return null;\n      }\n\n      const {\n        x,\n        y,\n        z,\n        scale_0,\n        scale_1,\n        scale_2,\n        rot_0,\n        rot_1,\n        rot_2,\n        rot_3,\n        opacity,\n        f_dc_0,\n        f_dc_1,\n        f_dc_2,\n        red,\n        green,\n        blue,\n        alpha,\n      } = element.properties;\n\n      if (!x || !y || !z) {\n        throw new Error(\"Missing PLY properties: x, y, z\");\n      }\n      // Pure point cloud PLY files have no scales or rotations\n      const hasScales = scale_0 && scale_1 && scale_2;\n      const hasRots = rot_0 && rot_1 && rot_2 && rot_3;\n      // Quantization scale factor for argb values\n      const alphaDiv = alpha != null ? FIELD_SCALE[alpha.type] : 1;\n      const redDiv = red != null ? FIELD_SCALE[red.type] : 1;\n      const greenDiv = green != null ? FIELD_SCALE[green.type] : 1;\n      const blueDiv = blue != null ? FIELD_SCALE[blue.type] : 1;\n\n      numSh = getNumSh(element.properties);\n      prepareSh();\n\n      return (index: number, item: Record<string, number | number[]>) => {\n        const scaleX = hasScales\n          ? Math.exp(item.scale_0 as number)\n          : PlyReader.defaultPointScale;\n        const scaleY = hasScales\n          ? Math.exp(item.scale_1 as number)\n          : PlyReader.defaultPointScale;\n        const scaleZ = hasScales\n          ? Math.exp(item.scale_2 as number)\n          : PlyReader.defaultPointScale;\n\n        const quatX = hasRots ? (item.rot_1 as number) : 0;\n        const quatY = hasRots ? (item.rot_2 as number) : 0;\n        const quatZ = hasRots ? (item.rot_3 as number) : 0;\n        const quatW = hasRots ? (item.rot_0 as number) : 1;\n\n        const op =\n          opacity != null\n            ? 1.0 / (1.0 + Math.exp(-item.opacity as number))\n            : alpha != null\n              ? (item.alpha as number) / alphaDiv\n              : 1.0;\n        const r =\n          f_dc_0 != null\n            ? (item.f_dc_0 as number) * SH_C0 + 0.5\n            : red != null\n              ? (item.red as number) / redDiv\n              : 1.0;\n        const g =\n          f_dc_1 != null\n            ? (item.f_dc_1 as number) * SH_C0 + 0.5\n            : green != null\n              ? (item.green as number) / greenDiv\n              : 1.0;\n        const b =\n          f_dc_2 != null\n            ? (item.f_dc_2 as number) * SH_C0 + 0.5\n            : blue != null\n              ? (item.blue as number) / blueDiv\n              : 1.0;\n\n        splatCallback(\n          index,\n          item.x as number,\n          item.y as number,\n          item.z as number,\n          scaleX,\n          scaleY,\n          scaleZ,\n          quatX,\n          quatY,\n          quatZ,\n          quatW,\n          op,\n          r,\n          g,\n          b,\n        );\n\n        if (shCallback && sh1) {\n          if (sh1) {\n            for (const [i, key] of sh1Props.entries()) {\n              sh1[i] = item[key] as number;\n            }\n          }\n          if (sh2) {\n            for (const [i, key] of sh2Props.entries()) {\n              sh2[i] = item[key] as number;\n            }\n          }\n          if (sh3) {\n            for (const [i, key] of sh3Props.entries()) {\n              sh3[i] = item[key] as number;\n            }\n          }\n          shCallback(index, sh1, sh2, sh3);\n        }\n      };\n    };\n\n    this.parseData(elementCallback);\n  }\n\n  // Inject RGBA values into original PLY file, which can be used to modify\n  // the color/opacity of the Gsplats and write out the modified PLY file.\n  injectRgba(rgba: Uint8Array) {\n    // Go through the entire binary data of the PLY file, starting at offset 0\n    let offset = 0;\n    const data = this.data;\n    if (data == null) {\n      throw new Error(\"No parsed data\");\n    }\n    if (rgba.length !== this.numSplats * 4) {\n      throw new Error(\"Invalid RGBA array length\");\n    }\n\n    for (const elementName in this.elements) {\n      const element = this.elements[elementName];\n      const { count, properties } = element;\n      const parsers = [];\n\n      let rgbaOffset = 0;\n      const isVertex = elementName === \"vertex\";\n      if (isVertex) {\n        for (const name of [\"opacity\", \"f_dc_0\", \"f_dc_1\", \"f_dc_2\"]) {\n          if (!properties[name] || properties[name].type !== \"float\") {\n            throw new Error(`Can't injectRgba due to property: ${name}`);\n          }\n        }\n      }\n\n      for (const [propertyName, property] of Object.entries(properties)) {\n        if (!property.isList) {\n          if (isVertex) {\n            if (\n              propertyName === \"f_dc_0\" ||\n              propertyName === \"f_dc_1\" ||\n              propertyName === \"f_dc_2\"\n            ) {\n              const component = Number.parseInt(\n                propertyName.slice(\"f_dc_\".length),\n              );\n              parsers.push(() => {\n                // Inject DC coefficients\n                const value =\n                  (rgba[rgbaOffset + component] / 255 - 0.5) / SH_C0;\n                SET_FIELD[property.type](\n                  data,\n                  offset,\n                  this.littleEndian,\n                  value,\n                );\n              });\n            } else if (propertyName === \"opacity\") {\n              parsers.push(() => {\n                // Inject opacity sigmoid, clamped to [-100, 100]\n                const value = Math.max(\n                  -100,\n                  Math.min(\n                    100,\n                    -Math.log(1.0 / (rgba[rgbaOffset + 3] / 255) - 1.0),\n                  ),\n                );\n                SET_FIELD[property.type](\n                  data,\n                  offset,\n                  this.littleEndian,\n                  value,\n                );\n              });\n            }\n          }\n          parsers.push(() => {\n            offset += FIELD_BYTES[property.type];\n          });\n        } else {\n          parsers.push(() => {\n            const length = PARSE_FIELD[property.countType as PlyPropertyType](\n              data,\n              offset,\n              this.littleEndian,\n            );\n            offset += FIELD_BYTES[property.countType as PlyPropertyType];\n            offset += length * FIELD_BYTES[property.type];\n          });\n        }\n      }\n\n      for (let index = 0; index < count; index++) {\n        // Go through all the data and field parsers to compute offset\n        for (const parser of parsers) {\n          parser();\n        }\n        if (isVertex) {\n          rgbaOffset += 4;\n        }\n      }\n    }\n  }\n}\n\nexport const SH_C0 = 0.28209479177387814;\n\ntype FieldParser = (\n  data: DataView,\n  offset: number,\n  littleEndian: boolean,\n) => number;\ntype FieldSetter = (\n  data: DataView,\n  offset: number,\n  littleEndian: boolean,\n  value: number,\n) => void;\n\nconst PARSE_FIELD: Record<PlyPropertyType, FieldParser> = {\n  char: (data: DataView, offset: number, littleEndian: boolean) => {\n    return data.getInt8(offset);\n  },\n  uchar: (data: DataView, offset: number, littleEndian: boolean) => {\n    return data.getUint8(offset);\n  },\n  short: (data: DataView, offset: number, littleEndian: boolean) => {\n    return data.getInt16(offset, littleEndian);\n  },\n  ushort: (data: DataView, offset: number, littleEndian: boolean) => {\n    return data.getUint16(offset, littleEndian);\n  },\n  int: (data: DataView, offset: number, littleEndian: boolean) => {\n    return data.getInt32(offset, littleEndian);\n  },\n  uint: (data: DataView, offset: number, littleEndian: boolean) => {\n    return data.getUint32(offset, littleEndian);\n  },\n  float: (data: DataView, offset: number, littleEndian: boolean) => {\n    return data.getFloat32(offset, littleEndian);\n  },\n  double: (data: DataView, offset: number, littleEndian: boolean) => {\n    return data.getFloat64(offset, littleEndian);\n  },\n};\n\nconst SET_FIELD: Record<PlyPropertyType, FieldSetter> = {\n  char: (\n    data: DataView,\n    offset: number,\n    littleEndian: boolean,\n    value: number,\n  ) => {\n    data.setInt8(offset, value);\n  },\n  uchar: (\n    data: DataView,\n    offset: number,\n    littleEndian: boolean,\n    value: number,\n  ) => {\n    data.setUint8(offset, value);\n  },\n  short: (\n    data: DataView,\n    offset: number,\n    littleEndian: boolean,\n    value: number,\n  ) => {\n    data.setInt16(offset, value, littleEndian);\n  },\n  ushort: (\n    data: DataView,\n    offset: number,\n    littleEndian: boolean,\n    value: number,\n  ) => {\n    data.setUint16(offset, value, littleEndian);\n  },\n  int: (\n    data: DataView,\n    offset: number,\n    littleEndian: boolean,\n    value: number,\n  ) => {\n    data.setInt32(offset, value, littleEndian);\n  },\n  uint: (\n    data: DataView,\n    offset: number,\n    littleEndian: boolean,\n    value: number,\n  ) => {\n    data.setUint32(offset, value, littleEndian);\n  },\n  float: (\n    data: DataView,\n    offset: number,\n    littleEndian: boolean,\n    value: number,\n  ) => {\n    data.setFloat32(offset, value, littleEndian);\n  },\n  double: (\n    data: DataView,\n    offset: number,\n    littleEndian: boolean,\n    value: number,\n  ) => {\n    data.setFloat64(offset, value, littleEndian);\n  },\n};\n\nconst FIELD_BYTES: Record<PlyPropertyType, number> = {\n  char: 1,\n  uchar: 1,\n  short: 2,\n  ushort: 2,\n  int: 4,\n  uint: 4,\n  float: 4,\n  double: 8,\n};\n\nconst FIELD_SCALE: Record<PlyPropertyType, number> = {\n  char: 127,\n  uchar: 255,\n  short: 32767,\n  ushort: 65535,\n  int: 2147483647,\n  uint: 4294967295,\n  float: 1,\n  double: 1,\n};\n\nconst NUM_F_REST_TO_NUM_SH: Record<number, number> = {\n  0: 0,\n  9: 1,\n  24: 2,\n  45: 3,\n};\nconst NUM_SH_TO_NUM_F_REST: Record<number, number> = {\n  0: 0,\n  1: 9,\n  2: 24,\n  3: 45,\n};\n\nfunction getNumSh(properties: Record<string, PlyProperty>) {\n  let num_f_rest = 0;\n  while (properties[`f_rest_${num_f_rest}`]) {\n    num_f_rest += 1;\n  }\n  const numSh = NUM_F_REST_TO_NUM_SH[num_f_rest];\n  if (numSh == null) {\n    throw new Error(`Unsupported number of SH coefficients: ${num_f_rest}`);\n  }\n  return numSh;\n}\n\ntype SSChunk = {\n  min_x: number;\n  min_y: number;\n  min_z: number;\n  max_x: number;\n  max_y: number;\n  max_z: number;\n  min_scale_x: number;\n  min_scale_y: number;\n  min_scale_z: number;\n  max_scale_x: number;\n  max_scale_y: number;\n  max_scale_z: number;\n  min_r?: number;\n  min_g?: number;\n  min_b?: number;\n  max_r?: number;\n  max_g?: number;\n  max_b?: number;\n};\n","import { getArrayBuffers } from \"./utils.js\";\nimport BundledWorker from \"./worker?worker&inline\";\n\n// SplatWorker is an internal class that manages a WebWorker for executing\n// longer running CPU tasks such as Gsplat file decoding and sorting.\n// Although a SplatWorker can be created and used directly, the utility\n// function withWorker() is recommended to allocate from a managed\n// pool of SplatWorkers.\n\nexport class SplatWorker {\n  worker: Worker;\n  messages: Record<\n    number,\n    { resolve: (value: unknown) => void; reject: (reason?: unknown) => void }\n  > = {};\n  messageIdNext = 0;\n\n  constructor() {\n    // this.worker = new Worker(new URL(\"./worker\", import.meta.url), { type: \"module\" });\n    this.worker = new BundledWorker();\n    this.worker.onmessage = (event) => this.onMessage(event);\n  }\n\n  makeMessageId(): number {\n    return ++this.messageIdNext;\n  }\n\n  makeMessagePromiseId(): { id: number; promise: Promise<unknown> } {\n    const id = this.makeMessageId();\n    const promise = new Promise((resolve, reject) => {\n      this.messages[id] = { resolve, reject };\n    });\n    return { id, promise };\n  }\n\n  onMessage(event: MessageEvent) {\n    // console.log(\"SplatWorker.onMessage:\", event);\n    const { id, result, error } = event.data;\n    // console.log(`SplatWorker.onMessage(${id}):`, result, error);\n    const handler = this.messages[id];\n    if (handler) {\n      delete this.messages[id];\n      if (error) {\n        handler.reject(error);\n      } else {\n        handler.resolve(result);\n      }\n    }\n  }\n\n  // Invoke an RPC on the worker with the given name and arguments.\n  // The normal usage of a worker is to run one activity at a time,\n  // but this function allows for concurrent calls, tagging each request\n  // with a unique message Id and awaiting a response to that same Id.\n  // The method will automatically transfer any ArrayBuffers in the\n  // arguments to the worker. If you'd like to transfer a copy of a\n  // buffer then you must clone it before passing to this function.\n  async call(name: string, args: unknown): Promise<unknown> {\n    const { id, promise } = this.makeMessagePromiseId();\n    // console.log(`SplatWorker.call(${name}):`, args);\n    this.worker.postMessage(\n      { name, args, id },\n      { transfer: getArrayBuffers(args) },\n    );\n    return promise;\n  }\n}\n\nlet maxWorkers = 4;\n\nlet numWorkers = 0;\nconst freeWorkers: SplatWorker[] = [];\nconst workerQueue: ((worker: SplatWorker) => void)[] = [];\n\n// Set the maximum number of workers to allocate for the pool. (default: 4)\nexport function setWorkerPool(count = 4) {\n  maxWorkers = count;\n}\n\n// Allocate a worker from the pool. If none are available and we are below the\n// maximum, create a new one. Otherwise, add the request to a queue and wait\n// for it to be fulfilled.\nexport async function allocWorker(): Promise<SplatWorker> {\n  const worker = freeWorkers.shift();\n  if (worker) {\n    return worker;\n  }\n\n  if (numWorkers < maxWorkers) {\n    const worker = new SplatWorker();\n    numWorkers += 1;\n    return worker;\n  }\n\n  return new Promise((resolve) => {\n    workerQueue.push(resolve);\n  });\n}\n\n// Return a worker to the pool. Pass the worker to any pending waiter.\nexport function freeWorker(worker: SplatWorker) {\n  if (numWorkers > maxWorkers) {\n    // Worker no longer needed\n    numWorkers -= 1;\n    return;\n  }\n\n  const waiter = workerQueue.shift();\n  if (waiter) {\n    waiter(worker);\n    return;\n  }\n\n  freeWorkers.push(worker);\n}\n\n// Allocate a worker from the pool and invoke the callback with the worker.\n// When the callback completes, the worker will be returned to the pool.\nexport async function withWorker<T>(\n  callback: (worker: SplatWorker) => Promise<T>,\n): Promise<T> {\n  const worker = await allocWorker();\n  try {\n    return await callback(worker);\n  } finally {\n    freeWorker(worker);\n  }\n}\n","import { unzipSync } from \"fflate\";\nimport { FileLoader, Loader, type LoadingManager } from \"three\";\nimport {\n  DEFAULT_SPLAT_ENCODING,\n  PackedSplats,\n  type SplatEncoding,\n} from \"./PackedSplats\";\nimport { SplatMesh } from \"./SplatMesh\";\nimport { PlyReader } from \"./ply\";\nimport { withWorker } from \"./splatWorker\";\nimport { decompressPartialGzip, getTextureSize } from \"./utils\";\n\n// SplatLoader implements the THREE.Loader interface and supports loading a variety\n// of different Gsplat file formats. Formats .PLY and .SPZ can be auto-detected\n// from the file contents, while .SPLAT and .KSPLAT require either having the\n// appropriate file extension as part of the path, or it can be explicitly set\n// in the loader using the fileType property.\n\nexport class SplatLoader extends Loader {\n  fileLoader: FileLoader;\n  fileType?: SplatFileType;\n  packedSplats?: PackedSplats;\n\n  constructor(manager?: LoadingManager) {\n    super(manager);\n    this.fileLoader = new FileLoader(manager);\n  }\n\n  load(\n    url: string,\n    onLoad?: (decoded: PackedSplats) => void,\n    onProgress?: (event: ProgressEvent) => void,\n    onError?: (error: unknown) => void,\n  ) {\n    const resolvedURL = this.manager.resolveURL(\n      (this.path ?? \"\") + (url ?? \"\"),\n    );\n\n    const headers = new Headers(this.requestHeader);\n    const credentials = this.withCredentials ? \"include\" : \"same-origin\";\n    const request = new Request(resolvedURL, { headers, credentials });\n    let fileType = this.fileType;\n\n    this.manager.itemStart(resolvedURL);\n\n    fetchWithProgress(request, onProgress)\n      .then(async (input) => {\n        const progresses = [\n          new ProgressEvent(\"progress\", {\n            lengthComputable: true,\n            loaded: input.byteLength,\n            total: input.byteLength,\n          }),\n        ];\n\n        function updateProgresses() {\n          if (onProgress) {\n            const lengthComputable = progresses.every((p) => {\n              // Either it's computable or no progress yet\n              return p.lengthComputable || (p.loaded === 0 && p.total === 0);\n            });\n            const loaded = progresses.reduce((sum, p) => sum + p.loaded, 0);\n            const total = progresses.reduce((sum, p) => sum + p.total, 0);\n            onProgress(\n              new ProgressEvent(\"progress\", {\n                lengthComputable,\n                loaded,\n                total,\n              }),\n            );\n          }\n        }\n\n        const extraFiles: Record<string, ArrayBuffer> = {};\n        const promises = [];\n\n        const pcSogsJson = tryPcSogs(input);\n        if (fileType === SplatFileType.PCSOGS) {\n          if (pcSogsJson === undefined) {\n            throw new Error(\"Invalid PC SOGS file\");\n          }\n        }\n        if (pcSogsJson !== undefined) {\n          fileType = SplatFileType.PCSOGS;\n          for (const key of [\"means\", \"scales\", \"quats\", \"sh0\", \"shN\"]) {\n            const prop = pcSogsJson[key as keyof PcSogsJson];\n            if (prop) {\n              for (const file of prop.files) {\n                const fileUrl = new URL(file, resolvedURL).toString();\n                const progressIndex = progresses.length;\n                progresses.push(new ProgressEvent(\"progress\"));\n\n                this.manager.itemStart(fileUrl);\n                const request = new Request(fileUrl, { headers, credentials });\n                const promise = fetchWithProgress(request, (progress) => {\n                  progresses[progressIndex] = progress;\n                  updateProgresses();\n                })\n                  .then((data) => {\n                    extraFiles[file] = data;\n                  })\n                  .catch((error) => {\n                    this.manager.itemError(fileUrl);\n                    throw error;\n                  })\n                  .finally(() => {\n                    this.manager.itemEnd(fileUrl);\n                  });\n                promises.push(promise);\n              }\n            }\n          }\n        }\n\n        await Promise.all(promises);\n        if (onLoad) {\n          const splatEncoding =\n            this.packedSplats?.splatEncoding ?? DEFAULT_SPLAT_ENCODING;\n          const decoded = await unpackSplats({\n            input,\n            extraFiles,\n            fileType,\n            pathOrUrl: resolvedURL,\n            splatEncoding,\n          });\n\n          if (this.packedSplats) {\n            this.packedSplats.initialize(decoded);\n            onLoad(this.packedSplats);\n          } else {\n            onLoad(new PackedSplats(decoded));\n          }\n        }\n      })\n      .catch((error) => {\n        this.manager.itemError(resolvedURL);\n        onError?.(error);\n      })\n      .finally(() => {\n        this.manager.itemEnd(resolvedURL);\n      });\n  }\n\n  async loadAsync(\n    url: string,\n    onProgress?: (event: ProgressEvent) => void,\n  ): Promise<PackedSplats> {\n    return new Promise((resolve, reject) => {\n      this.load(\n        url,\n        (decoded) => {\n          resolve(decoded);\n        },\n        onProgress,\n        reject,\n      );\n    });\n  }\n\n  parse(packedSplats: PackedSplats): SplatMesh {\n    return new SplatMesh({ packedSplats });\n  }\n}\n\nasync function fetchWithProgress(\n  request: Request,\n  onProgress?: (event: ProgressEvent) => void,\n) {\n  const response = await fetch(request);\n  if (!response.ok) {\n    throw new Error(\n      `${response.status} \"${response.statusText}\" fetching URL: ${request.url}`,\n    );\n  }\n  if (!response.body) {\n    throw new Error(`Response body is null for URL: ${request.url}`);\n  }\n\n  const reader = response.body.getReader();\n  const contentLength = Number.parseInt(\n    response.headers.get(\"Content-Length\") || \"0\",\n  );\n  const total = Number.isNaN(contentLength) ? 0 : contentLength;\n  let loaded = 0;\n  const chunks: Uint8Array[] = [];\n\n  while (true) {\n    const { done, value } = await reader.read();\n    if (done) {\n      break;\n    }\n    chunks.push(value);\n    loaded += value.length;\n\n    if (onProgress) {\n      onProgress(\n        new ProgressEvent(\"progress\", {\n          lengthComputable: total !== 0,\n          loaded,\n          total,\n        }),\n      );\n    }\n  }\n\n  // Combine chunks into a single buffer\n  const bytes = new Uint8Array(loaded);\n  let offset = 0;\n  for (const chunk of chunks) {\n    bytes.set(chunk, offset);\n    offset += chunk.length;\n  }\n  return bytes.buffer;\n}\n\nexport enum SplatFileType {\n  PLY = \"ply\",\n  SPZ = \"spz\",\n  SPLAT = \"splat\",\n  KSPLAT = \"ksplat\",\n  PCSOGS = \"pcsogs\",\n  PCSOGSZIP = \"pcsogszip\",\n}\n\nexport function getSplatFileType(\n  fileBytes: Uint8Array,\n): SplatFileType | undefined {\n  const view = new DataView(fileBytes.buffer);\n  if ((view.getUint32(0, true) & 0x00ffffff) === 0x00796c70) {\n    return SplatFileType.PLY;\n  }\n  if ((view.getUint32(0, true) & 0x00ffffff) === 0x00088b1f) {\n    // Gzipped file, unpack beginning to check magic number\n    const header = decompressPartialGzip(fileBytes, 4);\n    const gView = new DataView(header.buffer);\n    if (gView.getUint32(0, true) === 0x5053474e) {\n      return SplatFileType.SPZ;\n    }\n    // Unknown Gzipped file type\n    return undefined;\n  }\n  if (view.getUint32(0, true) === 0x04034b50) {\n    // PKZip file\n    if (tryPcSogsZip(fileBytes)) {\n      return SplatFileType.PCSOGSZIP;\n    }\n    // Unknown PKZip file type\n    return undefined;\n  }\n  // Unknown file type\n  return undefined;\n}\n\n// Returns the lowercased file extension from a path or URL\nexport function getFileExtension(pathOrUrl: string): string {\n  const noTrailing = pathOrUrl.split(/[?#]/, 1)[0];\n  const lastSlash = Math.max(\n    noTrailing.lastIndexOf(\"/\"),\n    noTrailing.lastIndexOf(\"\\\\\"),\n  );\n  const filename = noTrailing.slice(lastSlash + 1);\n  const lastDot = filename.lastIndexOf(\".\");\n  if (lastDot <= 0 || lastDot === filename.length - 1) {\n    return \"\"; // No extension\n  }\n  return filename.slice(lastDot + 1).toLowerCase();\n}\n\nexport function getSplatFileTypeFromPath(\n  pathOrUrl: string,\n): SplatFileType | undefined {\n  const extension = getFileExtension(pathOrUrl);\n  if (extension === \"ply\") {\n    return SplatFileType.PLY;\n  }\n  if (extension === \"spz\") {\n    return SplatFileType.SPZ;\n  }\n  if (extension === \"splat\") {\n    return SplatFileType.SPLAT;\n  }\n  if (extension === \"ksplat\") {\n    return SplatFileType.KSPLAT;\n  }\n  return undefined;\n}\n\nexport type PcSogsJson = {\n  means: {\n    shape: number[];\n    dtype: string;\n    mins: number[];\n    maxs: number[];\n    files: string[];\n  };\n  scales: {\n    shape: number[];\n    dtype: string;\n    mins: number[];\n    maxs: number[];\n    files: string[];\n  };\n  quats: { shape: number[]; dtype: string; encoding?: string; files: string[] };\n  sh0: {\n    shape: number[];\n    dtype: string;\n    mins: number[];\n    maxs: number[];\n    files: string[];\n  };\n  shN?: {\n    shape: number[];\n    dtype: string;\n    mins: number;\n    maxs: number;\n    quantization: number;\n    files: string[];\n  };\n};\n\nexport function isPcSogs(input: ArrayBuffer | Uint8Array | string): boolean {\n  // Returns true if the input seems to be a valid PC SOGS file\n  return tryPcSogs(input) !== undefined;\n}\n\nexport function tryPcSogs(\n  input: ArrayBuffer | Uint8Array | string,\n): PcSogsJson | undefined {\n  // Try to parse input as SOGS JSON and see if it's valid\n  try {\n    let text: string;\n    if (typeof input === \"string\") {\n      text = input;\n    } else {\n      const fileBytes =\n        input instanceof ArrayBuffer ? new Uint8Array(input) : input;\n      if (fileBytes.length > 65536) {\n        // Should be only a few KB, definitely not a SOGS JSON file\n        return undefined;\n      }\n      text = new TextDecoder().decode(fileBytes);\n    }\n\n    const json = JSON.parse(text);\n    if (!json || typeof json !== \"object\" || Array.isArray(json)) {\n      return undefined;\n    }\n    for (const key of [\"means\", \"scales\", \"quats\", \"sh0\"]) {\n      if (\n        !json[key] ||\n        typeof json[key] !== \"object\" ||\n        Array.isArray(json[key])\n      ) {\n        return undefined;\n      }\n      if (!json[key].shape || !json[key].files) {\n        return undefined;\n      }\n      if (key !== \"quats\" && (!json[key].mins || !json[key].maxs)) {\n        return undefined;\n      }\n    }\n    // This is probably a PC SOGS file\n    return json as PcSogsJson;\n  } catch {\n    return undefined;\n  }\n}\n\nexport function tryPcSogsZip(\n  input: ArrayBuffer | Uint8Array,\n): { name: string; json: PcSogsJson } | undefined {\n  try {\n    const fileBytes =\n      input instanceof ArrayBuffer ? new Uint8Array(input) : input;\n    let metaFilename: string | null = null;\n\n    const unzipped = unzipSync(fileBytes, {\n      filter: ({ name }) => {\n        const filename = name.split(/[\\\\/]/).pop() as string;\n        if (filename === \"meta.json\") {\n          metaFilename = name;\n          return true;\n        }\n        return false;\n      },\n    });\n    if (!metaFilename) {\n      return undefined;\n    }\n    const json = tryPcSogs(unzipped[metaFilename]);\n    if (!json) {\n      return undefined;\n    }\n    return { name: metaFilename, json };\n  } catch {\n    return undefined;\n  }\n}\n\nexport async function unpackSplats({\n  input,\n  extraFiles,\n  fileType,\n  pathOrUrl,\n  splatEncoding,\n}: {\n  input: Uint8Array | ArrayBuffer;\n  extraFiles?: Record<string, ArrayBuffer>;\n  fileType?: SplatFileType;\n  pathOrUrl?: string;\n  splatEncoding?: SplatEncoding;\n}): Promise<{\n  packedArray: Uint32Array;\n  numSplats: number;\n  extra?: Record<string, unknown>;\n}> {\n  const fileBytes =\n    input instanceof ArrayBuffer ? new Uint8Array(input) : input;\n  let splatFileType = fileType;\n  if (!fileType) {\n    splatFileType = getSplatFileType(fileBytes);\n    if (!splatFileType && pathOrUrl) {\n      splatFileType = getSplatFileTypeFromPath(pathOrUrl);\n    }\n  }\n\n  switch (splatFileType) {\n    case SplatFileType.PLY: {\n      const ply = new PlyReader({ fileBytes });\n      await ply.parseHeader();\n      const numSplats = ply.numSplats;\n      const maxSplats = getTextureSize(numSplats).maxSplats;\n      const args = {\n        fileBytes,\n        packedArray: new Uint32Array(maxSplats * 4),\n        splatEncoding,\n      };\n      return await withWorker(async (worker) => {\n        const { packedArray, numSplats, extra } = (await worker.call(\n          \"unpackPly\",\n          args,\n        )) as {\n          packedArray: Uint32Array;\n          numSplats: number;\n          extra: Record<string, unknown>;\n        };\n        return { packedArray, numSplats, extra };\n      });\n    }\n    case SplatFileType.SPZ: {\n      return await withWorker(async (worker) => {\n        const { packedArray, numSplats, extra } = (await worker.call(\n          \"decodeSpz\",\n          {\n            fileBytes,\n            splatEncoding,\n          },\n        )) as {\n          packedArray: Uint32Array;\n          numSplats: number;\n          extra: Record<string, unknown>;\n        };\n        return { packedArray, numSplats, extra };\n      });\n    }\n    case SplatFileType.SPLAT: {\n      return await withWorker(async (worker) => {\n        const { packedArray, numSplats } = (await worker.call(\n          \"decodeAntiSplat\",\n          {\n            fileBytes,\n            splatEncoding,\n          },\n        )) as { packedArray: Uint32Array; numSplats: number };\n        return { packedArray, numSplats };\n      });\n    }\n    case SplatFileType.KSPLAT: {\n      return await withWorker(async (worker) => {\n        const { packedArray, numSplats, extra } = (await worker.call(\n          \"decodeKsplat\",\n          { fileBytes, splatEncoding },\n        )) as {\n          packedArray: Uint32Array;\n          numSplats: number;\n          extra: Record<string, unknown>;\n        };\n        return { packedArray, numSplats, extra };\n      });\n    }\n    case SplatFileType.PCSOGS: {\n      return await withWorker(async (worker) => {\n        const { packedArray, numSplats, extra } = (await worker.call(\n          \"decodePcSogs\",\n          { fileBytes, extraFiles, splatEncoding },\n        )) as {\n          packedArray: Uint32Array;\n          numSplats: number;\n          extra: Record<string, unknown>;\n        };\n        return { packedArray, numSplats, extra };\n      });\n    }\n    case SplatFileType.PCSOGSZIP: {\n      return await withWorker(async (worker) => {\n        const { packedArray, numSplats, extra } = (await worker.call(\n          \"decodePcSogsZip\",\n          { fileBytes, splatEncoding },\n        )) as {\n          packedArray: Uint32Array;\n          numSplats: number;\n          extra: Record<string, unknown>;\n        };\n        return { packedArray, numSplats, extra };\n      });\n    }\n    default: {\n      throw new Error(`Unknown splat file type: ${splatFileType}`);\n    }\n  }\n}\n\nexport class SplatData {\n  numSplats: number;\n  maxSplats: number;\n  centers: Float32Array;\n  scales: Float32Array;\n  quaternions: Float32Array;\n  opacities: Float32Array;\n  colors: Float32Array;\n  sh1?: Float32Array;\n  sh2?: Float32Array;\n  sh3?: Float32Array;\n\n  constructor({ maxSplats = 1 }: { maxSplats?: number } = {}) {\n    this.numSplats = 0;\n    this.maxSplats = getTextureSize(maxSplats).maxSplats;\n    this.centers = new Float32Array(this.maxSplats * 3);\n    this.scales = new Float32Array(this.maxSplats * 3);\n    this.quaternions = new Float32Array(this.maxSplats * 4);\n    this.opacities = new Float32Array(this.maxSplats);\n    this.colors = new Float32Array(this.maxSplats * 3);\n  }\n\n  pushSplat(): number {\n    const index = this.numSplats;\n    this.ensureIndex(index);\n    this.numSplats += 1;\n    return index;\n  }\n\n  unpushSplat(index: number) {\n    if (index === this.numSplats - 1) {\n      this.numSplats -= 1;\n    } else {\n      throw new Error(\"Cannot unpush splat from non-last position\");\n    }\n  }\n\n  ensureCapacity(numSplats: number) {\n    if (numSplats > this.maxSplats) {\n      const targetSplats = Math.max(numSplats, this.maxSplats * 2);\n      const newCenters = new Float32Array(targetSplats * 3);\n      const newScales = new Float32Array(targetSplats * 3);\n      const newQuaternions = new Float32Array(targetSplats * 4);\n      const newOpacities = new Float32Array(targetSplats);\n      const newColors = new Float32Array(targetSplats * 3);\n      newCenters.set(this.centers);\n      newScales.set(this.scales);\n      newQuaternions.set(this.quaternions);\n      newOpacities.set(this.opacities);\n      newColors.set(this.colors);\n      this.centers = newCenters;\n      this.scales = newScales;\n      this.quaternions = newQuaternions;\n      this.opacities = newOpacities;\n      this.colors = newColors;\n\n      if (this.sh1) {\n        const newSh1 = new Float32Array(targetSplats * 9);\n        newSh1.set(this.sh1);\n        this.sh1 = newSh1;\n      }\n      if (this.sh2) {\n        const newSh2 = new Float32Array(targetSplats * 15);\n        newSh2.set(this.sh2);\n        this.sh2 = newSh2;\n      }\n      if (this.sh3) {\n        const newSh3 = new Float32Array(targetSplats * 21);\n        newSh3.set(this.sh3);\n        this.sh3 = newSh3;\n      }\n\n      this.maxSplats = targetSplats;\n    }\n  }\n\n  ensureIndex(index: number) {\n    this.ensureCapacity(index + 1);\n  }\n\n  setCenter(index: number, x: number, y: number, z: number) {\n    this.centers[index * 3] = x;\n    this.centers[index * 3 + 1] = y;\n    this.centers[index * 3 + 2] = z;\n  }\n\n  setScale(index: number, scaleX: number, scaleY: number, scaleZ: number) {\n    this.scales[index * 3] = scaleX;\n    this.scales[index * 3 + 1] = scaleY;\n    this.scales[index * 3 + 2] = scaleZ;\n  }\n\n  setQuaternion(index: number, x: number, y: number, z: number, w: number) {\n    this.quaternions[index * 4] = x;\n    this.quaternions[index * 4 + 1] = y;\n    this.quaternions[index * 4 + 2] = z;\n    this.quaternions[index * 4 + 3] = w;\n  }\n\n  setOpacity(index: number, opacity: number) {\n    this.opacities[index] = opacity;\n  }\n\n  setColor(index: number, r: number, g: number, b: number) {\n    this.colors[index * 3] = r;\n    this.colors[index * 3 + 1] = g;\n    this.colors[index * 3 + 2] = b;\n  }\n\n  setSh1(index: number, sh1: Float32Array) {\n    if (!this.sh1) {\n      this.sh1 = new Float32Array(this.maxSplats * 9);\n    }\n    for (let j = 0; j < 9; ++j) {\n      this.sh1[index * 9 + j] = sh1[j];\n    }\n  }\n\n  setSh2(index: number, sh2: Float32Array) {\n    if (!this.sh2) {\n      this.sh2 = new Float32Array(this.maxSplats * 15);\n    }\n    for (let j = 0; j < 15; ++j) {\n      this.sh2[index * 15 + j] = sh2[j];\n    }\n  }\n\n  setSh3(index: number, sh3: Float32Array) {\n    if (!this.sh3) {\n      this.sh3 = new Float32Array(this.maxSplats * 21);\n    }\n    for (let j = 0; j < 21; ++j) {\n      this.sh3[index * 21 + j] = sh3[j];\n    }\n  }\n}\n\nexport async function transcodeSpz(\n  input: TranscodeSpzInput,\n): Promise<{ input: TranscodeSpzInput; fileBytes: Uint8Array }> {\n  return await withWorker(async (worker) => {\n    const result = (await worker.call(\"transcodeSpz\", input)) as {\n      input: TranscodeSpzInput;\n      fileBytes: Uint8Array;\n    };\n    return result;\n  });\n}\n\nexport type FileInput = {\n  fileBytes: Uint8Array;\n  fileType?: SplatFileType;\n  pathOrUrl?: string;\n  transform?: { translate?: number[]; quaternion?: number[]; scale?: number };\n};\n\nexport type TranscodeSpzInput = {\n  inputs: FileInput[];\n  maxSh?: number;\n  clipXyz?: { min: number[]; max: number[] };\n  fractionalBits?: number;\n  opacityThreshold?: number;\n};\n","precision highp float;\nprecision highp int;\nprecision highp sampler2D;\nprecision highp usampler2D;\nprecision highp isampler2D;\nprecision highp sampler2DArray;\nprecision highp usampler2DArray;\nprecision highp isampler2DArray;\nprecision highp sampler3D;\nprecision highp usampler3D;\nprecision highp isampler3D;\n\n#include <splatDefines>\n\nuniform uint targetLayer;\nuniform int targetBase;\nuniform int targetCount;\n\nout uvec4 target;\n\n{{ GLOBALS }}\n\nvoid produceSplat(int index) {\n    {{ STATEMENTS }}\n}\n\nvoid main() {\n    int targetIndex = int(targetLayer << SPLAT_TEX_LAYER_BITS) + int(uint(gl_FragCoord.y) << SPLAT_TEX_WIDTH_BITS) + int(gl_FragCoord.x);\n    int index = targetIndex - targetBase;\n\n    if ((index >= 0) && (index < targetCount)) {\n        produceSplat(index);\n    } else {\n        target = uvec4(0u, 0u, 0u, 0u);\n    }\n}\n","import * as THREE from \"three\";\nimport { FullScreenQuad } from \"three/addons/postprocessing/Pass.js\";\n\nimport type { GsplatGenerator } from \"./SplatGenerator\";\nimport { type SplatFileType, SplatLoader, unpackSplats } from \"./SplatLoader\";\nimport {\n  LN_SCALE_MAX,\n  LN_SCALE_MIN,\n  SPLAT_TEX_HEIGHT,\n  SPLAT_TEX_WIDTH,\n} from \"./defines\";\nimport {\n  DynoProgram,\n  DynoProgramTemplate,\n  DynoUniform,\n  DynoVec2,\n  DynoVec4,\n  dynoBlock,\n  outputPackedSplat,\n} from \"./dyno\";\nimport { TPackedSplats, definePackedSplats } from \"./dyno/splats\";\nimport computeUvec4Template from \"./shaders/computeUvec4.glsl\";\nimport { getTextureSize, setPackedSplat, unpackSplat } from \"./utils\";\n\nexport type SplatEncoding = {\n  rgbMin?: number;\n  rgbMax?: number;\n  lnScaleMin?: number;\n  lnScaleMax?: number;\n  sh1Min?: number;\n  sh1Max?: number;\n  sh2Min?: number;\n  sh2Max?: number;\n  sh3Min?: number;\n  sh3Max?: number;\n};\n\nexport const DEFAULT_SPLAT_ENCODING: SplatEncoding = {\n  rgbMin: 0,\n  rgbMax: 1,\n  lnScaleMin: LN_SCALE_MIN,\n  lnScaleMax: LN_SCALE_MAX,\n  sh1Min: -1,\n  sh1Max: 1,\n  sh2Min: -1,\n  sh2Max: 1,\n  sh3Min: -1,\n  sh3Max: 1,\n};\n\n// Initialize a PackedSplats collection from source data via\n// url, fileBytes, or packedArray. Creates an empty array if none are set,\n// and splat data can be constructed using pushSplat()/setSplat(). The maximum\n// splat size allocation will grow automatically, starting from maxSplats.\nexport type PackedSplatsOptions = {\n  // URL to fetch a Gaussian splat file from (supports .ply, .splat, .ksplat,\n  // .spz formats). (default: undefined)\n  url?: string;\n  // Raw bytes of a Gaussian splat file to decode directly instead of fetching\n  // from URL. (default: undefined)\n  fileBytes?: Uint8Array | ArrayBuffer;\n  // Override the file type detection for formats that can't be reliably\n  // auto-detected (.splat, .ksplat). (default: undefined auto-detects other\n  // formats from file contents)\n  fileType?: SplatFileType;\n  // File name to use for type detection. (default: undefined)\n  fileName?: string;\n  // Reserve space for at least this many splats when constructing the collection\n  // initially. The array will automatically resize past maxSplats so setting it is\n  // an optional optimization. (default: 0)\n  maxSplats?: number;\n  // Use provided packed data array, where each 4 consecutive uint32 values\n  // encode one \"packed\" Gsplat. (default: undefined)\n  packedArray?: Uint32Array;\n  // Override number of splats in packed array to use only a subset.\n  // (default: length of packed array / 4)\n  numSplats?: number;\n  // Callback function to programmatically create splats at initialization.\n  // (default: undefined)\n  construct?: (splats: PackedSplats) => Promise<void> | void;\n  // Additional splat data, such as spherical harmonics components (sh1, sh2, sh3). (default: {})\n  extra?: Record<string, unknown>;\n  // Override the default splat encoding ranges for the PackedSplats.\n  // (default: undefined)\n  splatEncoding?: SplatEncoding;\n};\n\n// A PackedSplats is a collection of Gaussian splats, packed into a format that\n// takes exactly 16 bytes per Gsplat to maximize memory and cache efficiency.\n// The center xyz coordinates are encoded as float16 (3 x 2 bytes), scale xyz\n// as 3 x uint8 that encode a log scale from e^-12 to e^9, rgba as 4 x uint8,\n// and quaternion encoded via axis+angle using 2 x uint8 for octahedral encoding\n// of the axis direction and a uint8 to encode rotation amount from 0..Pi.\n\nexport class PackedSplats {\n  maxSplats = 0;\n  numSplats = 0;\n  packedArray: Uint32Array | null = null;\n  extra: Record<string, unknown>;\n  splatEncoding?: SplatEncoding;\n\n  initialized: Promise<PackedSplats>;\n  isInitialized = false;\n\n  // Either target or source will be non-null, depending on whether the PackedSplats\n  // is being used as a data source or generated to.\n  target: THREE.WebGLArrayRenderTarget | null = null;\n  source: THREE.DataArrayTexture | null = null;\n  // Set to true if source packedArray is updated to have it upload to GPU\n  needsUpdate = true;\n\n  // A PackedSplats can be used in a dyno graph using the below property dyno:\n  // const gsplat = dyno.readPackedSplats(this.dyno, dynoIndex);\n  dyno: DynoUniform<typeof TPackedSplats, \"packedSplats\">;\n  dynoRgbMinMaxLnScaleMinMax: DynoUniform<\"vec4\", \"rgbMinMaxLnScaleMinMax\">;\n  dynoSh1MinMax: DynoUniform<\"vec2\", \"sh1MinMax\">;\n  dynoSh2MinMax: DynoUniform<\"vec2\", \"sh2MinMax\">;\n  dynoSh3MinMax: DynoUniform<\"vec2\", \"sh3MinMax\">;\n\n  constructor(options: PackedSplatsOptions = {}) {\n    this.extra = {};\n    this.dyno = new DynoPackedSplats({ packedSplats: this });\n    this.dynoRgbMinMaxLnScaleMinMax = new DynoVec4({\n      key: \"rgbMinMaxLnScaleMinMax\",\n      value: new THREE.Vector4(0.0, 1.0, LN_SCALE_MIN, LN_SCALE_MAX),\n      update: (value) => {\n        value.set(\n          this.splatEncoding?.rgbMin ?? 0.0,\n          this.splatEncoding?.rgbMax ?? 1.0,\n          this.splatEncoding?.lnScaleMin ?? LN_SCALE_MIN,\n          this.splatEncoding?.lnScaleMax ?? LN_SCALE_MAX,\n        );\n        return value;\n      },\n    });\n    this.dynoSh1MinMax = new DynoVec2({\n      key: \"sh1MinMax\",\n      value: new THREE.Vector2(-1, 1),\n      update: (value) => {\n        value.set(\n          this.splatEncoding?.sh1Min ?? -1,\n          this.splatEncoding?.sh1Max ?? 1,\n        );\n        return value;\n      },\n    });\n    this.dynoSh2MinMax = new DynoVec2({\n      key: \"sh2MinMax\",\n      value: new THREE.Vector2(-1, 1),\n      update: (value) => {\n        value.set(\n          this.splatEncoding?.sh2Min ?? -1,\n          this.splatEncoding?.sh2Max ?? 1,\n        );\n        return value;\n      },\n    });\n    this.dynoSh3MinMax = new DynoVec2({\n      key: \"sh3MinMax\",\n      value: new THREE.Vector2(-1, 1),\n      update: (value) => {\n        value.set(\n          this.splatEncoding?.sh3Min ?? -1,\n          this.splatEncoding?.sh3Max ?? 1,\n        );\n        return value;\n      },\n    });\n\n    // The following line will be overridden by reinitialize()\n    this.initialized = Promise.resolve(this);\n    this.reinitialize(options);\n  }\n\n  reinitialize(options: PackedSplatsOptions) {\n    this.isInitialized = false;\n\n    this.extra = {};\n    this.splatEncoding = options.splatEncoding;\n\n    if (options.url || options.fileBytes || options.construct) {\n      // We need to initialize asynchronously given the options\n      this.initialized = this.asyncInitialize(options).then(() => {\n        this.isInitialized = true;\n        return this;\n      });\n    } else {\n      this.initialize(options);\n      this.isInitialized = true;\n      this.initialized = Promise.resolve(this);\n    }\n  }\n\n  initialize(options: PackedSplatsOptions) {\n    if (options.packedArray) {\n      this.packedArray = options.packedArray;\n      // Calculate number of horizontal texture rows that could fit in array.\n      // A properly initialized packedArray should already take into account the\n      // width and height of the texture and be rounded up with padding.\n      this.maxSplats = Math.floor(this.packedArray.length / 4);\n      this.maxSplats =\n        Math.floor(this.maxSplats / SPLAT_TEX_WIDTH) * SPLAT_TEX_WIDTH;\n      this.numSplats = Math.min(\n        this.maxSplats,\n        options.numSplats ?? Number.POSITIVE_INFINITY,\n      );\n    } else {\n      this.maxSplats = options.maxSplats ?? 0;\n      this.numSplats = 0;\n    }\n    this.extra = options.extra ?? {};\n  }\n\n  async asyncInitialize(options: PackedSplatsOptions) {\n    const { url, fileBytes, construct } = options;\n    if (url) {\n      const loader = new SplatLoader();\n      loader.packedSplats = this;\n      await loader.loadAsync(url);\n    } else if (fileBytes) {\n      const unpacked = await unpackSplats({\n        input: fileBytes,\n        fileType: options.fileType,\n        pathOrUrl: options.fileName ?? url,\n        splatEncoding: options.splatEncoding ?? DEFAULT_SPLAT_ENCODING,\n      });\n      this.initialize(unpacked);\n    }\n\n    if (construct) {\n      const maybePromise = construct(this);\n      // If construct returns a promise, wait for it to complete\n      if (maybePromise instanceof Promise) {\n        await maybePromise;\n      }\n    }\n  }\n\n  // Call this when you are finished with the PackedSplats and want to free\n  // any buffers it holds.\n  dispose() {\n    if (this.target) {\n      this.target.dispose();\n      this.target = null;\n    }\n    if (this.source) {\n      this.source.dispose();\n      this.source = null;\n    }\n  }\n\n  // Ensures that this.packedArray can fit numSplats Gsplats. If it's too small,\n  // resize exponentially and copy over the original data.\n  //\n  // Typically you don't need to call this, because calling this.setSplat(index, ...)\n  // and this.pushSplat(...) will automatically call ensureSplats() so we have\n  // enough splats.\n  ensureSplats(numSplats: number): Uint32Array {\n    const targetSize =\n      numSplats <= this.maxSplats\n        ? this.maxSplats\n        : // Grow exponentially to avoid frequent reallocations\n          Math.max(numSplats, 2 * this.maxSplats);\n    const currentSize = !this.packedArray ? 0 : this.packedArray.length / 4;\n\n    if (!this.packedArray || targetSize > currentSize) {\n      this.maxSplats = getTextureSize(targetSize).maxSplats;\n      const newArray = new Uint32Array(this.maxSplats * 4);\n      if (this.packedArray) {\n        // Copy over existing data\n        newArray.set(this.packedArray);\n      }\n      this.packedArray = newArray;\n    }\n    return this.packedArray;\n  }\n\n  // Ensure the extra array for the given level is large enough to hold numSplats\n  ensureSplatsSh(level: number, numSplats: number): Uint32Array {\n    let wordsPerSplat: number;\n    let key: string;\n    if (level === 0) {\n      return this.ensureSplats(numSplats);\n    }\n    if (level === 1) {\n      // 3 x 3 uint7 = 63 bits = 2 uint32\n      wordsPerSplat = 2;\n      key = \"sh1\";\n    } else if (level === 2) {\n      // 5 x 3 uint8 = 120 bits = 4 uint32\n      wordsPerSplat = 4;\n      key = \"sh2\";\n    } else if (level === 3) {\n      // 7 x 3 uint6 = 126 bits = 4 uint32\n      wordsPerSplat = 4;\n      key = \"sh3\";\n    } else {\n      throw new Error(`Invalid level: ${level}`);\n    }\n\n    // Figure out our current and desired maxSplats\n    let maxSplats: number = !this.extra[key]\n      ? 0\n      : (this.extra[key] as Uint32Array).length / wordsPerSplat;\n    const targetSize =\n      numSplats <= maxSplats ? maxSplats : Math.max(numSplats, 2 * maxSplats);\n\n    if (!this.extra[key] || targetSize > maxSplats) {\n      // Reallocate the array\n      maxSplats = getTextureSize(targetSize).maxSplats;\n      const newArray = new Uint32Array(maxSplats * wordsPerSplat);\n      if (this.extra[key]) {\n        // Copy over existing data\n        newArray.set(this.extra[key] as Uint32Array);\n      }\n      this.extra[key] = newArray;\n    }\n    return this.extra[key] as Uint32Array;\n  }\n\n  // Unpack the 16-byte Gsplat data at index into the Three.js components\n  // center: THREE.Vector3, scales: THREE.Vector3, quaternion: THREE.Quaternion,\n  // opacity: number 0..1, color: THREE.Color 0..1.\n  getSplat(index: number): {\n    center: THREE.Vector3;\n    scales: THREE.Vector3;\n    quaternion: THREE.Quaternion;\n    opacity: number;\n    color: THREE.Color;\n  } {\n    if (!this.packedArray || index >= this.numSplats) {\n      throw new Error(\"Invalid index\");\n    }\n    return unpackSplat(this.packedArray, index, this.splatEncoding);\n  }\n\n  // Set all PackedSplat components at index with the provided Gsplat attributes\n  // (can be the same objects returned by getSplat). Ensures there is capacity\n  // for at least index+1 Gsplats.\n  setSplat(\n    index: number,\n    center: THREE.Vector3,\n    scales: THREE.Vector3,\n    quaternion: THREE.Quaternion,\n    opacity: number,\n    color: THREE.Color,\n  ) {\n    const packedSplats = this.ensureSplats(index + 1);\n    setPackedSplat(\n      packedSplats,\n      index,\n      center.x,\n      center.y,\n      center.z,\n      scales.x,\n      scales.y,\n      scales.z,\n      quaternion.x,\n      quaternion.y,\n      quaternion.z,\n      quaternion.w,\n      opacity,\n      color.r,\n      color.g,\n      color.b,\n    );\n    this.numSplats = Math.max(this.numSplats, index + 1);\n  }\n\n  // Effectively calls this.setSplat(this.numSplats++, center, ...), useful on\n  // construction where you just want to iterate and create a collection of Gsplats.\n  pushSplat(\n    center: THREE.Vector3,\n    scales: THREE.Vector3,\n    quaternion: THREE.Quaternion,\n    opacity: number,\n    color: THREE.Color,\n  ) {\n    const packedSplats = this.ensureSplats(this.numSplats + 1);\n    setPackedSplat(\n      packedSplats,\n      this.numSplats,\n      center.x,\n      center.y,\n      center.z,\n      scales.x,\n      scales.y,\n      scales.z,\n      quaternion.x,\n      quaternion.y,\n      quaternion.z,\n      quaternion.w,\n      opacity,\n      color.r,\n      color.g,\n      color.b,\n    );\n    ++this.numSplats;\n  }\n\n  // Iterate over Gsplats index 0..=(this.numSplats-1), unpack each Gsplat\n  // and invoke the callback function with the Gsplat attributes.\n  forEachSplat(\n    callback: (\n      index: number,\n      center: THREE.Vector3,\n      scales: THREE.Vector3,\n      quaternion: THREE.Quaternion,\n      opacity: number,\n      color: THREE.Color,\n    ) => void,\n  ) {\n    if (!this.packedArray || !this.numSplats) {\n      return;\n    }\n    for (let i = 0; i < this.numSplats; ++i) {\n      const unpacked = unpackSplat(this.packedArray, i, this.splatEncoding);\n      callback(\n        i,\n        unpacked.center,\n        unpacked.scales,\n        unpacked.quaternion,\n        unpacked.opacity,\n        unpacked.color,\n      );\n    }\n  }\n\n  // Ensures our PackedSplats.target render target has enough space to generate\n  // maxSplats total Gsplats, and reallocate if not large enough.\n  ensureGenerate(maxSplats: number): boolean {\n    if (this.target && (maxSplats ?? 1) <= this.maxSplats) {\n      return false;\n    }\n    this.dispose();\n\n    const textureSize = getTextureSize(maxSplats ?? 1);\n    const { width, height, depth } = textureSize;\n    this.maxSplats = textureSize.maxSplats;\n\n    // The packed Gsplats are stored in a 2D array texture of max size\n    // 2048 x 2048 x 2048, one RGBA32UI pixel = 4 uint32 = one Gsplat\n    this.target = new THREE.WebGLArrayRenderTarget(width, height, depth, {\n      depthBuffer: false,\n      stencilBuffer: false,\n      generateMipmaps: false,\n      magFilter: THREE.NearestFilter,\n      minFilter: THREE.NearestFilter,\n    });\n    this.target.texture.format = THREE.RGBAIntegerFormat;\n    this.target.texture.type = THREE.UnsignedIntType;\n    this.target.texture.internalFormat = \"RGBA32UI\";\n    this.target.scissorTest = true;\n    return true;\n  }\n\n  // Given an array of splatCounts (.numSplats for each\n  // SplatGenerator/SplatMesh in the scene), compute a\n  // \"mapping layout\" in the composite array of generated outputs.\n  generateMapping(splatCounts: number[]): {\n    maxSplats: number;\n    mapping: { base: number; count: number }[];\n  } {\n    let maxSplats = 0;\n    const mapping = splatCounts.map((numSplats) => {\n      const base = maxSplats;\n      // Generation happens in horizonal row chunks, so round up to full width\n      const rounded = Math.ceil(numSplats / SPLAT_TEX_WIDTH) * SPLAT_TEX_WIDTH;\n      maxSplats += rounded;\n      return { base, count: numSplats };\n    });\n    return { maxSplats, mapping };\n  }\n\n  // Returns a THREE.DataArrayTexture representing the PackedSplats content as\n  // a Uint32x4 data array texture (2048 x 2048 x depth in size)\n  getTexture(): THREE.DataArrayTexture {\n    if (this.target) {\n      // Return the render target's texture\n      return this.target.texture;\n    }\n    if (this.source || this.packedArray) {\n      // Update source texture if needed and return\n      const source = this.maybeUpdateSource();\n      return source;\n    }\n\n    return PackedSplats.getEmpty();\n  }\n\n  // Check if source texture needs to be created/updated\n  private maybeUpdateSource(): THREE.DataArrayTexture {\n    if (!this.packedArray) {\n      throw new Error(\"No packed splats\");\n    }\n\n    if (this.needsUpdate || !this.source) {\n      this.needsUpdate = false;\n\n      if (this.source) {\n        const { width, height, depth } = this.source.image;\n        if (this.maxSplats !== width * height * depth) {\n          // The existing source texture isn't the right size, so dispose it\n          this.source.dispose();\n          this.source = null;\n        }\n      }\n      if (!this.source) {\n        // Allocate a new source texture of the right size\n        const { width, height, depth } = getTextureSize(this.maxSplats);\n        this.source = new THREE.DataArrayTexture(\n          this.packedArray,\n          width,\n          height,\n          depth,\n        );\n        this.source.format = THREE.RGBAIntegerFormat;\n        this.source.type = THREE.UnsignedIntType;\n        this.source.internalFormat = \"RGBA32UI\";\n        this.source.needsUpdate = true;\n      } else if (this.packedArray.buffer !== this.source.image.data.buffer) {\n        // The source texture is the right size, update the data\n        this.source.image.data = new Uint8Array(this.packedArray.buffer);\n      }\n      // Indicate to Three.js that the source texture needs to be uploaded to the GPU\n      this.source.needsUpdate = true;\n    }\n    return this.source;\n  }\n\n  private static emptySource: THREE.DataArrayTexture | null = null;\n\n  // Can be used where you need an uninitialized THREE.DataArrayTexture like\n  // a uniform you will update with the result of this.getTexture() later.\n  static getEmpty(): THREE.DataArrayTexture {\n    if (!PackedSplats.emptySource) {\n      const { width, height, depth, maxSplats } = getTextureSize(1);\n      const emptyArray = new Uint32Array(maxSplats * 4);\n      PackedSplats.emptySource = new THREE.DataArrayTexture(\n        emptyArray,\n        width,\n        height,\n        depth,\n      );\n      PackedSplats.emptySource.format = THREE.RGBAIntegerFormat;\n      PackedSplats.emptySource.type = THREE.UnsignedIntType;\n      PackedSplats.emptySource.internalFormat = \"RGBA32UI\";\n      PackedSplats.emptySource.needsUpdate = true;\n    }\n    return PackedSplats.emptySource;\n  }\n\n  // Get a program and THREE.RawShaderMaterial for a given GsplatGenerator,\n  // generating it if necessary and caching the result.\n  prepareProgramMaterial(generator: GsplatGenerator): {\n    program: DynoProgram;\n    material: THREE.RawShaderMaterial;\n  } {\n    let program = PackedSplats.generatorProgram.get(generator);\n    if (!program) {\n      // A Gsplat needs to be turned into a packed uvec4 for the dyno graph\n      const graph = dynoBlock(\n        { index: \"int\" },\n        { output: \"uvec4\" },\n        ({ index }) => {\n          generator.inputs.index = index;\n          const gsplat = generator.outputs.gsplat;\n          const output = outputPackedSplat(\n            gsplat,\n            this.dynoRgbMinMaxLnScaleMinMax,\n          );\n          return { output };\n        },\n      );\n      if (!PackedSplats.programTemplate) {\n        PackedSplats.programTemplate = new DynoProgramTemplate(\n          computeUvec4Template,\n        );\n      }\n      // Create a program from the template and graph\n      program = new DynoProgram({\n        graph,\n        inputs: { index: \"index\" },\n        outputs: { output: \"target\" },\n        template: PackedSplats.programTemplate,\n      });\n      Object.assign(program.uniforms, {\n        targetLayer: { value: 0 },\n        targetBase: { value: 0 },\n        targetCount: { value: 0 },\n      });\n      PackedSplats.generatorProgram.set(generator, program);\n    }\n\n    // Prepare and update our material we'll use to render the Gsplats\n    const material = program.prepareMaterial();\n    PackedSplats.fullScreenQuad.material = material;\n    return { program, material };\n  }\n\n  private saveRenderState(renderer: THREE.WebGLRenderer) {\n    return {\n      xrEnabled: renderer.xr.enabled,\n      autoClear: renderer.autoClear,\n    };\n  }\n\n  private resetRenderState(\n    renderer: THREE.WebGLRenderer,\n    state: {\n      xrEnabled: boolean;\n      autoClear: boolean;\n    },\n  ) {\n    renderer.setRenderTarget(null);\n    renderer.xr.enabled = state.xrEnabled;\n    renderer.autoClear = state.autoClear;\n  }\n\n  // Executes a dyno program specified by generator which is any DynoBlock that\n  // maps { index: \"int\" } to { gsplat: Gsplat }. This is called in\n  // SparkRenderer.updateInternal() to re-generate Gsplats in the scene for\n  // SplatGenerator instances whose version is newer than what was generated\n  // for it last time.\n  generate({\n    generator,\n    base,\n    count,\n    renderer,\n  }: {\n    generator: GsplatGenerator;\n    base: number;\n    count: number;\n    renderer: THREE.WebGLRenderer;\n  }): { nextBase: number } {\n    if (!this.target) {\n      throw new Error(\"Target must be initialized with ensureSplats\");\n    }\n    if (base + count > this.maxSplats) {\n      throw new Error(\"Base + count exceeds maxSplats\");\n    }\n\n    const { program, material } = this.prepareProgramMaterial(generator);\n    program.update();\n\n    const renderState = this.saveRenderState(renderer);\n\n    // Generate the Gsplats in \"layer\" chunks, in horizontal row ranges,\n    // that cover the total count of Gsplats.\n    const nextBase =\n      Math.ceil((base + count) / SPLAT_TEX_WIDTH) * SPLAT_TEX_WIDTH;\n    const layerSize = SPLAT_TEX_WIDTH * SPLAT_TEX_HEIGHT;\n    material.uniforms.targetBase.value = base;\n    material.uniforms.targetCount.value = count;\n\n    // Keep generating layers until we've reached the next generation's base\n    while (base < nextBase) {\n      const layer = Math.floor(base / layerSize);\n      material.uniforms.targetLayer.value = layer;\n\n      const layerBase = layer * layerSize;\n      const layerYStart = Math.floor((base - layerBase) / SPLAT_TEX_WIDTH);\n      const layerYEnd = Math.min(\n        SPLAT_TEX_HEIGHT,\n        Math.ceil((nextBase - layerBase) / SPLAT_TEX_WIDTH),\n      );\n\n      // Render the desired portion of the layer\n      this.target.scissor.set(\n        0,\n        layerYStart,\n        SPLAT_TEX_WIDTH,\n        layerYEnd - layerYStart,\n      );\n      renderer.setRenderTarget(this.target, layer);\n      renderer.xr.enabled = false;\n      renderer.autoClear = false;\n      PackedSplats.fullScreenQuad.render(renderer);\n\n      base += SPLAT_TEX_WIDTH * (layerYEnd - layerYStart);\n    }\n\n    this.resetRenderState(renderer, renderState);\n    return { nextBase };\n  }\n\n  static programTemplate: DynoProgramTemplate | null = null;\n\n  // Cache for GsplatGenerator programs\n  static generatorProgram = new Map<GsplatGenerator, DynoProgram>();\n\n  // Static full-screen quad for pseudo-compute shader rendering\n  static fullScreenQuad = new FullScreenQuad(\n    new THREE.RawShaderMaterial({ visible: false }),\n  );\n}\n\n// You can use a PackedSplats as a dyno block using the function\n// dyno.readPackedSplats(packedSplats.dyno, dynoIndex) where\n// dynoIndex is of type DynoVal<\"int\">. If you need to be able to change\n// the input PackedSplats dynamically, however, you should create a\n// DynoPackedSplats, whose property packedSplats you can change to any\n// PackedSplats and that will be used in the dyno shader program.\n\nexport const dynoPackedSplats = (packedSplats?: PackedSplats) =>\n  new DynoPackedSplats({ packedSplats });\n\nexport class DynoPackedSplats extends DynoUniform<\n  typeof TPackedSplats,\n  \"packedSplats\",\n  {\n    texture: THREE.DataArrayTexture;\n    numSplats: number;\n    rgbMinMaxLnScaleMinMax: THREE.Vector4;\n  }\n> {\n  packedSplats?: PackedSplats;\n\n  constructor({ packedSplats }: { packedSplats?: PackedSplats } = {}) {\n    super({\n      key: \"packedSplats\",\n      type: TPackedSplats,\n      globals: () => [definePackedSplats],\n      value: {\n        texture: PackedSplats.getEmpty(),\n        numSplats: 0,\n        rgbMinMaxLnScaleMinMax: new THREE.Vector4(\n          0,\n          1,\n          LN_SCALE_MIN,\n          LN_SCALE_MAX,\n        ),\n      },\n      update: (value) => {\n        value.texture =\n          this.packedSplats?.getTexture() ?? PackedSplats.getEmpty();\n        value.numSplats = this.packedSplats?.numSplats ?? 0;\n        value.rgbMinMaxLnScaleMinMax.set(\n          this.packedSplats?.splatEncoding?.rgbMin ?? 0,\n          this.packedSplats?.splatEncoding?.rgbMax ?? 1,\n          this.packedSplats?.splatEncoding?.lnScaleMin ?? LN_SCALE_MIN,\n          this.packedSplats?.splatEncoding?.lnScaleMax ?? LN_SCALE_MAX,\n        );\n        return value;\n      },\n    });\n    this.packedSplats = packedSplats;\n  }\n}\n","import * as THREE from \"three\";\n\n// SplatGeometry is an internal class used by SparkRenderer to render a collection\n// of Gsplats in a single draw call by extending THREE.InstancedBufferGeometry.\n// Each Gsplat is drawn as two triangles, with the order of the Gsplats determined\n// by the instance attribute \"ordering\".\n\nexport class SplatGeometry extends THREE.InstancedBufferGeometry {\n  ordering: Uint32Array;\n  attribute: THREE.InstancedBufferAttribute;\n\n  constructor(ordering: Uint32Array, activeSplats: number) {\n    super();\n\n    this.ordering = ordering;\n\n    this.setAttribute(\"position\", new THREE.BufferAttribute(QUAD_VERTICES, 3));\n    this.setIndex(new THREE.BufferAttribute(QUAD_INDICES, 1));\n\n    // Hack to work around Three.js\n    // @ts-ignore\n    this._maxInstanceCount = ordering.length;\n    this.instanceCount = activeSplats;\n\n    this.attribute = new THREE.InstancedBufferAttribute(ordering, 1, false, 1);\n    this.attribute.setUsage(THREE.DynamicDrawUsage);\n    this.setAttribute(\"splatIndex\", this.attribute);\n  }\n\n  update(ordering: Uint32Array, activeSplats: number) {\n    this.ordering = ordering;\n    this.attribute.array = ordering;\n    this.instanceCount = activeSplats;\n    this.attribute.addUpdateRange(0, activeSplats);\n    this.attribute.needsUpdate = true;\n  }\n}\n\n// Each instance draws to triangles covering a quad over coords (-1,-1,0)..(1,1,0)\nconst QUAD_VERTICES = new Float32Array([\n  -1, -1, 0, 1, -1, 0, 1, 1, 0, -1, 1, 0,\n]);\n\nconst QUAD_INDICES = new Uint16Array([0, 1, 2, 0, 2, 3]);\n","import * as THREE from \"three\";\n\nimport { DynoPackedSplats } from \"./PackedSplats\";\nimport { Readback } from \"./Readback\";\nimport type { SparkRenderer } from \"./SparkRenderer\";\nimport type { SplatAccumulator } from \"./SplatAccumulator\";\nimport { SplatGeometry } from \"./SplatGeometry\";\nimport {\n  type DynoBlock,\n  DynoBool,\n  DynoFloat,\n  type DynoVal,\n  DynoVec3,\n  Gsplat,\n  add,\n  combine,\n  defineGsplat,\n  dyno,\n  dynoBlock,\n  dynoConst,\n  floatBitsToUint,\n  mul,\n  packHalf2x16,\n  readPackedSplat,\n  uintToRgba8,\n  unindent,\n  unindentLines,\n} from \"./dyno\";\nimport { withWorker } from \"./splatWorker\";\nimport { FreeList, withinCoorientDist } from \"./utils\";\n\nexport type SparkViewpointOptions = {\n  /**\n   * Controls whether to auto-update its sort order whenever the SparkRenderer\n   * updates the Gsplats. If you expect to render/display from this viewpoint\n   * most frames, set this to true.\n   * @default false\n   */\n  autoUpdate?: boolean;\n  /**\n   * Set a THREE.Camera for this viewpoint to follow.\n   * @default undefined\n   */\n  camera?: THREE.Camera;\n  /**\n   * Set an explicit view-to-world transformation matrix for this viewpoint (equivalent\n   * to camera.matrixWorld), overrides any camera setting.\n   * @default undefined\n   */\n  viewToWorld?: THREE.Matrix4;\n  /**\n   * Configure viewpoint with an off-screen render target.\n   * @default undefined\n   */\n  target?: {\n    /**\n     * Width of the render target in pixels.\n     */\n    width: number;\n    /**\n     * Height of the render target in pixels.\n     */\n    height: number;\n    /**\n     * If you want to be able to render a scene that depends on this target's\n     * output (for example, a recursive viewport), set this to true to enable\n     * double buffering.\n     * @default false\n     */\n    doubleBuffer?: boolean;\n    /**\n     * Super-sampling factor for the render target. Values 1-4 are supported.\n     * Note that re-sampling back down to .width x .height is done on the CPU\n     * with simple averaging only when calling readTarget().\n     * @default 1\n     */\n    superXY?: number;\n  };\n  /**\n   * Callback function that is called when the render target texture is updated.\n   * Receives the texture as a parameter. Use this to update a viewport with\n   * the latest viewpoint render each frame.\n   * @default undefined\n   */\n  onTextureUpdated?: (texture: THREE.Texture) => void;\n  /**\n   * Whether to sort splats radially (geometric distance) from the viewpoint (true)\n   * or by Z-depth (false). Most scenes are trained with the Z-depth sort metric\n   * and will render more accurately at certain viewpoints. However, radial sorting\n   * is more stable under viewpoint rotations.\n   * @default true\n   */\n  sortRadial?: boolean;\n  /**\n   * Distance threshold for re-sorting splats. If the viewpoint moves more than\n   * this distance, splats will be re-sorted.\n   * @default 0.01 units\n   */\n  sortDistance?: number;\n  /**\n   * View direction dot product threshold for re-sorting splats. For\n   * sortRadial: true we use 0.99 while sortRadial: false uses 0.999 because it is\n   * more sensitive to view direction.\n   * @default 0.99 if sortRadial else 0.999\n   */\n  sortCoorient?: boolean;\n  /**\n   * Constant added to Z-depth to bias values into the positive range for\n   * sortRadial: false, but also used for culling Gsplats \"well behind\"\n   * the viewpoint origin\n   * @default 1.0\n   */\n  depthBias?: number;\n  /**\n   * Set this to true if rendering a 360 to disable \"behind the viewpoint\"\n   * culling during sorting. This is set automatically when rendering 360 envMaps\n   * using the SparkRenderer.renderEnvMap() utility function.\n   * @default false\n   */\n  sort360?: boolean;\n  /*\n   * Set this to true to sort with float32 precision with two-pass sort.\n   * @default true\n   */\n  sort32?: boolean;\n};\n\n// A SparkViewpoint is created from and tied to a SparkRenderer, and represents\n// an independent viewpoint of all the scene Gsplats and their sort order. Making\n// these viewpoints explicit allows us to have multiple, simultaneous viewpoint\n// renders, for example for camera preview panes or overhead map views.\n//\n// When creating a SparkRenderer it automatically creates a default viewpoint\n// .defaultView that is used in the normal render loop when drawing to the canvas,\n// and is automatically updated whenever the camera moves. Additional viewpoints\n// can be created and configured separately.\n\nexport class SparkViewpoint {\n  spark: SparkRenderer;\n  autoUpdate: boolean;\n  camera?: THREE.Camera;\n  viewToWorld: THREE.Matrix4;\n  lastTime: number | null = null;\n\n  target?: THREE.WebGLRenderTarget;\n  private back?: THREE.WebGLRenderTarget;\n  onTextureUpdated?: (texture: THREE.Texture) => void;\n  encodeLinear = false;\n  superXY = 1;\n  private superPixels?: Uint8Array;\n  private pixels?: Uint8Array;\n\n  sortRadial: boolean;\n  sortDistance?: number;\n  sortCoorient?: boolean;\n  depthBias?: number;\n  sort360?: boolean;\n  sort32?: boolean;\n\n  display: {\n    accumulator: SplatAccumulator;\n    viewToWorld: THREE.Matrix4;\n    geometry: SplatGeometry;\n  } | null = null;\n\n  private sorting: { viewToWorld: THREE.Matrix4 } | null = null;\n  private pending: {\n    accumulator?: SplatAccumulator;\n    viewToWorld: THREE.Matrix4;\n    displayed: boolean;\n  } | null = null;\n  private sortingCheck = false;\n\n  private readback16: Uint16Array = new Uint16Array(0);\n  private readback32: Uint32Array = new Uint32Array(0);\n  private orderingFreelist: FreeList<Uint32Array, number>;\n\n  constructor(options: SparkViewpointOptions & { spark: SparkRenderer }) {\n    this.spark = options.spark;\n    this.camera = options.camera;\n    this.viewToWorld = options.viewToWorld ?? new THREE.Matrix4();\n\n    if (options.target) {\n      const { width, height, doubleBuffer } = options.target;\n      const superXY = Math.max(1, Math.min(4, options.target.superXY ?? 1));\n      this.superXY = superXY;\n      if (width * superXY > 8192 || height * superXY > 8192) {\n        throw new Error(\"Target size too large\");\n      }\n\n      this.target = new THREE.WebGLRenderTarget(\n        width * superXY,\n        height * superXY,\n        {\n          format: THREE.RGBAFormat,\n          type: THREE.UnsignedByteType,\n          colorSpace: THREE.SRGBColorSpace,\n        },\n      );\n      if (doubleBuffer) {\n        this.back = new THREE.WebGLRenderTarget(\n          width * superXY,\n          height * superXY,\n          {\n            format: THREE.RGBAFormat,\n            type: THREE.UnsignedByteType,\n            colorSpace: THREE.SRGBColorSpace,\n          },\n        );\n      }\n      this.encodeLinear = true;\n    }\n    this.onTextureUpdated = options.onTextureUpdated;\n\n    this.sortRadial = options.sortRadial ?? true;\n    this.sortDistance = options.sortDistance;\n    this.sortCoorient = options.sortCoorient;\n    this.depthBias = options.depthBias;\n    this.sort360 = options.sort360;\n    this.sort32 = options.sort32;\n\n    this.orderingFreelist = new FreeList({\n      allocate: (maxSplats) => new Uint32Array(maxSplats),\n      valid: (ordering, maxSplats) => ordering.length === maxSplats,\n    });\n\n    this.autoUpdate = false;\n    this.setAutoUpdate(options.autoUpdate ?? false);\n  }\n\n  // Call this when you are done with the SparkViewpoint and want to\n  // free up its resources (GPU targets, pixel buffers, etc.)\n  dispose() {\n    this.setAutoUpdate(false);\n    if (this.target) {\n      this.target.dispose();\n      this.target = undefined;\n    }\n    if (this.back) {\n      this.back.dispose();\n      this.back = undefined;\n    }\n    if (this.display) {\n      this.spark.releaseAccumulator(this.display.accumulator);\n      this.display.geometry.dispose();\n      this.display = null;\n    }\n    if (this.pending?.accumulator) {\n      this.spark.releaseAccumulator(this.pending.accumulator);\n      this.pending = null;\n    }\n  }\n\n  // Use this function to change whether this viewpoint will auto-update\n  // its sort order whenever the attached SparkRenderer updates the Gsplats.\n  // Turn this on or off depending on whether you expect to do renders from\n  // this viewpoint most frames.\n  setAutoUpdate(autoUpdate: boolean) {\n    if (!this.autoUpdate && autoUpdate) {\n      this.spark.autoViewpoints.push(this);\n    } else if (this.autoUpdate && !autoUpdate) {\n      this.spark.autoViewpoints = this.spark.autoViewpoints.filter(\n        (v) => v !== this,\n      );\n    }\n    this.autoUpdate = autoUpdate;\n  }\n\n  // See below async prepareRenderPixels() for explanation of parameters.\n  // Awaiting this method updates the Gsplats in the scene and performs a sort of the\n  // Gsplats from this viewpoint, preparing it for a subsequent this.renderTarget()\n  // call in the same tick.\n  async prepare({\n    scene,\n    camera,\n    viewToWorld,\n    update,\n    forceOrigin,\n  }: {\n    scene: THREE.Scene;\n    camera?: THREE.Camera;\n    viewToWorld?: THREE.Matrix4;\n    update?: boolean;\n    forceOrigin?: boolean;\n  }) {\n    if (viewToWorld) {\n      this.viewToWorld = viewToWorld;\n    } else {\n      this.camera = camera ?? this.camera;\n      if (this.camera) {\n        this.camera.updateMatrixWorld();\n        this.viewToWorld = this.camera.matrixWorld.clone();\n      }\n    }\n    while (update ?? true) {\n      // Force an update, possibly with origin centered at this camera\n      // to yield the best quality output.\n      const originToWorld = forceOrigin ? this.viewToWorld : undefined;\n      const updated = this.spark.updateInternal({ scene, originToWorld });\n      if (updated) {\n        break;\n      }\n      // A bit of a hack, but try again. We shouldn't be starved for long.\n      await new Promise((resolve) => setTimeout(resolve, 10));\n    }\n\n    const accumulator = this.spark.active;\n    if (accumulator !== this.display?.accumulator) {\n      this.spark.active.refCount += 1;\n    }\n    await this.sortUpdate({ accumulator, viewToWorld: this.viewToWorld });\n  }\n\n  // Render out the viewpoint to the view target RGBA buffer.\n  // Swaps buffers if doubleBuffer: true was set.\n  // Calls onTextureUpdated(texture) with the resulting texture.\n  renderTarget({\n    scene,\n    camera,\n  }: { scene: THREE.Scene; camera?: THREE.Camera }) {\n    const target = this.back ?? this.target;\n    if (!target) {\n      throw new Error(\"Must initialize SparkViewpoint with target\");\n    }\n\n    camera = camera ?? this.camera;\n    if (!camera) {\n      throw new Error(\"Must provide camera\");\n    }\n    if (camera instanceof THREE.PerspectiveCamera) {\n      const newCam = new THREE.PerspectiveCamera().copy(camera, false);\n      newCam.aspect = target.width / target.height;\n      newCam.updateProjectionMatrix();\n      camera = newCam;\n    }\n    this.viewToWorld = camera.matrixWorld.clone();\n\n    try {\n      this.spark.renderer.setRenderTarget(target);\n      this.spark.prepareViewpoint(this);\n\n      this.spark.renderer.render(scene, camera);\n    } finally {\n      this.spark.prepareViewpoint(this.spark.defaultView);\n      this.spark.renderer.setRenderTarget(null);\n    }\n\n    if (target !== this.target) {\n      // Swap back buffer and target\n      [this.target, this.back] = [this.back, this.target];\n    }\n    this.onTextureUpdated?.(target.texture);\n  }\n\n  // Read back the previously rendered target image as a Uint8Array of packed\n  // RGBA values (in that order). If superXY was set greater than 1 then\n  // downsampling is performed in the target pixel array with simple averaging\n  // to derive the returned pixel values. Subsequent calls to this.readTarget()\n  // will reuse the same buffers to minimize memory allocations.\n  async readTarget(): Promise<Uint8Array> {\n    if (!this.target) {\n      throw new Error(\"Must initialize SparkViewpoint with target\");\n    }\n    const { width, height } = this.target;\n    const byteSize = width * height * 4;\n    if (!this.superPixels || this.superPixels.length < byteSize) {\n      this.superPixels = new Uint8Array(byteSize);\n    }\n    await this.spark.renderer.readRenderTargetPixelsAsync(\n      this.target,\n      0,\n      0,\n      width,\n      height,\n      this.superPixels,\n    );\n\n    const { superXY } = this;\n    if (superXY === 1) {\n      return this.superPixels;\n    }\n\n    const subWidth = width / superXY;\n    const subHeight = height / superXY;\n    const subSize = subWidth * subHeight * 4;\n    if (!this.pixels || this.pixels.length < subSize) {\n      this.pixels = new Uint8Array(subSize);\n    }\n\n    const { superPixels, pixels } = this;\n    const super2 = superXY * superXY;\n    for (let y = 0; y < subHeight; y++) {\n      const row = y * subWidth;\n      for (let x = 0; x < subWidth; x++) {\n        const superCol = x * superXY;\n        let r = 0;\n        let g = 0;\n        let b = 0;\n        let a = 0;\n        for (let sy = 0; sy < superXY; sy++) {\n          const superRow = (y * superXY + sy) * this.target.width;\n          for (let sx = 0; sx < superXY; sx++) {\n            const superIndex = (superRow + superCol + sx) * 4;\n            r += superPixels[superIndex];\n            g += superPixels[superIndex + 1];\n            b += superPixels[superIndex + 2];\n            a += superPixels[superIndex + 3];\n          }\n        }\n        const pixelIndex = (row + x) * 4;\n        pixels[pixelIndex] = r / super2;\n        pixels[pixelIndex + 1] = g / super2;\n        pixels[pixelIndex + 2] = b / super2;\n        pixels[pixelIndex + 3] = a / super2;\n      }\n    }\n    return pixels;\n  }\n\n  // Render out a viewpoint as a Uint8Array of RGBA values for the provided scene\n  // and any camera/viewToWorld viewpoint overrides. By default update is true,\n  // which triggers its SparkRenderer to check and potentially update the Gsplats.\n  // Setting update to false disables this and sorts the Gsplats as they are.\n  // Setting forceOrigin (default: false) to true forces the view update to\n  // recalculate the splats with this view origin, potentially altering any\n  // view-dependent effects. If you expect view-dependent effects to play a role\n  // in the rendering quality, enable this.\n  //\n  // Underneath, prepareRenderPixels() simply calls await this.prepare(...),\n  // this.renderTarget(...), and finally returns the result this.readTarget(),\n  // a Promise to a Uint8Array with RGBA values for all the pixels (potentially\n  // downsampled if the superXY parameter was used). These steps can also be called\n  // manually, for example if you need to alter the scene before and after\n  // this.renderTarget(...) to hide UI elements from being rendered.\n  async prepareRenderPixels({\n    scene,\n    camera,\n    viewToWorld,\n    update,\n    forceOrigin,\n  }: {\n    scene: THREE.Scene;\n    camera?: THREE.Camera;\n    viewToWorld?: THREE.Matrix4;\n    update?: boolean;\n    forceOrigin?: boolean;\n  }) {\n    await this.prepare({ scene, camera, viewToWorld, update, forceOrigin });\n    this.renderTarget({ scene, camera });\n    return this.readTarget();\n  }\n\n  // This is called automatically by SparkRenderer, there is no need to call it!\n  // The method cannot be private because then SparkRenderer would\n  // not be able to call it.\n  autoPoll({ accumulator }: { accumulator?: SplatAccumulator }) {\n    if (this.camera) {\n      this.camera.updateMatrixWorld();\n      this.viewToWorld = this.camera.matrixWorld.clone();\n    }\n\n    let needsSort = false;\n    let displayed = false;\n\n    if (!this.display) {\n      // Need to do first sort\n      needsSort = true;\n    } else if (accumulator) {\n      needsSort = true;\n      const { mappingVersion } = this.display.accumulator;\n      if (accumulator.mappingVersion === mappingVersion) {\n        // Splat mapping has not changed, so reuse the existing sorted\n        // geometry to show updates faster. We will still fire off\n        // a re-sort if necessary. First release old accumulator.\n        this.spark.releaseAccumulator(this.display.accumulator);\n        this.display.accumulator = accumulator;\n        displayed = true;\n      }\n    }\n\n    const latestView = this.sorting?.viewToWorld ?? this.display?.viewToWorld;\n    if (\n      latestView &&\n      !withinCoorientDist({\n        matrix1: this.viewToWorld,\n        matrix2: latestView,\n        // By default update sort each 1 cm\n        maxDistance: this.sortDistance ?? 0.01,\n        // By default for radial sort, update for intermittent movement so that\n        // we bring back splats culled by being behind the camera.\n        // For depth sort, small rotations can change sort order a lot, so\n        // update sort for even small rotations.\n        minCoorient: (this.sortCoorient ?? this.sortRadial) ? 0.99 : 0.999,\n      })\n    ) {\n      needsSort = true;\n    }\n\n    if (!needsSort) {\n      // Stop here, no sort necessary\n      return;\n    }\n\n    if (accumulator) {\n      // Hold a reference to the accumulator so it isn't released\n      accumulator.refCount += 1;\n    }\n\n    if (\n      accumulator &&\n      this.pending?.accumulator &&\n      this.pending.accumulator !== this.display?.accumulator\n    ) {\n      this.spark.releaseAccumulator(this.pending.accumulator);\n    }\n    this.pending = { accumulator, viewToWorld: this.viewToWorld, displayed };\n\n    // Don't await this, just trigger the sort if necessary\n    this.driveSort();\n  }\n\n  private async driveSort() {\n    while (true) {\n      if (this.sorting || !this.pending) {\n        return; // Sort already in process or nothing to sort\n      }\n\n      const { viewToWorld, displayed } = this.pending;\n      let accumulator = this.pending.accumulator ?? this.display?.accumulator;\n      if (!accumulator) {\n        accumulator = this.spark.active;\n        accumulator.refCount += 1;\n      }\n      this.pending = null;\n      if (!accumulator) {\n        throw new Error(\"No accumulator to sort\");\n      }\n\n      this.sorting = { viewToWorld };\n      await this.sortUpdate({ accumulator, viewToWorld, displayed });\n      this.sorting = null;\n      // Continue in loop with any queued sort\n    }\n  }\n\n  private async sortUpdate({\n    accumulator,\n    viewToWorld,\n    displayed = false,\n  }: {\n    accumulator?: SplatAccumulator;\n    viewToWorld: THREE.Matrix4;\n    displayed?: boolean;\n  }) {\n    if (this.sortingCheck) {\n      throw new Error(\"Only one sort at a time\");\n    }\n    this.sortingCheck = true;\n\n    accumulator = accumulator ?? this.spark.active;\n    const { numSplats, maxSplats } = accumulator.splats;\n    let activeSplats = 0;\n    let ordering = this.orderingFreelist.alloc(maxSplats);\n\n    if (numSplats > 0) {\n      const {\n        reader,\n        doubleSortReader,\n        sort32Reader,\n        dynoSortRadial,\n        dynoOrigin,\n        dynoDirection,\n        dynoDepthBias,\n        dynoSort360,\n        dynoSplats,\n      } = SparkViewpoint.makeSorter();\n      const sort32 = this.sort32 ?? false;\n      let readback: Uint16Array | Uint32Array;\n      if (sort32) {\n        this.readback32 = reader.ensureBuffer(maxSplats, this.readback32);\n        readback = this.readback32;\n      } else {\n        const halfMaxSplats = Math.ceil(maxSplats / 2);\n        this.readback16 = reader.ensureBuffer(halfMaxSplats, this.readback16);\n        readback = this.readback16;\n      }\n\n      const worldToOrigin = accumulator.toWorld.clone().invert();\n      const viewToOrigin = viewToWorld.clone().premultiply(worldToOrigin);\n\n      dynoSortRadial.value = this.sort360 ? true : this.sortRadial;\n      dynoOrigin.value.set(0, 0, 0).applyMatrix4(viewToOrigin);\n      dynoDirection.value\n        .set(0, 0, -1)\n        .applyMatrix4(viewToOrigin)\n        .sub(dynoOrigin.value)\n        .normalize();\n      dynoDepthBias.value = this.depthBias ?? 1.0;\n      dynoSort360.value = this.sort360 ?? false;\n      dynoSplats.packedSplats = accumulator.splats;\n\n      const sortReader = sort32 ? sort32Reader : doubleSortReader;\n      const count = sort32 ? numSplats : Math.ceil(numSplats / 2);\n      await reader.renderReadback({\n        renderer: this.spark.renderer,\n        reader: sortReader,\n        count,\n        readback,\n      });\n\n      const result = (await withWorker(async (worker) => {\n        const rpcName = sort32 ? \"sort32Splats\" : \"sortDoubleSplats\";\n        return worker.call(rpcName, {\n          maxSplats,\n          numSplats,\n          readback,\n          ordering,\n        });\n      })) as {\n        readback: Uint16Array | Uint32Array;\n        ordering: Uint32Array;\n        activeSplats: number;\n      };\n      if (sort32) {\n        this.readback32 = result.readback as Uint32Array;\n      } else {\n        this.readback16 = result.readback as Uint16Array;\n      }\n      ordering = result.ordering;\n      activeSplats = result.activeSplats;\n    }\n\n    this.updateDisplay({\n      accumulator,\n      viewToWorld,\n      ordering,\n      activeSplats,\n      displayed,\n    });\n    this.sortingCheck = false;\n  }\n\n  private updateDisplay({\n    accumulator,\n    viewToWorld,\n    ordering,\n    activeSplats,\n    displayed = false,\n  }: {\n    accumulator: SplatAccumulator;\n    viewToWorld: THREE.Matrix4;\n    ordering: Uint32Array;\n    activeSplats: number;\n    displayed?: boolean;\n  }) {\n    if (!this.display) {\n      this.display = {\n        accumulator,\n        viewToWorld,\n        geometry: new SplatGeometry(ordering, activeSplats),\n      };\n    } else {\n      if (!displayed && accumulator !== this.display.accumulator) {\n        this.spark.releaseAccumulator(this.display.accumulator);\n        this.display.accumulator = accumulator;\n      }\n\n      this.display.viewToWorld = viewToWorld;\n\n      const oldOrdering = this.display.geometry.ordering;\n      if (oldOrdering.length === ordering.length) {\n        this.display.geometry.update(ordering, activeSplats);\n      } else {\n        this.display.geometry.dispose();\n        // console.log(\"*** alloc SplatGeometry\", ordering.length);\n        this.display.geometry = new SplatGeometry(ordering, activeSplats);\n      }\n      this.orderingFreelist.free(oldOrdering);\n    }\n    if (this.spark.viewpoint === this) {\n      this.spark.prepareViewpoint(this);\n    }\n  }\n\n  // If you need an empty THREE.Texture to use to initialize a uniform that is\n  // updated via onTextureUpdated(texture), this static texture can be handy.\n  static EMPTY_TEXTURE = new THREE.Texture();\n\n  private static dynos: {\n    dynoSortRadial: DynoBool<string>;\n    dynoOrigin: DynoVec3<THREE.Vector3, \"value\">;\n    dynoDirection: DynoVec3<THREE.Vector3, \"value\">;\n    dynoDepthBias: DynoFloat<string>;\n    dynoSort360: DynoBool<string>;\n    dynoSplats: DynoPackedSplats;\n    reader: Readback;\n    doubleSortReader: DynoBlock<{ index: \"int\" }, { rgba8: \"vec4\" }>;\n    sort32Reader: DynoBlock<{ index: \"int\" }, { rgba8: \"vec4\" }>;\n  } | null = null;\n\n  private static makeSorter() {\n    if (!SparkViewpoint.dynos) {\n      const dynoSortRadial = new DynoBool({ value: true });\n      const dynoOrigin = new DynoVec3({ value: new THREE.Vector3() });\n      const dynoDirection = new DynoVec3({ value: new THREE.Vector3() });\n      const dynoDepthBias = new DynoFloat({ value: 1.0 });\n      const dynoSort360 = new DynoBool({ value: false });\n      const dynoSplats = new DynoPackedSplats();\n\n      const reader = new Readback();\n      const doubleSortReader = dynoBlock(\n        { index: \"int\" },\n        { rgba8: \"vec4\" },\n        ({ index }) => {\n          if (!index) {\n            throw new Error(\"No index\");\n          }\n          const sortParams = {\n            sortRadial: dynoSortRadial,\n            sortOrigin: dynoOrigin,\n            sortDirection: dynoDirection,\n            sortDepthBias: dynoDepthBias,\n            sort360: dynoSort360,\n          };\n          const index2 = mul(index, dynoConst(\"int\", 2));\n\n          const gsplat0 = readPackedSplat(dynoSplats, index2);\n          const metric0 = computeSortMetric({ gsplat: gsplat0, ...sortParams });\n\n          const gsplat1 = readPackedSplat(\n            dynoSplats,\n            add(index2, dynoConst(\"int\", 1)),\n          );\n          const metric1 = computeSortMetric({ gsplat: gsplat1, ...sortParams });\n\n          const combined = combine({\n            vectorType: \"vec2\",\n            x: metric0,\n            y: metric1,\n          });\n          const rgba8 = uintToRgba8(packHalf2x16(combined));\n          return { rgba8 };\n        },\n      );\n\n      const sort32Reader = dynoBlock(\n        { index: \"int\" },\n        { rgba8: \"vec4\" },\n        ({ index }) => {\n          if (!index) {\n            throw new Error(\"No index\");\n          }\n          const sortParams = {\n            sortRadial: dynoSortRadial,\n            sortOrigin: dynoOrigin,\n            sortDirection: dynoDirection,\n            sortDepthBias: dynoDepthBias,\n            sort360: dynoSort360,\n          };\n\n          const gsplat = readPackedSplat(dynoSplats, index);\n          const metric = computeSortMetric({ gsplat, ...sortParams });\n          const rgba8 = uintToRgba8(floatBitsToUint(metric));\n          return { rgba8 };\n        },\n      );\n\n      SparkViewpoint.dynos = {\n        dynoSortRadial,\n        dynoOrigin,\n        dynoDirection,\n        dynoDepthBias,\n        dynoSort360,\n        dynoSplats,\n        reader,\n        doubleSortReader,\n        sort32Reader,\n      };\n    }\n    return SparkViewpoint.dynos;\n  }\n}\n\nconst defineComputeSortMetric = unindent(`\n  float computeSort(Gsplat gsplat, bool sortRadial, vec3 sortOrigin, vec3 sortDirection, float sortDepthBias, bool sort360) {\n    if (!isGsplatActive(gsplat.flags)) {\n      return INFINITY;\n    }\n\n    vec3 center = gsplat.center - sortOrigin;\n    float biasedDepth = dot(center, sortDirection) + sortDepthBias;\n    if (!sort360 && (biasedDepth <= 0.0)) {\n      return INFINITY;\n    }\n\n    return sortRadial ? length(center) : biasedDepth;\n  }\n`);\n\nfunction computeSortMetric({\n  gsplat,\n  sortRadial,\n  sortOrigin,\n  sortDirection,\n  sortDepthBias,\n  sort360,\n}: {\n  gsplat: DynoVal<typeof Gsplat>;\n  sortRadial: DynoVal<\"bool\">;\n  sortOrigin: DynoVal<\"vec3\">;\n  sortDirection: DynoVal<\"vec3\">;\n  sortDepthBias: DynoVal<\"float\">;\n  sort360: DynoVal<\"bool\">;\n}) {\n  return dyno({\n    inTypes: {\n      gsplat: Gsplat,\n      sortRadial: \"bool\",\n      sortOrigin: \"vec3\",\n      sortDirection: \"vec3\",\n      sortDepthBias: \"float\",\n      sort360: \"bool\",\n    },\n    outTypes: { metric: \"float\" },\n    globals: () => [defineGsplat, defineComputeSortMetric],\n    inputs: {\n      gsplat,\n      sortRadial,\n      sortOrigin,\n      sortDirection,\n      sortDepthBias,\n      sort360,\n    },\n    statements: ({ inputs, outputs }) => {\n      const {\n        gsplat,\n        sortRadial,\n        sortOrigin,\n        sortDirection,\n        sortDepthBias,\n        sort360,\n      } = inputs;\n      return unindentLines(`\n        ${outputs.metric} = computeSort(${gsplat}, ${sortRadial}, ${sortOrigin}, ${sortDirection}, ${sortDepthBias}, ${sort360});\n      `);\n    },\n  }).outputs.metric;\n}\n","import * as THREE from \"three\";\n\nimport { PackedSplats } from \"./PackedSplats\";\nimport type {\n  GsplatGenerator,\n  SplatGenerator,\n  SplatModifier,\n} from \"./SplatGenerator\";\n\n// SplatAccumulator helps manage the generation of splats from multiple\n// SplatGenerators, keeping track of the splat mapping, coordinate system,\n// and reference count.\n\n// A GeneratorMapping describes a Gsplat range that was generated, including\n// which generator and its version number.\nexport type GeneratorMapping = {\n  node: SplatGenerator;\n  generator?: GsplatGenerator;\n  version: number;\n  base: number;\n  count: number;\n};\n\nexport class SplatAccumulator {\n  splats = new PackedSplats();\n  // The transform from Accumulator coordinate system to world coordinates.\n  toWorld = new THREE.Matrix4();\n  // An array of all Gsplat mappings that were used for generation\n  mapping: GeneratorMapping[] = [];\n  // Number of SparkViewpoints (or other) that reference this accumulator, used\n  // to figure out when it can be recycled for use\n  refCount = 0;\n\n  // Incremented every time the splats are updated/generated.\n  splatsVersion = -1;\n  // Incremented every time the splat mapping/layout is updated.\n  // Splat sort order can be reused between equivalent mapping versions.\n  mappingVersion = -1;\n\n  ensureGenerate(maxSplats: number) {\n    if (this.splats.ensureGenerate(maxSplats)) {\n      // If we had to resize our PackedSplats then clear all previous mappings\n      this.mapping = [];\n    }\n  }\n\n  // Generate all Gsplats from an array of generators\n  generateSplats({\n    renderer,\n    modifier,\n    generators,\n    forceUpdate,\n    originToWorld,\n  }: {\n    renderer: THREE.WebGLRenderer;\n    modifier: SplatModifier;\n    generators: GeneratorMapping[];\n    forceUpdate?: boolean;\n    originToWorld: THREE.Matrix4;\n  }) {\n    // Create a lookup from last SplatGenerator\n    const mapping = this.mapping.reduce((map, record) => {\n      map.set(record.node, record);\n      return map;\n    }, new Map<SplatGenerator, GeneratorMapping>());\n\n    // Run generators that are different from existing mapping\n    let updated = 0;\n    let numSplats = 0;\n    for (const { node, generator, version, base, count } of generators) {\n      const current = mapping.get(node);\n      if (\n        forceUpdate ||\n        generator !== current?.generator ||\n        version !== current?.version ||\n        base !== current?.base ||\n        count !== current?.count\n      ) {\n        // Something is different from before so we should generate these Gsplats\n        if (generator && count > 0) {\n          const modGenerator = modifier.apply(generator);\n          try {\n            this.splats.generate({\n              generator: modGenerator,\n              base,\n              count,\n              renderer,\n            });\n          } catch (error) {\n            node.generator = undefined;\n            node.generatorError = error;\n          }\n          updated += 1;\n        }\n      }\n      numSplats = Math.max(numSplats, base + count);\n    }\n\n    this.splats.numSplats = numSplats;\n    this.toWorld = originToWorld;\n    this.mapping = generators;\n    return updated !== 0;\n  }\n\n  // Check if this accumulator has exactly the same generator mapping as\n  // the previous one. If so, we can reuse the Gsplat sort order.\n  hasCorrespondence(other: SplatAccumulator) {\n    if (this.mapping.length !== other.mapping.length) {\n      return false;\n    }\n    return this.mapping.every(({ node, base, count }, i) => {\n      const {\n        node: otherNode,\n        base: otherBase,\n        count: otherCount,\n      } = other.mapping[i];\n      return node === otherNode && base === otherBase && count === otherCount;\n    });\n  }\n}\n","const float LN_SCALE_MIN = -12.0;\nconst float LN_SCALE_MAX = 9.0;\n\nconst uint SPLAT_TEX_WIDTH_BITS = 11u;\nconst uint SPLAT_TEX_HEIGHT_BITS = 11u;\nconst uint SPLAT_TEX_DEPTH_BITS = 11u;\nconst uint SPLAT_TEX_LAYER_BITS = SPLAT_TEX_WIDTH_BITS + SPLAT_TEX_HEIGHT_BITS;\n\nconst uint SPLAT_TEX_WIDTH = 1u << SPLAT_TEX_WIDTH_BITS;\nconst uint SPLAT_TEX_HEIGHT = 1u << SPLAT_TEX_HEIGHT_BITS;\nconst uint SPLAT_TEX_DEPTH = 1u << SPLAT_TEX_DEPTH_BITS;\n\nconst uint SPLAT_TEX_WIDTH_MASK = SPLAT_TEX_WIDTH - 1u;\nconst uint SPLAT_TEX_HEIGHT_MASK = SPLAT_TEX_HEIGHT - 1u;\nconst uint SPLAT_TEX_DEPTH_MASK = SPLAT_TEX_DEPTH - 1u;\n\nconst uint F16_INF = 0x7c00u;\nconst float PI = 3.1415926535897932384626433832795;\n\nconst float INFINITY = 1.0 / 0.0;\nconst float NEG_INFINITY = -INFINITY;\n\nfloat sqr(float x) {\n    return x * x;\n}\n\nfloat pow4(float x) {\n    float x2 = x * x;\n    return x2 * x2;\n}\n\nfloat pow8(float x) {\n    float x4 = pow4(x);\n    return x4 * x4;\n}\n\nvec3 srgbToLinear(vec3 rgb) {\n    return pow(rgb, vec3(2.2));\n}\n\nvec3 linearToSrgb(vec3 rgb) {\n    return pow(rgb, vec3(1.0 / 2.2));\n}\n\n// uint encodeQuatXyz888(vec4 q) {\n//     // Encode quaternion in three int8s, flipping sign to remove ambiguity\n//     vec3 quat3 = (q.w < 0.0) ? -q.xyz : q.xyz;\n//     ivec3 iQuat3 = ivec3(round(clamp(quat3 * 127.0, -127.0, 127.0)));\n//     uvec3 uQuat3 = uvec3(iQuat3) & 0xffu;\n//     return (uQuat3.x << 16u) | (uQuat3.y << 8u) | uQuat3.z;\n// }\n\n// vec4 decodeQuatXyz888(uint encoded) {\n//     ivec3 iQuat3 = ivec3(\n//         int(encoded << 24u) >> 24,\n//         int(encoded << 16u) >> 24,\n//         int(encoded << 8u) >> 24\n//     );\n//     vec4 quat = vec4(vec3(iQuat3) / 127.0, 0.0);\n//     quat.w = sqrt(max(0.0, 1.0 - dot(quat.xyz, quat.xyz)));\n//     return quat;\n// }\n\n// Encode a quaternion (vec4) into a 24‐bit uint with folded octahedral mapping.\nuint encodeQuatOctXy88R8(vec4 q) {\n    // Ensure minimal representation: flip if q.w is negative.\n    if (q.w < 0.0) {\n        q = -q;\n    }\n    // Compute rotation angle: θ = 2 * acos(q.w) ∈ [0,π]\n    float theta = 2.0 * acos(q.w);\n    float halfTheta = theta * 0.5;\n    float s = sin(halfTheta);\n    // Recover the rotation axis; use a default if nearly zero rotation.\n    vec3 axis = (abs(s) < 1e-6) ? vec3(1.0, 0.0, 0.0) : q.xyz / s;\n    \n    // --- Folded Octahedral Mapping (inline) ---\n    // Compute p = (axis.x, axis.y) / (|axis.x|+|axis.y|+|axis.z|)\n    float sum = abs(axis.x) + abs(axis.y) + abs(axis.z);\n    vec2 p = vec2(axis.x, axis.y) / sum;\n    // If axis.z < 0, fold the mapping.\n    if (axis.z < 0.0) {\n        float oldPx = p.x;\n        p.x = (1.0 - abs(p.y)) * (p.x >= 0.0 ? 1.0 : -1.0);\n        p.y = (1.0 - abs(oldPx)) * (p.y >= 0.0 ? 1.0 : -1.0);\n    }\n    // Remap from [-1,1] to [0,1]\n    float u_f = p.x * 0.5 + 0.5;\n    float v_f = p.y * 0.5 + 0.5;\n    // Quantize to 8 bits (0 to 255)\n    uint quantU = uint(clamp(round(u_f * 255.0), 0.0, 255.0));\n    uint quantV = uint(clamp(round(v_f * 255.0), 0.0, 255.0));\n    \n    // --- Angle Quantization ---\n    // Quantize θ ∈ [0,π] to 8 bits (0 to 255)\n    uint angleInt = uint(clamp(round((theta / 3.14159265359) * 255.0), 0.0, 255.0));\n    \n    // Pack bits: bits [0–7]: quantU, [8–15]: quantV, [16–23]: angleInt.\n    return (angleInt << 16u) | (quantV << 8u) | quantU;\n}\n\n// Decode a 24‐bit encoded uint into a quaternion (vec4) using the folded octahedral inverse.\nvec4 decodeQuatOctXy88R8(uint encoded) {\n    // Extract the fields.\n    uint quantU = encoded & uint(0xFFu);               // bits 0–7\n    uint quantV = (encoded >> 8u) & uint(0xFFu);         // bits 8–15\n    uint angleInt = encoded >> 16u;                      // bits 16–23\n\n    // Recover u and v in [0,1], then map to [-1,1].\n    float u_f = float(quantU) / 255.0;\n    float v_f = float(quantV) / 255.0;\n    vec2 f = vec2(u_f * 2.0 - 1.0, v_f * 2.0 - 1.0);\n\n    vec3 axis = vec3(f.xy, 1.0 - abs(f.x) - abs(f.y));\n    float t = max(-axis.z, 0.0);\n    axis.x += (axis.x >= 0.0) ? -t : t;\n    axis.y += (axis.y >= 0.0) ? -t : t;\n    axis = normalize(axis);\n    \n    // Decode the angle θ ∈ [0,π].\n    float theta = (float(angleInt) / 255.0) * 3.14159265359;\n    float halfTheta = theta * 0.5;\n    float s = sin(halfTheta);\n    float w = cos(halfTheta);\n    \n    return vec4(axis * s, w);\n}\n\n// // Encode a quaternion (vec4) into a 24‐bit uint by converting it to Euler angles.\n// // We assume the quaternion is normalized.\n// // Euler angles (roll, pitch, yaw) are assumed in radians in the range [-PI, PI].\n// // Each angle is normalized: value = (angle + PI) / (2*PI) and quantized to 8 bits.\n// uint encodeQuatEulerXyz888(vec4 q) {\n//     // Compute roll (x), pitch (y) and yaw (z) using Tait–Bryan angles.\n//     float sinr_cosp = 2.0 * (q.w * q.x + q.y * q.z);\n//     float cosr_cosp = 1.0 - 2.0 * (q.x * q.x + q.y * q.y);\n//     float roll = atan(sinr_cosp, cosr_cosp);\n    \n//     float sinp = 2.0 * (q.w * q.y - q.z * q.x);\n//     float pitch = abs(sinp) >= 1.0 ? (sign(sinp) * 1.57079632679) : asin(sinp);\n    \n//     float siny_cosp = 2.0 * (q.w * q.z + q.x * q.y);\n//     float cosy_cosp = 1.0 - 2.0 * (q.y * q.y + q.z * q.z);\n//     float yaw = atan(siny_cosp, cosy_cosp);\n    \n//     // Normalize each angle from [-PI, PI] to [0, 1]\n//     float normRoll  = (roll  + 3.14159265359) / (2.0 * 3.14159265359);\n//     float normPitch = (pitch + 3.14159265359) / (2.0 * 3.14159265359);\n//     float normYaw   = (yaw   + 3.14159265359) / (2.0 * 3.14159265359);\n    \n//     // Quantize each normalized angle to 8 bits (0..255)\n//     uint rollQ  = uint(round(normRoll  * 255.0));\n//     uint pitchQ = uint(round(normPitch * 255.0));\n//     uint yawQ   = uint(round(normYaw   * 255.0));\n    \n//     // Pack into a 24-bit uint:\n//     //   Bits 0..7   : rollQ,\n//     //   Bits 8..15  : pitchQ,\n//     //   Bits 16..23 : yawQ.\n//     return (yawQ << 16u) | (pitchQ << 8u) | rollQ;\n// }\n\n// // Decode a 24‐bit uint into a quaternion (vec4) by unpacking 8‐bit quantized Euler angles.\n// // The Euler angles are assumed to be stored in the order: roll, pitch, yaw (each in [0,255]) corresponding to [-PI, PI].\n// // Convert the Euler angles to a quaternion using the Tait–Bryan (roll, pitch, yaw) formula.\n// vec4 decodeQuatEulerXyz888(uint encoded) {\n//     // Unpack each 8-bit field.\n//     uint rollQ  = encoded & 0xFFu;\n//     uint pitchQ = (encoded >> 8u)  & 0xFFu;\n//     uint yawQ   = (encoded >> 16u) & 0xFFu;\n    \n//     // Convert back to the [0,1] range.\n//     float normRoll  = float(rollQ)  / 255.0;\n//     float normPitch = float(pitchQ) / 255.0;\n//     float normYaw   = float(yawQ)   / 255.0;\n    \n//     // Map from [0,1] back to [-PI, PI].\n//     float roll  = normRoll  * (2.0 * 3.14159265359) - 3.14159265359;\n//     float pitch = normPitch * (2.0 * 3.14159265359) - 3.14159265359;\n//     float yaw   = normYaw   * (2.0 * 3.14159265359) - 3.14159265359;\n    \n//     // Convert Euler angles (roll, pitch, yaw) to quaternion.\n//     float cr = cos(roll * 0.5);\n//     float sr = sin(roll * 0.5);\n//     float cp = cos(pitch * 0.5);\n//     float sp = sin(pitch * 0.5);\n//     float cy = cos(yaw * 0.5);\n//     float sy = sin(yaw * 0.5);\n    \n//     // Tait-Bryan (roll, pitch, yaw) to quaternion conversion.\n//     vec4 q;\n//     q.w = cr * cp * cy + sr * sp * sy;\n//     q.x = sr * cp * cy - cr * sp * sy;\n//     q.y = cr * sp * cy + sr * cp * sy;\n//     q.z = cr * cp * sy - sr * sp * cy;\n    \n//     return q;\n// }\n\n// Pack a Gsplat into a uvec4\nuvec4 packSplatEncoding(\n    vec3 center, vec3 scales, vec4 quaternion, vec4 rgba, vec4 rgbMinMaxLnScaleMinMax\n) {\n    float rgbMin = rgbMinMaxLnScaleMinMax.x;\n    float rgbMax = rgbMinMaxLnScaleMinMax.y;\n    vec3 encRgb = (rgba.rgb - vec3(rgbMin)) / (rgbMax - rgbMin);\n    uvec4 uRgba = uvec4(round(clamp(vec4(encRgb, rgba.a) * 255.0, 0.0, 255.0)));\n\n    uint uQuat = encodeQuatOctXy88R8(quaternion);\n    // uint uQuat = encodeQuatXyz888(quaternion);\n    // uint uQuat = encodeQuatEulerXyz888(quaternion);\n    uvec3 uQuat3 = uvec3(uQuat & 0xffu, (uQuat >> 8u) & 0xffu, (uQuat >> 16u) & 0xffu);\n\n    // Encode scales in three uint8s, where 0=>0.0 and 1..=255 stores log scale\n    float lnScaleMin = rgbMinMaxLnScaleMinMax.z;\n    float lnScaleMax = rgbMinMaxLnScaleMinMax.w;\n    float lnScaleScale = 254.0 / (lnScaleMax - lnScaleMin);\n    uvec3 uScales = uvec3(\n        (scales.x == 0.0) ? 0u : uint(round(clamp((log(scales.x) - lnScaleMin) * lnScaleScale, 0.0, 254.0))) + 1u,\n        (scales.y == 0.0) ? 0u : uint(round(clamp((log(scales.y) - lnScaleMin) * lnScaleScale, 0.0, 254.0))) + 1u,\n        (scales.z == 0.0) ? 0u : uint(round(clamp((log(scales.z) - lnScaleMin) * lnScaleScale, 0.0, 254.0))) + 1u\n    );\n\n    // Pack it all into 4 x uint32\n    uint word0 = uRgba.r | (uRgba.g << 8u) | (uRgba.b << 16u) | (uRgba.a << 24u);\n    uint word1 = packHalf2x16(center.xy);\n    uint word2 = packHalf2x16(vec2(center.z, 0.0)) | (uQuat3.x << 16u) | (uQuat3.y << 24u);\n    uint word3 = uScales.x | (uScales.y << 8u) | (uScales.z << 16u) | (uQuat3.z << 24u);\n    return uvec4(word0, word1, word2, word3);\n}\n\n// Pack a Gsplat into a uvec4\nuvec4 packSplat(vec3 center, vec3 scales, vec4 quaternion, vec4 rgba) {\n    return packSplatEncoding(center, scales, quaternion, rgba, vec4(0.0, 1.0, LN_SCALE_MIN, LN_SCALE_MAX));\n}\n\nvoid unpackSplatEncoding(uvec4 packed, out vec3 center, out vec3 scales, out vec4 quaternion, out vec4 rgba, vec4 rgbMinMaxLnScaleMinMax) {\n    uint word0 = packed.x, word1 = packed.y, word2 = packed.z, word3 = packed.w;\n\n    uvec4 uRgba = uvec4(word0 & 0xffu, (word0 >> 8u) & 0xffu, (word0 >> 16u) & 0xffu, (word0 >> 24u) & 0xffu);\n    float rgbMin = rgbMinMaxLnScaleMinMax.x;\n    float rgbMax = rgbMinMaxLnScaleMinMax.y;\n    rgba = (vec4(uRgba) / 255.0);\n    rgba.rgb = rgba.rgb * (rgbMax - rgbMin) + rgbMin;\n\n    center = vec4(\n        unpackHalf2x16(word1),\n        unpackHalf2x16(word2 & 0xffffu)\n    ).xyz;\n\n    uvec3 uScales = uvec3(word3 & 0xffu, (word3 >> 8u) & 0xffu, (word3 >> 16u) & 0xffu);\n    float lnScaleMin = rgbMinMaxLnScaleMinMax.z;\n    float lnScaleMax = rgbMinMaxLnScaleMinMax.w;\n    float lnScaleScale = (lnScaleMax - lnScaleMin) / 254.0;\n    scales = vec3(\n        (uScales.x == 0u) ? 0.0 : exp(lnScaleMin + float(uScales.x - 1u) * lnScaleScale),\n        (uScales.y == 0u) ? 0.0 : exp(lnScaleMin + float(uScales.y - 1u) * lnScaleScale),\n        (uScales.z == 0u) ? 0.0 : exp(lnScaleMin + float(uScales.z - 1u) * lnScaleScale)\n    );\n\n\n    uint uQuat = ((word2 >> 16u) & 0xFFFFu) | ((word3 >> 8u) & 0xFF0000u);\n    quaternion = decodeQuatOctXy88R8(uQuat);\n    // quaternion = decodeQuatXyz888(uQuat);\n    // quaternion = decodeQuatEulerXyz888(uQuat);\n}\n\n// Unpack a Gsplat from a uvec4\nvoid unpackSplat(uvec4 packed, out vec3 center, out vec3 scales, out vec4 quaternion, out vec4 rgba) {\n    unpackSplatEncoding(packed, center, scales, quaternion, rgba, vec4(0.0, 1.0, LN_SCALE_MIN, LN_SCALE_MAX));\n}\n\n// Rotate vector v by quaternion q\nvec3 quatVec(vec4 q, vec3 v) {\n    // Rotate vector v by quaternion q\n    vec3 t = 2.0 * cross(q.xyz, v);\n    return v + q.w * t + cross(q.xyz, t);\n}\n\n// Apply quaternion q1 after quaternion q2\nvec4 quatQuat(vec4 q1, vec4 q2) {\n    return vec4(\n        q1.w * q2.x + q1.x * q2.w + q1.y * q2.z - q1.z * q2.y,\n        q1.w * q2.y - q1.x * q2.z + q1.y * q2.w + q1.z * q2.x,\n        q1.w * q2.z + q1.x * q2.y - q1.y * q2.x + q1.z * q2.w,\n        q1.w * q2.w - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z\n    );\n}\n\nmat3 scaleQuaternionToMatrix(vec3 s, vec4 q) {\n    // Compute the matrix of scaling by s then rotating by q\n    return mat3(\n        s.x * (1.0 - 2.0 * (q.y * q.y + q.z * q.z)),\n        s.x * (2.0 * (q.x * q.y + q.w * q.z)),\n        s.x * (2.0 * (q.x * q.z - q.w * q.y)),\n        s.y * (2.0 * (q.x * q.y - q.w * q.z)),\n        s.y * (1.0 - 2.0 * (q.x * q.x + q.z * q.z)),\n        s.y * (2.0 * (q.y * q.z + q.w * q.x)),\n        s.z * (2.0 * (q.x * q.z + q.w * q.y)),\n        s.z * (2.0 * (q.y * q.z - q.w * q.x)),\n        s.z * (1.0 - 2.0 * (q.x * q.x + q.y * q.y))\n    );\n}\n\n// Spherical lerp between two quaternions\nvec4 slerp(vec4 q1, vec4 q2, float t) {\n    // Compute the cosine of the angle between the two vectors\n    float cosHalfTheta = dot(q1, q2);\n\n    // If q1=q2 or q1=-q2 then theta = 0 and we can return q1\n    if (abs(cosHalfTheta) >= 0.999) {\n        return q1;\n    }\n    \n    // If q1 and q2 are more than 180 degrees apart, \n    // we need to negate one to get the shortest path\n    if (cosHalfTheta < 0.0) {\n        q2 = -q2;\n        cosHalfTheta = -cosHalfTheta;\n    }\n\n    // Calculate temporary values\n    float halfTheta = acos(cosHalfTheta);\n    float sinHalfTheta = sqrt(1.0 - cosHalfTheta * cosHalfTheta);\n\n    // Calculate the interpolation factors\n    float ratioA = sin((1.0 - t) * halfTheta) / sinHalfTheta;\n    float ratioB = sin(t * halfTheta) / sinHalfTheta;\n\n    // Calculate the interpolated quaternion\n    return q1 * ratioA + q2 * ratioB;\n}\n\nivec3 splatTexCoord(int index) {\n    uint x = uint(index) & SPLAT_TEX_WIDTH_MASK;\n    uint y = (uint(index) >> SPLAT_TEX_WIDTH_BITS) & SPLAT_TEX_HEIGHT_MASK;\n    uint z = uint(index) >> SPLAT_TEX_LAYER_BITS;\n    return ivec3(x, y, z);\n}\n","\nprecision highp float;\nprecision highp int;\n\n#include <splatDefines>\n\nuniform float near;\nuniform float far;\nuniform bool premultipliedAlpha;\nuniform bool encodeLinear;\nuniform float maxStdDev;\nuniform float minAlpha;\nuniform bool disableFalloff;\nuniform float falloff;\n\nuniform bool splatTexEnable;\nuniform sampler3D splatTexture;\nuniform mat2 splatTexMul;\nuniform vec2 splatTexAdd;\nuniform float splatTexNear;\nuniform float splatTexFar;\nuniform float splatTexMid;\n\nout vec4 fragColor;\n\nin vec4 vRgba;\nin vec2 vSplatUv;\nin vec3 vNdc;\n\nvoid main() {\n    vec4 rgba = vRgba;\n\n    float z = dot(vSplatUv, vSplatUv);\n    if (!splatTexEnable) {\n        if (z > (maxStdDev * maxStdDev)) {\n            discard;\n        }\n    } else {\n        vec2 uv = splatTexMul * vSplatUv + splatTexAdd;\n        float ndcZ = vNdc.z;\n        float depth = (2.0 * near * far) / (far + near - ndcZ * (far - near));\n        float clampedFar = max(splatTexFar, splatTexNear);\n        float clampedDepth = clamp(depth, splatTexNear, clampedFar);\n        float logDepth = log2(clampedDepth + 1.0);\n        float logNear = log2(splatTexNear + 1.0);\n        float logFar = log2(clampedFar + 1.0);\n\n        float texZ;\n        if (splatTexMid > 0.0) {\n            float clampedMid = clamp(splatTexMid, splatTexNear, clampedFar);\n            float logMid = log2(clampedMid + 1.0);\n            texZ = (clampedDepth <= clampedMid) ?\n                (0.5 * ((logDepth - logNear) / (logMid - logNear))) :\n                (0.5 * ((logDepth - logMid) / (logFar - logMid)) + 0.5);\n        } else {\n            texZ = (logDepth - logNear) / (logFar - logNear);\n        }\n\n        vec4 modulate = texture(splatTexture, vec3(uv, 1.0 - texZ));\n        rgba *= modulate;\n    }\n\n    rgba.a *= mix(1.0, exp(-0.5 * z), falloff);\n\n    if (rgba.a < minAlpha) {\n        discard;\n    }\n    if (encodeLinear) {\n        rgba.rgb = srgbToLinear(rgba.rgb);\n    }\n    \n    if (premultipliedAlpha) {\n        fragColor = vec4(rgba.rgb * rgba.a, rgba.a);\n    } else {\n        fragColor = rgba;\n    }\n}\n","\nprecision highp float;\nprecision highp int;\nprecision highp usampler2DArray;\n\n#include <splatDefines>\n\nattribute uint splatIndex;\n\nout vec4 vRgba;\nout vec2 vSplatUv;\nout vec3 vNdc;\n\nuniform vec2 renderSize;\nuniform uint numSplats;\nuniform vec4 renderToViewQuat;\nuniform vec3 renderToViewPos;\nuniform float maxStdDev;\nuniform float maxPixelRadius;\nuniform float time;\nuniform float deltaTime;\nuniform bool debugFlag;\nuniform float minAlpha;\nuniform bool enable2DGS;\nuniform float blurAmount;\nuniform float preBlurAmount;\nuniform float focalDistance;\nuniform float apertureAngle;\nuniform float clipXY;\nuniform float focalAdjustment;\n\nuniform usampler2DArray packedSplats;\nuniform vec4 rgbMinMaxLnScaleMinMax;\n\nvoid main() {\n    // Default to outside the frustum so it's discarded if we return early\n    gl_Position = vec4(0.0, 0.0, 2.0, 1.0);\n\n    if (uint(gl_InstanceID) >= numSplats) {\n        return;\n    }\n    if (splatIndex == 0xffffffffu) {\n        // Special value reserved for \"no splat\"\n        return;\n    }\n\n    ivec3 texCoord = ivec3(\n        splatIndex & SPLAT_TEX_WIDTH_MASK,\n        (splatIndex >> SPLAT_TEX_WIDTH_BITS) & SPLAT_TEX_HEIGHT_MASK,\n        splatIndex >> SPLAT_TEX_LAYER_BITS\n    );\n    uvec4 packed = texelFetch(packedSplats, texCoord, 0);\n\n    vec3 center, scales;\n    vec4 quaternion, rgba;\n    unpackSplatEncoding(packed, center, scales, quaternion, rgba, rgbMinMaxLnScaleMinMax);\n\n    if (rgba.a < minAlpha) {\n        return;\n    }\n    bvec3 zeroScales = equal(scales, vec3(0.0));\n    if (all(zeroScales)) {\n        return;\n    }\n\n    // Compute the view space center of the splat\n    vec3 viewCenter = quatVec(renderToViewQuat, center) + renderToViewPos;\n\n    // Discard splats behind the camera\n    if (viewCenter.z >= 0.0) {\n        return;\n    }\n\n    // Compute the clip space center of the splat\n    vec4 clipCenter = projectionMatrix * vec4(viewCenter, 1.0);\n\n    // Discard splats outside near/far planes\n    if (abs(clipCenter.z) >= clipCenter.w) {\n        return;\n    }\n\n    // Discard splats more than clipXY times outside the XY frustum\n    float clip = clipXY * clipCenter.w;\n    if (abs(clipCenter.x) > clip || abs(clipCenter.y) > clip) {\n        return;\n    }\n\n    // Compute view space quaternion of splat\n    vec4 viewQuaternion = quatQuat(renderToViewQuat, quaternion);\n\n    if (enable2DGS && any(zeroScales)) {\n        vRgba = rgba;\n        vSplatUv = position.xy * maxStdDev;\n\n        vec3 offset;\n        if (zeroScales.z) {\n            offset = vec3(vSplatUv.xy * scales.xy, 0.0);\n        } else if (zeroScales.y) {\n            offset = vec3(vSplatUv.x * scales.x, 0.0, vSplatUv.y * scales.z);\n        } else {\n            offset = vec3(0.0, vSplatUv.xy * scales.yz);\n        }\n\n        vec3 viewPos = viewCenter + quatVec(viewQuaternion, offset);\n        gl_Position = projectionMatrix * vec4(viewPos, 1.0);\n        vNdc = gl_Position.xyz / gl_Position.w;\n        return;\n    }\n\n    // Compute NDC center of the splat\n    vec3 ndcCenter = clipCenter.xyz / clipCenter.w;\n\n    // Compute the 3D covariance matrix of the splat\n    mat3 RS = scaleQuaternionToMatrix(scales, viewQuaternion);\n    mat3 cov3D = RS * transpose(RS);\n\n    // Compute the Jacobian of the splat's projection at its center\n    vec2 scaledRenderSize = renderSize * focalAdjustment;\n    vec2 focal = 0.5 * scaledRenderSize * vec2(projectionMatrix[0][0], projectionMatrix[1][1]);\n    float invZ = 1.0 / viewCenter.z;\n    vec2 J1 = focal * invZ;\n    vec2 J2 = -(J1 * viewCenter.xy) * invZ;\n    mat3 J = mat3(\n        J1.x, 0.0, J2.x,\n        0.0, J1.y, J2.y,\n        0.0, 0.0, 0.0\n    );\n\n    // Compute the 2D covariance by projecting the 3D covariance\n    // and picking out the XY plane components.\n    // Keeping below because we may need it in the future\n    // for skinning deformations.\n    // mat3 W = transpose(mat3(viewMatrix));\n    // mat3 T = W * J;\n    // mat3 cov2D = transpose(T) * cov3D * T;\n    mat3 cov2D = transpose(J) * cov3D * J;\n    float a = cov2D[0][0];\n    float d = cov2D[1][1];\n    float b = cov2D[0][1];\n\n    // Optionally pre-blur the splat to match non-antialias optimized splats\n    a += preBlurAmount;\n    d += preBlurAmount;\n\n    float fullBlurAmount = blurAmount;\n    if ((focalDistance > 0.0) && (apertureAngle > 0.0)) {\n        float focusRadius = maxPixelRadius;\n        if (viewCenter.z < 0.0) {\n            float focusBlur = abs((-viewCenter.z - focalDistance) / viewCenter.z);\n            float apertureRadius = focal.x * tan(0.5 * apertureAngle);\n            focusRadius = focusBlur * apertureRadius;\n        }\n        fullBlurAmount = clamp(sqr(focusRadius), blurAmount, sqr(maxPixelRadius));\n    }\n\n    // Do convolution with a 0.5-pixel Gaussian for anti-aliasing: sqrt(0.3) ~= 0.5\n    float detOrig = a * d - b * b;\n    a += fullBlurAmount;\n    d += fullBlurAmount;\n    float det = a * d - b * b;\n\n    // Compute anti-aliasing intensity scaling factor\n    float blurAdjust = sqrt(max(0.0, detOrig / det));\n    rgba.a *= blurAdjust;\n    if (rgba.a < minAlpha) {\n        return;\n    }\n\n    // Compute the eigenvalue and eigenvectors of the 2D covariance matrix\n    float eigenAvg = 0.5 * (a + d);\n    float eigenDelta = sqrt(max(0.0, eigenAvg * eigenAvg - det));\n    float eigen1 = eigenAvg + eigenDelta;\n    float eigen2 = eigenAvg - eigenDelta;\n\n    vec2 eigenVec1 = normalize(vec2((abs(b) < 0.001) ? 1.0 : b, eigen1 - a));\n    vec2 eigenVec2 = vec2(eigenVec1.y, -eigenVec1.x);\n\n    float scale1 = position.x * min(maxPixelRadius, maxStdDev * sqrt(eigen1));\n    float scale2 = position.y * min(maxPixelRadius, maxStdDev * sqrt(eigen2));\n\n    // Compute the NDC coordinates for the ellipsoid's diagonal axes.\n    vec2 pixelOffset = eigenVec1 * scale1 + eigenVec2 * scale2;\n    vec2 ndcOffset = (2.0 / scaledRenderSize) * pixelOffset;\n    vec3 ndc = vec3(ndcCenter.xy + ndcOffset, ndcCenter.z);\n\n    vRgba = rgba;\n    vSplatUv = position.xy * maxStdDev;\n    vNdc = ndc;\n    gl_Position = vec4(ndc.xy * clipCenter.w, clipCenter.zw);\n}\n","import * as THREE from \"three\";\n\nimport splatDefines from \"./shaders/splatDefines.glsl\";\nimport splatFragment from \"./shaders/splatFragment.glsl\";\nimport splatVertex from \"./shaders/splatVertex.glsl\";\n\nlet shaders: Record<string, string> | null = null;\n\nexport function getShaders(): Record<string, string> {\n  if (!shaders) {\n    // @ts-ignore\n    THREE.ShaderChunk.splatDefines = splatDefines;\n    shaders = {\n      splatVertex,\n      splatFragment,\n    };\n  }\n  return shaders;\n}\n","import * as THREE from \"three\";\n\nimport {\n  DEFAULT_SPLAT_ENCODING,\n  PackedSplats,\n  type SplatEncoding,\n} from \"./PackedSplats\";\nimport { RgbaArray } from \"./RgbaArray\";\nimport { SparkViewpoint, type SparkViewpointOptions } from \"./SparkViewpoint\";\nimport { type GeneratorMapping, SplatAccumulator } from \"./SplatAccumulator\";\nimport { SplatEdit } from \"./SplatEdit\";\nimport { SplatGenerator, SplatModifier } from \"./SplatGenerator\";\nimport { SplatGeometry } from \"./SplatGeometry\";\nimport { SplatMesh } from \"./SplatMesh\";\nimport { LN_SCALE_MAX, LN_SCALE_MIN } from \"./defines\";\nimport {\n  DynoVec3,\n  DynoVec4,\n  Gsplat,\n  TPackedSplats,\n  dynoBlock,\n  readPackedSplat,\n  transformGsplat,\n} from \"./dyno\";\nimport { getShaders } from \"./shaders\";\nimport {\n  averagePositions,\n  averageQuaternions,\n  cloneClock,\n  withinCoorientDist,\n} from \"./utils\";\n\n// SparkRenderer aggregates splats from multiple generators into a single\n// accumulated collection per frame. In normal operation we only need a\n// maximum of 3 accumulators: One currently being viewed, one currently\n// being sorted, and one more for generating the next frame. Accumulators\n// must be \"released\" by each viewpoint using it, so in unusual cases\n// such as slow render-outs, we may want to allow more than 3 so the\n// pipeline can continue generating new frames, but we limit to a maximum\n// of 5 to avoid excessive memory usage.\nconst MAX_ACCUMULATORS = 5;\n\n// Scene.onBeforeRender monkey-patch to\n// inject a SparkRenderer into a scene with SplatMeshes if there isn't\n// one already. Restore original Scene.onBeforeRenderer and Scene.add when done.\nlet hasSplatMesh = false;\nlet hasSparkRenderer = false;\n\nlet sparkRendererInstance: SparkRenderer;\n\nfunction containsSplatMesh(object3D: THREE.Object3D) {\n  let hasSplatMesh = false;\n  if (object3D instanceof SplatMesh) {\n    return true;\n  }\n  object3D.traverse((child: THREE.Object3D) => {\n    hasSplatMesh = hasSplatMesh || child instanceof SplatMesh;\n  });\n  return hasSplatMesh;\n}\n\nconst sceneAdd = THREE.Scene.prototype.add;\nTHREE.Scene.prototype.add = function (object: THREE.Object3D) {\n  hasSplatMesh = hasSplatMesh || containsSplatMesh(object);\n  hasSparkRenderer = hasSparkRenderer || object instanceof SparkRenderer;\n  sceneAdd.call(this, object);\n  return this;\n};\n\nconst sceneOnBeforeRender = THREE.Scene.prototype.onBeforeRender;\nTHREE.Scene.prototype.onBeforeRender = function (\n  renderer: THREE.WebGLRenderer,\n) {\n  if (!hasSplatMesh) {\n    return;\n  }\n  if (!hasSparkRenderer) {\n    const spark = sparkRendererInstance || new SparkRenderer({ renderer });\n    this.add(spark);\n  }\n  THREE.Scene.prototype.onBeforeRender = sceneOnBeforeRender;\n  THREE.Scene.prototype.add = sceneAdd;\n};\n\nexport type SparkRendererOptions = {\n  /**\n   * Pass in your THREE.WebGLRenderer instance so Spark can perform work\n   * outside the usual render loop. Should be created with antialias: false\n   * (default setting) as WebGL anti-aliasing doesn't improve Gaussian Splatting\n   * rendering and significantly reduces performance.\n   */\n  renderer: THREE.WebGLRenderer;\n  /**\n   * Whether to use premultiplied alpha when accumulating splat RGB\n   * @default true\n   */\n  premultipliedAlpha?: boolean;\n  /**\n   * Pass in a THREE.Clock to synchronize time-based effects across different\n   * systems. Alternatively, you can set the SparkRenderer properties time and\n   * deltaTime directly. (default: new THREE.Clock)\n   */\n  clock?: THREE.Clock;\n  /**\n   * Controls whether to check and automatically update Gsplat collection after\n   * each frame render.\n   * @default true\n   */\n  autoUpdate?: boolean;\n  /**\n   * Controls whether to update the Gsplats before or after rendering. For WebXR\n   * this must be false in order to complete rendering as soon as possible.\n   * @default false\n   */\n  preUpdate?: boolean;\n  /**\n   * Distance threshold for SparkRenderer movement triggering a Gsplat update at\n   * the new origin.\n   * @default 1.0\n   */\n  originDistance?: number;\n  /**\n   * Maximum standard deviations from the center to render Gaussians. Values\n   * Math.sqrt(5)..Math.sqrt(8) produce good results and can be tweaked for\n   * performance.\n   * @default Math.sqrt(8)\n   */\n  maxStdDev?: number;\n  /**\n   * Maximum pixel radius for splat rendering.\n   * @default 512.0\n   */\n  maxPixelRadius?: number;\n  /**\n   * Minimum alpha value for splat rendering.\n   * @default 0.5 * (1.0 / 255.0)\n   */\n  minAlpha?: number;\n  /**\n   * Enable 2D Gaussian splatting rendering ability. When this mode is enabled,\n   * any scale x/y/z component that is exactly 0 (minimum quantized value) results\n   * in the other two non-0 axis being interpreted as an oriented 2D Gaussian Splat,\n   * rather instead of the usual projected 3DGS Z-slice. When reading PLY files,\n   * scale values less than e^-30 will be interpreted as 0.\n   * @default false\n   */\n  enable2DGS?: boolean;\n  /**\n   * Scalar value to add to 2D splat covariance diagonal, effectively blurring +\n   * enlarging splats. In scenes trained without the Gsplat anti-aliasing tweak\n   * this value was typically 0.3, but with anti-aliasing it is 0.0\n   * @default 0.0\n   */\n  preBlurAmount?: number;\n  /**\n   * Scalar value to add to 2D splat covarianve diagonal, with opacity adjustment\n   * to correctly account for \"blurring\" when anti-aliasing. Typically 0.3\n   * (equivalent to approx 0.5 pixel radius) in scenes trained with anti-aliasing.\n   */\n  blurAmount?: number;\n  /**\n   * Depth-of-field distance to focal plane\n   */\n  focalDistance?: number;\n  /**\n   * Full-width angle of aperture opening (in radians), 0.0 to disable\n   * @default 0.0\n   */\n  apertureAngle?: number;\n  /**\n   * Modulate Gaussian kernel falloff. 0 means \"no falloff, flat shading\",\n   * while 1 is the normal Gaussian kernel.\n   * @default 1.0\n   */\n  falloff?: number;\n  /**\n   * X/Y clipping boundary factor for Gsplat centers against view frustum.\n   * 1.0 clips any centers that are exactly out of bounds, while 1.4 clips\n   * centers that are 40% beyond the bounds.\n   * @default 1.4\n   */\n  clipXY?: number;\n  /**\n   * Parameter to adjust projected splat scale calculation to match other renderers,\n   * similar to the same parameter in the MKellogg 3DGS renderer. Higher values will\n   * tend to sharpen the splats. A value 2.0 can be used to match the behavior of\n   * the PlayCanvas renderer.\n   * @default 1.0\n   */\n  focalAdjustment?: number;\n  /**\n   * Configures the SparkViewpointOptions for the default SparkViewpoint\n   * associated with this SparkRenderer. Notable option: sortRadial (sort by\n   * radial distance or Z-depth)\n   */\n  view?: SparkViewpointOptions;\n  /**\n   * Override the default splat encoding ranges for the PackedSplats.\n   * (default: undefined)\n   */\n  splatEncoding?: SplatEncoding;\n};\n\nexport class SparkRenderer extends THREE.Mesh {\n  renderer: THREE.WebGLRenderer;\n  premultipliedAlpha: boolean;\n  material: THREE.ShaderMaterial;\n  uniforms: ReturnType<typeof SparkRenderer.makeUniforms>;\n\n  autoUpdate: boolean;\n  preUpdate: boolean;\n  needsUpdate: boolean;\n  originDistance: number;\n  maxStdDev: number;\n  maxPixelRadius: number;\n  minAlpha: number;\n  enable2DGS: boolean;\n  preBlurAmount: number;\n  blurAmount: number;\n  focalDistance: number;\n  apertureAngle: number;\n  falloff: number;\n  clipXY: number;\n  focalAdjustment: number;\n  splatEncoding: SplatEncoding;\n\n  splatTexture: null | {\n    enable?: boolean;\n    texture?: THREE.Data3DTexture;\n    multiply?: THREE.Matrix2;\n    add?: THREE.Vector2;\n    near?: number;\n    far?: number;\n    mid?: number;\n  } = null;\n\n  time?: number;\n  deltaTime?: number;\n  clock: THREE.Clock;\n\n  // Latest Gsplat collection being displayed\n  active: SplatAccumulator;\n  // Free list of accumulators for reuse\n  private freeAccumulators: SplatAccumulator[];\n  // Total number of accumulators currently allocated\n  private accumulatorCount: number;\n  // Default SparkViewpoint used for rendering to the canvas\n  defaultView: SparkViewpoint;\n  // List of SparkViewpoints with autoUpdate enabled\n  autoViewpoints: SparkViewpoint[] = [];\n\n  // Dynos used to transform Gsplats to the accumulator coordinate system\n  private rotateToAccumulator = new DynoVec4({ value: new THREE.Quaternion() });\n  private translateToAccumulator = new DynoVec3({ value: new THREE.Vector3() });\n  private modifier: SplatModifier;\n\n  // Last rendered frame number so we know when we're rendering a new frame\n  private lastFrame = -1;\n  // Last update timestamp to compute deltaTime\n  private lastUpdateTime: number | null = null;\n  // List of cameras used for the current viewpoint (for WebXR)\n  private defaultCameras: THREE.Matrix4[] = [];\n\n  // Should be set to the defaultView, but can be temporarily changed to another\n  // viewpoint using prepareViewpoint() for rendering from a different viewpoint.\n  viewpoint: SparkViewpoint;\n\n  // Holds data needed to perform a scheduled Gsplat update.\n  private pendingUpdate: {\n    scene: THREE.Scene;\n    originToWorld: THREE.Matrix4;\n  } | null = null;\n\n  // Internal SparkViewpoint used for environment map rendering.\n  private envViewpoint: SparkViewpoint | null = null;\n\n  // Data and buffers used for environment map rendering\n  private static cubeRender: {\n    target: THREE.WebGLCubeRenderTarget;\n    camera: THREE.CubeCamera;\n    near: number;\n    far: number;\n  } | null = null;\n  private static pmrem: THREE.PMREMGenerator | null = null;\n\n  static EMPTY_SPLAT_TEXTURE = new THREE.Data3DTexture();\n\n  constructor(options: SparkRendererOptions) {\n    const uniforms = SparkRenderer.makeUniforms();\n    const shaders = getShaders();\n    const premultipliedAlpha = options.premultipliedAlpha ?? true;\n    const material = new THREE.ShaderMaterial({\n      glslVersion: THREE.GLSL3,\n      vertexShader: shaders.splatVertex,\n      fragmentShader: shaders.splatFragment,\n      uniforms,\n      transparent: true,\n      blending: premultipliedAlpha\n        ? THREE.CustomBlending\n        : THREE.NormalBlending,\n      blendSrc: premultipliedAlpha ? THREE.OneFactor : THREE.SrcAlphaFactor,\n      blendDst: premultipliedAlpha\n        ? THREE.OneMinusSrcAlphaFactor\n        : THREE.OneFactor,\n      depthTest: true,\n      depthWrite: false,\n      side: THREE.DoubleSide,\n    });\n\n    super(EMPTY_GEOMETRY, material);\n    // Disable frustum culling because we want to always draw them all\n    // and cull Gsplats individually in the shader\n    this.frustumCulled = false;\n\n    this.renderer = options.renderer;\n    this.material = material;\n    this.uniforms = uniforms;\n\n    // Create a Gsplat modifier that takes the output of any SplatGenerator\n    // and transforms them into the accumulator's coordinate system\n    const modifier = dynoBlock(\n      { gsplat: Gsplat },\n      { gsplat: Gsplat },\n      ({ gsplat }) => {\n        if (!gsplat) {\n          throw new Error(\"gsplat not defined\");\n        }\n        gsplat = transformGsplat(gsplat, {\n          rotate: this.rotateToAccumulator,\n          translate: this.translateToAccumulator,\n        });\n        return { gsplat };\n      },\n    );\n    this.modifier = new SplatModifier(modifier);\n\n    this.premultipliedAlpha = premultipliedAlpha;\n    this.autoUpdate = options.autoUpdate ?? true;\n    this.preUpdate = options.preUpdate ?? false;\n    this.needsUpdate = false;\n    this.originDistance = options.originDistance ?? 1;\n    this.maxStdDev = options.maxStdDev ?? Math.sqrt(8.0);\n    this.maxPixelRadius = options.maxPixelRadius ?? 512.0;\n    this.minAlpha = options.minAlpha ?? 0.5 * (1.0 / 255.0);\n    this.enable2DGS = options.enable2DGS ?? false;\n    this.preBlurAmount = options.preBlurAmount ?? 0.0;\n    this.blurAmount = options.blurAmount ?? 0.3;\n    this.focalDistance = options.focalDistance ?? 0.0;\n    this.apertureAngle = options.apertureAngle ?? 0.0;\n    this.falloff = options.falloff ?? 1.0;\n    this.clipXY = options.clipXY ?? 1.4;\n    this.focalAdjustment = options.focalAdjustment ?? 1.0;\n    this.splatEncoding = options.splatEncoding ?? { ...DEFAULT_SPLAT_ENCODING };\n\n    this.active = new SplatAccumulator();\n    this.accumulatorCount = 1;\n    this.freeAccumulators = [];\n    // Start with the minimum of 2 total accumulators\n    for (let count = 0; count < 1; ++count) {\n      this.freeAccumulators.push(new SplatAccumulator());\n      this.accumulatorCount += 1;\n    }\n\n    // Create a default SparkViewpoint that is used when we call render()\n    // on the scene and has the sorted Gsplat collection from that viewpoint.\n    this.defaultView = new SparkViewpoint({\n      ...options.view,\n      autoUpdate: true,\n      spark: this,\n    });\n    this.viewpoint = this.defaultView;\n    this.prepareViewpoint(this.viewpoint);\n\n    this.clock = options.clock ? cloneClock(options.clock) : new THREE.Clock();\n\n    sparkRendererInstance = this;\n  }\n\n  static makeUniforms() {\n    // Create uniforms used for Gsplat vertex and fragment shaders\n    const uniforms = {\n      // Size of render viewport in pixels\n      renderSize: { value: new THREE.Vector2() },\n      // Near and far plane distances\n      near: { value: 0.1 },\n      far: { value: 1000.0 },\n      // Total number of Gsplats in packedSplats to render\n      numSplats: { value: 0 },\n      // SplatAccumulator to view transformation quaternion\n      renderToViewQuat: { value: new THREE.Quaternion() },\n      // SplatAccumulator to view transformation translation\n      renderToViewPos: { value: new THREE.Vector3() },\n      // Maximum distance (in stddevs) from Gsplat center to render\n      maxStdDev: { value: 1.0 },\n      // Maximum pixel radius for splat rendering\n      maxPixelRadius: { value: 512.0 },\n      // Minimum alpha value for splat rendering\n      minAlpha: { value: 0.5 * (1.0 / 255.0) },\n      // Enable interpreting 0-thickness Gsplats as 2DGS\n      enable2DGS: { value: false },\n      // Add to projected 2D splat covariance diagonal (thickens and brightens)\n      preBlurAmount: { value: 0.0 },\n      // Add to 2D splat covariance diagonal and adjust opacity (anti-aliasing)\n      blurAmount: { value: 0.3 },\n      // Depth-of-field distance to focal plane\n      focalDistance: { value: 0.0 },\n      // Full-width angle of aperture opening (in radians)\n      apertureAngle: { value: 0.0 },\n      // Modulate Gaussian kernal falloff. 0 means \"no falloff, flat shading\",\n      // 1 is normal e^-x^2 falloff.\n      falloff: { value: 1.0 },\n      // Clip Gsplats that are clipXY times beyond the +-1 frustum bounds\n      clipXY: { value: 1.4 },\n      // Debug renderSize scale factor\n      focalAdjustment: { value: 1.0 },\n      // Enable splat texture rendering\n      splatTexEnable: { value: false },\n      // Splat texture to render\n      splatTexture: { type: \"t\", value: SparkRenderer.EMPTY_SPLAT_TEXTURE },\n      // Splat texture UV transform (multiply)\n      splatTexMul: { value: new THREE.Matrix2() },\n      // Splat texture UV transform (add)\n      splatTexAdd: { value: new THREE.Vector2() },\n      // Splat texture near plane distance\n      splatTexNear: { value: 0.1 },\n      // Splat texture far plane distance\n      splatTexFar: { value: 1000.0 },\n      // Splat texture mid plane distance, or 0.0 to disable\n      splatTexMid: { value: 0.0 },\n      // Gsplat collection to render\n      packedSplats: { type: \"t\", value: PackedSplats.getEmpty() },\n      // Splat encoding ranges\n      rgbMinMaxLnScaleMinMax: { value: new THREE.Vector4() },\n      // Time in seconds for time-based effects\n      time: { value: 0 },\n      // Delta time in seconds since last frame\n      deltaTime: { value: 0 },\n      // Whether to use premultiplied alpha when accumulating splat RGB\n      premultipliedAlpha: { value: true },\n      // Whether to encode Gsplat with linear RGB (for environment mapping)\n      encodeLinear: { value: false },\n      // Debug flag that alternates each frame\n      debugFlag: { value: false },\n    };\n    return uniforms;\n  }\n\n  private canAllocAccumulator(): boolean {\n    // Returns true if can allocate an accumulator immediately\n    return (\n      this.freeAccumulators.length > 0 ||\n      this.accumulatorCount < MAX_ACCUMULATORS\n    );\n  }\n\n  private maybeAllocAccumulator(): SplatAccumulator | null {\n    // Allocate an accumulator immediately if possible, else return null\n    let accumulator = this.freeAccumulators.pop();\n    if (accumulator === undefined) {\n      if (this.accumulatorCount >= MAX_ACCUMULATORS) {\n        return null;\n      }\n      accumulator = new SplatAccumulator();\n      this.accumulatorCount += 1;\n    }\n    accumulator.refCount = 1;\n    return accumulator;\n  }\n\n  releaseAccumulator(accumulator: SplatAccumulator) {\n    // Decrement reference count and recycle if no longer in use\n    accumulator.refCount -= 1;\n    if (accumulator.refCount === 0) {\n      this.freeAccumulators.push(accumulator);\n    }\n  }\n\n  newViewpoint(options: SparkViewpointOptions) {\n    // Create a new SparkViewpoint for this SparkRenderer.\n    // Note that every SparkRenderer has an initial spark.defaultView: SparkViewpoint\n    // from construction, which is used for the default canvas render loop.\n    // Calling this method allows you to create additional viewpoints, which can be\n    // updated automatically each frame (performing Gsplat sorting every time there\n    // is an update), or updated on-demand for controlled rendering for video render\n    // or similar applications.\n    return new SparkViewpoint({ ...options, spark: this });\n  }\n\n  onBeforeRender(\n    renderer: THREE.WebGLRenderer,\n    scene: THREE.Scene,\n    camera: THREE.Camera,\n  ) {\n    // Called by Three.js before rendering this SparkRenderer.\n    // At this point we can't modify the geometry or material, all these must\n    // be set in the scene already before this is called. Update the uniforms\n    // to render the Gsplats from the current active viewpoint.\n    const time = this.time ?? this.clock.getElapsedTime();\n    const deltaTime = time - (this.viewpoint.lastTime ?? time);\n    this.viewpoint.lastTime = time;\n\n    const frame = renderer.info.render.frame;\n    const isNewFrame = frame !== this.lastFrame;\n    this.lastFrame = frame;\n\n    const viewpoint = this.viewpoint;\n    if (viewpoint === this.defaultView) {\n      // When rendering is triggered on the default viewpoint,\n      // perform automatic updates.\n      if (isNewFrame) {\n        if (!renderer.xr.isPresenting) {\n          // Non-WebXR mode, just a single camera\n          this.defaultView.viewToWorld = camera.matrixWorld.clone();\n          this.defaultCameras = [this.defaultView.viewToWorld];\n        } else {\n          // In WebXR mode we are called multiple times, once for each eye,\n          // so use their average to compute the sort center.\n          const cameras = renderer.xr.getCamera().cameras;\n          this.defaultCameras = cameras.map((camera) => camera.matrixWorld);\n          this.defaultView.viewToWorld =\n            averageOriginToWorlds(this.defaultCameras) ?? new THREE.Matrix4();\n        }\n      }\n\n      if (this.autoUpdate) {\n        this.update({ scene, viewToWorld: this.defaultView.viewToWorld });\n      }\n    }\n\n    // Update uniforms for rendering\n\n    if (isNewFrame) {\n      // Keep these uniforms the same for both eyes if in WebXR\n      const blending = this.premultipliedAlpha\n        ? THREE.CustomBlending\n        : THREE.NormalBlending;\n      if (blending !== this.material.blending) {\n        this.material.blending = blending;\n        this.material.blendSrc = this.premultipliedAlpha\n          ? THREE.OneFactor\n          : THREE.SrcAlphaFactor;\n        this.material.blendDst = this.premultipliedAlpha\n          ? THREE.OneMinusSrcAlphaFactor\n          : THREE.OneFactor;\n        this.material.needsUpdate = true;\n      }\n      this.uniforms.premultipliedAlpha.value = this.premultipliedAlpha;\n      this.uniforms.time.value = time;\n      this.uniforms.deltaTime.value = deltaTime;\n      // Alternating debug flag that can aid in visual debugging\n      this.uniforms.debugFlag.value = (performance.now() / 1000.0) % 2.0 < 1.0;\n    }\n\n    if (viewpoint.target) {\n      // Rendering to a texture target, so its dimensions\n      this.uniforms.renderSize.value.set(\n        viewpoint.target.width,\n        viewpoint.target.height,\n      );\n    } else {\n      // Rendering to the canvas or WebXR\n      const renderSize = renderer.getDrawingBufferSize(\n        this.uniforms.renderSize.value,\n      );\n      if (renderSize.x === 1 && renderSize.y === 1) {\n        // WebXR mode on Apple Vision Pro returns 1x1 when presenting.\n        // Use a different means to figure out the render size.\n        const baseLayer = renderer.xr.getSession()?.renderState.baseLayer;\n        if (baseLayer) {\n          renderSize.x = baseLayer.framebufferWidth;\n          renderSize.y = baseLayer.framebufferHeight;\n        }\n      }\n    }\n\n    // Update uniforms from instance properties\n    const typedCamera = camera as\n      | THREE.PerspectiveCamera\n      | THREE.OrthographicCamera;\n    this.uniforms.near.value = typedCamera.near;\n    this.uniforms.far.value = typedCamera.far;\n    this.uniforms.encodeLinear.value = viewpoint.encodeLinear;\n    this.uniforms.maxStdDev.value = this.maxStdDev;\n    this.uniforms.maxPixelRadius.value = this.maxPixelRadius;\n    this.uniforms.minAlpha.value = this.minAlpha;\n    this.uniforms.enable2DGS.value = this.enable2DGS;\n    this.uniforms.preBlurAmount.value = this.preBlurAmount;\n    this.uniforms.blurAmount.value = this.blurAmount;\n    this.uniforms.focalDistance.value = this.focalDistance;\n    this.uniforms.apertureAngle.value = this.apertureAngle;\n    this.uniforms.falloff.value = this.falloff;\n    this.uniforms.clipXY.value = this.clipXY;\n    this.uniforms.focalAdjustment.value = this.focalAdjustment;\n\n    if (this.splatTexture) {\n      const { enable, texture, multiply, add, near, far, mid } =\n        this.splatTexture;\n      if (enable && texture) {\n        this.uniforms.splatTexEnable.value = true;\n        this.uniforms.splatTexture.value = texture;\n        if (multiply) {\n          this.uniforms.splatTexMul.value.fromArray(multiply.elements);\n        } else {\n          this.uniforms.splatTexMul.value.set(\n            0.5 / this.maxStdDev,\n            0,\n            0,\n            0.5 / this.maxStdDev,\n          );\n        }\n        this.uniforms.splatTexAdd.value.set(add?.x ?? 0.5, add?.y ?? 0.5);\n        this.uniforms.splatTexNear.value = near ?? this.uniforms.near.value;\n        this.uniforms.splatTexFar.value = far ?? this.uniforms.far.value;\n        this.uniforms.splatTexMid.value = mid ?? 0.0;\n      } else {\n        this.uniforms.splatTexEnable.value = false;\n        this.uniforms.splatTexture.value = SparkRenderer.EMPTY_SPLAT_TEXTURE;\n      }\n    } else {\n      this.uniforms.splatTexEnable.value = false;\n      this.uniforms.splatTexture.value = SparkRenderer.EMPTY_SPLAT_TEXTURE;\n    }\n\n    // Calculate the transform from the accumulator to the current camera\n    const accumToWorld =\n      viewpoint.display?.accumulator.toWorld ?? new THREE.Matrix4();\n    const worldToCamera = camera.matrixWorld.clone().invert();\n    const originToCamera = accumToWorld.clone().premultiply(worldToCamera);\n    originToCamera.decompose(\n      this.uniforms.renderToViewPos.value,\n      this.uniforms.renderToViewQuat.value,\n      new THREE.Vector3(),\n    );\n  }\n\n  // Update the uniforms for the given viewpoint.\n  // Note that the client expects to be able to call render() at any point\n  // to update the canvas, so we must switch the viewpoint back to\n  // defaultView when we're finished.\n  prepareViewpoint(viewpoint?: SparkViewpoint) {\n    this.viewpoint = viewpoint ?? this.viewpoint;\n\n    if (this.viewpoint.display) {\n      const { accumulator, geometry } = this.viewpoint.display;\n      this.uniforms.numSplats.value = accumulator.splats.numSplats;\n      this.uniforms.packedSplats.value = accumulator.splats.getTexture();\n      this.uniforms.rgbMinMaxLnScaleMinMax.value.set(\n        accumulator.splats.splatEncoding?.rgbMin ?? 0.0,\n        accumulator.splats.splatEncoding?.rgbMax ?? 1.0,\n        accumulator.splats.splatEncoding?.lnScaleMin ?? LN_SCALE_MIN,\n        accumulator.splats.splatEncoding?.lnScaleMax ?? LN_SCALE_MAX,\n      );\n      this.geometry = geometry;\n    } else {\n      // No Gsplats to display for this viewpoint yet\n      this.uniforms.numSplats.value = 0;\n      this.uniforms.packedSplats.value = PackedSplats.getEmpty();\n      this.geometry = EMPTY_GEOMETRY;\n    }\n  }\n\n  // If spark.autoUpdate is false then you must manually call\n  // spark.update({ scene }) to have the scene Gsplats be re-generated.\n  update({\n    scene,\n    viewToWorld,\n  }: { scene: THREE.Scene; viewToWorld?: THREE.Matrix4 }) {\n    // Compute the transform for the SparkRenderer to use as origin\n    // for Gsplat generation and accumulation.\n    const originToWorld = this.matrixWorld.clone();\n    // Either do the update now, or in the next \"tick\" depending on preUpdate\n    if (this.preUpdate) {\n      this.updateInternal({ scene, originToWorld, viewToWorld });\n    } else {\n      // Pass the update parameters to be performed on the next tick\n      this.pendingUpdate = {\n        scene,\n        originToWorld,\n      };\n      setTimeout(() => {\n        if (this.pendingUpdate) {\n          const { scene, originToWorld } = this.pendingUpdate;\n          this.pendingUpdate = null;\n          this.updateInternal({ scene, originToWorld, viewToWorld });\n        }\n      }, 1);\n    }\n  }\n\n  updateInternal({\n    scene,\n    originToWorld,\n    viewToWorld,\n  }: {\n    scene: THREE.Scene;\n    originToWorld?: THREE.Matrix4;\n    viewToWorld?: THREE.Matrix4;\n  }): boolean {\n    if (!this.canAllocAccumulator()) {\n      // We don't have any available accumulators because of sorting\n      // back pressure, so don't update this time but try again next time.\n      // Signal update not attempted.\n      return false;\n    }\n\n    // Figure out the frame of the SparkRenderer and current view\n    if (!originToWorld) {\n      originToWorld = this.active.toWorld;\n    }\n    viewToWorld = viewToWorld ?? originToWorld.clone();\n\n    const time = this.time ?? this.clock.getElapsedTime();\n    const deltaTime = time - (this.lastUpdateTime ?? time);\n    this.lastUpdateTime = time;\n\n    // Create a lookup from last active SplatGenerator to Gsplat mapping record\n    const activeMapping = this.active.mapping.reduce((map, record) => {\n      map.set(record.node, record);\n      return map;\n    }, new Map<SplatGenerator, GeneratorMapping>());\n\n    // Traverse visible scene to find all SplatGenerators and global SplatEdits\n    const { generators, visibleGenerators, globalEdits } =\n      this.compileScene(scene);\n\n    // Let all SplatGenerators run their frameUpdate() method\n    for (const object of generators) {\n      object.frameUpdate?.({\n        object,\n        time,\n        deltaTime,\n        viewToWorld,\n        globalEdits,\n      });\n    }\n\n    const visibleGenHash = new Set(visibleGenerators.map((g) => g.uuid));\n\n    // Make sure we have new version numbers for any objects with either\n    // generator or numSplats that have changed since the last frame.\n    for (const object of generators) {\n      const current = activeMapping.get(object);\n      const isVisible = object.generator && visibleGenHash.has(object.uuid);\n      const numSplats = isVisible ? object.numSplats : 0;\n      if (\n        this.needsUpdate ||\n        object.generator !== current?.generator ||\n        numSplats !== current?.count\n      ) {\n        object.updateVersion();\n      }\n    }\n\n    // Check if the origin is within the maximum allowed distance before\n    // we trigger an update.\n    const originUpdate = !withinCoorientDist({\n      matrix1: originToWorld,\n      matrix2: this.active.toWorld,\n      maxDistance: this.originDistance,\n    });\n\n    // Check if we need any update at all\n    const needsUpdate =\n      this.needsUpdate ||\n      originUpdate ||\n      generators.length !== activeMapping.size ||\n      generators.some((g) => g.version !== activeMapping.get(g)?.version);\n    this.needsUpdate = false;\n\n    let accumulator: SplatAccumulator | null = null;\n    if (needsUpdate) {\n      // Need to update, so allocate an accumulator\n      accumulator = this.maybeAllocAccumulator();\n      if (!accumulator) {\n        // This should never happen since we checked canAllocAccumulator() above\n        throw new Error(\"Unreachable\");\n      }\n\n      // Compute whether our view frame has changed enough to warrant\n      // doing a Gsplat sort. Check both distance epsilon and\n      // minimum co-orientation (dot product of quaternions)\n      const originChanged = !withinCoorientDist({\n        matrix1: originToWorld,\n        matrix2: this.active.toWorld,\n        maxDistance: 0.00001,\n        minCoorient: 0.99999,\n      });\n\n      // Compute an ordering of the generators with the rough goal\n      // of keeping unchanging generators near the front to minimize\n      // the number of Gsplats that need to be regenerated.\n      const sorted = visibleGenerators\n        .map((g, gIndex): [number, number, SplatGenerator] => {\n          const lastGen = activeMapping.get(g);\n          // If no previous generator, sort by absolute version, which will\n          // tend to push frequently updated generators toward the end\n          return !lastGen\n            ? [Number.POSITIVE_INFINITY, g.version, g]\n            : // Sort by version deltas then by previous ordering in the mapping,\n              // attempting to keep unchanging generators near the front\n              // to improve our chances of avoiding a re-generation.\n              [g.version - lastGen.version, lastGen.base, g];\n        })\n        .sort((a, b) => {\n          // Sort by first then second element of the tuple\n          if (a[0] !== b[0]) {\n            return a[0] - b[0];\n          }\n          return a[1] - b[1];\n        });\n      const genOrder = sorted.map(([_version, _seq, g]) => g);\n\n      // Compute sequential layout of generated splats\n      const splatCounts = genOrder.map((g) => g.numSplats);\n      const { maxSplats, mapping } =\n        accumulator.splats.generateMapping(splatCounts);\n      const newGenerators = genOrder.map((node, gIndex) => {\n        const { base, count } = mapping[gIndex];\n        return {\n          node,\n          generator: node.generator,\n          version: node.version,\n          base,\n          count,\n        };\n      });\n\n      // Compute worldToAccumulator origin transform (no scale)\n      originToWorld\n        .clone()\n        .invert()\n        .decompose(\n          this.translateToAccumulator.value,\n          this.rotateToAccumulator.value,\n          new THREE.Vector3(),\n        );\n\n      // Generate the Gsplats according to the mapping that need updating\n      accumulator.ensureGenerate(maxSplats);\n      accumulator.splats.splatEncoding = { ...this.splatEncoding };\n      const generated = accumulator.generateSplats({\n        renderer: this.renderer,\n        modifier: this.modifier,\n        generators: newGenerators,\n        forceUpdate: originChanged,\n        originToWorld,\n      });\n\n      // Update splat version number\n      accumulator.splatsVersion = this.active.splatsVersion + 1;\n      // Increment the mapping version if the mapping isn't identical to before\n      const hasCorrespondence = accumulator.hasCorrespondence(this.active);\n      accumulator.mappingVersion =\n        this.active.mappingVersion + (hasCorrespondence ? 0 : 1);\n\n      // Release the old accumulator and make the new one active\n      this.releaseAccumulator(this.active);\n      this.active = accumulator;\n      this.prepareViewpoint();\n    }\n\n    // Let the system breath before potentially triggering sorts\n    setTimeout(() => {\n      // Notify all auto-updating viewpoints that we updated the Gsplats\n      for (const view of this.autoViewpoints) {\n        view.autoPoll({ accumulator: accumulator ?? undefined });\n      }\n    }, 1);\n\n    // Signal update was performed\n    return true;\n  }\n\n  private compileScene(scene: THREE.Scene): {\n    generators: SplatGenerator[];\n    visibleGenerators: SplatGenerator[];\n    globalEdits: SplatEdit[];\n  } {\n    // Take a snapshot of the SplatGenerators and SplatEdits in the scene\n    // to be used to run an update.\n    const generators: SplatGenerator[] = [];\n    // Collect all SplatGenerators, even if not visible, because we want to\n    // be able to call their update functions every frame.\n    scene.traverse((node) => {\n      if (node instanceof SplatGenerator) {\n        generators.push(node);\n      }\n    });\n\n    const visibleGenerators: SplatGenerator[] = [];\n    scene.traverseVisible((node) => {\n      if (node instanceof SplatGenerator) {\n        visibleGenerators.push(node);\n      }\n    });\n\n    const globalEdits = new Set<SplatEdit>();\n    scene.traverseVisible((node) => {\n      if (node instanceof SplatEdit) {\n        let ancestor = node.parent;\n        while (ancestor != null && !(ancestor instanceof SplatMesh)) {\n          ancestor = ancestor.parent;\n        }\n        if (ancestor == null) {\n          // Not part of a SplatMesh so it's a global edit\n          globalEdits.add(node);\n        }\n      }\n    });\n    return {\n      generators,\n      visibleGenerators,\n      globalEdits: Array.from(globalEdits),\n    };\n  }\n\n  // Renders out the scene to an environment map that can be used for\n  // Image-based lighting or similar applications. First optionally updates Gsplats,\n  // sorts them with respect to the provided worldCenter, renders 6 cube faces,\n  // then pre-filters them using THREE.PMREMGenerator and returns a THREE.Texture\n  // that can assigned directly to a THREE.MeshStandardMaterial.envMap property.\n  async renderEnvMap({\n    renderer,\n    scene,\n    worldCenter,\n    size = 256,\n    near = 0.1,\n    far = 1000,\n    hideObjects = [],\n    update = false,\n  }: {\n    renderer?: THREE.WebGLRenderer;\n    scene: THREE.Scene;\n    worldCenter: THREE.Vector3;\n    size?: number;\n    near?: number;\n    far?: number;\n    hideObjects?: THREE.Object3D[];\n    update?: boolean;\n  }): Promise<THREE.Texture> {\n    if (!this.envViewpoint) {\n      this.envViewpoint = this.newViewpoint({ sort360: true });\n    }\n    if (\n      !SparkRenderer.cubeRender ||\n      SparkRenderer.cubeRender.target.width !== size ||\n      SparkRenderer.cubeRender.near !== near ||\n      SparkRenderer.cubeRender.far !== far\n    ) {\n      if (SparkRenderer.cubeRender) {\n        SparkRenderer.cubeRender.target.dispose();\n      }\n      const target = new THREE.WebGLCubeRenderTarget(size, {\n        format: THREE.RGBAFormat,\n        generateMipmaps: true,\n        minFilter: THREE.LinearMipMapLinearFilter,\n      });\n      const camera = new THREE.CubeCamera(near, far, target);\n      SparkRenderer.cubeRender = { target, camera, near, far };\n    }\n\n    if (!SparkRenderer.pmrem) {\n      SparkRenderer.pmrem = new THREE.PMREMGenerator(renderer ?? this.renderer);\n    }\n\n    // Prepare the viewpoint, sorting Gsplats for this view origin.\n    const viewToWorld = new THREE.Matrix4().setPosition(worldCenter);\n    await this.envViewpoint?.prepare({ scene, viewToWorld, update });\n\n    const { target, camera } = SparkRenderer.cubeRender;\n    camera.position.copy(worldCenter);\n\n    // Save the visibility state of objects we want to hide before render\n    const objectVisibility = new Map<THREE.Object3D, boolean>();\n    for (const object of hideObjects) {\n      objectVisibility.set(object, object.visible);\n      object.visible = false;\n    }\n\n    // Update the CubeCamera, which performs 6 cube face renders\n    this.prepareViewpoint(this.envViewpoint);\n    camera.update(renderer ?? this.renderer, scene);\n\n    // Restore viewpoint to default and object visibility\n    this.prepareViewpoint(this.defaultView);\n    for (const [object, visible] of objectVisibility.entries()) {\n      object.visible = visible;\n    }\n\n    // Pre-filter the cube map using THREE.PMREMGenerator\n    return SparkRenderer.pmrem?.fromCubemap(target.texture).texture;\n  }\n\n  // Utility function to recursively set the envMap property for any\n  // THREE.MeshStandardMaterial within the subtree of root.\n  recurseSetEnvMap(root: THREE.Object3D, envMap: THREE.Texture) {\n    root.traverse((node) => {\n      if (node instanceof THREE.Mesh) {\n        if (Array.isArray(node.material)) {\n          for (const material of node.material) {\n            if (material instanceof THREE.MeshStandardMaterial) {\n              material.envMap = envMap;\n            }\n          }\n        } else {\n          if (node.material instanceof THREE.MeshStandardMaterial) {\n            node.material.envMap = envMap;\n          }\n        }\n      }\n    });\n  }\n\n  // Utility function that helps extract the Gsplat RGBA values from a\n  // SplatGenerator, including the result of any real-time RGBA SDF edits applied\n  // to a SplatMesh. This effectively \"bakes\" any computed RGBA values, which can\n  // now be used as a pipeline input via SplatMesh.splatRgba to inject these\n  // baked values into the Gsplat data.\n  getRgba({\n    generator,\n    rgba,\n  }: { generator: SplatGenerator; rgba?: RgbaArray }): RgbaArray {\n    const mapping = this.active.mapping.find(({ node }) => node === generator);\n    if (!mapping) {\n      throw new Error(\"Generator not found\");\n    }\n\n    rgba = rgba ?? new RgbaArray();\n    rgba.fromPackedSplats({\n      packedSplats: this.active.splats,\n      base: mapping.base,\n      count: mapping.count,\n      renderer: this.renderer,\n    });\n    return rgba;\n  }\n\n  // Utility function that builds on getRgba({ generator }) and additionally\n  // reads back the RGBA values to the CPU in a Uint8Array with packed RGBA\n  // in that byte order.\n  async readRgba({\n    generator,\n    rgba,\n  }: { generator: SplatGenerator; rgba?: RgbaArray }): Promise<Uint8Array> {\n    rgba = this.getRgba({ generator, rgba });\n    return rgba.read();\n  }\n}\n\nconst EMPTY_GEOMETRY = new SplatGeometry(new Uint32Array(1), 0);\n\nconst reorderSplats = dynoBlock(\n  { packedSplats: TPackedSplats, index: \"int\" },\n  { gsplat: Gsplat },\n  ({ packedSplats, index }) => {\n    if (!packedSplats || !index) {\n      throw new Error(\"Invalid input\");\n    }\n    const gsplat = readPackedSplat(packedSplats, index);\n    return { gsplat };\n  },\n);\n\nfunction averageOriginToWorlds(\n  originToWorlds: THREE.Matrix4[],\n): THREE.Matrix4 | null {\n  if (originToWorlds.length === 0) {\n    return null;\n  }\n\n  const position = new THREE.Vector3();\n  const quaternion = new THREE.Quaternion();\n  const scale = new THREE.Vector3();\n\n  const positions: THREE.Vector3[] = [];\n  const quaternions: THREE.Quaternion[] = [];\n  for (const matrix of originToWorlds) {\n    matrix.decompose(position, quaternion, scale);\n    positions.push(position);\n    quaternions.push(quaternion);\n  }\n\n  return new THREE.Matrix4().compose(\n    averagePositions(positions),\n    averageQuaternions(quaternions),\n    new THREE.Vector3(1, 1, 1),\n  );\n}\n","import type { SplatEncoding } from \"./PackedSplats\";\nimport { computeMaxSplats, setPackedSplat } from \"./utils\";\n\nexport function decodeAntiSplat(\n  fileBytes: Uint8Array,\n  initNumSplats: (numSplats: number) => void,\n  splatCallback: (\n    index: number,\n    x: number,\n    y: number,\n    z: number,\n    scaleX: number,\n    scaleY: number,\n    scaleZ: number,\n    quatX: number,\n    quatY: number,\n    quatZ: number,\n    quatW: number,\n    opacity: number,\n    r: number,\n    g: number,\n    b: number,\n  ) => void,\n) {\n  const numSplats = Math.floor(fileBytes.length / 32); // 32 bytes per splat\n  if (numSplats * 32 !== fileBytes.length) {\n    throw new Error(\"Invalid .splat file size\");\n  }\n  initNumSplats(numSplats);\n\n  const f32 = new Float32Array(fileBytes.buffer);\n  for (let i = 0; i < numSplats; ++i) {\n    const i32 = i * 32;\n    const i8 = i * 8;\n    const x = f32[i8 + 0];\n    const y = f32[i8 + 1];\n    const z = f32[i8 + 2];\n    const scaleX = f32[i8 + 3];\n    const scaleY = f32[i8 + 4];\n    const scaleZ = f32[i8 + 5];\n    const r = fileBytes[i32 + 24] / 255;\n    const g = fileBytes[i32 + 25] / 255;\n    const b = fileBytes[i32 + 26] / 255;\n    const opacity = fileBytes[i32 + 27] / 255;\n    const quatW = (fileBytes[i32 + 28] - 128) / 128;\n    const quatX = (fileBytes[i32 + 29] - 128) / 128;\n    const quatY = (fileBytes[i32 + 30] - 128) / 128;\n    const quatZ = (fileBytes[i32 + 31] - 128) / 128;\n    splatCallback(\n      i,\n      x,\n      y,\n      z,\n      scaleX,\n      scaleY,\n      scaleZ,\n      quatX,\n      quatY,\n      quatZ,\n      quatW,\n      opacity,\n      r,\n      g,\n      b,\n    );\n  }\n}\n\nexport function unpackAntiSplat(\n  fileBytes: Uint8Array,\n  splatEncoding: SplatEncoding,\n): {\n  packedArray: Uint32Array;\n  numSplats: number;\n} {\n  let numSplats = 0;\n  let maxSplats = 0;\n  let packedArray = new Uint32Array(0);\n  decodeAntiSplat(\n    fileBytes,\n    (cbNumSplats) => {\n      numSplats = cbNumSplats;\n      maxSplats = computeMaxSplats(numSplats);\n      packedArray = new Uint32Array(maxSplats * 4);\n    },\n    (\n      index,\n      x,\n      y,\n      z,\n      scaleX,\n      scaleY,\n      scaleZ,\n      quatX,\n      quatY,\n      quatZ,\n      quatW,\n      opacity,\n      r,\n      g,\n      b,\n    ) => {\n      setPackedSplat(\n        packedArray,\n        index,\n        x,\n        y,\n        z,\n        scaleX,\n        scaleY,\n        scaleZ,\n        quatX,\n        quatY,\n        quatZ,\n        quatW,\n        opacity,\n        r,\n        g,\n        b,\n        splatEncoding,\n      );\n    },\n  );\n  return { packedArray, numSplats };\n}\n","import type { SplatEncoding } from \"./PackedSplats\";\nimport {\n  computeMaxSplats,\n  encodeSh1Rgb,\n  encodeSh2Rgb,\n  encodeSh3Rgb,\n  fromHalf,\n  setPackedSplat,\n} from \"./utils\";\n\ntype KsplatCompression = {\n  bytesPerCenter: number;\n  bytesPerScale: number;\n  bytesPerRotation: number;\n  bytesPerColor: number;\n  bytesPerSphericalHarmonicsComponent: number;\n  scaleOffsetBytes: number;\n  rotationOffsetBytes: number;\n  colorOffsetBytes: number;\n  sphericalHarmonicsOffsetBytes: number;\n  scaleRange: number;\n};\n\nconst KSPLAT_COMPRESSION: Record<number, KsplatCompression> = {\n  0: {\n    bytesPerCenter: 12,\n    bytesPerScale: 12,\n    bytesPerRotation: 16,\n    bytesPerColor: 4,\n    bytesPerSphericalHarmonicsComponent: 4,\n    scaleOffsetBytes: 12,\n    rotationOffsetBytes: 24,\n    colorOffsetBytes: 40,\n    sphericalHarmonicsOffsetBytes: 44,\n    scaleRange: 1,\n  },\n  1: {\n    bytesPerCenter: 6,\n    bytesPerScale: 6,\n    bytesPerRotation: 8,\n    bytesPerColor: 4,\n    bytesPerSphericalHarmonicsComponent: 2,\n    scaleOffsetBytes: 6,\n    rotationOffsetBytes: 12,\n    colorOffsetBytes: 20,\n    sphericalHarmonicsOffsetBytes: 24,\n    scaleRange: 32767,\n  },\n  2: {\n    bytesPerCenter: 6,\n    bytesPerScale: 6,\n    bytesPerRotation: 8,\n    bytesPerColor: 4,\n    bytesPerSphericalHarmonicsComponent: 1,\n    scaleOffsetBytes: 6,\n    rotationOffsetBytes: 12,\n    colorOffsetBytes: 20,\n    sphericalHarmonicsOffsetBytes: 24,\n    scaleRange: 32767,\n  },\n};\n\nconst KSPLAT_SH_DEGREE_TO_COMPONENTS: Record<number, number> = {\n  0: 0,\n  1: 9,\n  2: 24,\n  3: 45,\n};\n\nexport function decodeKsplat(\n  fileBytes: Uint8Array,\n  initNumSplats: (numSplats: number) => void,\n  splatCallback: (\n    index: number,\n    x: number,\n    y: number,\n    z: number,\n    scaleX: number,\n    scaleY: number,\n    scaleZ: number,\n    quatX: number,\n    quatY: number,\n    quatZ: number,\n    quatW: number,\n    opacity: number,\n    r: number,\n    g: number,\n    b: number,\n  ) => void,\n  shCallback?: (\n    index: number,\n    sh1: Float32Array,\n    sh2?: Float32Array,\n    sh3?: Float32Array,\n  ) => void,\n) {\n  const HEADER_BYTES = 4096;\n  const SECTION_BYTES = 1024;\n\n  let headerOffset = 0;\n  const header = new DataView(fileBytes.buffer, headerOffset, HEADER_BYTES);\n  headerOffset += HEADER_BYTES;\n\n  const versionMajor = header.getUint8(0);\n  const versionMinor = header.getUint8(1);\n  if (versionMajor !== 0 || versionMinor < 1) {\n    throw new Error(\n      `Unsupported .ksplat version: ${versionMajor}.${versionMinor}`,\n    );\n  }\n  const maxSectionCount = header.getUint32(4, true);\n  // const sectionCount = header.getUint32(8, true);\n  // const maxSplatCount = header.getUint32(12, true);\n  const splatCount = header.getUint32(16, true);\n  const compressionLevel = header.getUint16(20, true);\n  if (compressionLevel < 0 || compressionLevel > 2) {\n    throw new Error(`Invalid .ksplat compression level: ${compressionLevel}`);\n  }\n  // const sceneCenterX = header.getFloat32(24, true);\n  // const sceneCenterY = header.getFloat32(28, true);\n  // const sceneCenterZ = header.getFloat32(32, true);\n  const minSphericalHarmonicsCoeff = header.getFloat32(36, true) || -1.5;\n  const maxSphericalHarmonicsCoeff = header.getFloat32(40, true) || 1.5;\n\n  const numSplats = splatCount;\n  initNumSplats(numSplats);\n  const maxSplats = computeMaxSplats(numSplats);\n  const packedArray = new Uint32Array(maxSplats * 4);\n  const extra: Record<string, unknown> = {};\n\n  let sectionBase = HEADER_BYTES + maxSectionCount * SECTION_BYTES;\n\n  for (let section = 0; section < maxSectionCount; ++section) {\n    const section = new DataView(fileBytes.buffer, headerOffset, SECTION_BYTES);\n    headerOffset += SECTION_BYTES;\n\n    const sectionSplatCount = section.getUint32(0, true);\n    const sectionMaxSplatCount = section.getUint32(4, true);\n    const bucketSize = section.getUint32(8, true);\n    const bucketCount = section.getUint32(12, true);\n    const bucketBlockSize = section.getFloat32(16, true);\n    const bucketStorageSizeBytes = section.getUint16(20, true);\n    const compressionScaleRange =\n      (section.getUint32(24, true) ||\n        KSPLAT_COMPRESSION[compressionLevel]?.scaleRange) ??\n      1;\n    const fullBucketCount = section.getUint32(32, true);\n    const fullBucketSplats = fullBucketCount * bucketSize;\n    const partiallyFilledBucketCount = section.getUint32(36, true);\n    const bucketsMetaDataSizeBytes = partiallyFilledBucketCount * 4;\n    const bucketsStorageSizeBytes =\n      bucketStorageSizeBytes * bucketCount + bucketsMetaDataSizeBytes;\n    const sphericalHarmonicsDegree = section.getUint16(40, true);\n    const shComponents =\n      KSPLAT_SH_DEGREE_TO_COMPONENTS[sphericalHarmonicsDegree];\n\n    const {\n      bytesPerCenter,\n      bytesPerScale,\n      bytesPerRotation,\n      bytesPerColor,\n      bytesPerSphericalHarmonicsComponent,\n      scaleOffsetBytes,\n      rotationOffsetBytes,\n      colorOffsetBytes,\n      sphericalHarmonicsOffsetBytes,\n    } = KSPLAT_COMPRESSION[compressionLevel];\n    const bytesPerSplat =\n      bytesPerCenter +\n      bytesPerScale +\n      bytesPerRotation +\n      bytesPerColor +\n      shComponents * bytesPerSphericalHarmonicsComponent;\n    const splatDataStorageSizeBytes = bytesPerSplat * sectionMaxSplatCount;\n    const storageSizeBytes =\n      splatDataStorageSizeBytes + bucketsStorageSizeBytes;\n\n    const sh1Index = [0, 3, 6, 1, 4, 7, 2, 5, 8];\n    const sh2Index = [\n      9, 14, 19, 10, 15, 20, 11, 16, 21, 12, 17, 22, 13, 18, 23,\n    ];\n    const sh3Index = [\n      24, 31, 38, 25, 32, 39, 26, 33, 40, 27, 34, 41, 28, 35, 42, 29, 36, 43,\n      30, 37, 44,\n    ];\n    const sh1 =\n      sphericalHarmonicsDegree >= 1 ? new Float32Array(3 * 3) : undefined;\n    const sh2 =\n      sphericalHarmonicsDegree >= 2 ? new Float32Array(5 * 3) : undefined;\n    const sh3 =\n      sphericalHarmonicsDegree >= 3 ? new Float32Array(7 * 3) : undefined;\n\n    const compressionScaleFactor = bucketBlockSize / 2 / compressionScaleRange;\n    const bucketsBase = sectionBase + bucketsMetaDataSizeBytes;\n    const dataBase = sectionBase + bucketsStorageSizeBytes;\n    const data = new DataView(\n      fileBytes.buffer,\n      dataBase,\n      splatDataStorageSizeBytes,\n    );\n    const bucketArray = new Float32Array(\n      fileBytes.buffer,\n      bucketsBase,\n      bucketCount * 3,\n    );\n    const partiallyFilledBucketLengths = new Uint32Array(\n      fileBytes.buffer,\n      sectionBase,\n      partiallyFilledBucketCount,\n    );\n\n    function getSh(splatOffset: number, component: number) {\n      if (compressionLevel === 0) {\n        return data.getFloat32(\n          splatOffset + sphericalHarmonicsOffsetBytes + component * 4,\n          true,\n        );\n      }\n      if (compressionLevel === 1) {\n        return fromHalf(\n          data.getUint16(\n            splatOffset + sphericalHarmonicsOffsetBytes + component * 2,\n            true,\n          ),\n        );\n      }\n      const t =\n        data.getUint8(splatOffset + sphericalHarmonicsOffsetBytes + component) /\n        255;\n      return (\n        minSphericalHarmonicsCoeff +\n        t * (maxSphericalHarmonicsCoeff - minSphericalHarmonicsCoeff)\n      );\n    }\n\n    let partialBucketIndex = fullBucketCount;\n    let partialBucketBase = fullBucketSplats;\n\n    for (let i = 0; i < sectionSplatCount; ++i) {\n      const splatOffset = i * bytesPerSplat;\n\n      let bucketIndex: number;\n      if (i < fullBucketSplats) {\n        bucketIndex = Math.floor(i / bucketSize);\n      } else {\n        const bucketLength =\n          partiallyFilledBucketLengths[partialBucketIndex - fullBucketCount];\n        if (i >= partialBucketBase + bucketLength) {\n          partialBucketIndex += 1;\n          partialBucketBase += bucketLength;\n        }\n        bucketIndex = partialBucketIndex;\n      }\n\n      const x =\n        compressionLevel === 0\n          ? data.getFloat32(splatOffset + 0, true)\n          : (data.getUint16(splatOffset + 0, true) - compressionScaleRange) *\n              compressionScaleFactor +\n            bucketArray[3 * bucketIndex + 0];\n      const y =\n        compressionLevel === 0\n          ? data.getFloat32(splatOffset + 4, true)\n          : (data.getUint16(splatOffset + 2, true) - compressionScaleRange) *\n              compressionScaleFactor +\n            bucketArray[3 * bucketIndex + 1];\n      const z =\n        compressionLevel === 0\n          ? data.getFloat32(splatOffset + 8, true)\n          : (data.getUint16(splatOffset + 4, true) - compressionScaleRange) *\n              compressionScaleFactor +\n            bucketArray[3 * bucketIndex + 2];\n\n      const scaleX =\n        compressionLevel === 0\n          ? data.getFloat32(splatOffset + scaleOffsetBytes + 0, true)\n          : fromHalf(data.getUint16(splatOffset + scaleOffsetBytes + 0, true));\n      const scaleY =\n        compressionLevel === 0\n          ? data.getFloat32(splatOffset + scaleOffsetBytes + 4, true)\n          : fromHalf(data.getUint16(splatOffset + scaleOffsetBytes + 2, true));\n      const scaleZ =\n        compressionLevel === 0\n          ? data.getFloat32(splatOffset + scaleOffsetBytes + 8, true)\n          : fromHalf(data.getUint16(splatOffset + scaleOffsetBytes + 4, true));\n\n      const quatW =\n        compressionLevel === 0\n          ? data.getFloat32(splatOffset + rotationOffsetBytes + 0, true)\n          : fromHalf(\n              data.getUint16(splatOffset + rotationOffsetBytes + 0, true),\n            );\n      const quatX =\n        compressionLevel === 0\n          ? data.getFloat32(splatOffset + rotationOffsetBytes + 4, true)\n          : fromHalf(\n              data.getUint16(splatOffset + rotationOffsetBytes + 2, true),\n            );\n      const quatY =\n        compressionLevel === 0\n          ? data.getFloat32(splatOffset + rotationOffsetBytes + 8, true)\n          : fromHalf(\n              data.getUint16(splatOffset + rotationOffsetBytes + 4, true),\n            );\n      const quatZ =\n        compressionLevel === 0\n          ? data.getFloat32(splatOffset + rotationOffsetBytes + 12, true)\n          : fromHalf(\n              data.getUint16(splatOffset + rotationOffsetBytes + 6, true),\n            );\n\n      const r = data.getUint8(splatOffset + colorOffsetBytes + 0) / 255;\n      const g = data.getUint8(splatOffset + colorOffsetBytes + 1) / 255;\n      const b = data.getUint8(splatOffset + colorOffsetBytes + 2) / 255;\n      const opacity = data.getUint8(splatOffset + colorOffsetBytes + 3) / 255;\n\n      splatCallback(\n        i,\n        x,\n        y,\n        z,\n        scaleX,\n        scaleY,\n        scaleZ,\n        quatX,\n        quatY,\n        quatZ,\n        quatW,\n        opacity,\n        r,\n        g,\n        b,\n      );\n\n      if (sphericalHarmonicsDegree >= 1 && sh1) {\n        for (const [i, key] of sh1Index.entries()) {\n          sh1[i] = getSh(splatOffset, key);\n        }\n        if (sh2) {\n          for (const [i, key] of sh2Index.entries()) {\n            sh2[i] = getSh(splatOffset, key);\n          }\n        }\n        if (sh3) {\n          for (const [i, key] of sh3Index.entries()) {\n            sh3[i] = getSh(splatOffset, key);\n          }\n        }\n        shCallback?.(i, sh1, sh2, sh3);\n      }\n    }\n    sectionBase += storageSizeBytes;\n  }\n}\n\nexport function unpackKsplat(\n  fileBytes: Uint8Array,\n  splatEncoding: SplatEncoding,\n): {\n  packedArray: Uint32Array;\n  numSplats: number;\n  extra: Record<string, unknown>;\n} {\n  const HEADER_BYTES = 4096;\n  const SECTION_BYTES = 1024;\n\n  let headerOffset = 0;\n  const header = new DataView(fileBytes.buffer, headerOffset, HEADER_BYTES);\n  headerOffset += HEADER_BYTES;\n\n  const versionMajor = header.getUint8(0);\n  const versionMinor = header.getUint8(1);\n  if (versionMajor !== 0 || versionMinor < 1) {\n    throw new Error(\n      `Unsupported .ksplat version: ${versionMajor}.${versionMinor}`,\n    );\n  }\n  const maxSectionCount = header.getUint32(4, true);\n  // const sectionCount = header.getUint32(8, true);\n  // const maxSplatCount = header.getUint32(12, true);\n  const splatCount = header.getUint32(16, true);\n  const compressionLevel = header.getUint16(20, true);\n  if (compressionLevel < 0 || compressionLevel > 2) {\n    throw new Error(`Invalid .ksplat compression level: ${compressionLevel}`);\n  }\n  // const sceneCenterX = header.getFloat32(24, true);\n  // const sceneCenterY = header.getFloat32(28, true);\n  // const sceneCenterZ = header.getFloat32(32, true);\n  const minSphericalHarmonicsCoeff = header.getFloat32(36, true) || -1.5;\n  const maxSphericalHarmonicsCoeff = header.getFloat32(40, true) || 1.5;\n\n  const numSplats = splatCount;\n  const maxSplats = computeMaxSplats(numSplats);\n  const packedArray = new Uint32Array(maxSplats * 4);\n  const extra: Record<string, unknown> = {};\n\n  let sectionBase = HEADER_BYTES + maxSectionCount * SECTION_BYTES;\n\n  for (let section = 0; section < maxSectionCount; ++section) {\n    const section = new DataView(fileBytes.buffer, headerOffset, SECTION_BYTES);\n    headerOffset += SECTION_BYTES;\n\n    const sectionSplatCount = section.getUint32(0, true);\n    const sectionMaxSplatCount = section.getUint32(4, true);\n    const bucketSize = section.getUint32(8, true);\n    const bucketCount = section.getUint32(12, true);\n    const bucketBlockSize = section.getFloat32(16, true);\n    const bucketStorageSizeBytes = section.getUint16(20, true);\n    const compressionScaleRange =\n      (section.getUint32(24, true) ||\n        KSPLAT_COMPRESSION[compressionLevel]?.scaleRange) ??\n      1;\n    const fullBucketCount = section.getUint32(32, true);\n    const fullBucketSplats = fullBucketCount * bucketSize;\n    const partiallyFilledBucketCount = section.getUint32(36, true);\n    const bucketsMetaDataSizeBytes = partiallyFilledBucketCount * 4;\n    const bucketsStorageSizeBytes =\n      bucketStorageSizeBytes * bucketCount + bucketsMetaDataSizeBytes;\n    const sphericalHarmonicsDegree = section.getUint16(40, true);\n    const shComponents =\n      KSPLAT_SH_DEGREE_TO_COMPONENTS[sphericalHarmonicsDegree];\n\n    const {\n      bytesPerCenter,\n      bytesPerScale,\n      bytesPerRotation,\n      bytesPerColor,\n      bytesPerSphericalHarmonicsComponent,\n      scaleOffsetBytes,\n      rotationOffsetBytes,\n      colorOffsetBytes,\n      sphericalHarmonicsOffsetBytes,\n    } = KSPLAT_COMPRESSION[compressionLevel];\n    const bytesPerSplat =\n      bytesPerCenter +\n      bytesPerScale +\n      bytesPerRotation +\n      bytesPerColor +\n      shComponents * bytesPerSphericalHarmonicsComponent;\n    const splatDataStorageSizeBytes = bytesPerSplat * sectionMaxSplatCount;\n    const storageSizeBytes =\n      splatDataStorageSizeBytes + bucketsStorageSizeBytes;\n\n    const sh1Index = [0, 3, 6, 1, 4, 7, 2, 5, 8];\n    const sh2Index = [\n      9, 14, 19, 10, 15, 20, 11, 16, 21, 12, 17, 22, 13, 18, 23,\n    ];\n    const sh3Index = [\n      24, 31, 38, 25, 32, 39, 26, 33, 40, 27, 34, 41, 28, 35, 42, 29, 36, 43,\n      30, 37, 44,\n    ];\n    const sh1 =\n      sphericalHarmonicsDegree >= 1 ? new Float32Array(3 * 3) : undefined;\n    const sh2 =\n      sphericalHarmonicsDegree >= 2 ? new Float32Array(5 * 3) : undefined;\n    const sh3 =\n      sphericalHarmonicsDegree >= 3 ? new Float32Array(7 * 3) : undefined;\n\n    const compressionScaleFactor = bucketBlockSize / 2 / compressionScaleRange;\n    const bucketsBase = sectionBase + bucketsMetaDataSizeBytes;\n    const dataBase = sectionBase + bucketsStorageSizeBytes;\n    const data = new DataView(\n      fileBytes.buffer,\n      dataBase,\n      splatDataStorageSizeBytes,\n    );\n    const bucketArray = new Float32Array(\n      fileBytes.buffer,\n      bucketsBase,\n      bucketCount * 3,\n    );\n    const partiallyFilledBucketLengths = new Uint32Array(\n      fileBytes.buffer,\n      sectionBase,\n      partiallyFilledBucketCount,\n    );\n\n    function getSh(splatOffset: number, component: number) {\n      if (compressionLevel === 0) {\n        return data.getFloat32(\n          splatOffset + sphericalHarmonicsOffsetBytes + component * 4,\n          true,\n        );\n      }\n      if (compressionLevel === 1) {\n        return fromHalf(\n          data.getUint16(\n            splatOffset + sphericalHarmonicsOffsetBytes + component * 2,\n            true,\n          ),\n        );\n      }\n      const t =\n        data.getUint8(splatOffset + sphericalHarmonicsOffsetBytes + component) /\n        255;\n      return (\n        minSphericalHarmonicsCoeff +\n        t * (maxSphericalHarmonicsCoeff - minSphericalHarmonicsCoeff)\n      );\n    }\n\n    let partialBucketIndex = fullBucketCount;\n    let partialBucketBase = fullBucketSplats;\n\n    for (let i = 0; i < sectionSplatCount; ++i) {\n      const splatOffset = i * bytesPerSplat;\n\n      let bucketIndex: number;\n      if (i < fullBucketSplats) {\n        bucketIndex = Math.floor(i / bucketSize);\n      } else {\n        const bucketLength =\n          partiallyFilledBucketLengths[partialBucketIndex - fullBucketCount];\n        if (i >= partialBucketBase + bucketLength) {\n          partialBucketIndex += 1;\n          partialBucketBase += bucketLength;\n        }\n        bucketIndex = partialBucketIndex;\n      }\n\n      const x =\n        compressionLevel === 0\n          ? data.getFloat32(splatOffset + 0, true)\n          : (data.getUint16(splatOffset + 0, true) - compressionScaleRange) *\n              compressionScaleFactor +\n            bucketArray[3 * bucketIndex + 0];\n      const y =\n        compressionLevel === 0\n          ? data.getFloat32(splatOffset + 4, true)\n          : (data.getUint16(splatOffset + 2, true) - compressionScaleRange) *\n              compressionScaleFactor +\n            bucketArray[3 * bucketIndex + 1];\n      const z =\n        compressionLevel === 0\n          ? data.getFloat32(splatOffset + 8, true)\n          : (data.getUint16(splatOffset + 4, true) - compressionScaleRange) *\n              compressionScaleFactor +\n            bucketArray[3 * bucketIndex + 2];\n\n      const scaleX =\n        compressionLevel === 0\n          ? data.getFloat32(splatOffset + scaleOffsetBytes + 0, true)\n          : fromHalf(data.getUint16(splatOffset + scaleOffsetBytes + 0, true));\n      const scaleY =\n        compressionLevel === 0\n          ? data.getFloat32(splatOffset + scaleOffsetBytes + 4, true)\n          : fromHalf(data.getUint16(splatOffset + scaleOffsetBytes + 2, true));\n      const scaleZ =\n        compressionLevel === 0\n          ? data.getFloat32(splatOffset + scaleOffsetBytes + 8, true)\n          : fromHalf(data.getUint16(splatOffset + scaleOffsetBytes + 4, true));\n\n      const quatW =\n        compressionLevel === 0\n          ? data.getFloat32(splatOffset + rotationOffsetBytes + 0, true)\n          : fromHalf(\n              data.getUint16(splatOffset + rotationOffsetBytes + 0, true),\n            );\n      const quatX =\n        compressionLevel === 0\n          ? data.getFloat32(splatOffset + rotationOffsetBytes + 4, true)\n          : fromHalf(\n              data.getUint16(splatOffset + rotationOffsetBytes + 2, true),\n            );\n      const quatY =\n        compressionLevel === 0\n          ? data.getFloat32(splatOffset + rotationOffsetBytes + 8, true)\n          : fromHalf(\n              data.getUint16(splatOffset + rotationOffsetBytes + 4, true),\n            );\n      const quatZ =\n        compressionLevel === 0\n          ? data.getFloat32(splatOffset + rotationOffsetBytes + 12, true)\n          : fromHalf(\n              data.getUint16(splatOffset + rotationOffsetBytes + 6, true),\n            );\n\n      const r = data.getUint8(splatOffset + colorOffsetBytes + 0) / 255;\n      const g = data.getUint8(splatOffset + colorOffsetBytes + 1) / 255;\n      const b = data.getUint8(splatOffset + colorOffsetBytes + 2) / 255;\n      const opacity = data.getUint8(splatOffset + colorOffsetBytes + 3) / 255;\n\n      setPackedSplat(\n        packedArray,\n        i,\n        x,\n        y,\n        z,\n        scaleX,\n        scaleY,\n        scaleZ,\n        quatX,\n        quatY,\n        quatZ,\n        quatW,\n        opacity,\n        r,\n        g,\n        b,\n        splatEncoding,\n      );\n\n      if (sphericalHarmonicsDegree >= 1) {\n        if (sh1) {\n          if (!extra.sh1) {\n            extra.sh1 = new Uint32Array(numSplats * 2);\n          }\n          for (const [i, key] of sh1Index.entries()) {\n            sh1[i] = getSh(splatOffset, key);\n          }\n          encodeSh1Rgb(extra.sh1 as Uint32Array, i, sh1, splatEncoding);\n        }\n        if (sh2) {\n          if (!extra.sh2) {\n            extra.sh2 = new Uint32Array(numSplats * 4);\n          }\n          for (const [i, key] of sh2Index.entries()) {\n            sh2[i] = getSh(splatOffset, key);\n          }\n          encodeSh2Rgb(extra.sh2 as Uint32Array, i, sh2, splatEncoding);\n        }\n        if (sh3) {\n          if (!extra.sh3) {\n            extra.sh3 = new Uint32Array(numSplats * 4);\n          }\n          for (const [i, key] of sh3Index.entries()) {\n            sh3[i] = getSh(splatOffset, key);\n          }\n          encodeSh3Rgb(extra.sh3 as Uint32Array, i, sh3, splatEncoding);\n        }\n      }\n    }\n    sectionBase += storageSizeBytes;\n  }\n  return { packedArray, numSplats, extra };\n}\n","import * as THREE from \"three\";\nimport {\n  SplatData,\n  SplatFileType,\n  type TranscodeSpzInput,\n  getSplatFileType,\n  getSplatFileTypeFromPath,\n} from \"./SplatLoader\";\nimport { GunzipReader, fromHalf, unpackSplat } from \"./utils\";\n\nimport { decodeAntiSplat } from \"./antisplat\";\nimport { decodeKsplat } from \"./ksplat\";\nimport { PlyReader } from \"./ply\";\n\n// SPZ file format reader\n\nexport class SpzReader {\n  fileBytes: Uint8Array;\n  reader: GunzipReader;\n\n  version: number;\n  numSplats: number;\n  shDegree: number;\n  fractionalBits: number;\n  flags: number;\n  flagAntiAlias: boolean;\n  reserved: number;\n  parsed: boolean;\n\n  constructor({ fileBytes }: { fileBytes: Uint8Array | ArrayBuffer }) {\n    this.fileBytes =\n      fileBytes instanceof ArrayBuffer ? new Uint8Array(fileBytes) : fileBytes;\n    this.reader = new GunzipReader({ fileBytes: this.fileBytes });\n\n    const header = new DataView(this.reader.read(16).buffer);\n    if (header.getUint32(0, true) !== 0x5053474e) {\n      throw new Error(\"Invalid SPZ file\");\n    }\n    this.version = header.getUint32(4, true);\n    if (this.version < 1 || this.version > 2) {\n      throw new Error(`Unsupported SPZ version: ${this.version}`);\n    }\n\n    this.numSplats = header.getUint32(8, true);\n    this.shDegree = header.getUint8(12);\n    this.fractionalBits = header.getUint8(13);\n    this.flags = header.getUint8(14);\n    this.flagAntiAlias = (this.flags & 0x01) !== 0;\n    this.reserved = header.getUint8(15);\n    this.parsed = false;\n  }\n\n  parseSplats(\n    centerCallback?: (index: number, x: number, y: number, z: number) => void,\n    alphaCallback?: (index: number, alpha: number) => void,\n    rgbCallback?: (index: number, r: number, g: number, b: number) => void,\n    scalesCallback?: (\n      index: number,\n      scaleX: number,\n      scaleY: number,\n      scaleZ: number,\n    ) => void,\n    quatCallback?: (\n      index: number,\n      quatX: number,\n      quatY: number,\n      quatZ: number,\n      quatW: number,\n    ) => void,\n    shCallback?: (\n      index: number,\n      sh1: Float32Array,\n      sh2?: Float32Array,\n      sh3?: Float32Array,\n    ) => void,\n  ) {\n    if (this.parsed) {\n      throw new Error(\"SPZ file already parsed\");\n    }\n    this.parsed = true;\n\n    if (this.version === 1) {\n      // float16 centers\n      const centerBytes = this.reader.read(this.numSplats * 3 * 2);\n      const centerUint16 = new Uint16Array(centerBytes.buffer);\n      for (let i = 0; i < this.numSplats; i++) {\n        const i3 = i * 3;\n        const x = fromHalf(centerUint16[i3]);\n        const y = fromHalf(centerUint16[i3 + 1]);\n        const z = fromHalf(centerUint16[i3 + 2]);\n        centerCallback?.(i, x, y, z);\n      }\n    } else if (this.version === 2) {\n      // 24-bit fixed-point centers\n      const fixed = 1 << this.fractionalBits;\n      const centerBytes = this.reader.read(this.numSplats * 3 * 3);\n      for (let i = 0; i < this.numSplats; i++) {\n        const i9 = i * 9;\n        const x =\n          (((centerBytes[i9 + 2] << 24) |\n            (centerBytes[i9 + 1] << 16) |\n            (centerBytes[i9] << 8)) >>\n            8) /\n          fixed;\n        const y =\n          (((centerBytes[i9 + 5] << 24) |\n            (centerBytes[i9 + 4] << 16) |\n            (centerBytes[i9 + 3] << 8)) >>\n            8) /\n          fixed;\n        const z =\n          (((centerBytes[i9 + 8] << 24) |\n            (centerBytes[i9 + 7] << 16) |\n            (centerBytes[i9 + 6] << 8)) >>\n            8) /\n          fixed;\n        centerCallback?.(i, x, y, z);\n      }\n    } else {\n      throw new Error(\"Unreachable\");\n    }\n\n    {\n      const bytes = this.reader.read(this.numSplats);\n      for (let i = 0; i < this.numSplats; i++) {\n        alphaCallback?.(i, bytes[i] / 255);\n      }\n    }\n    {\n      const rgbBytes = this.reader.read(this.numSplats * 3);\n      const scale = SH_C0 / 0.15;\n      for (let i = 0; i < this.numSplats; i++) {\n        const i3 = i * 3;\n        const r = (rgbBytes[i3] / 255 - 0.5) * scale + 0.5;\n        const g = (rgbBytes[i3 + 1] / 255 - 0.5) * scale + 0.5;\n        const b = (rgbBytes[i3 + 2] / 255 - 0.5) * scale + 0.5;\n        rgbCallback?.(i, r, g, b);\n      }\n    }\n    {\n      const scalesBytes = this.reader.read(this.numSplats * 3);\n      for (let i = 0; i < this.numSplats; i++) {\n        const i3 = i * 3;\n        const scaleX = Math.exp(scalesBytes[i3] / 16 - 10);\n        const scaleY = Math.exp(scalesBytes[i3 + 1] / 16 - 10);\n        const scaleZ = Math.exp(scalesBytes[i3 + 2] / 16 - 10);\n        scalesCallback?.(i, scaleX, scaleY, scaleZ);\n      }\n    }\n    {\n      const quatBytes = this.reader.read(this.numSplats * 3);\n      for (let i = 0; i < this.numSplats; i++) {\n        const i3 = i * 3;\n        const quatX = quatBytes[i3] / 127.5 - 1;\n        const quatY = quatBytes[i3 + 1] / 127.5 - 1;\n        const quatZ = quatBytes[i3 + 2] / 127.5 - 1;\n        const quatW = Math.sqrt(\n          Math.max(0, 1 - quatX * quatX - quatY * quatY - quatZ * quatZ),\n        );\n        quatCallback?.(i, quatX, quatY, quatZ, quatW);\n      }\n    }\n\n    if (shCallback && this.shDegree >= 1) {\n      const sh1 = new Float32Array(3 * 3);\n      const sh2 = this.shDegree >= 2 ? new Float32Array(5 * 3) : undefined;\n      const sh3 = this.shDegree >= 3 ? new Float32Array(7 * 3) : undefined;\n      const shBytes = this.reader.read(\n        this.numSplats * SH_DEGREE_TO_VECS[this.shDegree] * 3,\n      );\n\n      let offset = 0;\n      for (let i = 0; i < this.numSplats; i++) {\n        for (let j = 0; j < 9; ++j) {\n          sh1[j] = (shBytes[offset + j] - 128) / 128;\n        }\n        offset += 9;\n        if (sh2) {\n          for (let j = 0; j < 15; ++j) {\n            sh2[j] = (shBytes[offset + j] - 128) / 128;\n          }\n          offset += 15;\n        }\n        if (sh3) {\n          for (let j = 0; j < 21; ++j) {\n            sh3[j] = (shBytes[offset + j] - 128) / 128;\n          }\n          offset += 21;\n        }\n        shCallback?.(i, sh1, sh2, sh3);\n      }\n    }\n  }\n}\n\nconst SH_DEGREE_TO_VECS: Record<number, number> = { 1: 3, 2: 8, 3: 15 };\nconst SH_C0 = 0.28209479177387814;\n\nexport const SPZ_MAGIC = 0x5053474e; // NGSP = Niantic gaussian splat\nexport const SPZ_VERSION = 2;\nexport const FLAG_ANTIALIASED = 0x1;\n\nexport class SpzWriter {\n  buffer: ArrayBuffer;\n  view: DataView;\n  numSplats: number;\n  shDegree: number;\n  fractionalBits: number;\n  fraction: number;\n  flagAntiAlias: boolean;\n  clippedCount = 0;\n\n  constructor({\n    numSplats,\n    shDegree,\n    fractionalBits = 12,\n    flagAntiAlias = true,\n  }: {\n    numSplats: number;\n    shDegree: number;\n    fractionalBits?: number;\n    flagAntiAlias?: boolean;\n  }) {\n    const splatSize =\n      9 +\n      1 +\n      3 +\n      3 +\n      3 +\n      (shDegree >= 1 ? 9 : 0) +\n      (shDegree >= 2 ? 15 : 0) +\n      (shDegree >= 3 ? 21 : 0);\n    const bufferSize = 16 + numSplats * splatSize;\n    this.buffer = new ArrayBuffer(bufferSize);\n    this.view = new DataView(this.buffer);\n\n    this.view.setUint32(0, SPZ_MAGIC, true); // NGSP\n    this.view.setUint32(4, SPZ_VERSION, true);\n    this.view.setUint32(8, numSplats, true);\n    this.view.setUint8(12, shDegree);\n    this.view.setUint8(13, fractionalBits);\n    this.view.setUint8(14, flagAntiAlias ? FLAG_ANTIALIASED : 0);\n    this.view.setUint8(15, 0); // Reserved\n\n    this.numSplats = numSplats;\n    this.shDegree = shDegree;\n    this.fractionalBits = fractionalBits;\n    this.fraction = 1 << fractionalBits;\n    this.flagAntiAlias = flagAntiAlias;\n  }\n\n  setCenter(index: number, x: number, y: number, z: number) {\n    // Divide by this.fraction and round to nearest integer,\n    // then write as 3-bytes per x then y then z.\n    const xRounded = Math.round(x * this.fraction);\n    const xInt = Math.max(-0x7fffff, Math.min(0x7fffff, xRounded));\n    const yRounded = Math.round(y * this.fraction);\n    const yInt = Math.max(-0x7fffff, Math.min(0x7fffff, yRounded));\n    const zRounded = Math.round(z * this.fraction);\n    const zInt = Math.max(-0x7fffff, Math.min(0x7fffff, zRounded));\n    const clipped = xRounded !== xInt || yRounded !== yInt || zRounded !== zInt;\n    if (clipped) {\n      this.clippedCount += 1;\n      // if (this.clippedCount < 10) {\n      //   // Write x y z also in hex\n      //   console.log(`Clipped ${index}: ${x}, ${y}, ${z} (0x${x.toString(16)}, 0x${y.toString(16)}, 0x${z.toString(16)}) -> ${xRounded}, ${yRounded}, ${zRounded} (0x${xRounded.toString(16)}, 0x${yRounded.toString(16)}, 0x${zRounded.toString(16)}) -> ${xInt}, ${yInt}, ${zInt} (0x${xInt.toString(16)}, 0x${yInt.toString(16)}, 0x${zInt.toString(16)})`);\n      // }\n    }\n    const i9 = index * 9;\n    const base = 16 + i9;\n    this.view.setUint8(base, xInt & 0xff);\n    this.view.setUint8(base + 1, (xInt >> 8) & 0xff);\n    this.view.setUint8(base + 2, (xInt >> 16) & 0xff);\n    this.view.setUint8(base + 3, yInt & 0xff);\n    this.view.setUint8(base + 4, (yInt >> 8) & 0xff);\n    this.view.setUint8(base + 5, (yInt >> 16) & 0xff);\n    this.view.setUint8(base + 6, zInt & 0xff);\n    this.view.setUint8(base + 7, (zInt >> 8) & 0xff);\n    this.view.setUint8(base + 8, (zInt >> 16) & 0xff);\n  }\n\n  setAlpha(index: number, alpha: number) {\n    const base = 16 + this.numSplats * 9 + index;\n    this.view.setUint8(\n      base,\n      Math.max(0, Math.min(255, Math.round(alpha * 255))),\n    );\n  }\n\n  static scaleRgb(r: number) {\n    const v = ((r - 0.5) / (SH_C0 / 0.15) + 0.5) * 255;\n    return Math.max(0, Math.min(255, Math.round(v)));\n  }\n\n  setRgb(index: number, r: number, g: number, b: number) {\n    const base = 16 + this.numSplats * 10 + index * 3;\n    this.view.setUint8(base, SpzWriter.scaleRgb(r));\n    this.view.setUint8(base + 1, SpzWriter.scaleRgb(g));\n    this.view.setUint8(base + 2, SpzWriter.scaleRgb(b));\n  }\n\n  setScale(index: number, scaleX: number, scaleY: number, scaleZ: number) {\n    const base = 16 + this.numSplats * 13 + index * 3;\n    this.view.setUint8(\n      base,\n      Math.max(0, Math.min(255, Math.round((Math.log(scaleX) + 10) * 16))),\n    );\n    this.view.setUint8(\n      base + 1,\n      Math.max(0, Math.min(255, Math.round((Math.log(scaleY) + 10) * 16))),\n    );\n    this.view.setUint8(\n      base + 2,\n      Math.max(0, Math.min(255, Math.round((Math.log(scaleZ) + 10) * 16))),\n    );\n  }\n\n  setQuat(\n    index: number,\n    quatX: number,\n    quatY: number,\n    quatZ: number,\n    quatW: number,\n  ) {\n    const base = 16 + this.numSplats * 16 + index * 3;\n    const quatNeg = quatW < 0;\n    this.view.setUint8(\n      base,\n      Math.max(\n        0,\n        Math.min(255, Math.round(((quatNeg ? -quatX : quatX) + 1) * 127.5)),\n      ),\n    );\n    this.view.setUint8(\n      base + 1,\n      Math.max(\n        0,\n        Math.min(255, Math.round(((quatNeg ? -quatY : quatY) + 1) * 127.5)),\n      ),\n    );\n    this.view.setUint8(\n      base + 2,\n      Math.max(\n        0,\n        Math.min(255, Math.round(((quatNeg ? -quatZ : quatZ) + 1) * 127.5)),\n      ),\n    );\n  }\n\n  static quantizeSh(sh: number, bits: number) {\n    const value = Math.round(sh * 128) + 128;\n    const bucketSize = 1 << (8 - bits);\n    const quantized =\n      Math.floor((value + bucketSize / 2) / bucketSize) * bucketSize;\n    return Math.max(0, Math.min(255, quantized));\n  }\n\n  setSh(\n    index: number,\n    sh1: Float32Array,\n    sh2?: Float32Array,\n    sh3?: Float32Array,\n  ) {\n    const shVecs = SH_DEGREE_TO_VECS[this.shDegree] || 0;\n    const base1 = 16 + this.numSplats * 19 + index * shVecs * 3;\n    for (let j = 0; j < 9; ++j) {\n      this.view.setUint8(base1 + j, SpzWriter.quantizeSh(sh1[j], 5));\n    }\n    if (sh2) {\n      const base2 = base1 + 9;\n      for (let j = 0; j < 15; ++j) {\n        this.view.setUint8(base2 + j, SpzWriter.quantizeSh(sh2[j], 4));\n      }\n      if (sh3) {\n        const base3 = base2 + 15;\n        for (let j = 0; j < 21; ++j) {\n          this.view.setUint8(base3 + j, SpzWriter.quantizeSh(sh3[j], 4));\n        }\n      }\n    }\n  }\n\n  async finalize(): Promise<Uint8Array> {\n    const input = new Uint8Array(this.buffer);\n    const stream = new ReadableStream({\n      async start(controller) {\n        controller.enqueue(input);\n        controller.close();\n      },\n    });\n    const compressed = stream.pipeThrough(new CompressionStream(\"gzip\"));\n    const response = new Response(compressed);\n    const buffer = await response.arrayBuffer();\n    console.log(\n      \"Compressed\",\n      input.length,\n      \"bytes to\",\n      buffer.byteLength,\n      \"bytes\",\n    );\n    return new Uint8Array(buffer);\n  }\n}\n\nexport async function transcodeSpz(input: TranscodeSpzInput) {\n  const splats = new SplatData();\n  const {\n    inputs,\n    clipXyz,\n    maxSh,\n    fractionalBits = 12,\n    opacityThreshold,\n  } = input;\n  for (const input of inputs) {\n    const scale = input.transform?.scale ?? 1;\n    const quaternion = new THREE.Quaternion().fromArray(\n      input.transform?.quaternion ?? [0, 0, 0, 1],\n    );\n    const translate = new THREE.Vector3().fromArray(\n      input.transform?.translate ?? [0, 0, 0],\n    );\n    const clip = clipXyz\n      ? new THREE.Box3(\n          new THREE.Vector3().fromArray(clipXyz.min),\n          new THREE.Vector3().fromArray(clipXyz.max),\n        )\n      : undefined;\n\n    function transformPos(pos: THREE.Vector3) {\n      pos.multiplyScalar(scale);\n      pos.applyQuaternion(quaternion);\n      pos.add(translate);\n      return pos;\n    }\n\n    function transformScales(scales: THREE.Vector3) {\n      scales.multiplyScalar(scale);\n      return scales;\n    }\n\n    function transformQuaternion(quat: THREE.Quaternion) {\n      quat.premultiply(quaternion);\n      return quat;\n    }\n\n    function withinClip(p: THREE.Vector3) {\n      return !clip || clip.containsPoint(p);\n    }\n\n    function withinOpacity(opacity: number) {\n      return opacityThreshold !== undefined\n        ? opacity >= opacityThreshold\n        : true;\n    }\n\n    let fileType = input.fileType;\n    if (!fileType) {\n      fileType = getSplatFileType(input.fileBytes);\n      if (!fileType && input.pathOrUrl) {\n        fileType = getSplatFileTypeFromPath(input.pathOrUrl);\n      }\n    }\n    switch (fileType) {\n      case SplatFileType.PLY: {\n        const ply = new PlyReader({ fileBytes: input.fileBytes });\n        await ply.parseHeader();\n        let lastIndex: number | null = null;\n        ply.parseSplats(\n          (\n            index,\n            x,\n            y,\n            z,\n            scaleX,\n            scaleY,\n            scaleZ,\n            quatX,\n            quatY,\n            quatZ,\n            quatW,\n            opacity,\n            r,\n            g,\n            b,\n          ) => {\n            const center = transformPos(new THREE.Vector3(x, y, z));\n            if (withinClip(center) && withinOpacity(opacity)) {\n              lastIndex = splats.pushSplat();\n              splats.setCenter(lastIndex, center.x, center.y, center.z);\n              const scales = transformScales(\n                new THREE.Vector3(scaleX, scaleY, scaleZ),\n              );\n              splats.setScale(lastIndex, scales.x, scales.y, scales.z);\n              const quaternion = transformQuaternion(\n                new THREE.Quaternion(quatX, quatY, quatZ, quatW),\n              );\n              splats.setQuaternion(\n                lastIndex,\n                quaternion.x,\n                quaternion.y,\n                quaternion.z,\n                quaternion.w,\n              );\n              splats.setOpacity(lastIndex, opacity);\n              splats.setColor(lastIndex, r, g, b);\n            } else {\n              lastIndex = null;\n            }\n          },\n          (index, sh1, sh2, sh3) => {\n            if (sh1 && lastIndex !== null) {\n              splats.setSh1(lastIndex, sh1);\n            }\n            if (sh2 && lastIndex !== null) {\n              splats.setSh2(lastIndex, sh2);\n            }\n            if (sh3 && lastIndex !== null) {\n              splats.setSh3(lastIndex, sh3);\n            }\n          },\n        );\n        break;\n      }\n      case SplatFileType.SPZ: {\n        const spz = new SpzReader({ fileBytes: input.fileBytes });\n        const mapping = new Int32Array(spz.numSplats);\n        mapping.fill(-1);\n        const centers = new Float32Array(spz.numSplats * 3);\n        const center = new THREE.Vector3();\n        spz.parseSplats(\n          (index, x, y, z) => {\n            const center = transformPos(new THREE.Vector3(x, y, z));\n            centers[index * 3] = center.x;\n            centers[index * 3 + 1] = center.y;\n            centers[index * 3 + 2] = center.z;\n          },\n          (index, alpha) => {\n            center.fromArray(centers, index * 3);\n            if (withinClip(center) && withinOpacity(alpha)) {\n              mapping[index] = splats.pushSplat();\n              splats.setCenter(mapping[index], center.x, center.y, center.z);\n              splats.setOpacity(mapping[index], alpha);\n            }\n          },\n          (index, r, g, b) => {\n            if (mapping[index] >= 0) {\n              splats.setColor(mapping[index], r, g, b);\n            }\n          },\n          (index, scaleX, scaleY, scaleZ) => {\n            if (mapping[index] >= 0) {\n              const scales = transformScales(\n                new THREE.Vector3(scaleX, scaleY, scaleZ),\n              );\n              splats.setScale(mapping[index], scales.x, scales.y, scales.z);\n            }\n          },\n          (index, quatX, quatY, quatZ, quatW) => {\n            if (mapping[index] >= 0) {\n              const quaternion = transformQuaternion(\n                new THREE.Quaternion(quatX, quatY, quatZ, quatW),\n              );\n              splats.setQuaternion(\n                mapping[index],\n                quaternion.x,\n                quaternion.y,\n                quaternion.z,\n                quaternion.w,\n              );\n            }\n          },\n          (index, sh1, sh2, sh3) => {\n            if (mapping[index] >= 0) {\n              splats.setSh1(mapping[index], sh1);\n              if (sh2) {\n                splats.setSh2(mapping[index], sh2);\n              }\n              if (sh3) {\n                splats.setSh3(mapping[index], sh3);\n              }\n            }\n          },\n        );\n        break;\n      }\n      case SplatFileType.SPLAT:\n        decodeAntiSplat(\n          input.fileBytes,\n          (numSplats) => {},\n          (\n            index,\n            x,\n            y,\n            z,\n            scaleX,\n            scaleY,\n            scaleZ,\n            quatX,\n            quatY,\n            quatZ,\n            quatW,\n            opacity,\n            r,\n            g,\n            b,\n          ) => {\n            const center = transformPos(new THREE.Vector3(x, y, z));\n            if (withinClip(center) && withinOpacity(opacity)) {\n              const index = splats.pushSplat();\n              splats.setCenter(index, center.x, center.y, center.z);\n              const scales = transformScales(\n                new THREE.Vector3(scaleX, scaleY, scaleZ),\n              );\n              splats.setScale(index, scales.x, scales.y, scales.z);\n              const quaternion = transformQuaternion(\n                new THREE.Quaternion(quatX, quatY, quatZ, quatW),\n              );\n              splats.setQuaternion(\n                index,\n                quaternion.x,\n                quaternion.y,\n                quaternion.z,\n                quaternion.w,\n              );\n              splats.setOpacity(index, opacity);\n              splats.setColor(index, r, g, b);\n            }\n          },\n        );\n        break;\n      case SplatFileType.KSPLAT: {\n        let lastIndex: number | null = null;\n        decodeKsplat(\n          input.fileBytes,\n          (numSplats) => {},\n          (\n            index,\n            x,\n            y,\n            z,\n            scaleX,\n            scaleY,\n            scaleZ,\n            quatX,\n            quatY,\n            quatZ,\n            quatW,\n            opacity,\n            r,\n            g,\n            b,\n          ) => {\n            const center = transformPos(new THREE.Vector3(x, y, z));\n            if (withinClip(center) && withinOpacity(opacity)) {\n              lastIndex = splats.pushSplat();\n              splats.setCenter(lastIndex, center.x, center.y, center.z);\n              const scales = transformScales(\n                new THREE.Vector3(scaleX, scaleY, scaleZ),\n              );\n              splats.setScale(lastIndex, scales.x, scales.y, scales.z);\n              const quaternion = transformQuaternion(\n                new THREE.Quaternion(quatX, quatY, quatZ, quatW),\n              );\n              splats.setQuaternion(\n                lastIndex,\n                quaternion.x,\n                quaternion.y,\n                quaternion.z,\n                quaternion.w,\n              );\n              splats.setOpacity(lastIndex, opacity);\n              splats.setColor(lastIndex, r, g, b);\n            } else {\n              lastIndex = null;\n            }\n          },\n          (index, sh1, sh2, sh3) => {\n            if (lastIndex !== null) {\n              splats.setSh1(lastIndex, sh1);\n              if (sh2) {\n                splats.setSh2(lastIndex, sh2);\n              }\n              if (sh3) {\n                splats.setSh3(lastIndex, sh3);\n              }\n            }\n          },\n        );\n        break;\n      }\n      default:\n        throw new Error(`transcodeSpz not implemented for ${fileType}`);\n    }\n  }\n\n  const shDegree = Math.min(\n    maxSh ?? 3,\n    splats.sh3 ? 3 : splats.sh2 ? 2 : splats.sh1 ? 1 : 0,\n  );\n  const spz = new SpzWriter({\n    numSplats: splats.numSplats,\n    shDegree,\n    fractionalBits,\n    flagAntiAlias: true,\n  });\n\n  for (let i = 0; i < splats.numSplats; ++i) {\n    const i3 = i * 3;\n    const i4 = i * 4;\n    spz.setCenter(\n      i,\n      splats.centers[i3],\n      splats.centers[i3 + 1],\n      splats.centers[i3 + 2],\n    );\n    spz.setScale(\n      i,\n      splats.scales[i3],\n      splats.scales[i3 + 1],\n      splats.scales[i3 + 2],\n    );\n    spz.setQuat(\n      i,\n      splats.quaternions[i4],\n      splats.quaternions[i4 + 1],\n      splats.quaternions[i4 + 2],\n      splats.quaternions[i4 + 3],\n    );\n    spz.setAlpha(i, splats.opacities[i]);\n    spz.setRgb(\n      i,\n      splats.colors[i3],\n      splats.colors[i3 + 1],\n      splats.colors[i3 + 2],\n    );\n    if (splats.sh1 && shDegree >= 1) {\n      spz.setSh(\n        i,\n        splats.sh1.slice(i * 9, (i + 1) * 9),\n        shDegree >= 2 && splats.sh2\n          ? splats.sh2.slice(i * 15, (i + 1) * 15)\n          : undefined,\n        shDegree >= 3 && splats.sh3\n          ? splats.sh3.slice(i * 21, (i + 1) * 21)\n          : undefined,\n      );\n    }\n  }\n\n  const spzBytes = await spz.finalize();\n  return { fileBytes: spzBytes, clippedCount: spz.clippedCount };\n}\n","import * as THREE from \"three\";\n\n// SplatSkinning is an experimental class that implements dual-quaternion\n// skeletal animation for Gsplats. A skeletal animation system consists\n// of a set of bones, each with a \"rest\" pose that consists of a position\n// and orientation, and a weighting of up to 4 bones for each Gsplat.\n// By moving and rotating the bones you can animate all the Gsplats like\n// your would for a normal 3D animated mesh.\n// Note that the dual-quaternion formulation assumes that mass/volume\n// is conserved through these transformations, which helps avoid common\n// issues with linear blend skinning such as joint collapse or bulging.\n// However, it is not as good a fit for animations that involve explicit\n// deformations, such as cartoon animations.\n\nimport type { SplatMesh } from \"./SplatMesh\";\nimport {\n  Dyno,\n  DynoUniform,\n  type DynoVal,\n  Gsplat,\n  unindent,\n  unindentLines,\n} from \"./dyno\";\nimport { getTextureSize } from \"./utils\";\n\nexport type SplatSkinningOptions = {\n  // Specifies the SplatMesh that will be animated.\n  mesh: SplatMesh;\n  // Overrides the number of Gsplats in the mesh that will be animated.\n  // (default: mesh.numSplats)\n  numSplats?: number;\n  // Set the number of bones used to animate the SplatMesh, with a maximum\n  // of 256 (in order to compactly encode the bone index). (default: 256)\n  numBones?: number;\n};\n\nexport class SplatSkinning {\n  mesh: SplatMesh;\n  numSplats: number;\n\n  // Store the skinning weights for each Gsplat, composed of a 4-vector\n  // of bone indices and weight\n  skinData: Uint16Array;\n  skinTexture: THREE.DataArrayTexture;\n\n  numBones: number;\n  boneData: Float32Array;\n  boneTexture: THREE.DataTexture;\n\n  uniform: DynoUniform<typeof GsplatSkinning, \"skinning\">;\n\n  constructor(options: SplatSkinningOptions) {\n    this.mesh = options.mesh;\n    this.numSplats = options.numSplats ?? this.mesh.numSplats;\n\n    const { width, height, depth, maxSplats } = getTextureSize(this.numSplats);\n    this.skinData = new Uint16Array(maxSplats * 4);\n    this.skinTexture = new THREE.DataArrayTexture(\n      this.skinData,\n      width,\n      height,\n      depth,\n    );\n    this.skinTexture.format = THREE.RGBAIntegerFormat;\n    this.skinTexture.type = THREE.UnsignedShortType;\n    this.skinTexture.internalFormat = \"RGBA16UI\";\n    this.skinTexture.needsUpdate = true;\n\n    this.numBones = options.numBones ?? 256;\n    this.boneData = new Float32Array(this.numBones * 16);\n    this.boneTexture = new THREE.DataTexture(\n      this.boneData,\n      4,\n      this.numBones,\n      THREE.RGBAFormat,\n      THREE.FloatType,\n    );\n    this.boneTexture.internalFormat = \"RGBA32F\";\n    this.boneTexture.needsUpdate = true;\n\n    this.uniform = new DynoUniform({\n      key: \"skinning\",\n      type: GsplatSkinning,\n      globals: () => [defineGsplatSkinning],\n      value: {\n        numSplats: this.numSplats,\n        numBones: this.numBones,\n        skinTexture: this.skinTexture,\n        boneTexture: this.boneTexture,\n      },\n    });\n  }\n\n  // Apply the skeletal animation to a Gsplat in a dyno program.\n  modify(gsplat: DynoVal<typeof Gsplat>): DynoVal<typeof Gsplat> {\n    return applyGsplatSkinning(gsplat, this.uniform);\n  }\n\n  // Set the \"rest\" pose for a bone with position and quaternion orientation.\n  setRestQuatPos(\n    boneIndex: number,\n    quat: THREE.Quaternion,\n    pos: THREE.Vector3,\n  ) {\n    const i16 = boneIndex * 16;\n    this.boneData[i16 + 0] = quat.x;\n    this.boneData[i16 + 1] = quat.y;\n    this.boneData[i16 + 2] = quat.z;\n    this.boneData[i16 + 3] = quat.w;\n    this.boneData[i16 + 4] = pos.x;\n    this.boneData[i16 + 5] = pos.y;\n    this.boneData[i16 + 6] = pos.z;\n    this.boneData[i16 + 7] = 0;\n    this.boneData[i16 + 8] = 0;\n    this.boneData[i16 + 9] = 0;\n    this.boneData[i16 + 10] = 0;\n    this.boneData[i16 + 11] = 1;\n    this.boneData[i16 + 12] = 0;\n    this.boneData[i16 + 13] = 0;\n    this.boneData[i16 + 14] = 0;\n    this.boneData[i16 + 15] = 0;\n  }\n\n  // Set the \"current\" position and orientation of a bone.\n  setBoneQuatPos(\n    boneIndex: number,\n    quat: THREE.Quaternion,\n    pos: THREE.Vector3,\n  ) {\n    const i16 = boneIndex * 16;\n    const origQuat = new THREE.Quaternion(\n      this.boneData[i16 + 0],\n      this.boneData[i16 + 1],\n      this.boneData[i16 + 2],\n      this.boneData[i16 + 3],\n    );\n    const origPos = new THREE.Vector3(\n      this.boneData[i16 + 4],\n      this.boneData[i16 + 5],\n      this.boneData[i16 + 6],\n    );\n\n    const relQuat = origQuat.clone().invert();\n    const relPos = pos.clone().sub(origPos);\n    relPos.applyQuaternion(relQuat);\n    relQuat.multiply(quat);\n    const dual = new THREE.Quaternion(\n      relPos.x,\n      relPos.y,\n      relPos.z,\n      0.0,\n    ).multiply(origQuat);\n\n    this.boneData[i16 + 8] = relQuat.x;\n    this.boneData[i16 + 9] = relQuat.y;\n    this.boneData[i16 + 10] = relQuat.z;\n    this.boneData[i16 + 11] = relQuat.w;\n    this.boneData[i16 + 12] = 0.5 * dual.x;\n    this.boneData[i16 + 13] = 0.5 * dual.y;\n    this.boneData[i16 + 14] = 0.5 * dual.z;\n    this.boneData[i16 + 15] = 0.5 * dual.w;\n  }\n\n  // Set up to 4 bone indices and weights for a Gsplat. For fewer than 4 bones,\n  // you can set the remaining weights to 0 (and index=0).\n  setSplatBones(\n    splatIndex: number,\n    boneIndices: THREE.Vector4,\n    weights: THREE.Vector4,\n  ) {\n    const i4 = splatIndex * 4;\n    this.skinData[i4 + 0] =\n      Math.min(255, Math.max(0, Math.round(weights.x * 255.0))) +\n      (boneIndices.x << 8);\n    this.skinData[i4 + 1] =\n      Math.min(255, Math.max(0, Math.round(weights.y * 255.0))) +\n      (boneIndices.y << 8);\n    this.skinData[i4 + 2] =\n      Math.min(255, Math.max(0, Math.round(weights.z * 255.0))) +\n      (boneIndices.z << 8);\n    this.skinData[i4 + 3] =\n      Math.min(255, Math.max(0, Math.round(weights.w * 255.0))) +\n      (boneIndices.w << 8);\n  }\n\n  // Call this to indicate that the bones have changed and the Gsplats need to be\n  // re-generated with updated skinning.\n  updateBones() {\n    this.boneTexture.needsUpdate = true;\n    this.mesh.needsUpdate = true;\n  }\n}\n\n// dyno program definitions for SplatSkinning\n\nexport const GsplatSkinning = { type: \"GsplatSkinning\" } as {\n  type: \"GsplatSkinning\";\n};\n\nexport const defineGsplatSkinning = unindent(`\n  struct GsplatSkinning {\n    int numSplats;\n    int numBones;\n    usampler2DArray skinTexture;\n    sampler2D boneTexture;\n  };\n`);\n\nexport const defineApplyGsplatSkinning = unindent(`\n  void applyGsplatSkinning(\n    int numSplats, int numBones,\n    usampler2DArray skinTexture, sampler2D boneTexture,\n    int splatIndex, inout vec3 center, inout vec4 quaternion\n  ) {\n    if ((splatIndex < 0) || (splatIndex >= numSplats)) {\n      return;\n    }\n\n    uvec4 skinData = texelFetch(skinTexture, splatTexCoord(splatIndex), 0);\n\n    float weights[4];\n    weights[0] = float(skinData.x & 0xffu) / 255.0;\n    weights[1] = float(skinData.y & 0xffu) / 255.0;\n    weights[2] = float(skinData.z & 0xffu) / 255.0;\n    weights[3] = float(skinData.w & 0xffu) / 255.0;\n\n    uint boneIndices[4];\n    boneIndices[0] = (skinData.x >> 8u) & 0xffu;\n    boneIndices[1] = (skinData.y >> 8u) & 0xffu;\n    boneIndices[2] = (skinData.z >> 8u) & 0xffu;\n    boneIndices[3] = (skinData.w >> 8u) & 0xffu;\n\n    vec4 quat = vec4(0.0);\n    vec4 dual = vec4(0.0);\n    for (int i = 0; i < 4; i++) {\n      if (weights[i] > 0.0) {\n        int boneIndex = int(boneIndices[i]);\n        vec4 boneQuat = vec4(0.0, 0.0, 0.0, 1.0);\n        vec4 boneDual = vec4(0.0);\n        if (boneIndex < numBones) {\n          boneQuat = texelFetch(boneTexture, ivec2(2, boneIndex), 0);\n          boneDual = texelFetch(boneTexture, ivec2(3, boneIndex), 0);\n        }\n\n        if ((i > 0) && (dot(quat, boneQuat) < 0.0)) {\n          // Flip sign if next blend is pointing in the opposite direction\n          boneQuat = -boneQuat;\n          boneDual = -boneDual;\n        }\n        quat += weights[i] * boneQuat;\n        dual += weights[i] * boneDual;\n      }\n    }\n\n    // Normalize dual quaternion\n    float norm = length(quat);\n    quat /= norm;\n    dual /= norm;\n    vec3 translate = vec3(\n      2.0 * (-dual.w * quat.x + dual.x * quat.w - dual.y * quat.z + dual.z * quat.y),\n      2.0 * (-dual.w * quat.y + dual.x * quat.z + dual.y * quat.w - dual.z * quat.x),\n      2.0 * (-dual.w * quat.z - dual.x * quat.y + dual.y * quat.x + dual.z * quat.w)\n    );\n\n    center = quatVec(quat, center) + translate;\n    quaternion = quatQuat(quat, quaternion);\n  }\n`);\n\nfunction applyGsplatSkinning(\n  gsplat: DynoVal<typeof Gsplat>,\n  skinning: DynoVal<typeof GsplatSkinning>,\n): DynoVal<typeof Gsplat> {\n  const dyno = new Dyno<\n    { gsplat: typeof Gsplat; skinning: typeof GsplatSkinning },\n    { gsplat: typeof Gsplat }\n  >({\n    inTypes: { gsplat: Gsplat, skinning: GsplatSkinning },\n    outTypes: { gsplat: Gsplat },\n    globals: () => [defineGsplatSkinning, defineApplyGsplatSkinning],\n    inputs: { gsplat, skinning },\n    statements: ({ inputs, outputs }) => {\n      const { skinning } = inputs;\n      const { gsplat } = outputs;\n      return unindentLines(`\n        ${gsplat} = ${inputs.gsplat};\n        if (isGsplatActive(${gsplat}.flags)) {\n          applyGsplatSkinning(\n            ${skinning}.numSplats, ${skinning}.numBones,\n            ${skinning}.skinTexture, ${skinning}.boneTexture,\n            ${gsplat}.index, ${gsplat}.center, ${gsplat}.quaternion\n          );\n        }\n      `);\n    },\n  });\n  return dyno.outputs.gsplat;\n}\n","import * as THREE from \"three\";\nimport { PackedSplats } from \"./PackedSplats\";\nimport { SplatMesh } from \"./SplatMesh\";\n\nexport function constructGrid({\n  // PackedSplats object to add splats to\n  splats,\n  // min and max box extents of the grid\n  extents,\n  // step size along each grid axis\n  stepSize = 1,\n  // spherical radius of each Gsplat\n  pointRadius = 0.01,\n  // relative size of the \"shadow copy\" of each Gsplat placed behind it\n  pointShadowScale = 2.0,\n  // Gsplat opacity\n  opacity = 1.0,\n  // Gsplat color (THREE.Color) or function to set color for position:\n  // ((THREE.Color, THREE.Vector3) => void) (default: RGB-modulated grid)\n  color,\n}: {\n  splats: PackedSplats;\n  extents: THREE.Box3;\n  stepSize?: number;\n  pointRadius?: number;\n  pointShadowScale?: number;\n  opacity?: number;\n  color?: THREE.Color | ((color: THREE.Color, point: THREE.Vector3) => void);\n}) {\n  const EPSILON = 1.0e-6;\n  const center = new THREE.Vector3();\n  const scales = new THREE.Vector3();\n  const quaternion = new THREE.Quaternion(0, 0, 0, 1);\n  if (color == null) {\n    color = (color, point) =>\n      color.set(\n        0.55 + 0.45 * Math.cos(point.x * 1),\n        0.55 + 0.45 * Math.cos(point.y * 1),\n        0.55 + 0.45 * Math.cos(point.z * 1),\n      );\n  }\n  const pointColor = new THREE.Color();\n  for (let z = extents.min.z; z < extents.max.z + EPSILON; z += stepSize) {\n    for (let y = extents.min.y; y < extents.max.y + EPSILON; y += stepSize) {\n      for (let x = extents.min.x; x < extents.max.x + EPSILON; x += stepSize) {\n        center.set(x, y, z);\n        for (let layer = 0; layer < 2; ++layer) {\n          scales.setScalar(pointRadius * (layer ? 1 : pointShadowScale));\n          if (!layer) {\n            pointColor.setScalar(0.0);\n          } else if (typeof color === \"function\") {\n            color(pointColor, center);\n          } else {\n            pointColor.copy(color);\n          }\n          splats.pushSplat(center, scales, quaternion, opacity, pointColor);\n        }\n      }\n    }\n  }\n}\n\nexport function constructAxes({\n  // PackedSplats object to add splats to\n  splats,\n  // scale (Gsplat scale along axis)\n  scale = 0.25,\n  // radius of the axes (Gsplat scale orthogonal to axis)\n  axisRadius = 0.0075,\n  // relative size of the \"shadow copy\" of each Gsplat placed behind it\n  axisShadowScale = 2.0,\n  // origins of the axes (default single axis at origin)\n  origins = [new THREE.Vector3()],\n}: {\n  splats: PackedSplats;\n  scale?: number;\n  axisRadius?: number;\n  axisShadowScale?: number;\n  origins?: THREE.Vector3[];\n}) {\n  const center = new THREE.Vector3();\n  const scales = new THREE.Vector3();\n  const quaternion = new THREE.Quaternion(0, 0, 0, 1);\n  const color = new THREE.Color();\n  const opacity = 1.0;\n  for (const origin of origins) {\n    for (let axis = 0; axis < 3; ++axis) {\n      center.set(\n        origin.x + (axis === 0 ? scale : 0),\n        origin.y + (axis === 1 ? scale : 0),\n        origin.z + (axis === 2 ? scale : 0),\n      );\n      for (let layer = 0; layer < 2; ++layer) {\n        scales.set(\n          (axis === 0 ? scale : axisRadius) * (layer ? 1 : axisShadowScale),\n          (axis === 1 ? scale : axisRadius) * (layer ? 1 : axisShadowScale),\n          (axis === 2 ? scale : axisRadius) * (layer ? 1 : axisShadowScale),\n        );\n        color.setRGB(\n          layer === 0 ? 0.0 : axis === 0 ? 1.0 : 0.0,\n          layer === 0 ? 0.0 : axis === 1 ? 1.0 : 0.0,\n          layer === 0 ? 0.0 : axis === 2 ? 1.0 : 0.0,\n        );\n        splats.pushSplat(center, scales, quaternion, opacity, color);\n      }\n    }\n  }\n}\n\nexport function constructSpherePoints({\n  // PackedSplats object to add splats to\n  splats,\n  // center of the sphere (default: origin)\n  origin = new THREE.Vector3(),\n  // radius of the sphere\n  radius = 1.0,\n  // maximum depth of recursion for subdividing the sphere\n  // Warning: Gsplat count grows exponentially with depth\n  maxDepth = 3,\n  // filter function to apply to each point, for example to select\n  // points in a certain direction or other function ((THREE.Vector3) => boolean)\n  // (default: null)\n  filter = null,\n  // radius of each oriented Gsplat\n  pointRadius = 0.02,\n  // flatness of each oriented Gsplat\n  pointThickness = 0.001,\n  // color of each Gsplat (THREE.Color) or function to set color for point:\n  // ((THREE.Color, THREE.Vector3) => void) (default: white)\n  color = new THREE.Color(1, 1, 1),\n}: {\n  splats: PackedSplats;\n  origin?: THREE.Vector3;\n  radius?: number;\n  maxDepth?: number;\n  filter?: ((point: THREE.Vector3) => boolean) | null;\n  pointRadius?: number;\n  pointThickness?: number;\n  color?: THREE.Color | ((color: THREE.Color, point: THREE.Vector3) => void);\n}) {\n  const pointsHash: { [key: string]: THREE.Vector3 } = {};\n\n  function addPoint(p: THREE.Vector3) {\n    if (filter && !filter(p)) {\n      return;\n    }\n    const key = `${p.x},${p.y},${p.z}`;\n    if (!pointsHash[key]) {\n      pointsHash[key] = p;\n    }\n  }\n\n  function recurse(\n    depth: number,\n    p0: THREE.Vector3,\n    p1: THREE.Vector3,\n    p2: THREE.Vector3,\n  ) {\n    addPoint(p0);\n    addPoint(p1);\n    addPoint(p2);\n    if (depth >= maxDepth) {\n      return;\n    }\n    const p01 = new THREE.Vector3().addVectors(p0, p1).normalize();\n    const p12 = new THREE.Vector3().addVectors(p1, p2).normalize();\n    const p20 = new THREE.Vector3().addVectors(p2, p0).normalize();\n    recurse(depth + 1, p0, p01, p20);\n    recurse(depth + 1, p01, p1, p12);\n    recurse(depth + 1, p20, p12, p2);\n    recurse(depth + 1, p01, p12, p20);\n  }\n\n  for (const x of [-1, 1]) {\n    for (const y of [-1, 1]) {\n      for (const z of [-1, 1]) {\n        const p0 = new THREE.Vector3(x, 0, 0);\n        const p1 = new THREE.Vector3(0, y, 0);\n        const p2 = new THREE.Vector3(0, 0, z);\n        recurse(0, p0, p1, p2);\n      }\n    }\n  }\n\n  const points = Object.values(pointsHash);\n  const scales = new THREE.Vector3(pointRadius, pointRadius, pointThickness);\n  const quaternion = new THREE.Quaternion();\n  const pointColor = typeof color === \"function\" ? new THREE.Color() : color;\n  for (const point of points) {\n    quaternion.setFromUnitVectors(new THREE.Vector3(0, 0, -1), point);\n    if (typeof color === \"function\") {\n      color(pointColor, point);\n    }\n    point.multiplyScalar(radius);\n    point.add(origin);\n    splats.pushSplat(point, scales, quaternion, 1.0, pointColor);\n  }\n}\n\nexport function textSplats({\n  // text string to display\n  text,\n  // browser font to render text with (default: \"Arial\")\n  font,\n  // font size in pixels/Gsplats (default: 32)\n  fontSize,\n  // SplatMesh.recolor tint assuming white Gsplats (default: white)\n  color,\n  // Individual Gsplat color (default: white)\n  rgb,\n  // Gsplat radius (default: 0.8 covers 1-unit spacing well)\n  dotRadius,\n  // text alignment: \"left\", \"center\", \"right\", \"start\", \"end\" (default: \"start\")\n  textAlign,\n  // line spacing multiplier, lines delimited by \"\\n\" (default: 1.0)\n  lineHeight,\n  // Coordinate scale in object-space (default: 1.0)\n  objectScale,\n}: {\n  text: string;\n  font?: string;\n  fontSize?: number;\n  color?: THREE.Color;\n  rgb?: THREE.Color;\n  dotRadius?: number;\n  textAlign?: \"left\" | \"center\" | \"right\" | \"start\" | \"end\";\n  lineHeight?: number;\n  objectScale?: number;\n}) {\n  font = font ?? \"Arial\";\n  fontSize = fontSize ?? 32;\n  color = color ?? new THREE.Color(1, 1, 1);\n  dotRadius = dotRadius ?? 0.8;\n  textAlign = textAlign ?? \"start\";\n  lineHeight = lineHeight ?? 1;\n  objectScale = objectScale ?? 1;\n  const lines = text.split(\"\\n\");\n\n  const canvas = document.createElement(\"canvas\");\n  const ctx = canvas.getContext(\"2d\");\n  if (!ctx) {\n    throw new Error(\"Failed to create canvas context\");\n  }\n\n  ctx.font = `${fontSize}px ${font}`;\n  ctx.textAlign = textAlign;\n  const metrics = ctx.measureText(\"\");\n  const fontHeight =\n    metrics.fontBoundingBoxAscent + metrics.fontBoundingBoxDescent;\n\n  let minLeft = Number.POSITIVE_INFINITY;\n  let maxRight = Number.NEGATIVE_INFINITY;\n  let minTop = Number.POSITIVE_INFINITY;\n  let maxBottom = Number.NEGATIVE_INFINITY;\n  for (let line = 0; line < lines.length; ++line) {\n    const metrics = ctx.measureText(lines[line]);\n    const y = fontHeight * lineHeight * line;\n    minLeft = Math.min(minLeft, -metrics.actualBoundingBoxLeft);\n    maxRight = Math.max(maxRight, metrics.actualBoundingBoxRight);\n    minTop = Math.min(minTop, y - metrics.actualBoundingBoxAscent);\n    maxBottom = Math.max(maxBottom, y + metrics.actualBoundingBoxDescent);\n  }\n  const originLeft = Math.floor(minLeft);\n  const originTop = Math.floor(minTop);\n  const width = Math.ceil(maxRight) - originLeft;\n  const height = Math.ceil(maxBottom) - originTop;\n  canvas.width = width;\n  canvas.height = height;\n\n  ctx.font = `${fontSize}px ${font}`;\n  ctx.textAlign = textAlign;\n  ctx.textBaseline = \"alphabetic\";\n  ctx.fillStyle = \"#FFFFFF\";\n  for (let i = 0; i < lines.length; ++i) {\n    const y = fontHeight * lineHeight * i - originTop;\n    ctx.fillText(lines[i], -originLeft, y);\n  }\n\n  const imageData = ctx.getImageData(0, 0, width, height);\n  const rgba = new Uint8Array(imageData.data.buffer);\n  const splats = new PackedSplats();\n  const center = new THREE.Vector3();\n  const scales = new THREE.Vector3().setScalar(dotRadius * objectScale);\n  const quaternion = new THREE.Quaternion(0, 0, 0, 1);\n  rgb = rgb ?? new THREE.Color(1, 1, 1);\n\n  let offset = 0;\n  for (let y = 0; y < height; ++y) {\n    for (let x = 0; x < width; ++x) {\n      const a = rgba[offset + 3];\n      if (a > 0) {\n        const opacity = a / 255;\n        center.set(x - 0.5 * (width - 1), 0.5 * (height - 1) - y, 0);\n        center.multiplyScalar(objectScale);\n        splats.pushSplat(center, scales, quaternion, opacity, rgb);\n      }\n      offset += 4;\n    }\n  }\n\n  const mesh = new SplatMesh({ packedSplats: splats });\n  mesh.recolor = color;\n  return mesh;\n}\n\nexport function imageSplats({\n  // URL of the image to convert to splats (example: `url: \"./image.png\"`)\n  url,\n  // Radius of each Gsplat, default covers 1-unit spacing well (default: 0.8)\n  dotRadius,\n  // Subsampling factor for the image. Higher values reduce resolution,\n  // for example 2 will halve the width and height by averaging (default: 1)\n  subXY,\n  // Optional callback function to modify each Gsplat before it's added.\n  // Return null to skip adding the Gsplat, or a number to set the opacity\n  // and add the Gsplat with parameter values in the objects center, rgba etc. were\n  // passed into the forEachSplat callback. Ending the callback in `return opacity;`\n  // will retain the original opacity.\n  // ((width: number, height: number, index: number, center: THREE.Vector3, scales: THREE.Vector3, quaternion: THREE.Quaternion, opacity: number, color: THREE.Color) => number | null)\n  forEachSplat,\n}: {\n  url: string;\n  dotRadius?: number;\n  subXY?: number;\n  forEachSplat?: (\n    width: number,\n    height: number,\n    index: number,\n    center: THREE.Vector3,\n    scales: THREE.Vector3,\n    quaternion: THREE.Quaternion,\n    opacity: number,\n    color: THREE.Color,\n  ) => number | null;\n}): SplatMesh {\n  dotRadius = dotRadius ?? 0.8;\n  subXY = Math.max(1, Math.floor(subXY ?? 1));\n\n  return new SplatMesh({\n    constructSplats: async (splats) => {\n      return new Promise((resolve, reject) => {\n        const img = new Image();\n        img.crossOrigin = \"anonymous\";\n        img.onerror = reject;\n        img.onload = () => {\n          const { width, height } = img;\n          const canvas = document.createElement(\"canvas\");\n          canvas.width = width;\n          canvas.height = height;\n          const ctx = canvas.getContext(\"2d\");\n          if (!ctx) {\n            reject(new Error(\"Failed to create canvas context\"));\n            return;\n          }\n          ctx.imageSmoothingEnabled = true;\n          ctx.imageSmoothingQuality = \"high\";\n          const destWidth = Math.round(width / subXY);\n          const destHeight = Math.round(height / subXY);\n          ctx.drawImage(img, 0, 0, destWidth, destHeight);\n          try {\n            const imageData = ctx.getImageData(0, 0, destWidth, destHeight);\n            const rgba = new Uint8Array(imageData.data.buffer);\n\n            const center = new THREE.Vector3();\n            const scales = new THREE.Vector3().setScalar(dotRadius);\n            const quaternion = new THREE.Quaternion(0, 0, 0, 1);\n            const rgb = new THREE.Color();\n\n            let index = 0;\n            for (let y = 0; y < destHeight; ++y) {\n              for (let x = 0; x < destWidth; ++x) {\n                const offset = index * 4;\n                const a = rgba[offset + 3];\n                if (a > 0) {\n                  let opacity = a / 255;\n                  rgb.set(\n                    rgba[offset + 0] / 255,\n                    rgba[offset + 1] / 255,\n                    rgba[offset + 2] / 255,\n                  );\n                  center.set(\n                    x - 0.5 * (destWidth - 1),\n                    0.5 * (destHeight - 1) - y,\n                    0,\n                  );\n                  scales.setScalar(dotRadius);\n                  quaternion.set(0, 0, 0, 1);\n                  let push = true;\n                  if (forEachSplat) {\n                    const maybeOpacity = forEachSplat(\n                      destWidth,\n                      destHeight,\n                      index,\n                      center,\n                      scales,\n                      quaternion,\n                      opacity,\n                      rgb,\n                    );\n                    opacity = maybeOpacity ?? opacity;\n                    push = maybeOpacity !== null;\n                  }\n                  if (push) {\n                    splats.pushSplat(center, scales, quaternion, opacity, rgb);\n                  }\n                }\n                index += 1;\n              }\n            }\n            resolve();\n          } catch (error) {\n            reject(error);\n          }\n        };\n        img.src = url;\n      });\n    },\n  });\n}\n","import * as THREE from \"three\";\nimport { SplatGenerator, SplatTransformer } from \"../SplatGenerator\";\nimport {\n  type DynoVal,\n  Gsplat,\n  add,\n  combine,\n  combineGsplat,\n  defineGsplat,\n  div,\n  dynoBlock,\n  dynoConst,\n  dynoFloat,\n  dynoLiteral,\n  floatBitsToInt,\n  hashVec3,\n  imod,\n  mul,\n  split,\n  sub,\n  vec3,\n} from \"../dyno\";\n\nexport function staticBox({\n  box,\n  cells,\n  dotScale,\n  color,\n  opacity,\n}: {\n  box: THREE.Box3;\n  cells: THREE.Vector3;\n  dotScale: number;\n  color?: THREE.Color;\n  opacity?: number;\n}) {\n  cells.x = Math.max(1, Math.round(cells.x));\n  cells.y = Math.max(1, Math.round(cells.y));\n  cells.z = Math.max(1, Math.round(cells.z));\n  opacity = opacity ?? 1;\n  const numSplats = cells.x * cells.y * cells.z;\n  const dynoX = dynoConst(\"int\", cells.x);\n  const dynoY = dynoConst(\"int\", cells.y);\n  const dynoZ = dynoConst(\"int\", cells.z);\n\n  const dynoTime = dynoFloat(0);\n  const generator = new SplatGenerator({\n    numSplats,\n    generator: dynoBlock(\n      { index: \"int\" },\n      { gsplat: Gsplat },\n      ({ index }) => {\n        if (!index) {\n          throw new Error(\"index is undefined\");\n        }\n        const cellX = imod(index, dynoX);\n        const index2 = div(index, dynoX);\n        const cellY = imod(index2, dynoY);\n        const cellZ = div(index2, dynoY);\n        const cell = combine({\n          vectorType: \"ivec3\",\n          x: cellX,\n          y: cellY,\n          z: cellZ,\n        });\n\n        const intTime = floatBitsToInt(dynoTime);\n        const inputs = combine({ vectorType: \"ivec2\", x: index, y: intTime });\n        const random = hashVec3(inputs);\n        const min = dynoConst(\"vec3\", box.min);\n        const max = dynoConst(\"vec3\", box.max);\n        const size = sub(max, min);\n        const coord = div(add(vec3(cell), random), dynoConst(\"vec3\", cells));\n        let r: DynoVal<\"float\">;\n        let g: DynoVal<\"float\">;\n        let b: DynoVal<\"float\">;\n        if (color) {\n          r = dynoConst(\"float\", color.r);\n          g = dynoConst(\"float\", color.g);\n          b = dynoConst(\"float\", color.b);\n        } else {\n          ({ r, g, b } = split(coord).outputs);\n        }\n        const rgba = combine({\n          vectorType: \"vec4\",\n          r,\n          g,\n          b,\n          a: dynoConst(\"float\", opacity),\n        });\n        const center = add(min, mul(size, coord));\n        const scales = vec3(dynoConst(\"float\", dotScale));\n        const quaternion = dynoConst(\"vec4\", new THREE.Quaternion(0, 0, 0, 1));\n        let gsplat = combineGsplat({\n          flags: dynoLiteral(\"uint\", \"GSPLAT_FLAG_ACTIVE\"),\n          index: index,\n          center,\n          scales,\n          quaternion,\n          rgba,\n        });\n        gsplat = transformer.applyGsplat(gsplat);\n        return { gsplat };\n      },\n      {\n        globals: () => [defineGsplat],\n      },\n    ),\n    update: ({ time }) => {\n      dynoTime.value = time;\n      const _updated = transformer.update(generator);\n      generator.updateVersion();\n    },\n  });\n  const transformer: SplatTransformer = new SplatTransformer();\n  return generator;\n}\n","import * as THREE from \"three\";\n\nimport { SplatGenerator, SplatTransformer } from \"../SplatGenerator\";\nimport {\n  Gsplat,\n  add,\n  combine,\n  combineGsplat,\n  defineGsplat,\n  dynoBlock,\n  dynoConst,\n  dynoFloat,\n  dynoLiteral,\n  fract,\n  hashVec4,\n  max,\n  mix,\n  mod,\n  mul,\n  sin,\n  split,\n  sub,\n  vec3,\n} from \"../dyno\";\nimport { dynoVec3 } from \"../dyno\";\n\n// snowBox produces Gsplat trajectories that move in a deterministic fashion over time,\n// with high similarity between adjacent frames. See examples/atmospheric/main.js\n// for an example that creates a snowBox.\n\n// A snowBox instance has a collection of properties that can be tuned to achieve\n// different particle effects. The below DEFAULT_SNOW and DEFAULT_RAIN are example\n// parameter sets that look a lot like snow and rain, and can be used as a starting\n// point for further tweaking: `const mySnow = { ...DEFAULT_SNOW, density: 500 };`\n\nexport const DEFAULT_SNOW = {\n  box: new THREE.Box3(\n    new THREE.Vector3(-1, -1, -1),\n    new THREE.Vector3(1, 1, 1),\n  ),\n  density: 100,\n  fallDirection: new THREE.Vector3(-1, -3, 1).normalize(),\n  fallVelocity: 0.02,\n  wanderScale: 0.04,\n  wanderVariance: 2,\n  color1: new THREE.Color(1, 1, 1),\n  color2: new THREE.Color(0.5, 0.5, 1),\n  minScale: 0.001,\n  maxScale: 0.005,\n  anisoScale: new THREE.Vector3(1, 1, 1),\n};\n\nexport const DEFAULT_RAIN = {\n  box: new THREE.Box3(\n    new THREE.Vector3(-2, -1, -2),\n    new THREE.Vector3(2, 5, 2),\n  ),\n  density: 10,\n  fallDirection: new THREE.Vector3(0, -1, 0),\n  fallVelocity: 2,\n  wanderScale: 0.1,\n  wanderVariance: 1,\n  color1: new THREE.Color(1, 1, 1),\n  color2: new THREE.Color(0.25, 0.25, 0.5),\n  minScale: 0.005,\n  maxScale: 0.01,\n  anisoScale: new THREE.Vector3(0.1, 1, 0.1),\n};\n\n// Calling snowBox creates a new snowBox instance and returns an object with\n// the snowBox itself as well `as` a collection of controls that can be used to\n// adjust the snowBox's properties over time:\n//\n// - snow: the SplatGenerator snowBox instance\n// - min: the vec3 uniform of the snowBox minimum position\n// - max: the vec3 uniform of the snowBox maximum position\n// - minY: the float uniform of the snowBox minimum y-coordinate\n// - color1: the vec3 uniform of the snowBox first color\n// - color2: the vec3 uniform of the snowBox second color\n// - opacity: the float uniform of the snowBox opacity\n// - fallVelocity: the float uniform of the snowBox fall velocity\n// - wanderVariance: the float uniform of the snowBox wander variance\n// - wanderScale: the float uniform of the snowBox wander scale\n// - fallDirection: the vec3 uniform of the snowBox fall direction\n// - minScale: the float uniform of the snowBox minimum scale\n// - maxScale: the float uniform of the snowBox maximum scale\n// - anisoScale: the vec3 uniform of the snowBox anisotropic scale\n\nexport function snowBox({\n  // min and max box extents of the snowBox\n  box,\n  // minimum y-coordinate to clamp particle position, which can be used to\n  // fake hitting a ground plane and lingering there for a bit\n  minY,\n  // number of Gsplats to generate (default: calculated from box and density)\n  numSplats,\n  // density of Gsplats per unit volume (default: 100)\n  density,\n  // The xyz anisotropic scale of the Gsplat, which can be used for example\n  // to elongate rain particles (default: (1, 1, 1))\n  anisoScale,\n  // Minimum Gsplat particle scale (default: 0.001)\n  minScale,\n  // Maximum Gsplat particle scale (default: 0.005)\n  maxScale,\n  // The average direction of fall (default: (0, -1, 0))\n  fallDirection,\n  // The average speed of the fall (multiplied with fallDirection) (default: 0.02)\n  fallVelocity,\n  // The world scale of wandering overlay motion (default: 0.01)\n  wanderScale,\n  // Controls how uniformly the particles wander in sync, more variance mean\n  // more randomness in the motion (default: 2)\n  wanderVariance,\n  // Color 1 of the two colors interpolated between (default: (1, 1, 1))\n  color1,\n  // Color 2 of the two colors interpolated between (default: (0.5, 0.5, 1))\n  color2,\n  // The base opacity of the Gsplats (default: 1)\n  opacity,\n  // Optional callback function to call each frame.\n  onFrame,\n}: {\n  box?: THREE.Box3;\n  minY?: number;\n  numSplats?: number;\n  density?: number;\n  anisoScale?: THREE.Vector3;\n  minScale?: number;\n  maxScale?: number;\n  fallDirection?: THREE.Vector3;\n  fallVelocity?: number;\n  wanderScale?: number;\n  wanderVariance?: number;\n  color1?: THREE.Color;\n  color2?: THREE.Color;\n  opacity?: number;\n  onFrame?: ({\n    object,\n    time,\n    deltaTime,\n  }: { object: SplatGenerator; time: number; deltaTime: number }) => void;\n}) {\n  box =\n    box ??\n    new THREE.Box3(new THREE.Vector3(-1, -1, -1), new THREE.Vector3(1, 1, 1));\n  const volume =\n    (box.max.x - box.min.x) * (box.max.y - box.min.y) * (box.max.z - box.min.z);\n  density = density ?? 100;\n  numSplats =\n    numSplats ?? Math.max(1, Math.min(1000000, Math.round(volume * density)));\n\n  const dynoMinScale = dynoFloat(minScale ?? 0.001);\n  const dynoMaxScale = dynoFloat(maxScale ?? 0.005);\n  const dynoAnisoScale = dynoVec3(\n    (anisoScale?.clone() ?? new THREE.Vector3(1, 1, 1)).normalize(),\n  );\n  const dynoFallDirection = dynoVec3(\n    (fallDirection ?? new THREE.Vector3(0, -1, 0)).normalize(),\n  );\n  const dynoFallVelocity = dynoFloat(fallVelocity ?? 0.02);\n  const dynoWanderScale = dynoFloat(wanderScale ?? 0.01);\n  const dynoWanderVariance = dynoFloat(wanderVariance ?? 2);\n  const dynoColor1 = dynoVec3(color1 ?? new THREE.Color(1, 1, 1));\n  const dynoColor2 = dynoVec3(color2 ?? new THREE.Color(0.5, 0.5, 1));\n  const dynoOpacity = dynoFloat(opacity ?? 1);\n\n  const dynoTime = dynoFloat(0);\n  const globalOffset = dynoVec3(new THREE.Vector3(0, 0, 0));\n  const dynoMin = dynoVec3(box.min);\n  const dynoMax = dynoVec3(box.max);\n  const dynoMinY = dynoFloat(minY ?? Number.NEGATIVE_INFINITY);\n  const minMax = sub(dynoMax, dynoMin);\n  const snow = new SplatGenerator({\n    numSplats,\n    generator: dynoBlock(\n      { index: \"int\" },\n      { gsplat: Gsplat },\n      ({ index }) => {\n        if (!index) {\n          throw new Error(\"index not defined\");\n        }\n        const random = hashVec4(index);\n        const randomW = split(random).outputs.w;\n        let position = vec3(random);\n\n        let size = fract(mul(randomW, dynoConst(\"float\", 100)));\n        size = sin(mul(dynoLiteral(\"float\", \"PI\"), size));\n        size = add(dynoMinScale, mul(size, sub(dynoMaxScale, dynoMinScale)));\n        const scales = mul(size, dynoAnisoScale);\n\n        const intensity = fract(mul(randomW, dynoConst(\"float\", 10)));\n        const hue = fract(randomW);\n        const color = mix(dynoColor1, dynoColor2, hue);\n        const rgb = mul(color, intensity);\n\n        const random2 = hashVec4(\n          combine({\n            vectorType: \"ivec2\",\n            x: index,\n            y: dynoConst(\"int\", 0x1ab5),\n          }),\n        );\n        let perturb = vec3(random2);\n        let timeOffset = mul(split(random2).outputs.w, dynoWanderVariance);\n        timeOffset = add(dynoTime, timeOffset);\n\n        position = add(position, globalOffset);\n        const modulo = mod(\n          position,\n          dynoConst(\"vec3\", new THREE.Vector3(1, 1, 1)),\n        );\n        position = add(dynoMin, mul(minMax, modulo));\n\n        const quaternion = dynoConst(\"vec4\", new THREE.Quaternion(0, 0, 0, 1));\n\n        perturb = sin(add(vec3(timeOffset), perturb));\n        perturb = mul(perturb, dynoWanderScale);\n        let center = add(position, perturb);\n\n        let centerY = split(center).outputs.y;\n        centerY = max(dynoMinY, centerY);\n        center = combine({ vector: center, y: centerY });\n\n        let gsplat = combineGsplat({\n          flags: dynoLiteral(\"uint\", \"GSPLAT_FLAG_ACTIVE\"),\n          index: index,\n          center,\n          scales,\n          quaternion,\n          rgb,\n          opacity: dynoOpacity,\n        });\n        gsplat = transformer.applyGsplat(gsplat);\n        return { gsplat };\n      },\n      {\n        globals: () => [defineGsplat],\n      },\n    ),\n    update: ({ object, time, deltaTime }) => {\n      dynoTime.value = time;\n      const _updated = transformer.update(snow);\n\n      const fallDelta = dynoFallDirection.value\n        .clone()\n        .multiplyScalar(dynoFallVelocity.value * deltaTime);\n      globalOffset.value.add(fallDelta);\n\n      // Enable/disable splats based on opacity\n      object.visible = dynoOpacity.value > 0;\n\n      onFrame?.({ object, time, deltaTime });\n      snow.updateVersion();\n    },\n  });\n  const transformer: SplatTransformer = new SplatTransformer();\n  return {\n    snow,\n    min: dynoMin,\n    max: dynoMax,\n    minY: dynoMinY,\n    color1: dynoColor1,\n    color2: dynoColor2,\n    opacity: dynoOpacity,\n    fallVelocity: dynoFallVelocity,\n    wanderVariance: dynoWanderVariance,\n    wanderScale: dynoWanderScale,\n    fallDirection: dynoFallDirection,\n    minScale: dynoMinScale,\n    maxScale: dynoMaxScale,\n    anisoScale: dynoAnisoScale,\n  };\n}\n\nexport type SNOW_RESULT_TYPE = ReturnType<typeof snowBox>;\n","import type { SplatTransformer } from \"../SplatGenerator\";\nimport type { SplatMesh } from \"../SplatMesh\";\nimport {\n  Gsplat,\n  add,\n  combineGsplat,\n  dot,\n  dynoBlock,\n  dynoConst,\n  greaterThanEqual,\n  gsplatNormal,\n  mul,\n  neg,\n  select,\n  splitGsplat,\n} from \"../dyno\";\n\nexport function makeNormalColorModifier(splatToView: SplatTransformer) {\n  return dynoBlock({ gsplat: Gsplat }, { gsplat: Gsplat }, ({ gsplat }) => {\n    if (!gsplat) {\n      throw new Error(\"No gsplat input\");\n    }\n    let normal = gsplatNormal(gsplat);\n\n    const viewGsplat = splatToView.applyGsplat(gsplat);\n    const viewCenter = splitGsplat(viewGsplat).outputs.center;\n    const viewNormal = gsplatNormal(viewGsplat);\n    const splatDot = dot(viewCenter, viewNormal);\n\n    const sameDir = greaterThanEqual(splatDot, dynoConst(\"float\", 0));\n    normal = select(sameDir, neg(normal), normal);\n    const rgb = add(\n      mul(normal, dynoConst(\"float\", 0.5)),\n      dynoConst(\"float\", 0.5),\n    );\n\n    gsplat = combineGsplat({ gsplat, rgb });\n    return { gsplat };\n  });\n}\n\nexport function setWorldNormalColor(splats: SplatMesh) {\n  splats.enableWorldToView = true;\n  splats.worldModifier = makeNormalColorModifier(splats.context.worldToView);\n  splats.updateGenerator();\n}\n","import type { SplatTransformer } from \"../SplatGenerator\";\nimport type { SplatMesh } from \"../SplatMesh\";\nimport {\n  type DynoVal,\n  Gsplat,\n  combineGsplat,\n  dynoBlock,\n  dynoConst,\n  neg,\n  normalizedDepth,\n  select,\n  split,\n  splitGsplat,\n  sub,\n} from \"../dyno\";\n\nexport function makeDepthColorModifier(\n  splatToView: SplatTransformer,\n  minDepth: DynoVal<\"float\">,\n  maxDepth: DynoVal<\"float\">,\n  reverse: DynoVal<\"bool\">,\n) {\n  return dynoBlock({ gsplat: Gsplat }, { gsplat: Gsplat }, ({ gsplat }) => {\n    if (!gsplat) {\n      throw new Error(\"No gsplat input\");\n    }\n    let { center } = splitGsplat(gsplat).outputs;\n    center = splatToView.apply(center);\n    const { z } = split(center).outputs;\n    let depth = normalizedDepth(neg(z), minDepth, maxDepth);\n    depth = select(reverse, sub(dynoConst(\"float\", 1), depth), depth);\n\n    gsplat = combineGsplat({ gsplat, r: depth, g: depth, b: depth });\n    return { gsplat };\n  });\n}\n\nexport function setDepthColor(\n  splats: SplatMesh,\n  minDepth: number,\n  maxDepth: number,\n  reverse?: boolean,\n) {\n  splats.enableWorldToView = true;\n  const dynoMinDepth = dynoConst(\"float\", minDepth);\n  const dynoMaxDepth = dynoConst(\"float\", maxDepth);\n  const dynoReverse = dynoConst(\"bool\", reverse ?? false);\n  splats.worldModifier = makeDepthColorModifier(\n    splats.context.worldToView,\n    dynoMinDepth,\n    dynoMaxDepth,\n    dynoReverse,\n  );\n  splats.updateGenerator();\n  return {\n    minDepth: dynoMinDepth,\n    maxDepth: dynoMaxDepth,\n    reverse: dynoReverse,\n  };\n}\n","import type * as THREE from \"three\";\n\nexport class VRButton {\n  static createButton(\n    renderer: THREE.WebGLRenderer,\n    sessionInit: XRSessionInit = {},\n  ): HTMLElement | null {\n    const navigatorXr = navigator.xr;\n    if (!navigatorXr) {\n      // Only allow creation if WebXR is supported\n      return null;\n    }\n    const xr = navigatorXr;\n\n    const button = document.createElement(\"button\");\n    renderer.xr.enabled = true;\n    renderer.xr.setReferenceSpaceType(\"local\");\n\n    function showEnterVR(/*device*/) {\n      let currentSession: XRSession | null = null;\n\n      async function onSessionStarted(session: XRSession) {\n        console.log(\"onSessionStarted\");\n\n        session.addEventListener(\"end\", onSessionEnded);\n\n        await renderer.xr.setSession(session);\n        button.textContent = \"EXIT VR\";\n\n        currentSession = session;\n      }\n\n      function onSessionEnded(/*event*/) {\n        console.log(\"onSessionEnded\");\n        currentSession?.removeEventListener(\"end\", onSessionEnded);\n\n        button.textContent = \"ENTER VR\";\n\n        currentSession = null;\n      }\n\n      button.style.display = \"\";\n      button.style.cursor = \"pointer\";\n      button.style.left = \"calc(50% - 100px)\";\n      button.style.width = \"200px\";\n      button.style.height = \"100px\";\n      button.textContent = \"ENTER VR\";\n\n      // WebXR's requestReferenceSpace only works if the corresponding feature\n      // was requested at session creation time. For simplicity, just ask for\n      // the interesting ones as optional features, but be aware that the\n      // requestReferenceSpace call will fail if it turns out to be unavailable.\n      // ('local' is always available for immersive sessions and doesn't need to\n      // be requested separately.)\n\n      const sessionOptions: XRSessionInit = {\n        ...sessionInit,\n        optionalFeatures: [\n          // \"local-floor\",\n          // \"bounded-floor\",\n          // \"layers\",\n          ...(sessionInit.optionalFeatures || []),\n        ],\n      };\n\n      button.onmouseenter = () => {\n        button.style.opacity = \"1.0\";\n      };\n      button.onmouseleave = () => {\n        button.style.opacity = \"0.5\";\n      };\n      button.onclick = () => {\n        if (currentSession === null) {\n          console.log(\"requesting session\");\n          xr.requestSession(\"immersive-vr\", sessionOptions).then(\n            onSessionStarted,\n          );\n          // xr.requestSession( \"immersive-ar\", sessionOptions ).then( onSessionStarted );\n        } else {\n          console.log(\"ending session\");\n          currentSession.end();\n        }\n      };\n    }\n\n    function disableButton() {\n      button.style.display = \"none\";\n      button.style.cursor = \"auto\";\n      button.style.left = \"calc(50% - 75px)\";\n      button.style.width = \"150px\";\n\n      button.onmouseenter = null;\n      button.onmouseleave = null;\n      button.onclick = null;\n    }\n\n    function showWebXRNotFound() {\n      disableButton();\n      button.textContent = \"VR NOT SUPPORTED\";\n    }\n\n    function showVRNotAllowed(exception: any) {\n      disableButton();\n      console.warn(\n        \"Exception when trying to call xr.isSessionSupported\",\n        exception,\n      );\n      button.textContent = \"VR NOT ALLOWED\";\n    }\n\n    function stylizeElement(element: HTMLElement) {\n      element.style.position = \"absolute\";\n      element.style.bottom = \"20px\";\n      element.style.padding = \"12px 6px\";\n      element.style.border = \"1px solid #fff\";\n      element.style.borderRadius = \"4px\";\n      element.style.background = \"rgba(0,0,0,0.1)\";\n      element.style.color = \"#fff\";\n      element.style.font = \"normal 13px sans-serif\";\n      element.style.textAlign = \"center\";\n      element.style.opacity = \"0.5\";\n      element.style.outline = \"none\";\n      element.style.zIndex = \"999\";\n    }\n\n    button.id = \"VRButton\";\n    button.style.display = \"none\";\n    stylizeElement(button);\n\n    xr.isSessionSupported(\"immersive-vr\")\n      .then((supported) => {\n        // xr.isSessionSupported( \"immersive-ar\" ).then( function ( supported ) {\n        supported ? showEnterVR() : showWebXRNotFound();\n\n        if (supported && VRButton.xrSessionIsGranted) {\n          button.click();\n        }\n      })\n      .catch(showVRNotAllowed);\n\n    return button;\n  }\n\n  static registerSessionGrantedListener() {\n    const navigatorXr = navigator.xr;\n    if (!navigatorXr) {\n      // Only allow creation if WebXR is supported\n      return null;\n    }\n    const xr = navigatorXr;\n\n    // WebXRViewer (based on Firefox) has a bug where addEventListener\n    // throws a silent exception and aborts execution entirely.\n    if (/WebXRViewer\\//i.test(navigator.userAgent)) return;\n\n    xr.addEventListener(\"sessiongranted\", () => {\n      VRButton.xrSessionIsGranted = true;\n    });\n  }\n\n  static xrSessionIsGranted = false;\n}\n\nVRButton.registerSessionGrantedListener();\n","import {\n  Color,\n  Matrix4,\n  type Object3D,\n  Quaternion,\n  Vector3,\n  type WebXRManager,\n} from \"three\";\nimport { SplatMesh } from \"./SplatMesh\";\n\n// Experimental WebXR hand tracking and movement\n\nconst DEFAULT_MOVE_INERTIA = 0.5;\nconst DEFAULT_ROTATE_INERTIA = 0.5;\nconst TOUCH_BIAS = 0.0;\n\nexport enum JointEnum {\n  w = \"wrist\",\n  t0 = \"thumb-metacarpal\",\n  t1 = \"thumb-phalanx-proximal\",\n  t2 = \"thumb-phalanx-distal\",\n  t3 = \"thumb-tip\",\n  i0 = \"index-finger-metacarpal\",\n  i1 = \"index-finger-phalanx-proximal\",\n  i2 = \"index-finger-phalanx-intermediate\",\n  i3 = \"index-finger-phalanx-distal\",\n  i4 = \"index-finger-tip\",\n  m0 = \"middle-finger-metacarpal\",\n  m1 = \"middle-finger-phalanx-proximal\",\n  m2 = \"middle-finger-phalanx-intermediate\",\n  m3 = \"middle-finger-phalanx-distal\",\n  m4 = \"middle-finger-tip\",\n  r0 = \"ring-finger-metacarpal\",\n  r1 = \"ring-finger-phalanx-proximal\",\n  r2 = \"ring-finger-phalanx-intermediate\",\n  r3 = \"ring-finger-phalanx-distal\",\n  r4 = \"ring-finger-tip\",\n  p0 = \"pinky-finger-metacarpal\",\n  p1 = \"pinky-finger-phalanx-proximal\",\n  p2 = \"pinky-finger-phalanx-intermediate\",\n  p3 = \"pinky-finger-phalanx-distal\",\n  p4 = \"pinky-finger-tip\",\n}\nexport type JointId = keyof typeof JointEnum;\nexport const JOINT_IDS = Object.keys(JointEnum) as JointId[];\nexport const NUM_JOINTS = JOINT_IDS.length;\n\nexport const JOINT_INDEX: { [key in JointId]: number } = {\n  w: 0,\n  t0: 1,\n  t1: 2,\n  t2: 3,\n  t3: 4,\n  i0: 5,\n  i1: 6,\n  i2: 7,\n  i3: 8,\n  i4: 9,\n  m0: 10,\n  m1: 11,\n  m2: 12,\n  m3: 13,\n  m4: 14,\n  r0: 15,\n  r1: 16,\n  r2: 17,\n  r3: 18,\n  r4: 19,\n  p0: 20,\n  p1: 21,\n  p2: 22,\n  p3: 23,\n  p4: 24,\n};\n\nexport const JOINT_RADIUS: { [key in JointId]: number } = {\n  w: 0.02,\n  t0: 0.02,\n  t1: 0.014,\n  t2: 0.0115,\n  t3: 0.0085,\n  i0: 0.022,\n  i1: 0.012,\n  i2: 0.0085,\n  i3: 0.0075,\n  i4: 0.0065,\n  m0: 0.021,\n  m1: 0.012,\n  m2: 0.008,\n  m3: 0.0075,\n  m4: 0.0065,\n  r0: 0.019,\n  r1: 0.011,\n  r2: 0.0075,\n  r3: 0.007,\n  r4: 0.006,\n  p0: 0.012,\n  p1: 0.01,\n  p2: 0.007,\n  p3: 0.0065,\n  p4: 0.0055,\n};\n\nexport const JOINT_SEGMENTS: JointId[][] = [\n  [\"w\", \"t0\", \"t1\", \"t2\", \"t3\"],\n  [\"w\", \"i0\", \"i1\", \"i2\", \"i3\", \"i4\"],\n  [\"w\", \"m0\", \"m1\", \"m2\", \"m3\", \"m4\"],\n  [\"w\", \"r0\", \"r1\", \"r2\", \"r3\", \"r4\"],\n  [\"w\", \"p0\", \"p1\", \"p2\", \"p3\", \"p4\"],\n];\n\nexport const JOINT_SEGMENT_STEPS: number[][] = [\n  [8, 10, 8, 6],\n  [8, 19, 14, 8, 6],\n  [8, 19, 14, 8, 6],\n  [8, 19, 14, 8, 6],\n  [8, 19, 14, 8, 6],\n];\n\nexport const JOINT_TIPS: JointId[] = [\"t3\", \"i4\", \"m4\", \"r4\", \"p4\"];\nexport const FINGER_TIPS: JointId[] = [\"i4\", \"m4\", \"r4\", \"p4\"];\n\nexport enum Hand {\n  left = \"left\",\n  right = \"right\",\n}\nexport const HANDS = Object.keys(Hand) as Hand[];\n\nexport type Joint = {\n  position: Vector3;\n  quaternion: Quaternion;\n  radius: number;\n};\n\nexport type HandJoints = { [key in JointId]?: Joint };\nexport type HandsJoints = { [key in Hand]?: HandJoints };\n\nexport class XrHands {\n  hands: HandsJoints = {};\n  last: HandsJoints = {};\n\n  values: Record<string, number> = {};\n  tests: Record<string, boolean> = {};\n  lastTests: Record<string, boolean> = {};\n\n  updated = false;\n\n  update({ xr, xrFrame }: { xr: WebXRManager; xrFrame: XRFrame }) {\n    const xrSession = xr.getSession();\n    if (!xrSession) {\n      return;\n    }\n    const referenceSpace = xr.getReferenceSpace();\n    if (!referenceSpace) {\n      return;\n    }\n    if (!xrFrame.getJointPose) {\n      return;\n    }\n\n    this.last = this.hands;\n    this.lastTests = this.tests;\n\n    this.hands = {};\n    this.values = {};\n    this.tests = {};\n\n    for (const inputSource of xrSession.inputSources) {\n      if (!inputSource.hand) {\n        continue;\n      }\n\n      const hand = inputSource.handedness as Hand;\n      this.hands[hand] = {};\n\n      // Iterate over JointId\n      for (const jointId of JOINT_IDS) {\n        const jointSpace = inputSource.hand.get(JointEnum[jointId]);\n        if (jointSpace) {\n          const jointPose = xrFrame.getJointPose(jointSpace, referenceSpace);\n          if (jointPose) {\n            const { position, orientation } = jointPose.transform;\n            this.hands[hand][jointId] = {\n              position: new Vector3(position.x, position.y, position.z),\n              quaternion: new Quaternion(\n                orientation.x,\n                orientation.y,\n                orientation.z,\n                orientation.w,\n              ),\n              radius: jointPose.radius || 0.001,\n            };\n          }\n        }\n      }\n    }\n\n    for (const hand of HANDS) {\n      for (const { key, value } of [\n        { key: `${hand}AllTips`, value: this.allTipsTouching(hand) },\n        {\n          key: `${hand}IndexThumb`,\n          value: this.touching(hand, \"i4\", hand, \"t3\"),\n        },\n        {\n          key: `${hand}MiddleThumb`,\n          value: this.touching(hand, \"m4\", hand, \"t3\"),\n        },\n        {\n          key: `${hand}RingThumb`,\n          value: this.touching(hand, \"r4\", hand, \"t3\"),\n        },\n        {\n          key: `${hand}PinkyThumb`,\n          value: this.touching(hand, \"p4\", hand, \"t3\"),\n        },\n        { key: `${hand}TriTips`, value: this.triTipsTouching(hand) },\n      ]) {\n        this.values[key] = value;\n        this.tests[key] =\n          value === 1.0\n            ? true\n            : value === 0.0\n              ? false\n              : (this.lastTests[key] ?? false);\n      }\n    }\n  }\n\n  makeGhostMesh(): SplatMesh {\n    const center = new Vector3();\n    const scales = new Vector3(0.01, 0.01, 0.01);\n    const quaternion = new Quaternion(0, 0, 0, 1);\n    const color = new Color(1, 1, 1);\n    const CYCLE = Math.PI * 3;\n    const WHITE = new Color(1, 1, 1);\n    let opacity = 1.0;\n\n    const mesh = new SplatMesh({\n      onFrame: () => {\n        let splatIndex = 0;\n        for (const handedness of HANDS) {\n          const xrHand = this.hands[handedness];\n          for (const [index, segment] of JOINT_SEGMENTS.entries()) {\n            for (let i = 1; i < segment.length; ++i) {\n              const segmentSplats = JOINT_SEGMENT_STEPS[index][i - 1] * 2;\n              const lastSegment = i + 1 === segment.length;\n              const jointA = xrHand?.[segment[i - 1]];\n              const jointB = xrHand?.[segment[i]];\n\n              for (let j = 0; j < segmentSplats; ++j) {\n                const t = (j + 0.5) / segmentSplats;\n                opacity = 0.0;\n                if (jointA && jointB) {\n                  center.copy(jointA.position).lerp(jointB.position, t);\n                  quaternion\n                    .copy(jointA.quaternion)\n                    .slerp(jointB.quaternion, t);\n                  const radiusA = JOINT_RADIUS[segment[i - 1]];\n                  const radiusB = JOINT_RADIUS[segment[i]];\n                  let radius = (1 - t) * radiusA + t * radiusB;\n                  if (lastSegment && t > 0.8) {\n                    // Round out finger tips\n                    radius *= Math.sqrt(1 - ((t - 0.8) / 0.2) ** 2);\n                  }\n                  scales.set(0.65 * radius, 0.5 * radius, 0.003);\n                  color.set(\n                    0.55 + 0.45 * Math.sin(center.x * CYCLE),\n                    0.55 + 0.45 * Math.sin(center.y * CYCLE),\n                    0.55 + 0.45 * Math.sin(center.z * CYCLE),\n                  );\n                  if (handedness === \"right\") {\n                    color.set(1 - color.r, 1 - color.g, 1 - color.b);\n                  }\n                  opacity = 0.75;\n                }\n                mesh.packedSplats.setSplat(\n                  splatIndex,\n                  center,\n                  scales,\n                  quaternion,\n                  opacity,\n                  color,\n                );\n                splatIndex += 1;\n              }\n            }\n          }\n        }\n        mesh.packedSplats.numSplats = splatIndex;\n        mesh.packedSplats.needsUpdate = true;\n        mesh.numSplats = splatIndex;\n        mesh.updateVersion();\n      },\n    });\n    return mesh;\n  }\n\n  distance(\n    handA: Hand,\n    jointA: JointId,\n    handB: Hand,\n    jointB: JointId,\n    last = false,\n  ): number {\n    const hA = last ? this.last[handA] : this.hands[handA];\n    const hB = last ? this.last[handB] : this.hands[handB];\n    const jA = hA?.[jointA];\n    const jB = hB?.[jointB];\n    if (!jA || !jB) {\n      return Number.POSITIVE_INFINITY;\n    }\n    return jA.position.distanceTo(jB.position);\n  }\n\n  separation(\n    handA: Hand,\n    jointA: JointId,\n    handB: Hand,\n    jointB: JointId,\n    last = false,\n  ): number {\n    const d = this.distance(handA, jointA, handB, jointB, last);\n    if (d === Number.POSITIVE_INFINITY) {\n      return Number.POSITIVE_INFINITY;\n    }\n    return d - JOINT_RADIUS[jointA] - JOINT_RADIUS[jointB];\n  }\n\n  touching(\n    handA: Hand,\n    jointA: JointId,\n    handB: Hand,\n    jointB: JointId,\n    last = false,\n  ): number {\n    const d = this.separation(handA, jointA, handB, jointB, last);\n    if (d === Number.POSITIVE_INFINITY) {\n      return Number.POSITIVE_INFINITY;\n    }\n    return 1 - Math.max(0, Math.min(1, d / 0.01 - TOUCH_BIAS));\n  }\n\n  allTipsTouching(hand: Hand, last = false): number {\n    return Math.min(\n      this.touching(hand, \"t3\", hand, \"i4\", last),\n      this.touching(hand, \"i4\", hand, \"m4\", last),\n      this.touching(hand, \"m4\", hand, \"r4\", last),\n      this.touching(hand, \"r4\", hand, \"p4\", last),\n      // this.touching(hand, \"p4\", hand, \"t3\", last),\n    );\n  }\n\n  triTipsTouching(hand: Hand, last = false): number {\n    return Math.min(\n      this.touching(hand, \"t3\", hand, \"i4\", last),\n      this.touching(hand, \"i4\", hand, \"m4\", last),\n      this.touching(hand, \"m4\", hand, \"t3\", last),\n    );\n  }\n}\n\nexport class HandMovement {\n  xrHands: XrHands;\n  control: Object3D;\n  moveInertia: number;\n  rotateInertia: number;\n\n  lastGrip: { [key in Hand]?: Vector3 } = {};\n  lastPivot: Vector3 = new Vector3();\n  rotateVelocity = 0;\n  velocity: Vector3 = new Vector3();\n\n  constructor({\n    xrHands,\n    control,\n    moveInertia,\n    rotateInertia,\n  }: {\n    xrHands: XrHands;\n    control: Object3D;\n    moveInertia?: number;\n    rotateInertia?: number;\n  }) {\n    this.xrHands = xrHands;\n    this.control = control;\n    this.moveInertia = moveInertia ?? DEFAULT_MOVE_INERTIA;\n    this.rotateInertia = rotateInertia ?? DEFAULT_ROTATE_INERTIA;\n  }\n\n  update(deltaTime: number) {\n    const grip: { [key in Hand]?: Vector3 } = {};\n    for (const handedness of HANDS) {\n      const hand = this.xrHands.hands[handedness];\n      if (hand && this.xrHands.tests[`${handedness}MiddleThumb`]) {\n        grip[handedness] = new Vector3()\n          .add(hand.t3?.position ?? new Vector3())\n          .add(hand.i4?.position ?? new Vector3())\n          .add(hand.m4?.position ?? new Vector3())\n          .add(hand.r4?.position ?? new Vector3())\n          .add(hand.p4?.position ?? new Vector3())\n          .multiplyScalar(1 / 5);\n      }\n    }\n\n    if (grip.left && grip.right && this.lastGrip.left && this.lastGrip.right) {\n      const mid = grip.left.clone().add(grip.right).multiplyScalar(0.5);\n      const lastMid = this.lastGrip.left\n        .clone()\n        .add(this.lastGrip.right)\n        .multiplyScalar(0.5);\n      this.lastPivot = mid;\n\n      const delta = mid.clone().applyMatrix4(this.control.matrix);\n      delta.sub(lastMid.clone().applyMatrix4(this.control.matrix));\n      delta.multiplyScalar(1 / deltaTime);\n      this.velocity.lerp(delta, 1 - Math.exp(-20 * deltaTime));\n\n      const angle = Math.atan2(grip.left.z - mid.z, grip.left.x - mid.x);\n      const lastAngle = Math.atan2(\n        this.lastGrip.left.z - lastMid.z,\n        this.lastGrip.left.x - lastMid.x,\n      );\n      // Find closest rotation over circle between angle and lastAngle\n      let closestAngle = angle - lastAngle;\n      if (closestAngle > Math.PI) {\n        closestAngle -= Math.PI * 2;\n      } else if (closestAngle < -Math.PI) {\n        closestAngle += Math.PI * 2;\n      }\n      const rotateVelocity = closestAngle / deltaTime;\n\n      const blend = Math.exp(-20 * deltaTime);\n      this.rotateVelocity =\n        this.rotateVelocity * blend + rotateVelocity * (1 - blend);\n    } else {\n      this.rotateVelocity *= Math.exp(-deltaTime / this.rotateInertia);\n\n      if (grip.left && this.lastGrip.left) {\n        const delta = grip.left.clone().applyMatrix4(this.control.matrix);\n        delta.sub(this.lastGrip.left.clone().applyMatrix4(this.control.matrix));\n        delta.multiplyScalar(1 / deltaTime);\n        this.velocity.lerp(delta, 1 - Math.exp(-20 * deltaTime));\n      } else if (grip.right && this.lastGrip.right) {\n        const delta = grip.right.clone().applyMatrix4(this.control.matrix);\n        delta.sub(\n          this.lastGrip.right.clone().applyMatrix4(this.control.matrix),\n        );\n        delta.multiplyScalar(1 / deltaTime);\n        this.velocity.lerp(delta, 1 - Math.exp(-20 * deltaTime));\n      } else {\n        this.velocity.multiplyScalar(Math.exp(-deltaTime / this.moveInertia));\n      }\n    }\n\n    const negPivot = this.lastPivot.clone().negate();\n    const rotate = new Matrix4()\n      .makeTranslation(negPivot)\n      .premultiply(new Matrix4().makeRotationY(this.rotateVelocity * deltaTime))\n      .premultiply(new Matrix4().makeTranslation(this.lastPivot));\n    this.control.matrix.multiply(rotate);\n    this.control.matrix.decompose(\n      this.control.position,\n      this.control.quaternion,\n      this.control.scale,\n    );\n    this.control.updateMatrixWorld(true);\n\n    this.control.position.sub(this.velocity.clone().multiplyScalar(deltaTime));\n    this.lastGrip = grip;\n  }\n}\n","import * as THREE from \"three\";\n\n// Spark controls for keyboard + mouse, game pad, or mobile multi-touch\n\nconst DEFAULT_MOVEMENT_SPEED = 1.0;\nconst DEFAULT_ROLL_SPEED = 2.0;\nconst DEFAULT_ROTATE_SPEED = 0.002;\nconst DEFAULT_SLIDE_SPEED = 0.006;\nconst DEFAULT_SCROLL_SPEED = 0.0015;\nconst DEFAULT_ROLL_SPRING = 0.0;\nconst DEFAULT_ROTATE_INERTIA = 0.15;\nconst DEFAULT_MOVE_INERTIA = 0.15;\nconst DEFAULT_STICK_THRESHOLD = 0.1;\nconst DEFAULT_FPS_ROTATE_SPEED = 2.0;\nconst DEFAULT_POINTER_ROLL_SCALE = 1.0;\n\n// Time limit for double-finger press (pinch etc)\nconst DUAL_PRESS_MS = 200;\n// Time limit for double-click/double-tap\nconst DOUBLE_PRESS_LIMIT_MS = 400;\n// Distance limit for double-click.\nconst DOUBLE_PRESS_DISTANCE = 50;\n\n// Standard WASD movement keys with R+F for up/down\nconst WASD_KEYCODE_MOVE = {\n  KeyW: new THREE.Vector3(0, 0, -1),\n  KeyS: new THREE.Vector3(0, 0, 1),\n  KeyA: new THREE.Vector3(-1, 0, 0),\n  KeyD: new THREE.Vector3(1, 0, 0),\n  KeyR: new THREE.Vector3(0, 1, 0),\n  KeyF: new THREE.Vector3(0, -1, 0),\n};\n\n// Arrow key movement with PageUp/PageDown\nconst ARROW_KEYCODE_MOVE = {\n  ArrowUp: new THREE.Vector3(0, 0, -1),\n  ArrowDown: new THREE.Vector3(0, 0, 1),\n  ArrowLeft: new THREE.Vector3(-1, 0, 0),\n  ArrowRight: new THREE.Vector3(1, 0, 0),\n  PageUp: new THREE.Vector3(0, 1, 0),\n  PageDown: new THREE.Vector3(0, -1, 0),\n};\n\n// Rolling with Q/E\nconst QE_KEYCODE_ROTATE = {\n  KeyQ: new THREE.Vector3(0, 0, 1),\n  KeyE: new THREE.Vector3(0, 0, -1),\n};\n\n// Home/End/Insert/Delete for rotation\nconst ARROW_KEYCODE_ROTATE = {\n  Home: new THREE.Vector3(0, -1, 0),\n  End: new THREE.Vector3(0, 1, 0),\n  Insert: new THREE.Vector3(-1, 0, 0),\n  Delete: new THREE.Vector3(1, 0, 0),\n};\n\n// SparkControls provides simple, intuitive controls for navigating 3D space that\n// use the keyboard + mouse, game pad, or mobile multi-touch. Internally it\n// instantiates and updates a `FpsMovement` and `PointerControls` instance.\n\nexport class SparkControls {\n  fpsMovement: FpsMovement;\n  pointerControls: PointerControls;\n  lastTime = 0;\n\n  constructor({ canvas }: { canvas: HTMLCanvasElement }) {\n    this.fpsMovement = new FpsMovement({});\n    this.pointerControls = new PointerControls({ canvas });\n  }\n\n  update(control: THREE.Object3D) {\n    const time = performance.now();\n    const deltaTime = (time - (this.lastTime || time)) / 1000;\n    this.lastTime = time;\n\n    this.fpsMovement.update(deltaTime, control);\n    this.pointerControls.update(deltaTime, control);\n  }\n}\n\n// FpsMovement implements controls that will be familiar to anyone who plays\n// First Person Shooters using keyboard + mouse or a gamepad. Creating a FpsMovement\n// instance provides many parameters for configuring the controls.\n//\n// When gamepads are connected, FpsMovement will always use gamepad index 0\n// for twin-stick movement and rotation.\n//\n// If xr is passed in, the WebXR controllers can be used as a split gamepad\n// to control movement and rotation. (tested on Quest 3)\n\nexport class FpsMovement {\n  moveSpeed: number;\n  rollSpeed: number;\n  stickThreshold: number;\n  rotateSpeed: number;\n  keycodeMoveMapping: { [key: string]: THREE.Vector3 };\n  keycodeRotateMapping: { [key: string]: THREE.Vector3 };\n  gamepadMapping: {\n    [button: number]: \"shift\" | \"ctrl\" | \"rollLeft\" | \"rollRight\";\n  };\n  capsMultiplier: number;\n  shiftMultiplier: number;\n  ctrlMultiplier: number;\n  xr?: THREE.WebXRManager;\n  // Enable/disable controls updates\n  enable = true;\n\n  // Currently active event.key values\n  keydown: { [key: string]: boolean };\n  // Currently active event.code values\n  keycode: { [key: string]: boolean };\n\n  constructor({\n    moveSpeed,\n    rollSpeed,\n    stickThreshold,\n    rotateSpeed,\n    keycodeMoveMapping,\n    keycodeRotateMapping,\n    gamepadMapping,\n    capsMultiplier,\n    shiftMultiplier,\n    ctrlMultiplier,\n    xr,\n  }: {\n    // Base movement speed (default DEFAULT_MOVEMENT_SPEED)\n    moveSpeed?: number;\n    // Base roll speed (default DEFAULT_ROLL_SPEED)\n    rollSpeed?: number;\n    // Stick threshold (default DEFAULT_STICK_THRESHOLD)\n    stickThreshold?: number;\n    // Speed of rotation when using gamepad or keys (default DEFAULT_FPS_ROTATE_SPEED)\n    rotateSpeed?: number;\n    // Maps keyboard keys to movement directions\n    // (default {...WASD_KEYCODE_MOVE, ...ARROW_KEYCODE_MOVE})\n    keycodeMoveMapping?: { [key: string]: THREE.Vector3 };\n    // Maps keyboard keys to rotation directions\n    // (default {...QE_KEYCODE_ROTATE, ...ARROW_KEYCODE_ROTATE})\n    keycodeRotateMapping?: { [key: string]: THREE.Vector3 };\n    // Maps gamepad buttons to control actions\n    // (default {4: \"rollLeft\", 5: \"rollRight\", 6: \"ctrl\", 7: \"shift\"})\n    gamepadMapping?: {\n      [button: number]: \"shift\" | \"ctrl\" | \"rollLeft\" | \"rollRight\";\n    };\n    // Speed multiplier when Caps Lock is active (default: 10)\n    capsMultiplier?: number;\n    // Speed multiplier when Shift is active (default: 5)\n    shiftMultiplier?: number;\n    // Speed multiplier when Ctrl is active (default: 1/5)\n    ctrlMultiplier?: number;\n    // Optional WebXR manager for XR controller stick support\n    xr?: THREE.WebXRManager;\n  } = {}) {\n    this.moveSpeed = moveSpeed ?? DEFAULT_MOVEMENT_SPEED;\n    this.rollSpeed = rollSpeed ?? DEFAULT_ROLL_SPEED;\n    this.stickThreshold = stickThreshold ?? DEFAULT_STICK_THRESHOLD;\n    this.rotateSpeed = rotateSpeed ?? DEFAULT_FPS_ROTATE_SPEED;\n    this.keycodeMoveMapping = keycodeMoveMapping ?? {\n      ...WASD_KEYCODE_MOVE,\n      ...ARROW_KEYCODE_MOVE,\n    };\n    this.keycodeRotateMapping = keycodeRotateMapping ?? {\n      ...QE_KEYCODE_ROTATE,\n      ...ARROW_KEYCODE_ROTATE,\n    };\n    this.gamepadMapping = gamepadMapping ?? {\n      4: \"rollLeft\",\n      5: \"rollRight\",\n      6: \"ctrl\",\n      7: \"shift\",\n    };\n    this.capsMultiplier = capsMultiplier ?? 10.0;\n    this.shiftMultiplier = shiftMultiplier ?? 5.0;\n    this.ctrlMultiplier = ctrlMultiplier ?? 1.0 / 5.0;\n\n    this.xr = xr;\n\n    this.keydown = {};\n    this.keycode = {};\n\n    document.addEventListener(\"keydown\", (event) => {\n      this.keydown[event.key] = true;\n      this.keycode[event.code] = true;\n    });\n    document.addEventListener(\"keyup\", (event) => {\n      this.keydown[event.key] = false;\n      this.keycode[event.code] = false;\n    });\n    window.addEventListener(\"blur\", () => {\n      this.keydown = {};\n      this.keycode = {};\n    });\n  }\n\n  // Call this method in your render loop with `control` set to the object to control\n  // (`THREE.Camera` or a `THREE.Object3D` that contains it), with `deltaTime`\n  // in seconds since the last update.\n  update(deltaTime: number, control: THREE.Object3D) {\n    if (!this.enable) {\n      return;\n    }\n\n    // Update gamepad / XR controllers\n\n    const sticks = [new THREE.Vector2(), new THREE.Vector2()];\n    const gamepad = navigator.getGamepads()[0];\n    if (gamepad) {\n      sticks[0].set(gamepad.axes[0], gamepad.axes[1]);\n      sticks[1].set(gamepad.axes[2], gamepad.axes[3]);\n    }\n    const gamepadButtons =\n      gamepad?.buttons.map((button) => button.pressed) || [];\n\n    const xrSources = Array.from(this.xr?.getSession()?.inputSources ?? []);\n    for (const source of xrSources) {\n      const gamepad = source.gamepad;\n      if (gamepad) {\n        switch (source.handedness) {\n          case \"none\": {\n            sticks[0].x += gamepad.axes[0];\n            sticks[0].y += gamepad.axes[1];\n            sticks[1].x += gamepad.axes[2];\n            sticks[1].y += gamepad.axes[3];\n            break;\n          }\n          case \"left\": {\n            sticks[0].x += gamepad.axes[2];\n            sticks[0].y += gamepad.axes[3];\n            break;\n          }\n          case \"right\": {\n            sticks[1].x += gamepad.axes[2];\n            sticks[1].y += gamepad.axes[3];\n            break;\n          }\n        }\n      }\n    }\n\n    for (const stick of sticks) {\n      stick.x = Math.abs(stick.x) >= this.stickThreshold ? stick.x : 0;\n      stick.y = Math.abs(stick.y) >= this.stickThreshold ? stick.y : 0;\n    }\n\n    // Rotation\n\n    const rotate = new THREE.Vector3(\n      sticks[1].x,\n      sticks[1].y,\n      0,\n    ).multiplyScalar(this.rotateSpeed);\n\n    for (const [keycode, rot] of Object.entries(this.keycodeRotateMapping)) {\n      if (this.keycode[keycode]) {\n        rotate.add(rot);\n      }\n    }\n    for (const button in this.gamepadMapping) {\n      if (gamepadButtons[Number.parseInt(button)]) {\n        switch (this.gamepadMapping[button]) {\n          case \"rollLeft\":\n            rotate.z += 1;\n            break;\n          case \"rollRight\":\n            rotate.z -= 1;\n            break;\n        }\n      }\n    }\n\n    rotate.multiply(\n      new THREE.Vector3(this.rotateSpeed, this.rotateSpeed, this.rollSpeed),\n    );\n\n    if (rotate.manhattanLength() > 0.0) {\n      rotate.multiplyScalar(deltaTime);\n      const eulers = new THREE.Euler().setFromQuaternion(\n        control.quaternion,\n        \"YXZ\",\n      );\n      eulers.y -= rotate.x;\n      eulers.x = Math.max(\n        -Math.PI / 2,\n        Math.min(Math.PI / 2, eulers.x - rotate.y),\n      );\n      eulers.z = Math.max(-Math.PI, Math.min(Math.PI, eulers.z + rotate.z));\n      control.quaternion.setFromEuler(eulers);\n    }\n\n    // Movement\n\n    const moveVector = new THREE.Vector3(sticks[0].x, 0, sticks[0].y);\n\n    for (const [keycode, move] of Object.entries(this.keycodeMoveMapping)) {\n      if (this.keycode[keycode]) {\n        moveVector.add(move);\n      }\n    }\n\n    let speedMultiplier = 1.0;\n    if (this.keydown.CapsLock) {\n      speedMultiplier *= this.capsMultiplier;\n    }\n    if (this.keycode.ShiftLeft || this.keycode.ShiftRight) {\n      speedMultiplier *= this.shiftMultiplier;\n    }\n    if (this.keycode.ControlLeft || this.keycode.ControlRight) {\n      speedMultiplier *= this.ctrlMultiplier;\n    }\n    for (const button in this.gamepadMapping) {\n      if (gamepadButtons[Number.parseInt(button)]) {\n        switch (this.gamepadMapping[button]) {\n          case \"shift\":\n            speedMultiplier *= this.shiftMultiplier;\n            break;\n          case \"ctrl\":\n            speedMultiplier *= this.ctrlMultiplier;\n            break;\n        }\n      }\n    }\n\n    // Apply movement in view direction\n    moveVector.applyQuaternion(control.quaternion);\n    control.position.add(\n      moveVector.multiplyScalar(this.moveSpeed * speedMultiplier * deltaTime),\n    );\n  }\n}\n\ntype PointerState = {\n  initial: THREE.Vector2;\n  last: THREE.Vector2;\n  position: THREE.Vector2;\n  pointerId: number;\n  button?: number;\n  timeStamp: DOMHighResTimeStamp;\n};\n\n// `PointerControls` implements pointer/mouse/touch controls on the canvas,\n// for both desktop and mobile web applications.\n\nexport class PointerControls {\n  canvas: HTMLCanvasElement;\n  rotateSpeed: number;\n  slideSpeed: number;\n  scrollSpeed: number;\n  swapRotateSlide: boolean;\n  reverseRotate: boolean;\n  reverseSlide: boolean;\n  reverseSwipe: boolean;\n  reverseScroll: boolean;\n  moveInertia: number;\n  rotateInertia: number;\n  pointerRollScale: number;\n  // Enable/disable controls updates\n  enable = true;\n\n  doublePress: ({\n    position,\n    intervalMs,\n  }: { position: THREE.Vector2; intervalMs: number }) => void;\n  // Time limit for double press (default DOUBLE_PRESS_LIMIT_MS)\n  doublePressLimitMs: number;\n  // Distance limit for double press (default DOUBLE_PRESS_DISTANCE)\n  doublePressDistance: number;\n  // Last pointer up event (default: null)\n  lastUp: { position: THREE.Vector2; time: number } | null;\n\n  // Pointer state for currently active rotating pointer\n  rotating: PointerState | null;\n  // Pointer state for currently active sliding pointer\n  sliding: PointerState | null;\n  // Whether we pressed two pointers at the same time\n  dualPress: boolean;\n  // Cumulative scroll movement\n  scroll: THREE.Vector3;\n\n  // Current rotation velocity\n  rotateVelocity: THREE.Vector3;\n  // Current movement velocity\n  moveVelocity: THREE.Vector3;\n\n  constructor({\n    // The HTML canvas element to attach pointer events to\n    canvas,\n    // Speed of rotation (default DEFAULT_ROTATE_SPEED)\n    rotateSpeed,\n    // Speed of sliding when dragging with right/middle mouse button or two fingers\n    // (default DEFAULT_SLIDE_SPEED)\n    slideSpeed,\n    // Speed of movement when using mouse scroll wheel (default DEFAULT_SCROLL_SPEED)\n    scrollSpeed,\n    // Swap the direction of rotation and sliding (default: false)\n    swapRotateSlide,\n    // Reverse the direction of rotation (default: false)\n    reverseRotate,\n    // Reverse the direction of sliding (default: false)\n    reverseSlide,\n    // Reverse the direction of swipe gestures (default: false)\n    reverseSwipe,\n    // Reverse the direction of scroll wheel movement (default: false)\n    reverseScroll,\n    // Inertia factor for movement (default: DEFAULT_MOVE_INERTIA)\n    moveInertia,\n    // Inertia factor for rotation (default: DEFAULT_ROTATE_INERTIA)\n    rotateInertia,\n    // Pointer rolling scale factor (default: DEFAULT_POINTER_ROLL_SCALE)\n    pointerRollScale,\n    // Callback for double press events (default: () => {})\n    doublePress,\n  }: {\n    canvas: HTMLCanvasElement;\n    rotateSpeed?: number;\n    slideSpeed?: number;\n    scrollSpeed?: number;\n    swapRotateSlide?: boolean;\n    reverseRotate?: boolean;\n    reverseSlide?: boolean;\n    reverseSwipe?: boolean;\n    reverseScroll?: boolean;\n    moveInertia?: number;\n    rotateInertia?: number;\n    pointerRollScale?: number;\n    doublePress?: ({\n      position,\n      intervalMs,\n    }: { position: THREE.Vector2; intervalMs: number }) => void;\n  }) {\n    this.canvas = canvas;\n    this.rotateSpeed = rotateSpeed ?? DEFAULT_ROTATE_SPEED;\n    this.slideSpeed = slideSpeed ?? DEFAULT_SLIDE_SPEED;\n    this.scrollSpeed = scrollSpeed ?? DEFAULT_SCROLL_SPEED;\n    this.swapRotateSlide = swapRotateSlide ?? false;\n    this.reverseRotate = reverseRotate ?? false;\n    this.reverseSlide = reverseSlide ?? false;\n    this.reverseSwipe = reverseSwipe ?? false;\n    this.reverseScroll = reverseScroll ?? false;\n    this.moveInertia = moveInertia ?? DEFAULT_MOVE_INERTIA;\n    this.rotateInertia = rotateInertia ?? DEFAULT_ROTATE_INERTIA;\n    this.pointerRollScale = pointerRollScale ?? DEFAULT_POINTER_ROLL_SCALE;\n\n    this.doublePress = doublePress ?? (() => {});\n    this.doublePressLimitMs = DOUBLE_PRESS_LIMIT_MS;\n    this.doublePressDistance = DOUBLE_PRESS_DISTANCE;\n    this.lastUp = null;\n\n    this.rotating = null;\n    this.sliding = null;\n    this.dualPress = false;\n    this.scroll = new THREE.Vector3();\n\n    this.rotateVelocity = new THREE.Vector3();\n    this.moveVelocity = new THREE.Vector3();\n\n    canvas.addEventListener(\"pointerdown\", (event: PointerEvent) => {\n      const position = this.getPointerPosition(event);\n      const initial = position.clone();\n      const last = position.clone();\n\n      // Determine if we're starting a rotation pointer action\n      const isRotate =\n        (!this.swapRotateSlide &&\n          !this.rotating &&\n          (event.pointerType !== \"mouse\" || event.button === 0)) ||\n        (this.swapRotateSlide &&\n          this.sliding &&\n          !this.rotating &&\n          (event.pointerType !== \"mouse\" || event.button === 1));\n      // const isRotate =\n      //   !this.rotating && (event.pointerType !== \"mouse\" || event.button === 0);\n      const { pointerId, timeStamp } = event;\n\n      if (isRotate) {\n        this.rotating = { initial, last, position, pointerId, timeStamp };\n        // Capture the pointer so events continue to be delivered even if it leaves the canvas.\n        canvas.setPointerCapture(event.pointerId);\n\n        this.dualPress = false;\n      } else if (!this.sliding) {\n        // If it's not a rotation action and we're not yet sliding, the next\n        // pointer activates a sliding action\n        const button = event.pointerType === \"mouse\" ? event.button : undefined;\n        this.sliding = {\n          initial,\n          last,\n          position,\n          pointerId,\n          button,\n          timeStamp,\n        };\n        // Capture the pointer so events continue to be delivered even if it leaves the canvas.\n        canvas.setPointerCapture(event.pointerId);\n\n        // Check if we pressed both pointers at roughly the same time\n        this.dualPress =\n          this.rotating != null &&\n          timeStamp - this.rotating.timeStamp < DUAL_PRESS_MS;\n      }\n    });\n\n    const pointerUp = (event: PointerEvent) => {\n      if (this.rotating?.pointerId === event.pointerId) {\n        this.rotating = null;\n        canvas.releasePointerCapture(event.pointerId);\n        if (this.dualPress && this.sliding) {\n          canvas.releasePointerCapture(this.sliding.pointerId);\n          this.sliding = null;\n        }\n      } else if (this.sliding?.pointerId === event.pointerId) {\n        this.sliding = null;\n        canvas.releasePointerCapture(event.pointerId);\n        if (this.dualPress && this.rotating) {\n          canvas.releasePointerCapture(this.rotating.pointerId);\n          this.rotating = null;\n        }\n      }\n\n      const position = this.getPointerPosition(event);\n      const lastUp = this.lastUp;\n      this.lastUp = { position, time: event.timeStamp };\n      if (lastUp) {\n        const distance = lastUp.position.distanceTo(position);\n        if (distance < this.doublePressDistance) {\n          const intervalMs = event.timeStamp - lastUp.time;\n          if (intervalMs < this.doublePressLimitMs) {\n            // We pressed and release twice within the time and distance limits\n            this.lastUp = null;\n            this.doublePress({ position, intervalMs });\n          }\n        }\n      }\n    };\n\n    document.addEventListener(\"pointerup\", pointerUp);\n    document.addEventListener(\"pointercancel\", pointerUp);\n\n    document.addEventListener(\"pointermove\", (event: PointerEvent) => {\n      if (this.rotating?.pointerId === event.pointerId) {\n        this.rotating.position = this.getPointerPosition(event);\n      } else if (this.sliding?.pointerId === event.pointerId) {\n        this.sliding.position = this.getPointerPosition(event);\n      }\n    });\n\n    canvas.addEventListener(\"contextmenu\", (event: MouseEvent) => {\n      // Prevent context menu appearing on right click\n      event.preventDefault();\n    });\n\n    canvas.addEventListener(\"wheel\", (event: WheelEvent) => {\n      this.scroll.add(\n        new THREE.Vector3(event.deltaX, event.deltaY, event.deltaZ),\n      );\n      event.preventDefault();\n    });\n  }\n\n  getPointerPosition(event: PointerEvent): THREE.Vector2 {\n    const rect = this.canvas.getBoundingClientRect();\n    return new THREE.Vector2(\n      event.clientX - rect.left,\n      event.clientY - rect.top,\n    );\n  }\n\n  update(deltaTime: number, control: THREE.Object3D) {\n    if (!this.enable) {\n      return;\n    }\n\n    if (this.dualPress && this.rotating && this.sliding) {\n      // We pressed both pointers at the same time, either pinching or sliding\n      const motion = [\n        this.rotating.position.clone().sub(this.rotating.last),\n        this.sliding.position.clone().sub(this.sliding.last),\n      ];\n      const coincidence = motion[0].dot(motion[1]);\n\n      if (coincidence >= 0.2) {\n        // Similar directions so slide the camera on the XY plane\n        const totalMotion = motion[0].clone().add(motion[1]);\n        const slide = new THREE.Vector3(totalMotion.x, -totalMotion.y, 0);\n        slide.multiplyScalar(this.slideSpeed * (this.reverseSwipe ? 1 : -1));\n        slide.applyQuaternion(control.quaternion);\n        control.position.add(slide);\n        this.moveVelocity = slide.clone().multiplyScalar(1 / deltaTime);\n      } else if (coincidence <= -0.2) {\n        // Opposite directions so either pinch or roll motion\n        const deltaDir = this.sliding.last.clone().sub(this.rotating.last);\n        const deltaDist = deltaDir.length();\n        deltaDir.multiplyScalar(1 / deltaDist).normalize();\n\n        const orthoDir = new THREE.Vector2(-deltaDir.y, deltaDir.x);\n        const motionDir = [motion[0].dot(deltaDir), motion[1].dot(deltaDir)];\n        const motionOrtho = [motion[0].dot(orthoDir), motion[1].dot(orthoDir)];\n\n        // Pinching motion\n        const midpoint = this.rotating.last\n          .clone()\n          .add(this.sliding.last)\n          .multiplyScalar(0.5);\n        let midpointDir = new THREE.Vector3();\n        if (control instanceof THREE.Camera) {\n          const ndcMidpoint = new THREE.Vector2(\n            (midpoint.x / this.canvas.clientWidth) * 2 - 1,\n            -(midpoint.y / this.canvas.clientHeight) * 2 + 1,\n          );\n          const raycaster = new THREE.Raycaster();\n          raycaster.setFromCamera(ndcMidpoint, control);\n          midpointDir = raycaster.ray.direction;\n        }\n        const pinchOut = motionDir[1] - motionDir[0];\n        const slide = midpointDir.multiplyScalar(pinchOut * this.slideSpeed);\n        control.position.add(slide);\n        this.moveVelocity = slide.clone().multiplyScalar(1 / deltaTime);\n\n        // Rolling motion\n        // Calculate angle of orthogonal motion change over distance deltaDist/2\n        // motionOrtho[0] and 1 are already in float distance\n        const angles = [\n          Math.atan(motionOrtho[0] / (-0.5 * deltaDist)),\n          Math.atan(motionOrtho[1] / (0.5 * deltaDist)),\n        ];\n        const rotate = 0.5 * (angles[0] + angles[1]) * this.pointerRollScale;\n        const eulers = new THREE.Euler().setFromQuaternion(\n          control.quaternion,\n          \"YXZ\",\n        );\n        eulers.z = Math.max(\n          -Math.PI,\n          Math.min(Math.PI, eulers.z + 0.5 * rotate),\n        );\n        control.quaternion.setFromEuler(eulers);\n      }\n\n      this.rotating.last.copy(this.rotating.position);\n      this.sliding.last.copy(this.sliding.position);\n    } else {\n      // Didn't press both pointers at the same time, so we're in rotating\n      // or FPS mode\n      const rotate = new THREE.Vector3();\n      if (this.rotating && !this.dualPress) {\n        const delta = this.rotating.position.clone().sub(this.rotating.last);\n        this.rotating.last.copy(this.rotating.position);\n        rotate.set(delta.x, delta.y, 0);\n        rotate.multiplyScalar(this.rotateSpeed * (this.reverseRotate ? -1 : 1));\n        // Update rotation velocity from last delta\n        this.rotateVelocity = rotate.clone().multiplyScalar(1 / deltaTime);\n      } else {\n        // Continue to rotate with inertia\n        this.rotateVelocity.multiplyScalar(\n          Math.exp(-deltaTime / this.rotateInertia),\n        );\n        rotate.addScaledVector(this.rotateVelocity, deltaTime);\n      }\n\n      // Apply rotation in Euler angles space\n      const eulers = new THREE.Euler().setFromQuaternion(\n        control.quaternion,\n        \"YXZ\",\n      );\n      eulers.y -= rotate.x;\n      eulers.x = Math.max(\n        -Math.PI / 2,\n        Math.min(Math.PI / 2, eulers.x - rotate.y),\n      );\n      eulers.z *= Math.exp(-DEFAULT_ROLL_SPRING * deltaTime);\n      control.quaternion.setFromEuler(eulers);\n\n      if (this.sliding && !this.dualPress) {\n        const delta = this.sliding.position.clone().sub(this.sliding.last);\n        this.sliding.last.copy(this.sliding.position);\n\n        // Slide on plane depending on center/right mouse button\n        const slide =\n          this.sliding.button !== 2\n            ? new THREE.Vector3(delta.x, 0, delta.y)\n            : new THREE.Vector3(delta.x, -delta.y, 0);\n        slide.multiplyScalar(this.slideSpeed * (this.reverseSlide ? -1 : 1));\n\n        slide.applyQuaternion(control.quaternion);\n        control.position.add(slide);\n        // Update movement velocity from last delta\n        this.moveVelocity = slide.clone().multiplyScalar(1 / deltaTime);\n      } else {\n        // Continue to move with inertia\n        this.moveVelocity.multiplyScalar(\n          Math.exp(-deltaTime / this.moveInertia),\n        );\n        control.position.addScaledVector(this.moveVelocity, deltaTime);\n      }\n    }\n\n    const scroll = this.scroll.multiplyScalar(this.scrollSpeed);\n    scroll.set(scroll.x, scroll.z, scroll.y);\n    if (this.reverseScroll) {\n      scroll.multiplyScalar(-1);\n    }\n    scroll.applyQuaternion(control.quaternion);\n    control.position.add(scroll);\n    this.scroll.set(0, 0, 0);\n  }\n}\n"],"names":["_camera","OrthographicCamera","FullscreenTriangleGeometry","BufferGeometry","Float32BufferAttribute","_geometry","FullScreenQuad","material","Mesh","renderer","value","u8","u16","i32","fleb","fdeb","clim","freb","eb","start","b","i","r","j","_a","fl","revfl","_b","fd","rev","x","hMap","cd","mb","s","l","le","co","rvb","sv","r_1","v","m","flt","fdt","flrm","fdrm","max","a","bits","d","p","o","bits16","shft","slc","ec","err","ind","msg","nt","e","inflt","dat","st","buf","dict","sl","dl","noBuf","resize","noSt","cbuf","bl","nbuf","final","pos","bt","lm","dm","lbt","dbt","tbts","type","hLit","hcLen","tl","ldt","clt","clb","clbmsk","clm","c","n","lt","dt","t","lms","dms","lpos","sym","add","dsym","end","shift","dend","et","b2","b4","b8","gzs","flg","zs","Inflate","opts","cb","bts","chunk","inflateSync","data","Gunzip","td","tds","dutf8","strFromU8","latin1","slzh","zh","z","fnl","fn","es","bs","z64e","sc","su","off","unzipSync","files","ze","fltr","c_2","no","wasm","cachedTextDecoder","cachedUint8ArrayMemory0","getUint8ArrayMemory0","getStringFromWasm0","ptr","len","raycast_splats","origin_x","origin_y","origin_z","dir_x","dir_y","dir_z","near","far","num_splats","packed_splats","raycast_ellipsoid","ln_scale_min","ln_scale_max","__wbg_load","module","imports","bytes","instance","__wbg_get_imports","arg0","arg1","arg2","table","offset","__wbg_finalize_init","__wbg_init","module_or_path","LN_SCALE_MIN","LN_SCALE_MAX","SCALE_MIN","SCALE_MAX","LN_SCALE_ZERO","SCALE_ZERO","SPLAT_TEX_WIDTH_BITS","SPLAT_TEX_HEIGHT_BITS","SPLAT_TEX_DEPTH_BITS","SPLAT_TEX_LAYER_BITS","SPLAT_TEX_WIDTH","SPLAT_TEX_HEIGHT","SPLAT_TEX_DEPTH","SPLAT_TEX_MIN_HEIGHT","SPLAT_TEX_WIDTH_MASK","SPLAT_TEX_HEIGHT_MASK","SPLAT_TEX_DEPTH_MASK","WASM_SPLAT_SORT","isBoolType","isScalarType","isIntType","isUintType","isFloatType","isMatFloatType","isAllFloatType","isVector2Type","isVector3Type","isVector4Type","isVectorType","isMat2","isMat3","isMat4","vectorElementType","vectorDim","sameSizeVec","sameSizeUvec","sameSizeIvec","typeLiteral","numberAsInt","numberAsUint","numberAsFloat","valType","val","DynoValue","DynoOutput","dyno","key","DynoLiteral","literal","dynoLiteral","DynoConst","THREE","arg","_","dynoConst","literalZero","typeString","literalOne","literalNegOne","DEFAULT_INDENT","Compilation","indent","Dyno","inTypes","outTypes","inputs","update","globals","statements","generate","outputs","compile","result","declares","name","uniforms","global","dynoDeclare","line","DynoBlock","construct","args","blockInputs","blockOutputs","options","returned","ordering","nodeOuts","visit","node","outKey","outName","outs","input","root","steps","source","newSteps","literalOutputs","step","index","dynoBlock","count","typeStr","unindentLines","seenNonEmpty","lines","trimmedLine","regex","unindent","UnaryOp","outTypeFunc","outType","BinaryOp","TrinaryOp","Gsplat","TPackedSplats","numPackedSplats","packedSplats","NumPackedSplats","readPackedSplat","ReadPackedSplat","readPackedSplatRange","base","ReadPackedSplatRange","splitGsplat","gsplat","SplitGsplat","combineGsplat","flags","center","scales","quaternion","rgba","rgb","opacity","y","g","CombineGsplat","gsplatNormal","GsplatNormal","transformGsplat","scale","rotate","translate","recolor","TransformGsplat","defineGsplat","definePackedSplats","defineReadPackedSplat","active","outGsplat","defineGsplatNormal","outputPackedSplat","rgbMinMaxLnScaleMinMax","OutputPackedSplat","outputRgba8","rgba8","OutputRgba8","output","uniform","DynoUniform","dynoBool","DynoBool","dynoUint","DynoUint","dynoInt","DynoInt","dynoFloat","DynoFloat","dynoBvec2","DynoBvec2","dynoUvec2","DynoUvec2","dynoIvec2","DynoIvec2","dynoVec2","DynoVec2","dynoBvec3","DynoBvec3","dynoUvec3","DynoUvec3","dynoIvec3","DynoIvec3","dynoVec3","DynoVec3","dynoBvec4","DynoBvec4","dynoUvec4","DynoUvec4","dynoIvec4","DynoIvec4","dynoVec4","DynoVec4","dynoMat2","DynoMat2","dynoMat2x2","DynoMat2x2","dynoMat2x3","DynoMat2x3","dynoMat2x4","DynoMat2x4","dynoMat3","DynoMat3","dynoMat3x2","DynoMat3x2","dynoMat3x3","DynoMat3x3","dynoMat3x4","DynoMat3x4","dynoMat4","DynoMat4","dynoMat4x2","DynoMat4x2","dynoMat4x3","DynoMat4x3","dynoMat4x4","DynoMat4x4","dynoUsampler2D","DynoUsampler2D","dynoIsampler2D","DynoIsampler2D","dynoSampler2D","DynoSampler2D","dynoUsampler2DArray","DynoUsampler2DArray","dynoIsampler2DArray","DynoIsampler2DArray","dynoSampler2DArray","DynoSampler2DArray","dynoUsampler3D","DynoUsampler3D","dynoIsampler3D","DynoIsampler3D","dynoSampler3D","DynoSampler3D","dynoUsamplerCube","DynoUsamplerCube","dynoIsamplerCube","DynoIsamplerCube","dynoSamplerCube","DynoSamplerCube","dynoSampler2DShadow","DynoSampler2DShadow","dynoSampler2DArrayShadow","DynoSampler2DArrayShadow","dynoSamplerCubeShadow","DynoSamplerCubeShadow","allGlobals","f32buffer","u32buffer","floatBitsToUint","f","uintBitsToFloat","u","toHalf","sign","exp","frac","halfSign","newExp","subFrac","halfFrac","fromHalf","h","f32bits","mant","newFrac","floatToUint8","floatToSint8","Uint8ToFloat","Sint8ToFloat","DataCache","asyncFetch","maxItems","item","mapObject","obj","entries","mapFilterObject","getArrayBuffers","ctx","buffers","seen","traverse","newArray","initFunction","FreeList","allocate","dispose","valid","setPackedSplat","scaleX","scaleY","scaleZ","quatX","quatY","quatZ","quatW","encoding","rgbMin","rgbRange","uR","uG","uB","uA","uQuat","encodeQuatOctXy88R8","uQuatX","uQuatY","uQuatZ","lnScaleMin","lnScaleScale","uScaleX","uScaleY","uScaleZ","uCenterX","uCenterY","uCenterZ","i4","setPackedSplatCenter","setPackedSplatScales","setPackedSplatQuat","setPackedSplatRgba","setPackedSplatRgb","setPackedSplatOpacity","packedCenter","packedScales","packedQuaternion","packedColor","packedFields","unpackSplat","word0","word1","word2","word3","uScalesX","uScalesY","uScalesZ","decodeQuatOctXy88R8","getTextureSize","numSplats","width","height","depth","maxSplats","computeMaxSplats","isMobile","isAndroid","isOculus","flipPixels","pixels","tempLine","topOffset","bottomOffset","pixelsToPngUrl","canvas","imageData","cloneClock","clock","newClock","omitUndefined","IDENT_VERTEX_SHADER","averagePositions","positions","sum","position","averageQuaternions","quaternions","coinciDist","matrix1","matrix2","origin1","origin2","direction1","direction2","distance","coincidence","withinDist","maxDistance","withinCoinciDist","minCoincidence","coorientDist","rotate1","rotate2","coorient","withinCoorientDist","minCoorient","epsilonSign","epsilon","encodeQuatXyz888","q","negQuat","iQuatX","iQuatY","iQuatZ","decodeQuatXyz888","encoded","out","dotSelf","qnorm","theta","xyz_norm","axis","p_x","p_y","tmp","u_f","v_f","quantU","quantV","angleInt","f_x","f_y","f_z","halfTheta","w","encodeQuatEulerXyz888","qNorm","sinr_cosp","cosr_cosp","roll","sinp","pitch","siny_cosp","cosy_cosp","yaw","normRoll","normPitch","normYaw","rollQ","pitchQ","decodeQuatEulerXyz888","yawQ","cr","sr","cp","sp","cy","sy","packSint8Bytes","b0","b1","b3","clampedB0","clampedB1","clampedB2","clampedB3","encodeSh1Rgb","sh1Array","sh1Rgb","sh1Min","sh1Max","sh1Mid","sh1Scale","bitStart","bitEnd","wordStart","bitOffset","firstWord","secondWord","encodeSh2Rgb","sh2Array","sh2Rgb","sh2Min","sh2Max","sh2Mid","sh2Scale","encodeSh3Rgb","sh3Array","sh3Rgb","sh3Min","sh3Max","sh3Mid","sh3Scale","decompressPartialGzip","fileBytes","numBytes","chunks","totalBytes","gunzip","allBytes","CHUNK_SIZE","GunzipReader","chunkBytes","_final","outOffset","DynoProgram","graph","template","getMaterial","updater","DynoProgramTemplate","programMaterial","program","addOutputType","operation","error","subOutputType","mulOutputType","divOutputType","imodOutputType","modOutputType","negOutputType","absOutputType","signOutputType","floorOutputType","ceilOutputType","truncOutputType","roundOutputType","fractOutputType","powOutputType","expOutputType","exp2OutputType","logOutputType","log2OutputType","sqrOutputType","sqrtOutputType","inversesqrtOutputType","minOutputType","maxOutputType","clampOutputType","_c","mixOutputType","stepOutputType","smoothstepOutputType","isNanOutputType","isInfOutputType","Add","sub","Sub","mul","Mul","div","Div","imod","IMod","mod","Mod","modf","Modf","neg","Neg","abs","Abs","Sign","floor","Floor","ceil","Ceil","trunc","Trunc","round","Round","fract","Fract","pow","Pow","Exp","exp2","Exp2","log","Log","log2","Log2","sqr","Sqr","sqrt","Sqrt","inversesqrt","InverseSqrt","min","Min","Max","clamp","Clamp","mix","Mix","edge","Step","smoothstep","edge0","edge1","Smoothstep","isNan","IsNan","isInf","IsInf","and","And","or","Or","xor","Xor","not","Not","lessThan","LessThan","lessThanEqual","LessThanEqual","greaterThan","GreaterThan","greaterThanEqual","GreaterThanEqual","equal","Equal","notEqual","NotEqual","any","Any","all","All","select","cond","Select","compXor","CompXor","aType","bType","compareOutputType","equalOutputType","notEqualOutputType","cType","operator","compXorOutputType","operands","bool","Bool","int","Int","uint","Uint","float","Float","bvec2","BVec2","bvec3","BVec3","bvec4","BVec4","ivec2","IVec2","ivec3","IVec3","ivec4","IVec4","uvec2","UVec2","uvec3","UVec3","uvec4","UVec4","vec2","Vec2","vec3","Vec3","vec4","Vec4","mat2","Mat2","mat3","Mat3","mat4","Mat4","floatBitsToInt","FloatBitsToInt","FloatBitsToUint","intBitsToFloat","IntBitsToFloat","UintBitsToFloat","packSnorm2x16","PackSnorm2x16","unpackSnorm2x16","UnpackSnorm2x16","packUnorm2x16","PackUnorm2x16","unpackUnorm2x16","UnpackUnorm2x16","packHalf2x16","PackHalf2x16","unpackHalf2x16","UnpackHalf2x16","uintToRgba8","UintToRgba8","SimpleCast","length","Length","Distance","dot","Dot","cross","Cross","normalize","Normalize","faceforward","FaceForward","reflectVec","incident","normal","ReflectVec","refractVec","eta","RefractVec","split","vector","Split","combine","vectorType","Combine","projectH","ProjectH","extendVec","ExtendVec","swizzle","Swizzle","compMult","CompMult","outer","Outer","transpose","Transpose","determinant","Determinant","inverse","Inverse","projectHOutputType","extendVecOutputType","outerOutputType","transposeOutputType","splitOutTypes","vType","elType","dim","swizzleOutputType","remapIndex","from","to","DynoRemapIndex","pcgMix","PcgMix","pcgNext","state","PcgNext","pcgHash","PcgHash","hash","Hash","hash2","Hash2","hash3","Hash3","hash4","Hash4","hashFloat","HashFloat","hashVec2","HashVec2","hashVec3","HashVec3","hashVec4","HashVec4","normalizedDepth","zNear","zFar","NormalizedDepth","toUint","tempType","toUvec","word","words","transformPos","TransformPosition","transformDir","dir","TransformDir","transformQuat","TransformQuaternion","dynoIf","dynoSwitch","dynoFor","comment","arrayIndex","arrayLength","textureSize","texture","lod","TextureSize","coord","bias","Texture","texelFetch","TexelFetch","textureType","textureSizeType","textureCoordType","textureReturnType","radians","degrees","Radians","Degrees","sin","Sin","cos","Cos","tan","Tan","asin","Asin","acos","Acos","atan","Atan","atan2","Atan2","sinh","Sinh","cosh","Cosh","tanh","Tanh","asinh","Asinh","acosh","Acosh","atanh","Atanh","computeVec4_default","_Readback","buffer","newBuffer","ctor","capacity","reader","computeVec4Template","layerSize","baseIndex","layer","layerBase","layerYEnd","readback","roundedCount","readbackUint8","promises","readbackSize","subReadback","promise","renderState","Readback","_RgbaArray","TRgbaArray","defineRgbaArray","dynoSplats","dynoBase","dynoCount","emptyArray","DynoPackedSplats","RgbaArray","readRgbaArray","SplatEditSdfType","sdfTypeToNumber","SplatEditRgbaBlendMode","rgbaBlendModeToNumber","mode","SplatEditSdf","invert","color","displace","radius","_SplatEdit","rgbaBlendMode","sdfSmooth","softEdge","sdfs","sdf","SplatEdit","SplatEdits","maxSdfs","maxEdits","SdfArray","defineSdfArray","defineEdit","dynoUpdated","updated","tempFloat32","editIndex","sdfFirst","sdfCount","sdfIndex","sdfType","sizes","values","nValues","vBase","edits","total","edit","sdfUpdated","applyGsplatRgbaDisplaceEdits","sdfArray","numEdits","rgbaDisplaceEdits","SplatModifier","modifier","generator","modified","SplatTransformer","transform","newScale","object","SplatGenerator","constructed","_SplatMesh","viewToWorld","worldToView","viewToObject","time","deltaTime","context","globalEdits","PackedSplats","DEFAULT_SPLAT_ENCODING","maybePromise","url","fileType","fileName","constructSplats","splatEncoding","packedSplatsOptions","init_wasm","callback","sh1Texture","sh2Texture","sh3Texture","rescaleSh","sNorm","minMax","mid","viewCenterInObject","viewDir","sh1Snorm","evaluateSH1","sh2Snorm","evaluateSH2","sh3Snorm","evaluateSH3","recolorRgba","viewToObjectMatrix","newRecolor","editsSdfs","editResult","raycaster","intersects","ray","worldToMesh","worldToMeshRot","origin","direction","distances","point","sh1","newSh1","sh2","newSh2","sh3","newSh3","SplatMesh","defineEvaluateSH1","defineEvaluateSH2","defineEvaluateSH3","_PlyReader","decoder","controller","headerTerminator","done","endHeader","headerLen","curElement","lineIndex","fields","elementCallback","elementName","element","properties","parsers","propertyName","property","list","PARSE_FIELD","FIELD_BYTES","parser","splatCallback","shCallback","isSuperSplat","ssChunks","numSh","sh1Props","sh2Props","sh3Props","prepareSh","num_f_rest","NUM_SH_TO_NUM_F_REST","k","ssShCallback","initSuperSplat","min_x","min_y","min_z","max_x","max_y","max_z","min_scale_x","min_scale_y","min_scale_z","max_scale_x","max_scale_y","max_scale_z","min_r","min_g","min_b","max_r","max_g","max_b","decodeSuperSplat","getNumSh","packed_position","packed_rotation","packed_scale","packed_color","SQRT2","r0","r1","r2","rr","rOrder","scale_0","scale_1","scale_2","rot_0","rot_1","rot_2","rot_3","f_dc_0","f_dc_1","f_dc_2","red","green","blue","alpha","hasScales","hasRots","alphaDiv","FIELD_SCALE","redDiv","greenDiv","blueDiv","op","SH_C0","rgbaOffset","isVertex","component","SET_FIELD","PlyReader","littleEndian","NUM_F_REST_TO_NUM_SH","SplatWorker","BundledWorker","event","id","resolve","reject","handler","maxWorkers","numWorkers","freeWorkers","workerQueue","allocWorker","worker","freeWorker","waiter","withWorker","SplatLoader","Loader","manager","FileLoader","onLoad","onProgress","onError","resolvedURL","headers","credentials","request","fetchWithProgress","progresses","updateProgresses","lengthComputable","loaded","extraFiles","pcSogsJson","tryPcSogs","prop","file","fileUrl","progressIndex","progress","decoded","unpackSplats","response","contentLength","SplatFileType","getSplatFileType","view","header","tryPcSogsZip","getFileExtension","pathOrUrl","noTrailing","lastSlash","filename","lastDot","getSplatFileTypeFromPath","extension","isPcSogs","text","json","metaFilename","unzipped","splatFileType","ply","packedArray","extra","SplatData","targetSplats","newCenters","newScales","newQuaternions","newOpacities","newColors","computeUvec4_default","_PackedSplats","_d","loader","unpacked","targetSize","currentSize","level","wordsPerSplat","splatCounts","mapping","rounded","computeUvec4Template","nextBase","layerYStart","_f","_e","_h","_g","_j","_i","SplatGeometry","activeSplats","QUAD_VERTICES","QUAD_INDICES","_SparkViewpoint","doubleBuffer","superXY","autoUpdate","scene","camera","forceOrigin","originToWorld","accumulator","target","newCam","byteSize","subWidth","subHeight","subSize","superPixels","super2","row","superCol","superRow","sx","superIndex","pixelIndex","needsSort","displayed","mappingVersion","latestView","doubleSortReader","sort32Reader","dynoSortRadial","dynoOrigin","dynoDirection","dynoDepthBias","dynoSort360","sort32","halfMaxSplats","worldToOrigin","viewToOrigin","sortReader","rpcName","oldOrdering","sortParams","index2","gsplat0","metric0","computeSortMetric","gsplat1","metric1","combined","metric","SparkViewpoint","defineComputeSortMetric","sortRadial","sortOrigin","sortDirection","sortDepthBias","sort360","SplatAccumulator","generators","forceUpdate","map","record","version","current","modGenerator","other","otherNode","otherBase","otherCount","splatDefines_default","splatFragment_default","splatVertex_default","shaders","getShaders","splatDefines","splatVertex","splatFragment","MAX_ACCUMULATORS","hasSplatMesh","hasSparkRenderer","sparkRendererInstance","containsSplatMesh","object3D","child","sceneAdd","SparkRenderer","sceneOnBeforeRender","spark","_SparkRenderer","premultipliedAlpha","EMPTY_GEOMETRY","frame","isNewFrame","viewpoint","cameras","averageOriginToWorlds","blending","renderSize","baseLayer","typedCamera","enable","multiply","accumToWorld","worldToCamera","geometry","activeMapping","visibleGenerators","visibleGenHash","originUpdate","needsUpdate","originChanged","genOrder","gIndex","lastGen","_version","_seq","newGenerators","hasCorrespondence","ancestor","worldCenter","size","hideObjects","objectVisibility","visible","envMap","originToWorlds","matrix","decodeAntiSplat","initNumSplats","f32","i8","KSPLAT_COMPRESSION","KSPLAT_SH_DEGREE_TO_COMPONENTS","decodeKsplat","headerOffset","versionMajor","versionMinor","maxSectionCount","compressionLevel","minSphericalHarmonicsCoeff","maxSphericalHarmonicsCoeff","sectionBase","section","getSh","splatOffset","sphericalHarmonicsOffsetBytes","sectionSplatCount","sectionMaxSplatCount","bucketSize","bucketCount","bucketBlockSize","bucketStorageSizeBytes","compressionScaleRange","fullBucketCount","fullBucketSplats","partiallyFilledBucketCount","bucketsMetaDataSizeBytes","bucketsStorageSizeBytes","sphericalHarmonicsDegree","shComponents","bytesPerCenter","bytesPerScale","bytesPerRotation","bytesPerColor","bytesPerSphericalHarmonicsComponent","scaleOffsetBytes","rotationOffsetBytes","colorOffsetBytes","bytesPerSplat","splatDataStorageSizeBytes","storageSizeBytes","sh1Index","sh2Index","sh3Index","compressionScaleFactor","bucketsBase","dataBase","bucketArray","partiallyFilledBucketLengths","partialBucketIndex","partialBucketBase","bucketIndex","bucketLength","SpzReader","centerCallback","alphaCallback","rgbCallback","scalesCallback","quatCallback","centerBytes","centerUint16","i3","fixed","i9","rgbBytes","scalesBytes","quatBytes","shBytes","SH_DEGREE_TO_VECS","SPZ_MAGIC","SPZ_VERSION","FLAG_ANTIALIASED","SpzWriter","shDegree","fractionalBits","flagAntiAlias","splatSize","bufferSize","xRounded","xInt","yRounded","yInt","zRounded","zInt","quatNeg","sh","quantized","shVecs","base1","base2","base3","compressed","transcodeSpz","splats","clipXyz","maxSh","opacityThreshold","transformScales","transformQuaternion","quat","withinClip","clip","withinOpacity","lastIndex","spz","centers","SplatSkinning","GsplatSkinning","defineGsplatSkinning","applyGsplatSkinning","boneIndex","i16","origQuat","origPos","relQuat","relPos","dual","splatIndex","boneIndices","weights","defineApplyGsplatSkinning","skinning","constructGrid","extents","stepSize","pointRadius","pointShadowScale","pointColor","constructAxes","axisRadius","axisShadowScale","origins","constructSpherePoints","maxDepth","filter","pointThickness","pointsHash","addPoint","recurse","p0","p1","p2","p01","p12","p20","points","textSplats","font","fontSize","dotRadius","textAlign","lineHeight","objectScale","metrics","fontHeight","minLeft","maxRight","minTop","maxBottom","originLeft","originTop","mesh","imageSplats","subXY","forEachSplat","img","destWidth","destHeight","push","maybeOpacity","staticBox","box","cells","dotScale","dynoX","dynoY","dynoTime","cellX","cellY","cellZ","cell","intTime","random","transformer","DEFAULT_SNOW","DEFAULT_RAIN","snowBox","minY","density","anisoScale","minScale","maxScale","fallDirection","fallVelocity","wanderScale","wanderVariance","color1","color2","onFrame","volume","dynoMinScale","dynoMaxScale","dynoAnisoScale","dynoFallDirection","dynoFallVelocity","dynoWanderScale","dynoWanderVariance","dynoColor1","dynoColor2","dynoOpacity","globalOffset","dynoMin","dynoMax","dynoMinY","snow","randomW","intensity","hue","random2","perturb","timeOffset","modulo","centerY","fallDelta","makeNormalColorModifier","splatToView","viewGsplat","viewCenter","viewNormal","splatDot","sameDir","setWorldNormalColor","makeDepthColorModifier","minDepth","reverse","setDepthColor","dynoMinDepth","dynoMaxDepth","dynoReverse","_VRButton","sessionInit","navigatorXr","xr","button","showEnterVR","currentSession","onSessionStarted","session","onSessionEnded","sessionOptions","disableButton","showWebXRNotFound","showVRNotAllowed","exception","stylizeElement","supported","VRButton","DEFAULT_MOVE_INERTIA","DEFAULT_ROTATE_INERTIA","TOUCH_BIAS","JointEnum","JOINT_IDS","NUM_JOINTS","JOINT_INDEX","JOINT_RADIUS","JOINT_SEGMENTS","JOINT_SEGMENT_STEPS","JOINT_TIPS","FINGER_TIPS","Hand","HANDS","XrHands","xrFrame","xrSession","referenceSpace","inputSource","hand","jointId","jointSpace","jointPose","orientation","Vector3","Quaternion","Color","CYCLE","handedness","xrHand","segment","segmentSplats","lastSegment","jointA","jointB","radiusA","radiusB","handA","handB","last","hA","hB","jA","jB","HandMovement","xrHands","control","moveInertia","rotateInertia","grip","lastMid","delta","angle","lastAngle","closestAngle","rotateVelocity","blend","negPivot","Matrix4","DEFAULT_MOVEMENT_SPEED","DEFAULT_ROLL_SPEED","DEFAULT_ROTATE_SPEED","DEFAULT_SLIDE_SPEED","DEFAULT_SCROLL_SPEED","DEFAULT_STICK_THRESHOLD","DEFAULT_FPS_ROTATE_SPEED","DEFAULT_POINTER_ROLL_SCALE","DUAL_PRESS_MS","DOUBLE_PRESS_LIMIT_MS","DOUBLE_PRESS_DISTANCE","WASD_KEYCODE_MOVE","ARROW_KEYCODE_MOVE","QE_KEYCODE_ROTATE","ARROW_KEYCODE_ROTATE","SparkControls","FpsMovement","PointerControls","moveSpeed","rollSpeed","stickThreshold","rotateSpeed","keycodeMoveMapping","keycodeRotateMapping","gamepadMapping","capsMultiplier","shiftMultiplier","ctrlMultiplier","sticks","gamepad","gamepadButtons","xrSources","stick","keycode","rot","eulers","moveVector","move","speedMultiplier","slideSpeed","scrollSpeed","swapRotateSlide","reverseRotate","reverseSlide","reverseSwipe","reverseScroll","pointerRollScale","doublePress","initial","isRotate","pointerId","timeStamp","pointerUp","lastUp","intervalMs","rect","motion","totalMotion","slide","deltaDir","deltaDist","orthoDir","motionDir","motionOrtho","midpoint","midpointDir","ndcMidpoint","pinchOut","angles","scroll"],"mappings":"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","x_google_ignoreList":[0,1]}